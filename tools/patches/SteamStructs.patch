diff --git a/IClientController.h b/IClientController.h
index 82d59ef..a1b55dd 100644
--- a/IClientController.h
+++ b/IClientController.h
@@ -1,9 +1,11 @@
 class IClientController
 {
 public:
-    virtual unknown_ret ~CSteamController() = 0;
-    virtual unknown_ret ~CSteamController() = 0;
-    virtual unknown_ret Init(bool, IClientControllerSerialized*, unsigned int) = 0;
+    virtual unknown_ret __Destructor1() = 0;
+#ifdef ARGONX_UNIX
+    virtual unknown_ret __Destructor2() = 0;
+#endif
+    virtual unknown_ret Init(bool, class IClientControllerSerialized*, unsigned int) = 0;
     virtual unknown_ret Shutdown() = 0;
     virtual unknown_ret RunFrame() = 0;
     virtual unknown_ret GetAllControllersStatus(ControllersStatus_t*) = 0;
diff --git a/IClientControllerSerialized.h b/IClientControllerSerialized.h
index 4fdfac6..58cede0 100644
--- a/IClientControllerSerialized.h
+++ b/IClientControllerSerialized.h
@@ -1,8 +1,10 @@
 class IClientControllerSerialized
 {
 public:
-    virtual unknown_ret ~IClientControllerSerializedMap() = 0;
-    virtual unknown_ret ~IClientControllerSerializedMap() = 0;
+    virtual unknown_ret __Destructor1() = 0;
+#if defined(ARGONX_UNIX)
+    virtual unknown_ret __Destructor2() = 0;
+#endif  
     virtual unknown_ret ShowBindingPanel(unsigned int, unsigned long long) = 0;
     virtual unknown_ret GetControllerTypeForHandle(unsigned long long) = 0;
     virtual unknown_ret GetGamepadIndexForHandle(unsigned long long) = 0;
diff --git a/IClientEngine.h b/IClientEngine.h
index 2f1a9d8..1396372 100644
--- a/IClientEngine.h
+++ b/IClientEngine.h
@@ -1,85 +1,87 @@
 class IClientEngine
 {
 public:
-    virtual unknown_ret CreateSteamPipe() = 0;
-    virtual unknown_ret BReleaseSteamPipe(int) = 0;
-    virtual unknown_ret CreateGlobalUser(int*) = 0;
-    virtual unknown_ret ConnectToGlobalUser(int) = 0;
-    virtual unknown_ret CreateLocalUser(int*, EAccountType) = 0;
-    virtual unknown_ret CreatePipeToLocalUser(int, int*) = 0;
-    virtual unknown_ret ReleaseUser(int, int) = 0;
-    virtual unknown_ret IsValidHSteamUserPipe(int, int) = 0;
-    virtual unknown_ret GetIClientUser(int, int) = 0;
-    virtual unknown_ret GetIClientGameServer(int, int) = 0;
+    virtual Steam::PipeHandle CreateSteamPipe() = 0;
+    virtual bool BReleaseSteamPipe(Steam::PipeHandle) = 0;
+    virtual Steam::UserHandle CreateGlobalUser(Steam::PipeHandle *) = 0;
+    virtual Steam::UserHandle ConnectToGlobalUser(Steam::PipeHandle) = 0;
+    virtual Steam::UserHandle CreateLocalUser(Steam::PipeHandle*, Steam::EAccountType) = 0;
+    virtual void CreatePipeToLocalUser(Steam::UserHandle, Steam::PipeHandle*) = 0;
+    virtual void ReleaseUser(Steam::PipeHandle, Steam::UserHandle) = 0;
+    virtual bool IsValidHSteamUserPipe(Steam::PipeHandle, Steam::UserHandle) = 0;
+    virtual void *GetIClientUser(Steam::UserHandle, Steam::PipeHandle) = 0;
+    virtual void *GetIClientGameServer(Steam::UserHandle, Steam::PipeHandle) = 0;
     virtual unknown_ret SetLocalIPBinding(SteamIPAddress_t const&, unsigned short) = 0;
-    virtual unknown_ret GetUniverseName(EUniverse) = 0;
-    virtual unknown_ret GetIClientFriends(int, int) = 0;
-    virtual unknown_ret GetIClientUtils(int) = 0;
-    virtual unknown_ret GetIClientBilling(int, int) = 0;
-    virtual unknown_ret GetIClientMatchmaking(int, int) = 0;
-    virtual unknown_ret GetIClientApps(int, int) = 0;
-    virtual unknown_ret GetIClientMatchmakingServers(int, int) = 0;
-    virtual unknown_ret GetIClientGameSearch(int, int) = 0;
+    virtual const char *GetUniverseName(Steam::EUniverse) = 0;
+    virtual void *GetIClientFriends(Steam::UserHandle, Steam::PipeHandle) = 0;
+    virtual void *GetIClientUtils(Steam::PipeHandle) = 0;
+    virtual void *GetIClientBilling(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientMatchmaking(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientApps(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientMatchmakingServers(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientGameSearch(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret RunFrame() = 0;
     virtual unknown_ret GetIPCCallCount() = 0;
-    virtual unknown_ret GetIClientUserStats(int, int) = 0;
-    virtual unknown_ret GetIClientGameServerStats(int, int) = 0;
-    virtual unknown_ret GetIClientNetworking(int, int) = 0;
-    virtual unknown_ret GetIClientRemoteStorage(int, int) = 0;
-    virtual unknown_ret GetIClientScreenshots(int, int) = 0;
+    virtual void *GetIClientUserStats(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientGameServerStats(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientNetworking(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientRemoteStorage(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientScreenshots(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret SetWarningMessageHook(void (*)(int, char const*)) = 0;
-    virtual unknown_ret GetIClientGameCoordinator(int, int) = 0;
-    virtual unknown_ret SetOverlayNotificationPosition(ENotificationPosition) = 0;
-    virtual unknown_ret SetOverlayNotificationInset(int, int) = 0;
+    virtual void *GetIClientGameCoordinator(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual unknown_ret SetOverlayNotificationPosition(Steam::ENotificationPosition) = 0;
+    virtual unknown_ret SetOverlayNotificationInset(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret HookScreenshots(bool) = 0;
     virtual unknown_ret IsScreenshotsHooked() = 0;
     virtual unknown_ret IsOverlayEnabled() = 0;
     virtual unknown_ret GetAPICallResult(int, unsigned long long, void*, int, int, bool*) = 0;
-    virtual unknown_ret GetIClientProductBuilder(int, int) = 0;
-    virtual unknown_ret GetIClientDepotBuilder(int, int) = 0;
-    virtual unknown_ret GetIClientNetworkDeviceManager(int) = 0;
-    virtual unknown_ret ConCommandInit(IConCommandBaseAccessor*) = 0;
-    virtual unknown_ret GetIClientAppManager(int, int) = 0;
-    virtual unknown_ret GetIClientConfigStore(int, int) = 0;
+    virtual void *GetIClientProductBuilder(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientDepotBuilder(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientNetworkDeviceManager(int) = 0;
+    virtual unknown_ret ConCommandInit(Steam::IConCommandBaseAccessor*) = 0;
+    virtual void *GetIClientAppManager(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientConfigStore(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret BOverlayNeedsPresent() = 0;
-    virtual unknown_ret GetIClientGameStats(int, int) = 0;
-    virtual unknown_ret GetIClientHTTP(int, int) = 0;
+    virtual void *GetIClientGameStats(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientHTTP(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret FlushBeforeValidate() = 0;
     virtual unknown_ret BShutdownIfAllPipesClosed() = 0;
-    virtual unknown_ret GetIClientAudio(int, int) = 0;
-    virtual unknown_ret GetIClientMusic(int, int) = 0;
-    virtual unknown_ret GetIClientUnifiedMessages(int, int) = 0;
-    virtual unknown_ret GetIClientController(int) = 0;
-    virtual unknown_ret GetIClientParentalSettings(int, int) = 0;
-    virtual unknown_ret GetIClientStreamLauncher(int, int) = 0;
-    virtual unknown_ret GetIClientDeviceAuth(int, int) = 0;
-    virtual unknown_ret GetIClientRemoteClientManager(int) = 0;
-    virtual unknown_ret GetIClientStreamClient(int, int) = 0;
-    virtual unknown_ret GetIClientShortcuts(int, int) = 0;
-    virtual unknown_ret GetIClientUGC(int, int) = 0;
-    virtual unknown_ret GetIClientInventory(int, int) = 0;
-    virtual unknown_ret GetIClientVR(int) = 0;
-    virtual unknown_ret GetIClientGameNotifications(int, int) = 0;
-    virtual unknown_ret GetIClientHTMLSurface(int, int) = 0;
-    virtual unknown_ret GetIClientVideo(int, int) = 0;
-    virtual unknown_ret GetIClientControllerSerialized(int) = 0;
-    virtual unknown_ret GetIClientAppDisableUpdate(int, int) = 0;
+    virtual void *GetIClientAudio(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientMusic(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientUnifiedMessages(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientController(Steam::PipeHandle p) = 0;
+    virtual void *GetIClientParentalSettings(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientStreamLauncher(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientDeviceAuth(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientRemoteClientManager(int) = 0;
+    virtual void *GetIClientStreamClient(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientShortcuts(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientUGC(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientInventory(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientVR(int) = 0;
+    virtual void *GetIClientGameNotifications(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientHTMLSurface(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientVideo(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientControllerSerialized(int) = 0;
+    virtual void *GetIClientAppDisableUpdate(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret Set_Client_API_CCheckCallbackRegisteredInProcess(unsigned int (*)(int)) = 0;
-    virtual unknown_ret GetIClientBluetoothManager(int) = 0;
-    virtual unknown_ret GetIClientSharedConnection(int, int) = 0;
-    virtual unknown_ret GetIClientShader(int, int) = 0;
-    virtual unknown_ret GetIClientNetworkingSocketsSerialized(int, int) = 0;
-    virtual unknown_ret GetIClientCompat(int, int) = 0;
+    virtual void * GetIClientBluetoothManager(int) = 0;
+    virtual void * GetIClientSharedConnection(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void * GetIClientShader(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void * GetIClientNetworkingSocketsSerialized(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void * GetIClientCompat(Steam::UserHandle h, Steam::PipeHandle p) = 0;
     virtual unknown_ret SetClientCommandLine(int, char**) = 0;
-    virtual unknown_ret GetIClientParties(int, int) = 0;
-    virtual unknown_ret GetIClientNetworkingMessages(int, int) = 0;
-    virtual unknown_ret GetIClientNetworkingSockets(int, int) = 0;
-    virtual unknown_ret GetIClientNetworkingUtils(int) = 0;
-    virtual unknown_ret GetIClientNetworkingUtilsSerialized(int) = 0;
-    virtual unknown_ret GetIClientSTARInternal(int, int) = 0;
-    virtual unknown_ret GetIClientRemotePlay(int, int) = 0;
-    virtual unknown_ret ~CSteamClient() = 0;
-    virtual unknown_ret ~CSteamClient() = 0;
+    virtual void * GetIClientParties(Steam::UserHandle h, Steam::PipeHandle p) = 0;
+    virtual void *GetIClientNetworkingMessages(int, int) = 0;
+    virtual void *GetIClientNetworkingSockets(int, int) = 0;
+    virtual void *GetIClientNetworkingUtils(int) = 0;
+    virtual void *GetIClientNetworkingUtilsSerialized(int) = 0;
+    virtual void *GetIClientSTARInternal(int, int) = 0;
+    virtual void *GetIClientRemotePlay(int, int) = 0;
+    virtual unknown_ret __Destructor1() = 0;
+#if defined(ARGONX_UNIX)
+    virtual unknown_ret __Destructor2() = 0;
+#endif
     virtual unknown_ret GetIPCServerMap() = 0;
     virtual unknown_ret OnDebugTextArrived(char const*) = 0;
     virtual unknown_ret OnThreadLocalRegistration() = 0;
diff --git a/IClientFriends.h b/IClientFriends.h
index dfb5ee0..5e2882d 100644
--- a/IClientFriends.h
+++ b/IClientFriends.h
@@ -1,24 +1,24 @@
 class IClientFriends
 {
 public:
-    virtual unknown_ret GetPersonaName() = 0;
-    virtual unknown_ret SetPersonaName(char const*) = 0;
-    virtual unknown_ret SetPersonaNameEx(char const*, bool) = 0;
-    virtual unknown_ret IsPersonaNameSet() = 0;
-    virtual unknown_ret GetPersonaState() = 0;
-    virtual unknown_ret SetPersonaState(EPersonaState) = 0;
+    virtual const char *GetPersonaName() = 0;
+    virtual SteamAPICall_t SetPersonaName(char const*) = 0;
+    virtual SteamAPICall_t SetPersonaNameEx(char const*, bool) = 0;
+    virtual bool IsPersonaNameSet() = 0;
+    virtual EPersonaState GetPersonaState() = 0;
+    virtual void SetPersonaState(EPersonaState) = 0;
     virtual unknown_ret NotifyUIOfMenuChange(bool, bool, bool, bool) = 0;
-    virtual unknown_ret GetFriendCount(int) = 0;
+    virtual int GetFriendCount(Steam::EFriendFlags) = 0;
     virtual unknown_ret GetFriendArray(CSteamID*, signed char*, int, int) = 0;
     virtual unknown_ret GetFriendArrayInGame(CSteamID*, unsigned long long*, int) = 0;
-    virtual unknown_ret GetFriendByIndex(int, int) = 0;
-    virtual unknown_ret GetOnlineFriendCount() = 0;
-    virtual unknown_ret GetFriendRelationship(CSteamID) = 0;
-    virtual unknown_ret GetFriendPersonaState(CSteamID) = 0;
-    virtual unknown_ret GetFriendPersonaName(CSteamID) = 0;
-    virtual unknown_ret GetSmallFriendAvatar(CSteamID) = 0;
-    virtual unknown_ret GetMediumFriendAvatar(CSteamID) = 0;
-    virtual unknown_ret GetLargeFriendAvatar(CSteamID) = 0;
+    virtual CSteamID GetFriendByIndex(int, Steam::EFriendFlags) = 0;
+    virtual int GetOnlineFriendCount() = 0;
+    virtual EFriendRelationship GetFriendRelationship(CSteamID) = 0;
+    virtual EPersonaState GetFriendPersonaState(CSteamID) = 0;
+    virtual const char *GetFriendPersonaName(CSteamID) = 0;
+    virtual int GetSmallFriendAvatar(CSteamID) = 0;
+    virtual int GetMediumFriendAvatar(CSteamID) = 0;
+    virtual int GetLargeFriendAvatar(CSteamID) = 0;
     virtual unknown_ret BGetFriendAvatarURL(char*, unsigned int, CSteamID, EFriendAvatarSize) = 0;
     virtual unknown_ret GetFriendAvatarHash(char*, unsigned int, CSteamID) = 0;
     virtual unknown_ret SetFriendRegValue(CSteamID, char const*, char const*) = 0;
diff --git a/IClientHTMLSurface.h b/IClientHTMLSurface.h
index e4b6eda..b070cbe 100644
--- a/IClientHTMLSurface.h
+++ b/IClientHTMLSurface.h
@@ -1,8 +1,10 @@
 class IClientHTMLSurface
 {
 public:
-    virtual unknown_ret ~CSteamHTMLSurface() = 0;
-    virtual unknown_ret ~CSteamHTMLSurface() = 0;
+    virtual unknown_ret __Destructor1() = 0;
+#ifdef ARGONX_UNIX
+    virtual unknown_ret __Destructor2() = 0;
+#endif
     virtual unknown_ret Init() = 0;
     virtual unknown_ret Shutdown() = 0;
     virtual unknown_ret CreateBrowser(char const*, char const*) = 0;
diff --git a/IClientMatchmaking.h b/IClientMatchmaking.h
index 576791c..5c0d1d0 100644
--- a/IClientMatchmaking.h
+++ b/IClientMatchmaking.h
@@ -43,7 +43,7 @@ public:
     virtual unknown_ret SetLinkedLobby(CSteamID, CSteamID) = 0;
     virtual unknown_ret BeginGMSQuery(unsigned int, int, char const*) = 0;
     virtual unknown_ret PollGMSQuery(long long) = 0;
-    virtual unknown_ret GetGMSQueryResults(long long, IClientMatchmaking::GMSQueryResult_t*, int) = 0;
+    virtual unknown_ret GetGMSQueryResults(long long, GMSQueryResult_t*, int) = 0;
     virtual unknown_ret ReleaseGMSQuery(long long) = 0;
     virtual unknown_ret EnsureFavoriteGameAccountsUpdated(bool) = 0;
 };
diff --git a/IClientUser.h b/IClientUser.h
index 0c62d49..6ba514d 100644
--- a/IClientUser.h
+++ b/IClientUser.h
@@ -1,21 +1,21 @@
 class IClientUser
 {
 public:
-    virtual unknown_ret GetHSteamUser() = 0;
-    virtual unknown_ret LogOn(CSteamID) = 0;
-    virtual unknown_ret LogOnWithPassword(char const*, char const*) = 0;
+    virtual UserHandle GetHSteamUser() = 0;
+    virtual void LogOn(CSteamID) = 0;
+    virtual void LogOnWithPassword(char const*, char const*) = 0;
     virtual unknown_ret LogOnAndCreateNewSteamAccountIfNeeded() = 0;
     virtual unknown_ret VerifyOfflineLogon() = 0;
-    virtual unknown_ret LogOff() = 0;
-    virtual unknown_ret BLoggedOn() = 0;
-    virtual unknown_ret GetLogonState() = 0;
-    virtual unknown_ret BConnected() = 0;
-    virtual unknown_ret BTryingToLogin() = 0;
-    virtual unknown_ret GetSteamID() = 0;
-    virtual unknown_ret GetConsoleSteamID() = 0;
+    virtual void LogOff() = 0;
+    virtual bool BLoggedOn() = 0;
+    virtual u32 GetLogonState() = 0;
+    virtual bool BConnected() = 0;
+    virtual bool BTryingToLogin() = 0;
+    virtual CSteamID GetSteamID() = 0;
+    virtual CSteamID GetConsoleSteamID() = 0;
     virtual unknown_ret GetClientInstanceID() = 0;
-    virtual unknown_ret IsVACBanned(unsigned int) = 0;
-    virtual unknown_ret SetEmail(char const*) = 0;
+    virtual bool IsVACBanned(CGameID) = 0;
+    virtual void SetEmail(char const*) = 0;
     virtual unknown_ret SetConfigString(EConfigSubTree, char const*, char const*) = 0;
     virtual unknown_ret GetConfigString(EConfigSubTree, char const*, char*, int) = 0;
     virtual unknown_ret SetConfigInt(EConfigSubTree, char const*, int) = 0;
@@ -53,9 +53,9 @@ public:
     virtual unknown_ret DestroyCachedCredentials(char const*) = 0;
     virtual unknown_ret GetCurrentWebAuthToken(char*, int, char*, int) = 0;
     virtual unknown_ret RequestWebAuthToken() = 0;
-    virtual unknown_ret SetLoginInformation(char const*, char const*, bool) = 0;
-    virtual unknown_ret SetTwoFactorCode(char const*) = 0;
-    virtual unknown_ret ClearAllLoginInformation() = 0;
+    virtual void SetLoginInformation(char const*, char const*, bool) = 0;
+    virtual void SetTwoFactorCode(char const*) = 0;
+    virtual void ClearAllLoginInformation() = 0;
     virtual unknown_ret BEnableEmbeddedClient(unsigned int) = 0;
     virtual unknown_ret ResetEmbeddedClient(unsigned int) = 0;
     virtual unknown_ret BHasEmbeddedClientToken(unsigned int) = 0;
diff --git a/IClientUtils.h b/IClientUtils.h
index 0c34b0b..17d18da 100644
--- a/IClientUtils.h
+++ b/IClientUtils.h
@@ -1,17 +1,17 @@
 class IClientUtils
 {
 public:
-    virtual unknown_ret GetInstallPath() = 0;
+    virtual const char *GetInstallPath() = 0;
     virtual unknown_ret GetUserBaseFolderInstallImage() = 0;
     virtual unknown_ret GetManagedContentRoot() = 0;
     virtual unknown_ret GetSecondsSinceAppActive() = 0;
     virtual unknown_ret GetSecondsSinceComputerActive() = 0;
     virtual unknown_ret SetComputerActive() = 0;
-    virtual unknown_ret GetConnectedUniverse() = 0;
+    virtual EUniverse GetConnectedUniverse() = 0;
     virtual unknown_ret GetServerRealTime() = 0;
-    virtual unknown_ret GetIPCountry() = 0;
+    virtual const char *GetIPCountry() = 0;
     virtual unknown_ret GetImageSize(int, unsigned int*, unsigned int*) = 0;
-    virtual unknown_ret GetImageRGBA(int, unsigned char*, int) = 0;
+    virtual unknown_ret GetImageRGBA(int, unsigned char*, unsigned int) = 0;
     virtual unknown_ret GetCSERIPPort(unsigned int*, unsigned short*) = 0;
     virtual unknown_ret GetNumRunningApps() = 0;
     virtual unknown_ret GetCurrentBatteryPower() = 0;
@@ -21,10 +21,10 @@ public:
     virtual unknown_ret GetAppID() = 0;
     virtual unknown_ret SetAPIDebuggingActive(bool, bool) = 0;
     virtual unknown_ret AllocPendingAPICallHandle() = 0;
-    virtual unknown_ret IsAPICallCompleted(unsigned long long, bool*) = 0;
-    virtual unknown_ret GetAPICallFailureReason(unsigned long long) = 0;
-    virtual unknown_ret GetAPICallResult(unsigned long long, void*, int, int, bool*) = 0;
-    virtual unknown_ret SetAPICallResultWithoutPostingCallback(unsigned long long, void const*, int, int) = 0;
+    virtual bool IsAPICallCompleted(Steam::SteamAPICall_t handle, bool*failed) = 0;
+    virtual ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t) = 0;
+    virtual bool GetAPICallResult(Steam::SteamAPICall_t h, u8 *callbackBuffer, u32 bufferSize, int expectedCallback, bool *failed) = 0;
+    virtual unknown_ret SetAPICallResultWithoutPostingCallback(unsigned long long handle, void const *callback, int size, int) = 0;
     virtual unknown_ret SignalAppsToShutDown() = 0;
     virtual unknown_ret SignalServiceAppsToDisconnect() = 0;
     virtual unknown_ret TerminateAllAppsMultiStep(unsigned int) = 0;
