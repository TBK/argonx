// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#ifndef PROTOBUF_INCLUDED_content_5fmanifest_2eproto
#define PROTOBUF_INCLUDED_content_5fmanifest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_content_5fmanifest_2eproto 

namespace protobuf_content_5fmanifest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_content_5fmanifest_2eproto
class ContentDeltaChunks;
class ContentDeltaChunksDefaultTypeInternal;
extern ContentDeltaChunksDefaultTypeInternal _ContentDeltaChunks_default_instance_;
class ContentDeltaChunks_DeltaChunk;
class ContentDeltaChunks_DeltaChunkDefaultTypeInternal;
extern ContentDeltaChunks_DeltaChunkDefaultTypeInternal _ContentDeltaChunks_DeltaChunk_default_instance_;
class ContentManifestMetadata;
class ContentManifestMetadataDefaultTypeInternal;
extern ContentManifestMetadataDefaultTypeInternal _ContentManifestMetadata_default_instance_;
class ContentManifestPayload;
class ContentManifestPayloadDefaultTypeInternal;
extern ContentManifestPayloadDefaultTypeInternal _ContentManifestPayload_default_instance_;
class ContentManifestPayload_FileMapping;
class ContentManifestPayload_FileMappingDefaultTypeInternal;
extern ContentManifestPayload_FileMappingDefaultTypeInternal _ContentManifestPayload_FileMapping_default_instance_;
class ContentManifestPayload_FileMapping_ChunkData;
class ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal;
extern ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal _ContentManifestPayload_FileMapping_ChunkData_default_instance_;
class ContentManifestSignature;
class ContentManifestSignatureDefaultTypeInternal;
extern ContentManifestSignatureDefaultTypeInternal _ContentManifestSignature_default_instance_;
namespace google {
namespace protobuf {
template<> ::ContentDeltaChunks* Arena::CreateMaybeMessage<::ContentDeltaChunks>(Arena*);
template<> ::ContentDeltaChunks_DeltaChunk* Arena::CreateMaybeMessage<::ContentDeltaChunks_DeltaChunk>(Arena*);
template<> ::ContentManifestMetadata* Arena::CreateMaybeMessage<::ContentManifestMetadata>(Arena*);
template<> ::ContentManifestPayload* Arena::CreateMaybeMessage<::ContentManifestPayload>(Arena*);
template<> ::ContentManifestPayload_FileMapping* Arena::CreateMaybeMessage<::ContentManifestPayload_FileMapping>(Arena*);
template<> ::ContentManifestPayload_FileMapping_ChunkData* Arena::CreateMaybeMessage<::ContentManifestPayload_FileMapping_ChunkData>(Arena*);
template<> ::ContentManifestSignature* Arena::CreateMaybeMessage<::ContentManifestSignature>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ContentManifestPayload_FileMapping_ChunkData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentManifestPayload.FileMapping.ChunkData) */ {
 public:
  ContentManifestPayload_FileMapping_ChunkData();
  virtual ~ContentManifestPayload_FileMapping_ChunkData();

  ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from);

  inline ContentManifestPayload_FileMapping_ChunkData& operator=(const ContentManifestPayload_FileMapping_ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentManifestPayload_FileMapping_ChunkData(ContentManifestPayload_FileMapping_ChunkData&& from) noexcept
    : ContentManifestPayload_FileMapping_ChunkData() {
    *this = ::std::move(from);
  }

  inline ContentManifestPayload_FileMapping_ChunkData& operator=(ContentManifestPayload_FileMapping_ChunkData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentManifestPayload_FileMapping_ChunkData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentManifestPayload_FileMapping_ChunkData* internal_default_instance() {
    return reinterpret_cast<const ContentManifestPayload_FileMapping_ChunkData*>(
               &_ContentManifestPayload_FileMapping_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ContentManifestPayload_FileMapping_ChunkData* other);
  friend void swap(ContentManifestPayload_FileMapping_ChunkData& a, ContentManifestPayload_FileMapping_ChunkData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentManifestPayload_FileMapping_ChunkData* New() const final {
    return CreateMaybeMessage<ContentManifestPayload_FileMapping_ChunkData>(NULL);
  }

  ContentManifestPayload_FileMapping_ChunkData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentManifestPayload_FileMapping_ChunkData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from);
  void MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestPayload_FileMapping_ChunkData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sha = 1;
  bool has_sha() const;
  void clear_sha();
  static const int kShaFieldNumber = 1;
  const ::std::string& sha() const;
  void set_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_sha(::std::string&& value);
  #endif
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  ::std::string* mutable_sha();
  ::std::string* release_sha();
  void set_allocated_sha(::std::string* sha);

  // optional uint64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // optional fixed32 crc = 2;
  bool has_crc() const;
  void clear_crc();
  static const int kCrcFieldNumber = 2;
  ::google::protobuf::uint32 crc() const;
  void set_crc(::google::protobuf::uint32 value);

  // optional uint32 cb_original = 4;
  bool has_cb_original() const;
  void clear_cb_original();
  static const int kCbOriginalFieldNumber = 4;
  ::google::protobuf::uint32 cb_original() const;
  void set_cb_original(::google::protobuf::uint32 value);

  // optional uint32 cb_compressed = 5;
  bool has_cb_compressed() const;
  void clear_cb_compressed();
  static const int kCbCompressedFieldNumber = 5;
  ::google::protobuf::uint32 cb_compressed() const;
  void set_cb_compressed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ContentManifestPayload.FileMapping.ChunkData)
 private:
  void set_has_sha();
  void clear_has_sha();
  void set_has_crc();
  void clear_has_crc();
  void set_has_offset();
  void clear_has_offset();
  void set_has_cb_original();
  void clear_has_cb_original();
  void set_has_cb_compressed();
  void clear_has_cb_compressed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sha_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint32 crc_;
  ::google::protobuf::uint32 cb_original_;
  ::google::protobuf::uint32 cb_compressed_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentManifestPayload_FileMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentManifestPayload.FileMapping) */ {
 public:
  ContentManifestPayload_FileMapping();
  virtual ~ContentManifestPayload_FileMapping();

  ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from);

  inline ContentManifestPayload_FileMapping& operator=(const ContentManifestPayload_FileMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentManifestPayload_FileMapping(ContentManifestPayload_FileMapping&& from) noexcept
    : ContentManifestPayload_FileMapping() {
    *this = ::std::move(from);
  }

  inline ContentManifestPayload_FileMapping& operator=(ContentManifestPayload_FileMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentManifestPayload_FileMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentManifestPayload_FileMapping* internal_default_instance() {
    return reinterpret_cast<const ContentManifestPayload_FileMapping*>(
               &_ContentManifestPayload_FileMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ContentManifestPayload_FileMapping* other);
  friend void swap(ContentManifestPayload_FileMapping& a, ContentManifestPayload_FileMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentManifestPayload_FileMapping* New() const final {
    return CreateMaybeMessage<ContentManifestPayload_FileMapping>(NULL);
  }

  ContentManifestPayload_FileMapping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentManifestPayload_FileMapping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentManifestPayload_FileMapping& from);
  void MergeFrom(const ContentManifestPayload_FileMapping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestPayload_FileMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContentManifestPayload_FileMapping_ChunkData ChunkData;

  // accessors -------------------------------------------------------

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 6;
  ::ContentManifestPayload_FileMapping_ChunkData* mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >*
      mutable_chunks();
  const ::ContentManifestPayload_FileMapping_ChunkData& chunks(int index) const;
  ::ContentManifestPayload_FileMapping_ChunkData* add_chunks();
  const ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >&
      chunks() const;

  // optional string filename = 1;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional bytes sha_filename = 4;
  bool has_sha_filename() const;
  void clear_sha_filename();
  static const int kShaFilenameFieldNumber = 4;
  const ::std::string& sha_filename() const;
  void set_sha_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_sha_filename(::std::string&& value);
  #endif
  void set_sha_filename(const char* value);
  void set_sha_filename(const void* value, size_t size);
  ::std::string* mutable_sha_filename();
  ::std::string* release_sha_filename();
  void set_allocated_sha_filename(::std::string* sha_filename);

  // optional bytes sha_content = 5;
  bool has_sha_content() const;
  void clear_sha_content();
  static const int kShaContentFieldNumber = 5;
  const ::std::string& sha_content() const;
  void set_sha_content(const ::std::string& value);
  #if LANG_CXX11
  void set_sha_content(::std::string&& value);
  #endif
  void set_sha_content(const char* value);
  void set_sha_content(const void* value, size_t size);
  ::std::string* mutable_sha_content();
  ::std::string* release_sha_content();
  void set_allocated_sha_content(::std::string* sha_content);

  // optional string linktarget = 7;
  bool has_linktarget() const;
  void clear_linktarget();
  static const int kLinktargetFieldNumber = 7;
  const ::std::string& linktarget() const;
  void set_linktarget(const ::std::string& value);
  #if LANG_CXX11
  void set_linktarget(::std::string&& value);
  #endif
  void set_linktarget(const char* value);
  void set_linktarget(const char* value, size_t size);
  ::std::string* mutable_linktarget();
  ::std::string* release_linktarget();
  void set_allocated_linktarget(::std::string* linktarget);

  // optional uint64 size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ContentManifestPayload.FileMapping)
 private:
  void set_has_filename();
  void clear_has_filename();
  void set_has_size();
  void clear_has_size();
  void set_has_flags();
  void clear_has_flags();
  void set_has_sha_filename();
  void clear_has_sha_filename();
  void set_has_sha_content();
  void clear_has_sha_content();
  void set_has_linktarget();
  void clear_has_linktarget();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData > chunks_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr sha_filename_;
  ::google::protobuf::internal::ArenaStringPtr sha_content_;
  ::google::protobuf::internal::ArenaStringPtr linktarget_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint32 flags_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentManifestPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentManifestPayload) */ {
 public:
  ContentManifestPayload();
  virtual ~ContentManifestPayload();

  ContentManifestPayload(const ContentManifestPayload& from);

  inline ContentManifestPayload& operator=(const ContentManifestPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentManifestPayload(ContentManifestPayload&& from) noexcept
    : ContentManifestPayload() {
    *this = ::std::move(from);
  }

  inline ContentManifestPayload& operator=(ContentManifestPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentManifestPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentManifestPayload* internal_default_instance() {
    return reinterpret_cast<const ContentManifestPayload*>(
               &_ContentManifestPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ContentManifestPayload* other);
  friend void swap(ContentManifestPayload& a, ContentManifestPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentManifestPayload* New() const final {
    return CreateMaybeMessage<ContentManifestPayload>(NULL);
  }

  ContentManifestPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentManifestPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentManifestPayload& from);
  void MergeFrom(const ContentManifestPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContentManifestPayload_FileMapping FileMapping;

  // accessors -------------------------------------------------------

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  int mappings_size() const;
  void clear_mappings();
  static const int kMappingsFieldNumber = 1;
  ::ContentManifestPayload_FileMapping* mutable_mappings(int index);
  ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping >*
      mutable_mappings();
  const ::ContentManifestPayload_FileMapping& mappings(int index) const;
  ::ContentManifestPayload_FileMapping* add_mappings();
  const ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping >&
      mappings() const;

  // @@protoc_insertion_point(class_scope:ContentManifestPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping > mappings_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentManifestMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentManifestMetadata) */ {
 public:
  ContentManifestMetadata();
  virtual ~ContentManifestMetadata();

  ContentManifestMetadata(const ContentManifestMetadata& from);

  inline ContentManifestMetadata& operator=(const ContentManifestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentManifestMetadata(ContentManifestMetadata&& from) noexcept
    : ContentManifestMetadata() {
    *this = ::std::move(from);
  }

  inline ContentManifestMetadata& operator=(ContentManifestMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentManifestMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentManifestMetadata* internal_default_instance() {
    return reinterpret_cast<const ContentManifestMetadata*>(
               &_ContentManifestMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ContentManifestMetadata* other);
  friend void swap(ContentManifestMetadata& a, ContentManifestMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentManifestMetadata* New() const final {
    return CreateMaybeMessage<ContentManifestMetadata>(NULL);
  }

  ContentManifestMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentManifestMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentManifestMetadata& from);
  void MergeFrom(const ContentManifestMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 gid_manifest = 2;
  bool has_gid_manifest() const;
  void clear_gid_manifest();
  static const int kGidManifestFieldNumber = 2;
  ::google::protobuf::uint64 gid_manifest() const;
  void set_gid_manifest(::google::protobuf::uint64 value);

  // optional uint32 depot_id = 1;
  bool has_depot_id() const;
  void clear_depot_id();
  static const int kDepotIdFieldNumber = 1;
  ::google::protobuf::uint32 depot_id() const;
  void set_depot_id(::google::protobuf::uint32 value);

  // optional uint32 creation_time = 3;
  bool has_creation_time() const;
  void clear_creation_time();
  static const int kCreationTimeFieldNumber = 3;
  ::google::protobuf::uint32 creation_time() const;
  void set_creation_time(::google::protobuf::uint32 value);

  // optional uint64 cb_disk_original = 5;
  bool has_cb_disk_original() const;
  void clear_cb_disk_original();
  static const int kCbDiskOriginalFieldNumber = 5;
  ::google::protobuf::uint64 cb_disk_original() const;
  void set_cb_disk_original(::google::protobuf::uint64 value);

  // optional bool filenames_encrypted = 4;
  bool has_filenames_encrypted() const;
  void clear_filenames_encrypted();
  static const int kFilenamesEncryptedFieldNumber = 4;
  bool filenames_encrypted() const;
  void set_filenames_encrypted(bool value);

  // optional uint32 unique_chunks = 7;
  bool has_unique_chunks() const;
  void clear_unique_chunks();
  static const int kUniqueChunksFieldNumber = 7;
  ::google::protobuf::uint32 unique_chunks() const;
  void set_unique_chunks(::google::protobuf::uint32 value);

  // optional uint64 cb_disk_compressed = 6;
  bool has_cb_disk_compressed() const;
  void clear_cb_disk_compressed();
  static const int kCbDiskCompressedFieldNumber = 6;
  ::google::protobuf::uint64 cb_disk_compressed() const;
  void set_cb_disk_compressed(::google::protobuf::uint64 value);

  // optional uint32 crc_encrypted = 8;
  bool has_crc_encrypted() const;
  void clear_crc_encrypted();
  static const int kCrcEncryptedFieldNumber = 8;
  ::google::protobuf::uint32 crc_encrypted() const;
  void set_crc_encrypted(::google::protobuf::uint32 value);

  // optional uint32 crc_clear = 9;
  bool has_crc_clear() const;
  void clear_crc_clear();
  static const int kCrcClearFieldNumber = 9;
  ::google::protobuf::uint32 crc_clear() const;
  void set_crc_clear(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ContentManifestMetadata)
 private:
  void set_has_depot_id();
  void clear_has_depot_id();
  void set_has_gid_manifest();
  void clear_has_gid_manifest();
  void set_has_creation_time();
  void clear_has_creation_time();
  void set_has_filenames_encrypted();
  void clear_has_filenames_encrypted();
  void set_has_cb_disk_original();
  void clear_has_cb_disk_original();
  void set_has_cb_disk_compressed();
  void clear_has_cb_disk_compressed();
  void set_has_unique_chunks();
  void clear_has_unique_chunks();
  void set_has_crc_encrypted();
  void clear_has_crc_encrypted();
  void set_has_crc_clear();
  void clear_has_crc_clear();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 gid_manifest_;
  ::google::protobuf::uint32 depot_id_;
  ::google::protobuf::uint32 creation_time_;
  ::google::protobuf::uint64 cb_disk_original_;
  bool filenames_encrypted_;
  ::google::protobuf::uint32 unique_chunks_;
  ::google::protobuf::uint64 cb_disk_compressed_;
  ::google::protobuf::uint32 crc_encrypted_;
  ::google::protobuf::uint32 crc_clear_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentManifestSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentManifestSignature) */ {
 public:
  ContentManifestSignature();
  virtual ~ContentManifestSignature();

  ContentManifestSignature(const ContentManifestSignature& from);

  inline ContentManifestSignature& operator=(const ContentManifestSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentManifestSignature(ContentManifestSignature&& from) noexcept
    : ContentManifestSignature() {
    *this = ::std::move(from);
  }

  inline ContentManifestSignature& operator=(ContentManifestSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentManifestSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentManifestSignature* internal_default_instance() {
    return reinterpret_cast<const ContentManifestSignature*>(
               &_ContentManifestSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ContentManifestSignature* other);
  friend void swap(ContentManifestSignature& a, ContentManifestSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentManifestSignature* New() const final {
    return CreateMaybeMessage<ContentManifestSignature>(NULL);
  }

  ContentManifestSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentManifestSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentManifestSignature& from);
  void MergeFrom(const ContentManifestSignature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:ContentManifestSignature)
 private:
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentDeltaChunks_DeltaChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentDeltaChunks.DeltaChunk) */ {
 public:
  ContentDeltaChunks_DeltaChunk();
  virtual ~ContentDeltaChunks_DeltaChunk();

  ContentDeltaChunks_DeltaChunk(const ContentDeltaChunks_DeltaChunk& from);

  inline ContentDeltaChunks_DeltaChunk& operator=(const ContentDeltaChunks_DeltaChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentDeltaChunks_DeltaChunk(ContentDeltaChunks_DeltaChunk&& from) noexcept
    : ContentDeltaChunks_DeltaChunk() {
    *this = ::std::move(from);
  }

  inline ContentDeltaChunks_DeltaChunk& operator=(ContentDeltaChunks_DeltaChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentDeltaChunks_DeltaChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentDeltaChunks_DeltaChunk* internal_default_instance() {
    return reinterpret_cast<const ContentDeltaChunks_DeltaChunk*>(
               &_ContentDeltaChunks_DeltaChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ContentDeltaChunks_DeltaChunk* other);
  friend void swap(ContentDeltaChunks_DeltaChunk& a, ContentDeltaChunks_DeltaChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentDeltaChunks_DeltaChunk* New() const final {
    return CreateMaybeMessage<ContentDeltaChunks_DeltaChunk>(NULL);
  }

  ContentDeltaChunks_DeltaChunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentDeltaChunks_DeltaChunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentDeltaChunks_DeltaChunk& from);
  void MergeFrom(const ContentDeltaChunks_DeltaChunk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentDeltaChunks_DeltaChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sha_source = 1;
  bool has_sha_source() const;
  void clear_sha_source();
  static const int kShaSourceFieldNumber = 1;
  const ::std::string& sha_source() const;
  void set_sha_source(const ::std::string& value);
  #if LANG_CXX11
  void set_sha_source(::std::string&& value);
  #endif
  void set_sha_source(const char* value);
  void set_sha_source(const void* value, size_t size);
  ::std::string* mutable_sha_source();
  ::std::string* release_sha_source();
  void set_allocated_sha_source(::std::string* sha_source);

  // optional bytes sha_target = 2;
  bool has_sha_target() const;
  void clear_sha_target();
  static const int kShaTargetFieldNumber = 2;
  const ::std::string& sha_target() const;
  void set_sha_target(const ::std::string& value);
  #if LANG_CXX11
  void set_sha_target(::std::string&& value);
  #endif
  void set_sha_target(const char* value);
  void set_sha_target(const void* value, size_t size);
  ::std::string* mutable_sha_target();
  ::std::string* release_sha_target();
  void set_allocated_sha_target(::std::string* sha_target);

  // optional bytes chunk = 5;
  bool has_chunk() const;
  void clear_chunk();
  static const int kChunkFieldNumber = 5;
  const ::std::string& chunk() const;
  void set_chunk(const ::std::string& value);
  #if LANG_CXX11
  void set_chunk(::std::string&& value);
  #endif
  void set_chunk(const char* value);
  void set_chunk(const void* value, size_t size);
  ::std::string* mutable_chunk();
  ::std::string* release_chunk();
  void set_allocated_chunk(::std::string* chunk);

  // optional uint32 size_original = 3;
  bool has_size_original() const;
  void clear_size_original();
  static const int kSizeOriginalFieldNumber = 3;
  ::google::protobuf::uint32 size_original() const;
  void set_size_original(::google::protobuf::uint32 value);

  // optional uint32 patch_method = 4;
  bool has_patch_method() const;
  void clear_patch_method();
  static const int kPatchMethodFieldNumber = 4;
  ::google::protobuf::uint32 patch_method() const;
  void set_patch_method(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ContentDeltaChunks.DeltaChunk)
 private:
  void set_has_sha_source();
  void clear_has_sha_source();
  void set_has_sha_target();
  void clear_has_sha_target();
  void set_has_size_original();
  void clear_has_size_original();
  void set_has_patch_method();
  void clear_has_patch_method();
  void set_has_chunk();
  void clear_has_chunk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sha_source_;
  ::google::protobuf::internal::ArenaStringPtr sha_target_;
  ::google::protobuf::internal::ArenaStringPtr chunk_;
  ::google::protobuf::uint32 size_original_;
  ::google::protobuf::uint32 patch_method_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentDeltaChunks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContentDeltaChunks) */ {
 public:
  ContentDeltaChunks();
  virtual ~ContentDeltaChunks();

  ContentDeltaChunks(const ContentDeltaChunks& from);

  inline ContentDeltaChunks& operator=(const ContentDeltaChunks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentDeltaChunks(ContentDeltaChunks&& from) noexcept
    : ContentDeltaChunks() {
    *this = ::std::move(from);
  }

  inline ContentDeltaChunks& operator=(ContentDeltaChunks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentDeltaChunks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentDeltaChunks* internal_default_instance() {
    return reinterpret_cast<const ContentDeltaChunks*>(
               &_ContentDeltaChunks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ContentDeltaChunks* other);
  friend void swap(ContentDeltaChunks& a, ContentDeltaChunks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentDeltaChunks* New() const final {
    return CreateMaybeMessage<ContentDeltaChunks>(NULL);
  }

  ContentDeltaChunks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentDeltaChunks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentDeltaChunks& from);
  void MergeFrom(const ContentDeltaChunks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentDeltaChunks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContentDeltaChunks_DeltaChunk DeltaChunk;

  // accessors -------------------------------------------------------

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  int deltachunks_size() const;
  void clear_deltachunks();
  static const int kDeltaChunksFieldNumber = 4;
  ::ContentDeltaChunks_DeltaChunk* mutable_deltachunks(int index);
  ::google::protobuf::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >*
      mutable_deltachunks();
  const ::ContentDeltaChunks_DeltaChunk& deltachunks(int index) const;
  ::ContentDeltaChunks_DeltaChunk* add_deltachunks();
  const ::google::protobuf::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >&
      deltachunks() const;

  // optional uint64 manifest_id_source = 2;
  bool has_manifest_id_source() const;
  void clear_manifest_id_source();
  static const int kManifestIdSourceFieldNumber = 2;
  ::google::protobuf::uint64 manifest_id_source() const;
  void set_manifest_id_source(::google::protobuf::uint64 value);

  // optional uint64 manifest_id_target = 3;
  bool has_manifest_id_target() const;
  void clear_manifest_id_target();
  static const int kManifestIdTargetFieldNumber = 3;
  ::google::protobuf::uint64 manifest_id_target() const;
  void set_manifest_id_target(::google::protobuf::uint64 value);

  // optional uint32 depot_id = 1;
  bool has_depot_id() const;
  void clear_depot_id();
  static const int kDepotIdFieldNumber = 1;
  ::google::protobuf::uint32 depot_id() const;
  void set_depot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ContentDeltaChunks)
 private:
  void set_has_depot_id();
  void clear_has_depot_id();
  void set_has_manifest_id_source();
  void clear_has_manifest_id_source();
  void set_has_manifest_id_target();
  void clear_has_manifest_id_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk > deltachunks_;
  ::google::protobuf::uint64 manifest_id_source_;
  ::google::protobuf::uint64 manifest_id_target_;
  ::google::protobuf::uint32 depot_id_;
  friend struct ::protobuf_content_5fmanifest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentManifestPayload_FileMapping_ChunkData

// optional bytes sha = 1;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
inline const ::std::string& ContentManifestPayload_FileMapping_ChunkData::sha() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.sha)
  return sha_.GetNoArena();
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.sha)
}
#if LANG_CXX11
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentManifestPayload.FileMapping.ChunkData.sha)
}
#endif
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentManifestPayload.FileMapping.ChunkData.sha)
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentManifestPayload.FileMapping.ChunkData.sha)
}
inline ::std::string* ContentManifestPayload_FileMapping_ChunkData::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.ChunkData.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentManifestPayload_FileMapping_ChunkData::release_sha() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.ChunkData.sha)
  if (!has_sha()) {
    return NULL;
  }
  clear_has_sha();
  return sha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.ChunkData.sha)
}

// optional fixed32 crc = 2;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_crc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_crc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::crc() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.crc)
  return crc_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.crc)
}

// optional uint64 offset = 3;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 ContentManifestPayload_FileMapping_ChunkData::offset() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.offset)
  return offset_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.offset)
}

// optional uint32 cb_original = 4;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_cb_original() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_cb_original() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_cb_original() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_cb_original() {
  cb_original_ = 0u;
  clear_has_cb_original();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::cb_original() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.cb_original)
  return cb_original_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_cb_original(::google::protobuf::uint32 value) {
  set_has_cb_original();
  cb_original_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.cb_original)
}

// optional uint32 cb_compressed = 5;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_cb_compressed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_cb_compressed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_cb_compressed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_cb_compressed() {
  cb_compressed_ = 0u;
  clear_has_cb_compressed();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::cb_compressed() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
  return cb_compressed_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_cb_compressed(::google::protobuf::uint32 value) {
  set_has_cb_compressed();
  cb_compressed_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
}

// -------------------------------------------------------------------

// ContentManifestPayload_FileMapping

// optional string filename = 1;
inline bool ContentManifestPayload_FileMapping::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestPayload_FileMapping::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestPayload_FileMapping::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& ContentManifestPayload_FileMapping::filename() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.filename)
  return filename_.GetNoArena();
}
inline void ContentManifestPayload_FileMapping::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.filename)
}
#if LANG_CXX11
inline void ContentManifestPayload_FileMapping::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentManifestPayload.FileMapping.filename)
}
#endif
inline void ContentManifestPayload_FileMapping::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentManifestPayload.FileMapping.filename)
}
inline void ContentManifestPayload_FileMapping::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentManifestPayload.FileMapping.filename)
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentManifestPayload_FileMapping::release_filename() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.filename)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentManifestPayload_FileMapping::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.filename)
}

// optional uint64 size = 2;
inline bool ContentManifestPayload_FileMapping::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentManifestPayload_FileMapping::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentManifestPayload_FileMapping::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 ContentManifestPayload_FileMapping::size() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.size)
  return size_;
}
inline void ContentManifestPayload_FileMapping::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.size)
}

// optional uint32 flags = 3;
inline bool ContentManifestPayload_FileMapping::has_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_flags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentManifestPayload_FileMapping::clear_has_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentManifestPayload_FileMapping::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping::flags() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.flags)
  return flags_;
}
inline void ContentManifestPayload_FileMapping::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.flags)
}

// optional bytes sha_filename = 4;
inline bool ContentManifestPayload_FileMapping::has_sha_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_sha_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentManifestPayload_FileMapping::clear_has_sha_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentManifestPayload_FileMapping::clear_sha_filename() {
  sha_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_filename();
}
inline const ::std::string& ContentManifestPayload_FileMapping::sha_filename() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.sha_filename)
  return sha_filename_.GetNoArena();
}
inline void ContentManifestPayload_FileMapping::set_sha_filename(const ::std::string& value) {
  set_has_sha_filename();
  sha_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.sha_filename)
}
#if LANG_CXX11
inline void ContentManifestPayload_FileMapping::set_sha_filename(::std::string&& value) {
  set_has_sha_filename();
  sha_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentManifestPayload.FileMapping.sha_filename)
}
#endif
inline void ContentManifestPayload_FileMapping::set_sha_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_filename();
  sha_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentManifestPayload.FileMapping.sha_filename)
}
inline void ContentManifestPayload_FileMapping::set_sha_filename(const void* value, size_t size) {
  set_has_sha_filename();
  sha_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentManifestPayload.FileMapping.sha_filename)
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_sha_filename() {
  set_has_sha_filename();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.sha_filename)
  return sha_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentManifestPayload_FileMapping::release_sha_filename() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.sha_filename)
  if (!has_sha_filename()) {
    return NULL;
  }
  clear_has_sha_filename();
  return sha_filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentManifestPayload_FileMapping::set_allocated_sha_filename(::std::string* sha_filename) {
  if (sha_filename != NULL) {
    set_has_sha_filename();
  } else {
    clear_has_sha_filename();
  }
  sha_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_filename);
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.sha_filename)
}

// optional bytes sha_content = 5;
inline bool ContentManifestPayload_FileMapping::has_sha_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_sha_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentManifestPayload_FileMapping::clear_has_sha_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentManifestPayload_FileMapping::clear_sha_content() {
  sha_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_content();
}
inline const ::std::string& ContentManifestPayload_FileMapping::sha_content() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.sha_content)
  return sha_content_.GetNoArena();
}
inline void ContentManifestPayload_FileMapping::set_sha_content(const ::std::string& value) {
  set_has_sha_content();
  sha_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.sha_content)
}
#if LANG_CXX11
inline void ContentManifestPayload_FileMapping::set_sha_content(::std::string&& value) {
  set_has_sha_content();
  sha_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentManifestPayload.FileMapping.sha_content)
}
#endif
inline void ContentManifestPayload_FileMapping::set_sha_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_content();
  sha_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentManifestPayload.FileMapping.sha_content)
}
inline void ContentManifestPayload_FileMapping::set_sha_content(const void* value, size_t size) {
  set_has_sha_content();
  sha_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentManifestPayload.FileMapping.sha_content)
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_sha_content() {
  set_has_sha_content();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.sha_content)
  return sha_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentManifestPayload_FileMapping::release_sha_content() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.sha_content)
  if (!has_sha_content()) {
    return NULL;
  }
  clear_has_sha_content();
  return sha_content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentManifestPayload_FileMapping::set_allocated_sha_content(::std::string* sha_content) {
  if (sha_content != NULL) {
    set_has_sha_content();
  } else {
    clear_has_sha_content();
  }
  sha_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_content);
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.sha_content)
}

// repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
inline int ContentManifestPayload_FileMapping::chunks_size() const {
  return chunks_.size();
}
inline void ContentManifestPayload_FileMapping::clear_chunks() {
  chunks_.Clear();
}
inline ::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.chunks)
  return chunks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >*
ContentManifestPayload_FileMapping::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:ContentManifestPayload.FileMapping.chunks)
  return &chunks_;
}
inline const ::ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping::chunks(int index) const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.chunks)
  return chunks_.Get(index);
}
inline ::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::add_chunks() {
  // @@protoc_insertion_point(field_add:ContentManifestPayload.FileMapping.chunks)
  return chunks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >&
ContentManifestPayload_FileMapping::chunks() const {
  // @@protoc_insertion_point(field_list:ContentManifestPayload.FileMapping.chunks)
  return chunks_;
}

// optional string linktarget = 7;
inline bool ContentManifestPayload_FileMapping::has_linktarget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_linktarget() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentManifestPayload_FileMapping::clear_has_linktarget() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentManifestPayload_FileMapping::clear_linktarget() {
  linktarget_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linktarget();
}
inline const ::std::string& ContentManifestPayload_FileMapping::linktarget() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.linktarget)
  return linktarget_.GetNoArena();
}
inline void ContentManifestPayload_FileMapping::set_linktarget(const ::std::string& value) {
  set_has_linktarget();
  linktarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.linktarget)
}
#if LANG_CXX11
inline void ContentManifestPayload_FileMapping::set_linktarget(::std::string&& value) {
  set_has_linktarget();
  linktarget_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentManifestPayload.FileMapping.linktarget)
}
#endif
inline void ContentManifestPayload_FileMapping::set_linktarget(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linktarget();
  linktarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentManifestPayload.FileMapping.linktarget)
}
inline void ContentManifestPayload_FileMapping::set_linktarget(const char* value, size_t size) {
  set_has_linktarget();
  linktarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentManifestPayload.FileMapping.linktarget)
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_linktarget() {
  set_has_linktarget();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.linktarget)
  return linktarget_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentManifestPayload_FileMapping::release_linktarget() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.linktarget)
  if (!has_linktarget()) {
    return NULL;
  }
  clear_has_linktarget();
  return linktarget_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentManifestPayload_FileMapping::set_allocated_linktarget(::std::string* linktarget) {
  if (linktarget != NULL) {
    set_has_linktarget();
  } else {
    clear_has_linktarget();
  }
  linktarget_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linktarget);
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.linktarget)
}

// -------------------------------------------------------------------

// ContentManifestPayload

// repeated .ContentManifestPayload.FileMapping mappings = 1;
inline int ContentManifestPayload::mappings_size() const {
  return mappings_.size();
}
inline void ContentManifestPayload::clear_mappings() {
  mappings_.Clear();
}
inline ::ContentManifestPayload_FileMapping* ContentManifestPayload::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.mappings)
  return mappings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping >*
ContentManifestPayload::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:ContentManifestPayload.mappings)
  return &mappings_;
}
inline const ::ContentManifestPayload_FileMapping& ContentManifestPayload::mappings(int index) const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.mappings)
  return mappings_.Get(index);
}
inline ::ContentManifestPayload_FileMapping* ContentManifestPayload::add_mappings() {
  // @@protoc_insertion_point(field_add:ContentManifestPayload.mappings)
  return mappings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentManifestPayload_FileMapping >&
ContentManifestPayload::mappings() const {
  // @@protoc_insertion_point(field_list:ContentManifestPayload.mappings)
  return mappings_;
}

// -------------------------------------------------------------------

// ContentManifestMetadata

// optional uint32 depot_id = 1;
inline bool ContentManifestMetadata::has_depot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentManifestMetadata::set_has_depot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentManifestMetadata::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentManifestMetadata::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::depot_id() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.depot_id)
  return depot_id_;
}
inline void ContentManifestMetadata::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.depot_id)
}

// optional uint64 gid_manifest = 2;
inline bool ContentManifestMetadata::has_gid_manifest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestMetadata::set_has_gid_manifest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestMetadata::clear_has_gid_manifest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestMetadata::clear_gid_manifest() {
  gid_manifest_ = GOOGLE_ULONGLONG(0);
  clear_has_gid_manifest();
}
inline ::google::protobuf::uint64 ContentManifestMetadata::gid_manifest() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.gid_manifest)
  return gid_manifest_;
}
inline void ContentManifestMetadata::set_gid_manifest(::google::protobuf::uint64 value) {
  set_has_gid_manifest();
  gid_manifest_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.gid_manifest)
}

// optional uint32 creation_time = 3;
inline bool ContentManifestMetadata::has_creation_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentManifestMetadata::set_has_creation_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentManifestMetadata::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentManifestMetadata::clear_creation_time() {
  creation_time_ = 0u;
  clear_has_creation_time();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::creation_time() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.creation_time)
  return creation_time_;
}
inline void ContentManifestMetadata::set_creation_time(::google::protobuf::uint32 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.creation_time)
}

// optional bool filenames_encrypted = 4;
inline bool ContentManifestMetadata::has_filenames_encrypted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentManifestMetadata::set_has_filenames_encrypted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentManifestMetadata::clear_has_filenames_encrypted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentManifestMetadata::clear_filenames_encrypted() {
  filenames_encrypted_ = false;
  clear_has_filenames_encrypted();
}
inline bool ContentManifestMetadata::filenames_encrypted() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.filenames_encrypted)
  return filenames_encrypted_;
}
inline void ContentManifestMetadata::set_filenames_encrypted(bool value) {
  set_has_filenames_encrypted();
  filenames_encrypted_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.filenames_encrypted)
}

// optional uint64 cb_disk_original = 5;
inline bool ContentManifestMetadata::has_cb_disk_original() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentManifestMetadata::set_has_cb_disk_original() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentManifestMetadata::clear_has_cb_disk_original() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentManifestMetadata::clear_cb_disk_original() {
  cb_disk_original_ = GOOGLE_ULONGLONG(0);
  clear_has_cb_disk_original();
}
inline ::google::protobuf::uint64 ContentManifestMetadata::cb_disk_original() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.cb_disk_original)
  return cb_disk_original_;
}
inline void ContentManifestMetadata::set_cb_disk_original(::google::protobuf::uint64 value) {
  set_has_cb_disk_original();
  cb_disk_original_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.cb_disk_original)
}

// optional uint64 cb_disk_compressed = 6;
inline bool ContentManifestMetadata::has_cb_disk_compressed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContentManifestMetadata::set_has_cb_disk_compressed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContentManifestMetadata::clear_has_cb_disk_compressed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContentManifestMetadata::clear_cb_disk_compressed() {
  cb_disk_compressed_ = GOOGLE_ULONGLONG(0);
  clear_has_cb_disk_compressed();
}
inline ::google::protobuf::uint64 ContentManifestMetadata::cb_disk_compressed() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.cb_disk_compressed)
  return cb_disk_compressed_;
}
inline void ContentManifestMetadata::set_cb_disk_compressed(::google::protobuf::uint64 value) {
  set_has_cb_disk_compressed();
  cb_disk_compressed_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.cb_disk_compressed)
}

// optional uint32 unique_chunks = 7;
inline bool ContentManifestMetadata::has_unique_chunks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentManifestMetadata::set_has_unique_chunks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentManifestMetadata::clear_has_unique_chunks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentManifestMetadata::clear_unique_chunks() {
  unique_chunks_ = 0u;
  clear_has_unique_chunks();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::unique_chunks() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.unique_chunks)
  return unique_chunks_;
}
inline void ContentManifestMetadata::set_unique_chunks(::google::protobuf::uint32 value) {
  set_has_unique_chunks();
  unique_chunks_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.unique_chunks)
}

// optional uint32 crc_encrypted = 8;
inline bool ContentManifestMetadata::has_crc_encrypted() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContentManifestMetadata::set_has_crc_encrypted() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContentManifestMetadata::clear_has_crc_encrypted() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContentManifestMetadata::clear_crc_encrypted() {
  crc_encrypted_ = 0u;
  clear_has_crc_encrypted();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::crc_encrypted() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.crc_encrypted)
  return crc_encrypted_;
}
inline void ContentManifestMetadata::set_crc_encrypted(::google::protobuf::uint32 value) {
  set_has_crc_encrypted();
  crc_encrypted_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.crc_encrypted)
}

// optional uint32 crc_clear = 9;
inline bool ContentManifestMetadata::has_crc_clear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContentManifestMetadata::set_has_crc_clear() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContentManifestMetadata::clear_has_crc_clear() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContentManifestMetadata::clear_crc_clear() {
  crc_clear_ = 0u;
  clear_has_crc_clear();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::crc_clear() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.crc_clear)
  return crc_clear_;
}
inline void ContentManifestMetadata::set_crc_clear(::google::protobuf::uint32 value) {
  set_has_crc_clear();
  crc_clear_ = value;
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.crc_clear)
}

// -------------------------------------------------------------------

// ContentManifestSignature

// optional bytes signature = 1;
inline bool ContentManifestSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestSignature::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestSignature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestSignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ContentManifestSignature::signature() const {
  // @@protoc_insertion_point(field_get:ContentManifestSignature.signature)
  return signature_.GetNoArena();
}
inline void ContentManifestSignature::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentManifestSignature.signature)
}
#if LANG_CXX11
inline void ContentManifestSignature::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentManifestSignature.signature)
}
#endif
inline void ContentManifestSignature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentManifestSignature.signature)
}
inline void ContentManifestSignature::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentManifestSignature.signature)
}
inline ::std::string* ContentManifestSignature::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:ContentManifestSignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentManifestSignature::release_signature() {
  // @@protoc_insertion_point(field_release:ContentManifestSignature.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentManifestSignature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ContentManifestSignature.signature)
}

// -------------------------------------------------------------------

// ContentDeltaChunks_DeltaChunk

// optional bytes sha_source = 1;
inline bool ContentDeltaChunks_DeltaChunk::has_sha_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentDeltaChunks_DeltaChunk::set_has_sha_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_has_sha_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_sha_source() {
  sha_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_source();
}
inline const ::std::string& ContentDeltaChunks_DeltaChunk::sha_source() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.sha_source)
  return sha_source_.GetNoArena();
}
inline void ContentDeltaChunks_DeltaChunk::set_sha_source(const ::std::string& value) {
  set_has_sha_source();
  sha_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.sha_source)
}
#if LANG_CXX11
inline void ContentDeltaChunks_DeltaChunk::set_sha_source(::std::string&& value) {
  set_has_sha_source();
  sha_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentDeltaChunks.DeltaChunk.sha_source)
}
#endif
inline void ContentDeltaChunks_DeltaChunk::set_sha_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_source();
  sha_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDeltaChunks.DeltaChunk.sha_source)
}
inline void ContentDeltaChunks_DeltaChunk::set_sha_source(const void* value, size_t size) {
  set_has_sha_source();
  sha_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDeltaChunks.DeltaChunk.sha_source)
}
inline ::std::string* ContentDeltaChunks_DeltaChunk::mutable_sha_source() {
  set_has_sha_source();
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.DeltaChunk.sha_source)
  return sha_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDeltaChunks_DeltaChunk::release_sha_source() {
  // @@protoc_insertion_point(field_release:ContentDeltaChunks.DeltaChunk.sha_source)
  if (!has_sha_source()) {
    return NULL;
  }
  clear_has_sha_source();
  return sha_source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDeltaChunks_DeltaChunk::set_allocated_sha_source(::std::string* sha_source) {
  if (sha_source != NULL) {
    set_has_sha_source();
  } else {
    clear_has_sha_source();
  }
  sha_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_source);
  // @@protoc_insertion_point(field_set_allocated:ContentDeltaChunks.DeltaChunk.sha_source)
}

// optional bytes sha_target = 2;
inline bool ContentDeltaChunks_DeltaChunk::has_sha_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentDeltaChunks_DeltaChunk::set_has_sha_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_has_sha_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_sha_target() {
  sha_target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_target();
}
inline const ::std::string& ContentDeltaChunks_DeltaChunk::sha_target() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.sha_target)
  return sha_target_.GetNoArena();
}
inline void ContentDeltaChunks_DeltaChunk::set_sha_target(const ::std::string& value) {
  set_has_sha_target();
  sha_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.sha_target)
}
#if LANG_CXX11
inline void ContentDeltaChunks_DeltaChunk::set_sha_target(::std::string&& value) {
  set_has_sha_target();
  sha_target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentDeltaChunks.DeltaChunk.sha_target)
}
#endif
inline void ContentDeltaChunks_DeltaChunk::set_sha_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_target();
  sha_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDeltaChunks.DeltaChunk.sha_target)
}
inline void ContentDeltaChunks_DeltaChunk::set_sha_target(const void* value, size_t size) {
  set_has_sha_target();
  sha_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDeltaChunks.DeltaChunk.sha_target)
}
inline ::std::string* ContentDeltaChunks_DeltaChunk::mutable_sha_target() {
  set_has_sha_target();
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.DeltaChunk.sha_target)
  return sha_target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDeltaChunks_DeltaChunk::release_sha_target() {
  // @@protoc_insertion_point(field_release:ContentDeltaChunks.DeltaChunk.sha_target)
  if (!has_sha_target()) {
    return NULL;
  }
  clear_has_sha_target();
  return sha_target_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDeltaChunks_DeltaChunk::set_allocated_sha_target(::std::string* sha_target) {
  if (sha_target != NULL) {
    set_has_sha_target();
  } else {
    clear_has_sha_target();
  }
  sha_target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_target);
  // @@protoc_insertion_point(field_set_allocated:ContentDeltaChunks.DeltaChunk.sha_target)
}

// optional uint32 size_original = 3;
inline bool ContentDeltaChunks_DeltaChunk::has_size_original() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentDeltaChunks_DeltaChunk::set_has_size_original() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_has_size_original() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_size_original() {
  size_original_ = 0u;
  clear_has_size_original();
}
inline ::google::protobuf::uint32 ContentDeltaChunks_DeltaChunk::size_original() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.size_original)
  return size_original_;
}
inline void ContentDeltaChunks_DeltaChunk::set_size_original(::google::protobuf::uint32 value) {
  set_has_size_original();
  size_original_ = value;
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.size_original)
}

// optional uint32 patch_method = 4;
inline bool ContentDeltaChunks_DeltaChunk::has_patch_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentDeltaChunks_DeltaChunk::set_has_patch_method() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_has_patch_method() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_patch_method() {
  patch_method_ = 0u;
  clear_has_patch_method();
}
inline ::google::protobuf::uint32 ContentDeltaChunks_DeltaChunk::patch_method() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.patch_method)
  return patch_method_;
}
inline void ContentDeltaChunks_DeltaChunk::set_patch_method(::google::protobuf::uint32 value) {
  set_has_patch_method();
  patch_method_ = value;
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.patch_method)
}

// optional bytes chunk = 5;
inline bool ContentDeltaChunks_DeltaChunk::has_chunk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentDeltaChunks_DeltaChunk::set_has_chunk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_has_chunk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentDeltaChunks_DeltaChunk::clear_chunk() {
  chunk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chunk();
}
inline const ::std::string& ContentDeltaChunks_DeltaChunk::chunk() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.chunk)
  return chunk_.GetNoArena();
}
inline void ContentDeltaChunks_DeltaChunk::set_chunk(const ::std::string& value) {
  set_has_chunk();
  chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.chunk)
}
#if LANG_CXX11
inline void ContentDeltaChunks_DeltaChunk::set_chunk(::std::string&& value) {
  set_has_chunk();
  chunk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContentDeltaChunks.DeltaChunk.chunk)
}
#endif
inline void ContentDeltaChunks_DeltaChunk::set_chunk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chunk();
  chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContentDeltaChunks.DeltaChunk.chunk)
}
inline void ContentDeltaChunks_DeltaChunk::set_chunk(const void* value, size_t size) {
  set_has_chunk();
  chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContentDeltaChunks.DeltaChunk.chunk)
}
inline ::std::string* ContentDeltaChunks_DeltaChunk::mutable_chunk() {
  set_has_chunk();
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.DeltaChunk.chunk)
  return chunk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentDeltaChunks_DeltaChunk::release_chunk() {
  // @@protoc_insertion_point(field_release:ContentDeltaChunks.DeltaChunk.chunk)
  if (!has_chunk()) {
    return NULL;
  }
  clear_has_chunk();
  return chunk_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDeltaChunks_DeltaChunk::set_allocated_chunk(::std::string* chunk) {
  if (chunk != NULL) {
    set_has_chunk();
  } else {
    clear_has_chunk();
  }
  chunk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk);
  // @@protoc_insertion_point(field_set_allocated:ContentDeltaChunks.DeltaChunk.chunk)
}

// -------------------------------------------------------------------

// ContentDeltaChunks

// optional uint32 depot_id = 1;
inline bool ContentDeltaChunks::has_depot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentDeltaChunks::set_has_depot_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentDeltaChunks::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentDeltaChunks::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
inline ::google::protobuf::uint32 ContentDeltaChunks::depot_id() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.depot_id)
  return depot_id_;
}
inline void ContentDeltaChunks::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.depot_id)
}

// optional uint64 manifest_id_source = 2;
inline bool ContentDeltaChunks::has_manifest_id_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentDeltaChunks::set_has_manifest_id_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentDeltaChunks::clear_has_manifest_id_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentDeltaChunks::clear_manifest_id_source() {
  manifest_id_source_ = GOOGLE_ULONGLONG(0);
  clear_has_manifest_id_source();
}
inline ::google::protobuf::uint64 ContentDeltaChunks::manifest_id_source() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.manifest_id_source)
  return manifest_id_source_;
}
inline void ContentDeltaChunks::set_manifest_id_source(::google::protobuf::uint64 value) {
  set_has_manifest_id_source();
  manifest_id_source_ = value;
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.manifest_id_source)
}

// optional uint64 manifest_id_target = 3;
inline bool ContentDeltaChunks::has_manifest_id_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentDeltaChunks::set_has_manifest_id_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentDeltaChunks::clear_has_manifest_id_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentDeltaChunks::clear_manifest_id_target() {
  manifest_id_target_ = GOOGLE_ULONGLONG(0);
  clear_has_manifest_id_target();
}
inline ::google::protobuf::uint64 ContentDeltaChunks::manifest_id_target() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.manifest_id_target)
  return manifest_id_target_;
}
inline void ContentDeltaChunks::set_manifest_id_target(::google::protobuf::uint64 value) {
  set_has_manifest_id_target();
  manifest_id_target_ = value;
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.manifest_id_target)
}

// repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
inline int ContentDeltaChunks::deltachunks_size() const {
  return deltachunks_.size();
}
inline void ContentDeltaChunks::clear_deltachunks() {
  deltachunks_.Clear();
}
inline ::ContentDeltaChunks_DeltaChunk* ContentDeltaChunks::mutable_deltachunks(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.deltaChunks)
  return deltachunks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >*
ContentDeltaChunks::mutable_deltachunks() {
  // @@protoc_insertion_point(field_mutable_list:ContentDeltaChunks.deltaChunks)
  return &deltachunks_;
}
inline const ::ContentDeltaChunks_DeltaChunk& ContentDeltaChunks::deltachunks(int index) const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.deltaChunks)
  return deltachunks_.Get(index);
}
inline ::ContentDeltaChunks_DeltaChunk* ContentDeltaChunks::add_deltachunks() {
  // @@protoc_insertion_point(field_add:ContentDeltaChunks.deltaChunks)
  return deltachunks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >&
ContentDeltaChunks::deltachunks() const {
  // @@protoc_insertion_point(field_list:ContentDeltaChunks.deltaChunks)
  return deltachunks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_content_5fmanifest_2eproto
