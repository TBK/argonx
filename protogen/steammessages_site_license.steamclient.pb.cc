// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_site_license.steamclient.proto

#include "steammessages_site_license.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteManagerClient_IncomingClient_Request>
      _instance;
} _CSiteManagerClient_IncomingClient_Request_default_instance_;
class CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteManagerClient_IncomingClient_Response>
      _instance;
} _CSiteManagerClient_IncomingClient_Response_default_instance_;
class CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Notification>
      _instance;
} _CSiteLicense_ClientSeatCheckout_Notification_default_instance_;
class CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_InitiateAssociation_Request>
      _instance;
} _CSiteLicense_InitiateAssociation_Request_default_instance_;
class CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_InitiateAssociation_Response>
      _instance;
} _CSiteLicense_InitiateAssociation_Response_default_instance_;
class CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAuthenticate_Request>
      _instance;
} _CSiteLicense_LCSAuthenticate_Request_default_instance_;
class CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAuthenticate_Response>
      _instance;
} _CSiteLicense_LCSAuthenticate_Response_default_instance_;
class CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAssociateUser_Request>
      _instance;
} _CSiteLicense_LCSAssociateUser_Request_default_instance_;
class CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAssociateUser_Response>
      _instance;
} _CSiteLicense_LCSAssociateUser_Response_default_instance_;
class CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Request>
      _instance;
} _CSiteLicense_ClientSeatCheckout_Request_default_instance_;
class CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Response>
      _instance;
} _CSiteLicense_ClientSeatCheckout_Response_default_instance_;
class CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientGetAvailableSeats_Request>
      _instance;
} _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_;
class CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientGetAvailableSeats_Response>
      _instance;
} _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_;
namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto {
static void InitDefaultsCSiteManagerClient_IncomingClient_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteManagerClient_IncomingClient_Request_default_instance_;
    new (ptr) ::CSiteManagerClient_IncomingClient_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteManagerClient_IncomingClient_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteManagerClient_IncomingClient_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteManagerClient_IncomingClient_Request}, {}};

static void InitDefaultsCSiteManagerClient_IncomingClient_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteManagerClient_IncomingClient_Response_default_instance_;
    new (ptr) ::CSiteManagerClient_IncomingClient_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteManagerClient_IncomingClient_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteManagerClient_IncomingClient_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteManagerClient_IncomingClient_Response}, {}};

static void InitDefaultsCSiteLicense_ClientSeatCheckout_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_ClientSeatCheckout_Notification_default_instance_;
    new (ptr) ::CSiteLicense_ClientSeatCheckout_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_ClientSeatCheckout_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_ClientSeatCheckout_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_ClientSeatCheckout_Notification}, {}};

static void InitDefaultsCSiteLicense_InitiateAssociation_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_InitiateAssociation_Request_default_instance_;
    new (ptr) ::CSiteLicense_InitiateAssociation_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_InitiateAssociation_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_InitiateAssociation_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_InitiateAssociation_Request}, {}};

static void InitDefaultsCSiteLicense_InitiateAssociation_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_InitiateAssociation_Response_default_instance_;
    new (ptr) ::CSiteLicense_InitiateAssociation_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_InitiateAssociation_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_InitiateAssociation_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_InitiateAssociation_Response}, {}};

static void InitDefaultsCSiteLicense_LCSAuthenticate_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_LCSAuthenticate_Request_default_instance_;
    new (ptr) ::CSiteLicense_LCSAuthenticate_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_LCSAuthenticate_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_LCSAuthenticate_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_LCSAuthenticate_Request}, {}};

static void InitDefaultsCSiteLicense_LCSAuthenticate_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_LCSAuthenticate_Response_default_instance_;
    new (ptr) ::CSiteLicense_LCSAuthenticate_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_LCSAuthenticate_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_LCSAuthenticate_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_LCSAuthenticate_Response}, {}};

static void InitDefaultsCSiteLicense_LCSAssociateUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_LCSAssociateUser_Request_default_instance_;
    new (ptr) ::CSiteLicense_LCSAssociateUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_LCSAssociateUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_LCSAssociateUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_LCSAssociateUser_Request}, {}};

static void InitDefaultsCSiteLicense_LCSAssociateUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_LCSAssociateUser_Response_default_instance_;
    new (ptr) ::CSiteLicense_LCSAssociateUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_LCSAssociateUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_LCSAssociateUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_LCSAssociateUser_Response}, {}};

static void InitDefaultsCSiteLicense_ClientSeatCheckout_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_ClientSeatCheckout_Request_default_instance_;
    new (ptr) ::CSiteLicense_ClientSeatCheckout_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_ClientSeatCheckout_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_ClientSeatCheckout_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_ClientSeatCheckout_Request}, {}};

static void InitDefaultsCSiteLicense_ClientSeatCheckout_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_ClientSeatCheckout_Response_default_instance_;
    new (ptr) ::CSiteLicense_ClientSeatCheckout_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_ClientSeatCheckout_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_ClientSeatCheckout_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_ClientSeatCheckout_Response}, {}};

static void InitDefaultsCSiteLicense_ClientGetAvailableSeats_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_ClientGetAvailableSeats_Request_default_instance_;
    new (ptr) ::CSiteLicense_ClientGetAvailableSeats_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_ClientGetAvailableSeats_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_ClientGetAvailableSeats_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_ClientGetAvailableSeats_Request}, {}};

static void InitDefaultsCSiteLicense_ClientGetAvailableSeats_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSiteLicense_ClientGetAvailableSeats_Response_default_instance_;
    new (ptr) ::CSiteLicense_ClientGetAvailableSeats_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSiteLicense_ClientGetAvailableSeats_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSiteLicense_ClientGetAvailableSeats_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSiteLicense_ClientGetAvailableSeats_Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteManagerClient_IncomingClient_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteManagerClient_IncomingClient_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_ClientSeatCheckout_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_InitiateAssociation_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_InitiateAssociation_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_LCSAuthenticate_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_LCSAuthenticate_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_LCSAssociateUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_LCSAssociateUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_ClientSeatCheckout_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_ClientSeatCheckout_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_ClientGetAvailableSeats_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSiteLicense_ClientGetAvailableSeats_Response.base);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, site_instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, client_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, client_local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, connection_key_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, eresult_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, site_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, site_instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, client_local_ip_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Response, connection_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Request, instanceid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, site_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, site_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, new_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, no_site_licenses_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, machine_name_),
  1,
  3,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, appid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, appid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Response, available_seats_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CSiteManagerClient_IncomingClient_Request)},
  { 13, 18, sizeof(::CSiteManagerClient_IncomingClient_Response)},
  { 18, 25, sizeof(::CSiteLicense_ClientSeatCheckout_Notification)},
  { 27, 35, sizeof(::CSiteLicense_InitiateAssociation_Request)},
  { 38, 44, sizeof(::CSiteLicense_InitiateAssociation_Response)},
  { 45, 51, sizeof(::CSiteLicense_LCSAuthenticate_Request)},
  { 52, 61, sizeof(::CSiteLicense_LCSAuthenticate_Response)},
  { 65, 74, sizeof(::CSiteLicense_LCSAssociateUser_Request)},
  { 78, 83, sizeof(::CSiteLicense_LCSAssociateUser_Response)},
  { 83, 91, sizeof(::CSiteLicense_ClientSeatCheckout_Request)},
  { 94, 99, sizeof(::CSiteLicense_ClientSeatCheckout_Response)},
  { 99, 107, sizeof(::CSiteLicense_ClientGetAvailableSeats_Request)},
  { 110, 116, sizeof(::CSiteLicense_ClientGetAvailableSeats_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteManagerClient_IncomingClient_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteManagerClient_IncomingClient_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_ClientSeatCheckout_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_InitiateAssociation_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_InitiateAssociation_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_LCSAuthenticate_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_LCSAuthenticate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_LCSAssociateUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_LCSAssociateUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_ClientSeatCheckout_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_ClientSeatCheckout_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_ClientGetAvailableSeats_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSiteLicense_ClientGetAvailableSeats_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_site_license.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n,steammessages_site_license.steamclient"
      ".proto\032,steammessages_unified_base.steam"
      "client.proto\"\215\001\n)CSiteManagerClient_Inco"
      "mingClient_Request\022\027\n\017site_instanceid\030\001 "
      "\001(\006\022\026\n\016client_steamid\030\002 \001(\006\022\027\n\017client_lo"
      "cal_ip\030\003 \001(\007\022\026\n\016connection_key\030\004 \001(\014\",\n*"
      "CSiteManagerClient_IncomingClient_Respon"
      "se\"N\n,CSiteLicense_ClientSeatCheckout_No"
      "tification\022\r\n\005appid\030\001 \001(\r\022\017\n\007eresult\030\002 \001"
      "(\r\"r\n(CSiteLicense_InitiateAssociation_R"
      "equest\022\024\n\014site_steamid\030\001 \001(\006\022\027\n\017site_ins"
      "tanceid\030\002 \001(\006\022\027\n\017client_local_ip\030\003 \001(\007\"C"
      "\n)CSiteLicense_InitiateAssociation_Respo"
      "nse\022\026\n\016connection_key\030\001 \001(\014\":\n$CSiteLice"
      "nse_LCSAuthenticate_Request\022\022\n\ninstancei"
      "d\030\001 \001(\006\"z\n%CSiteLicense_LCSAuthenticate_"
      "Response\022\017\n\007site_id\030\001 \001(\004\022\021\n\tsite_name\030\002"
      " \001(\t\022\023\n\013new_session\030\003 \001(\010\022\030\n\020no_site_lic"
      "enses\030\004 \001(\010\"t\n%CSiteLicense_LCSAssociate"
      "User_Request\022\017\n\007steamid\030\001 \001(\006\022\020\n\010local_i"
      "p\030\002 \001(\007\022\022\n\ninstanceid\030\003 \001(\006\022\024\n\014machine_n"
      "ame\030\004 \001(\t\"(\n&CSiteLicense_LCSAssociateUs"
      "er_Response\"]\n\'CSiteLicense_ClientSeatCh"
      "eckout_Request\022\017\n\007steamid\030\001 \001(\006\022\022\n\ninsta"
      "nceid\030\002 \001(\006\022\r\n\005appid\030\003 \001(\r\"*\n(CSiteLicen"
      "se_ClientSeatCheckout_Response\"b\n,CSiteL"
      "icense_ClientGetAvailableSeats_Request\022\017"
      "\n\007steamid\030\001 \001(\006\022\022\n\ninstanceid\030\002 \001(\006\022\r\n\005a"
      "ppid\030\003 \001(\r\"H\n-CSiteLicense_ClientGetAvai"
      "lableSeats_Response\022\027\n\017available_seats\030\001"
      " \001(\r2\206\003\n\021SiteManagerClient\022\257\001\n\016IncomingC"
      "lient\022*.CSiteManagerClient_IncomingClien"
      "t_Request\032+.CSiteManagerClient_IncomingC"
      "lient_Response\"D\202\265\030@Rack informing site "
      "manager of new inbound client PSK connec"
      "tion\022\223\001\n\036ClientSeatCheckoutNotification\022"
      "-.CSiteLicense_ClientSeatCheckout_Notifi"
      "cation\032\013.NoResponse\"5\202\265\0301Notify client d"
      "irectly about seat checkout result\032)\202\265\030!"
      "Local site manager client service\300\265\030\0022\325\006"
      "\n\013SiteLicense\022\244\001\n\023InitiateAssociation\022)."
      "CSiteLicense_InitiateAssociation_Request"
      "\032*.CSiteLicense_InitiateAssociation_Resp"
      "onse\"6\202\265\0302Client is requesting connetion"
      " info for local site\022\206\001\n\017LCSAuthenticate"
      "\022%.CSiteLicense_LCSAuthenticate_Request\032"
      "&.CSiteLicense_LCSAuthenticate_Response\""
      "$\202\265\030 Local cafe server authentication\022\235\001"
      "\n\020LCSAssociateUser\022&.CSiteLicense_LCSAss"
      "ociateUser_Request\032\'.CSiteLicense_LCSAss"
      "ociateUser_Response\"8\202\265\0304Local cafe serv"
      "er wants to grant user access to site\022\236\001"
      "\n\022ClientSeatCheckout\022(.CSiteLicense_Clie"
      "ntSeatCheckout_Request\032).CSiteLicense_Cl"
      "ientSeatCheckout_Response\"3\202\265\030/Client is"
      " requesting use of a site license seat\022\272"
      "\001\n\027ClientGetAvailableSeats\022-.CSiteLicens"
      "e_ClientGetAvailableSeats_Request\032..CSit"
      "eLicense_ClientGetAvailableSeats_Respons"
      "e\"@\202\265\030<Client is requesting the number o"
      "f currently available seats\032\030\202\265\030\024Site Li"
      "cense serviceB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_site_license.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto

// ===================================================================

void CSiteManagerClient_IncomingClient_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteManagerClient_IncomingClient_Request::kSiteInstanceidFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kClientSteamidFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kClientLocalIpFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kConnectionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteManagerClient_IncomingClient_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteManagerClient_IncomingClient_Request)
}
CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request(const CSiteManagerClient_IncomingClient_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_key()) {
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
  ::memcpy(&site_instanceid_, &from.site_instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_instanceid_)) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:CSiteManagerClient_IncomingClient_Request)
}

void CSiteManagerClient_IncomingClient_Request::SharedCtor() {
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&site_instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_local_ip_) -
      reinterpret_cast<char*>(&site_instanceid_)) + sizeof(client_local_ip_));
}

CSiteManagerClient_IncomingClient_Request::~CSiteManagerClient_IncomingClient_Request() {
  // @@protoc_insertion_point(destructor:CSiteManagerClient_IncomingClient_Request)
  SharedDtor();
}

void CSiteManagerClient_IncomingClient_Request::SharedDtor() {
  connection_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteManagerClient_IncomingClient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteManagerClient_IncomingClient_Request::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteManagerClient_IncomingClient_Request& CSiteManagerClient_IncomingClient_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteManagerClient_IncomingClient_Request.base);
  return *internal_default_instance();
}


void CSiteManagerClient_IncomingClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&site_instanceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_local_ip_) -
        reinterpret_cast<char*>(&site_instanceid_)) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteManagerClient_IncomingClient_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteManagerClient_IncomingClient_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 site_instanceid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_site_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_client_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_client_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes connection_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteManagerClient_IncomingClient_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteManagerClient_IncomingClient_Request)
  return false;
#undef DO_
}

void CSiteManagerClient_IncomingClient_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_instanceid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->site_instanceid(), output);
  }

  // optional fixed64 client_steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->client_steamid(), output);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_local_ip(), output);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->connection_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteManagerClient_IncomingClient_Request)
}

::google::protobuf::uint8* CSiteManagerClient_IncomingClient_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_instanceid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->site_instanceid(), target);
  }

  // optional fixed64 client_steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->client_steamid(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_local_ip(), target);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->connection_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteManagerClient_IncomingClient_Request)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteManagerClient_IncomingClient_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes connection_key = 4;
    if (has_connection_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_key());
    }

    // optional fixed64 site_instanceid = 1;
    if (has_site_instanceid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 client_steamid = 2;
    if (has_client_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 3;
    if (has_client_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteManagerClient_IncomingClient_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteManagerClient_IncomingClient_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteManagerClient_IncomingClient_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteManagerClient_IncomingClient_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteManagerClient_IncomingClient_Request)
    MergeFrom(*source);
  }
}

void CSiteManagerClient_IncomingClient_Request::MergeFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connection_key();
      connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_instanceid_ = from.site_instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_steamid_ = from.client_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Request::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Request::Swap(CSiteManagerClient_IncomingClient_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteManagerClient_IncomingClient_Request::InternalSwap(CSiteManagerClient_IncomingClient_Request* other) {
  using std::swap;
  connection_key_.Swap(&other->connection_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(site_instanceid_, other->site_instanceid_);
  swap(client_steamid_, other->client_steamid_);
  swap(client_local_ip_, other->client_local_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteManagerClient_IncomingClient_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteManagerClient_IncomingClient_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteManagerClient_IncomingClient_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteManagerClient_IncomingClient_Response)
}
CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response(const CSiteManagerClient_IncomingClient_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSiteManagerClient_IncomingClient_Response)
}

void CSiteManagerClient_IncomingClient_Response::SharedCtor() {
}

CSiteManagerClient_IncomingClient_Response::~CSiteManagerClient_IncomingClient_Response() {
  // @@protoc_insertion_point(destructor:CSiteManagerClient_IncomingClient_Response)
  SharedDtor();
}

void CSiteManagerClient_IncomingClient_Response::SharedDtor() {
}

void CSiteManagerClient_IncomingClient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteManagerClient_IncomingClient_Response::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteManagerClient_IncomingClient_Response& CSiteManagerClient_IncomingClient_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteManagerClient_IncomingClient_Response.base);
  return *internal_default_instance();
}


void CSiteManagerClient_IncomingClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteManagerClient_IncomingClient_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteManagerClient_IncomingClient_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteManagerClient_IncomingClient_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteManagerClient_IncomingClient_Response)
  return false;
#undef DO_
}

void CSiteManagerClient_IncomingClient_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteManagerClient_IncomingClient_Response)
}

::google::protobuf::uint8* CSiteManagerClient_IncomingClient_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteManagerClient_IncomingClient_Response)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteManagerClient_IncomingClient_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteManagerClient_IncomingClient_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteManagerClient_IncomingClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteManagerClient_IncomingClient_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteManagerClient_IncomingClient_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteManagerClient_IncomingClient_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteManagerClient_IncomingClient_Response)
    MergeFrom(*source);
  }
}

void CSiteManagerClient_IncomingClient_Response::MergeFrom(const CSiteManagerClient_IncomingClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteManagerClient_IncomingClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteManagerClient_IncomingClient_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteManagerClient_IncomingClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteManagerClient_IncomingClient_Response::CopyFrom(const CSiteManagerClient_IncomingClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteManagerClient_IncomingClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Response::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Response::Swap(CSiteManagerClient_IncomingClient_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteManagerClient_IncomingClient_Response::InternalSwap(CSiteManagerClient_IncomingClient_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteManagerClient_IncomingClient_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_ClientSeatCheckout_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSeatCheckout_Notification::kAppidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Notification::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Notification::CSiteLicense_ClientSeatCheckout_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientSeatCheckout_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_ClientSeatCheckout_Notification)
}
CSiteLicense_ClientSeatCheckout_Notification::CSiteLicense_ClientSeatCheckout_Notification(const CSiteLicense_ClientSeatCheckout_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientSeatCheckout_Notification)
}

void CSiteLicense_ClientSeatCheckout_Notification::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eresult_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(eresult_));
}

CSiteLicense_ClientSeatCheckout_Notification::~CSiteLicense_ClientSeatCheckout_Notification() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientSeatCheckout_Notification)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Notification::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Notification::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Notification& CSiteLicense_ClientSeatCheckout_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientSeatCheckout_Notification.base);
  return *internal_default_instance();
}


void CSiteLicense_ClientSeatCheckout_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientSeatCheckout_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eresult_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_ClientSeatCheckout_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_ClientSeatCheckout_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_ClientSeatCheckout_Notification)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_ClientSeatCheckout_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_ClientSeatCheckout_Notification)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientSeatCheckout_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientSeatCheckout_Notification)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientSeatCheckout_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_ClientSeatCheckout_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_ClientSeatCheckout_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_ClientSeatCheckout_Notification)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Notification::MergeFrom(const CSiteLicense_ClientSeatCheckout_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientSeatCheckout_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientSeatCheckout_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_ClientSeatCheckout_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Notification::CopyFrom(const CSiteLicense_ClientSeatCheckout_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientSeatCheckout_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Notification::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Notification::Swap(CSiteLicense_ClientSeatCheckout_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Notification::InternalSwap(CSiteLicense_ClientSeatCheckout_Notification* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(eresult_, other->eresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Notification::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_InitiateAssociation_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_InitiateAssociation_Request::kSiteSteamidFieldNumber;
const int CSiteLicense_InitiateAssociation_Request::kSiteInstanceidFieldNumber;
const int CSiteLicense_InitiateAssociation_Request::kClientLocalIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_InitiateAssociation_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_InitiateAssociation_Request)
}
CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request(const CSiteLicense_InitiateAssociation_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&site_steamid_, &from.site_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_)) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_InitiateAssociation_Request)
}

void CSiteLicense_InitiateAssociation_Request::SharedCtor() {
  ::memset(&site_steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_local_ip_) -
      reinterpret_cast<char*>(&site_steamid_)) + sizeof(client_local_ip_));
}

CSiteLicense_InitiateAssociation_Request::~CSiteLicense_InitiateAssociation_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_InitiateAssociation_Request)
  SharedDtor();
}

void CSiteLicense_InitiateAssociation_Request::SharedDtor() {
}

void CSiteLicense_InitiateAssociation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_InitiateAssociation_Request::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_InitiateAssociation_Request& CSiteLicense_InitiateAssociation_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_InitiateAssociation_Request.base);
  return *internal_default_instance();
}


void CSiteLicense_InitiateAssociation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&site_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_local_ip_) -
        reinterpret_cast<char*>(&site_steamid_)) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_InitiateAssociation_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_InitiateAssociation_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 site_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_site_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 site_instanceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_site_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_client_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_InitiateAssociation_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_InitiateAssociation_Request)
  return false;
#undef DO_
}

void CSiteLicense_InitiateAssociation_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->site_steamid(), output);
  }

  // optional fixed64 site_instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->site_instanceid(), output);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_local_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_InitiateAssociation_Request)
}

::google::protobuf::uint8* CSiteLicense_InitiateAssociation_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->site_steamid(), target);
  }

  // optional fixed64 site_instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->site_instanceid(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_local_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_InitiateAssociation_Request)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_InitiateAssociation_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 site_steamid = 1;
    if (has_site_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 site_instanceid = 2;
    if (has_site_instanceid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 3;
    if (has_client_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_InitiateAssociation_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_InitiateAssociation_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_InitiateAssociation_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_InitiateAssociation_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_InitiateAssociation_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_InitiateAssociation_Request::MergeFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      site_steamid_ = from.site_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      site_instanceid_ = from.site_instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Request::Swap(CSiteLicense_InitiateAssociation_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_InitiateAssociation_Request::InternalSwap(CSiteLicense_InitiateAssociation_Request* other) {
  using std::swap;
  swap(site_steamid_, other->site_steamid_);
  swap(site_instanceid_, other->site_instanceid_);
  swap(client_local_ip_, other->client_local_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_InitiateAssociation_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_InitiateAssociation_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_InitiateAssociation_Response::kConnectionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_InitiateAssociation_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_InitiateAssociation_Response)
}
CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response(const CSiteLicense_InitiateAssociation_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_key()) {
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_InitiateAssociation_Response)
}

void CSiteLicense_InitiateAssociation_Response::SharedCtor() {
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSiteLicense_InitiateAssociation_Response::~CSiteLicense_InitiateAssociation_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_InitiateAssociation_Response)
  SharedDtor();
}

void CSiteLicense_InitiateAssociation_Response::SharedDtor() {
  connection_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_InitiateAssociation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_InitiateAssociation_Response::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_InitiateAssociation_Response& CSiteLicense_InitiateAssociation_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_InitiateAssociation_Response.base);
  return *internal_default_instance();
}


void CSiteLicense_InitiateAssociation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_InitiateAssociation_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_InitiateAssociation_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes connection_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_InitiateAssociation_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_InitiateAssociation_Response)
  return false;
#undef DO_
}

void CSiteLicense_InitiateAssociation_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->connection_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_InitiateAssociation_Response)
}

::google::protobuf::uint8* CSiteLicense_InitiateAssociation_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->connection_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_InitiateAssociation_Response)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_InitiateAssociation_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes connection_key = 1;
  if (has_connection_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->connection_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_InitiateAssociation_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_InitiateAssociation_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_InitiateAssociation_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_InitiateAssociation_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_InitiateAssociation_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_InitiateAssociation_Response::MergeFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_key()) {
    set_has_connection_key();
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Response::Swap(CSiteLicense_InitiateAssociation_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_InitiateAssociation_Response::InternalSwap(CSiteLicense_InitiateAssociation_Response* other) {
  using std::swap;
  connection_key_.Swap(&other->connection_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_InitiateAssociation_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_LCSAuthenticate_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAuthenticate_Request::kInstanceidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAuthenticate_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_LCSAuthenticate_Request)
}
CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request(const CSiteLicense_LCSAuthenticate_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instanceid_ = from.instanceid_;
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAuthenticate_Request)
}

void CSiteLicense_LCSAuthenticate_Request::SharedCtor() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}

CSiteLicense_LCSAuthenticate_Request::~CSiteLicense_LCSAuthenticate_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAuthenticate_Request)
  SharedDtor();
}

void CSiteLicense_LCSAuthenticate_Request::SharedDtor() {
}

void CSiteLicense_LCSAuthenticate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAuthenticate_Request::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAuthenticate_Request& CSiteLicense_LCSAuthenticate_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAuthenticate_Request.base);
  return *internal_default_instance();
}


void CSiteLicense_LCSAuthenticate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instanceid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAuthenticate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_LCSAuthenticate_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 instanceid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_LCSAuthenticate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_LCSAuthenticate_Request)
  return false;
#undef DO_
}

void CSiteLicense_LCSAuthenticate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 instanceid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->instanceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_LCSAuthenticate_Request)
}

::google::protobuf::uint8* CSiteLicense_LCSAuthenticate_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 instanceid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->instanceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAuthenticate_Request)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAuthenticate_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 instanceid = 1;
  if (has_instanceid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAuthenticate_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAuthenticate_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_LCSAuthenticate_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_LCSAuthenticate_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instanceid()) {
    set_instanceid(from.instanceid());
  }
}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Request::Swap(CSiteLicense_LCSAuthenticate_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAuthenticate_Request::InternalSwap(CSiteLicense_LCSAuthenticate_Request* other) {
  using std::swap;
  swap(instanceid_, other->instanceid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_LCSAuthenticate_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_LCSAuthenticate_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAuthenticate_Response::kSiteIdFieldNumber;
const int CSiteLicense_LCSAuthenticate_Response::kSiteNameFieldNumber;
const int CSiteLicense_LCSAuthenticate_Response::kNewSessionFieldNumber;
const int CSiteLicense_LCSAuthenticate_Response::kNoSiteLicensesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAuthenticate_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_LCSAuthenticate_Response)
}
CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response(const CSiteLicense_LCSAuthenticate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  ::memcpy(&site_id_, &from.site_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_site_licenses_) -
    reinterpret_cast<char*>(&site_id_)) + sizeof(no_site_licenses_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAuthenticate_Response)
}

void CSiteLicense_LCSAuthenticate_Response::SharedCtor() {
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&site_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_site_licenses_) -
      reinterpret_cast<char*>(&site_id_)) + sizeof(no_site_licenses_));
}

CSiteLicense_LCSAuthenticate_Response::~CSiteLicense_LCSAuthenticate_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAuthenticate_Response)
  SharedDtor();
}

void CSiteLicense_LCSAuthenticate_Response::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_LCSAuthenticate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAuthenticate_Response::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAuthenticate_Response& CSiteLicense_LCSAuthenticate_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAuthenticate_Response.base);
  return *internal_default_instance();
}


void CSiteLicense_LCSAuthenticate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    site_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&site_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_site_licenses_) -
        reinterpret_cast<char*>(&site_id_)) + sizeof(no_site_licenses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAuthenticate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_LCSAuthenticate_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_site_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), static_cast<int>(this->site_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSiteLicense_LCSAuthenticate_Response.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool new_session = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_new_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_site_licenses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_no_site_licenses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_site_licenses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_LCSAuthenticate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_LCSAuthenticate_Response)
  return false;
#undef DO_
}

void CSiteLicense_LCSAuthenticate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->site_id(), output);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), static_cast<int>(this->site_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSiteLicense_LCSAuthenticate_Response.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_name(), output);
  }

  // optional bool new_session = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->new_session(), output);
  }

  // optional bool no_site_licenses = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->no_site_licenses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_LCSAuthenticate_Response)
}

::google::protobuf::uint8* CSiteLicense_LCSAuthenticate_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), static_cast<int>(this->site_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSiteLicense_LCSAuthenticate_Response.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_name(), target);
  }

  // optional bool new_session = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->new_session(), target);
  }

  // optional bool no_site_licenses = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->no_site_licenses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAuthenticate_Response)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAuthenticate_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string site_name = 2;
    if (has_site_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_name());
    }

    // optional uint64 site_id = 1;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->site_id());
    }

    // optional bool new_session = 3;
    if (has_new_session()) {
      total_size += 1 + 1;
    }

    // optional bool no_site_licenses = 4;
    if (has_no_site_licenses()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAuthenticate_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAuthenticate_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_LCSAuthenticate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_LCSAuthenticate_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_site_name();
      site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_session_ = from.new_session_;
    }
    if (cached_has_bits & 0x00000008u) {
      no_site_licenses_ = from.no_site_licenses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Response::Swap(CSiteLicense_LCSAuthenticate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAuthenticate_Response::InternalSwap(CSiteLicense_LCSAuthenticate_Response* other) {
  using std::swap;
  site_name_.Swap(&other->site_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(site_id_, other->site_id_);
  swap(new_session_, other->new_session_);
  swap(no_site_licenses_, other->no_site_licenses_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_LCSAuthenticate_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_LCSAssociateUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAssociateUser_Request::kSteamidFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kLocalIpFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kInstanceidFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kMachineNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAssociateUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_LCSAssociateUser_Request)
}
CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request(const CSiteLicense_LCSAssociateUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(local_ip_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAssociateUser_Request)
}

void CSiteLicense_LCSAssociateUser_Request::SharedCtor() {
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_ip_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(local_ip_));
}

CSiteLicense_LCSAssociateUser_Request::~CSiteLicense_LCSAssociateUser_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAssociateUser_Request)
  SharedDtor();
}

void CSiteLicense_LCSAssociateUser_Request::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_LCSAssociateUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAssociateUser_Request::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAssociateUser_Request& CSiteLicense_LCSAssociateUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAssociateUser_Request.base);
  return *internal_default_instance();
}


void CSiteLicense_LCSAssociateUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_ip_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAssociateUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_LCSAssociateUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 local_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 instanceid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSiteLicense_LCSAssociateUser_Request.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_LCSAssociateUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_LCSAssociateUser_Request)
  return false;
#undef DO_
}

void CSiteLicense_LCSAssociateUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 local_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->local_ip(), output);
  }

  // optional fixed64 instanceid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->instanceid(), output);
  }

  // optional string machine_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSiteLicense_LCSAssociateUser_Request.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_LCSAssociateUser_Request)
}

::google::protobuf::uint8* CSiteLicense_LCSAssociateUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 local_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->local_ip(), target);
  }

  // optional fixed64 instanceid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->instanceid(), target);
  }

  // optional string machine_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSiteLicense_LCSAssociateUser_Request.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAssociateUser_Request)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAssociateUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string machine_name = 4;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 3;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 local_ip = 2;
    if (has_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAssociateUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAssociateUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_LCSAssociateUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_LCSAssociateUser_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ip_ = from.local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Request::Swap(CSiteLicense_LCSAssociateUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAssociateUser_Request::InternalSwap(CSiteLicense_LCSAssociateUser_Request* other) {
  using std::swap;
  machine_name_.Swap(&other->machine_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(instanceid_, other->instanceid_);
  swap(local_ip_, other->local_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_LCSAssociateUser_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_LCSAssociateUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAssociateUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_LCSAssociateUser_Response)
}
CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response(const CSiteLicense_LCSAssociateUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAssociateUser_Response)
}

void CSiteLicense_LCSAssociateUser_Response::SharedCtor() {
}

CSiteLicense_LCSAssociateUser_Response::~CSiteLicense_LCSAssociateUser_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAssociateUser_Response)
  SharedDtor();
}

void CSiteLicense_LCSAssociateUser_Response::SharedDtor() {
}

void CSiteLicense_LCSAssociateUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAssociateUser_Response::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAssociateUser_Response& CSiteLicense_LCSAssociateUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_LCSAssociateUser_Response.base);
  return *internal_default_instance();
}


void CSiteLicense_LCSAssociateUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAssociateUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_LCSAssociateUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_LCSAssociateUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_LCSAssociateUser_Response)
  return false;
#undef DO_
}

void CSiteLicense_LCSAssociateUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_LCSAssociateUser_Response)
}

::google::protobuf::uint8* CSiteLicense_LCSAssociateUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAssociateUser_Response)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAssociateUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_LCSAssociateUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_LCSAssociateUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAssociateUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAssociateUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_LCSAssociateUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_LCSAssociateUser_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAssociateUser_Response::MergeFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAssociateUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_LCSAssociateUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_LCSAssociateUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAssociateUser_Response::CopyFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAssociateUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Response::Swap(CSiteLicense_LCSAssociateUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAssociateUser_Response::InternalSwap(CSiteLicense_LCSAssociateUser_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_LCSAssociateUser_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_ClientSeatCheckout_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSeatCheckout_Request::kSteamidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kInstanceidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientSeatCheckout_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_ClientSeatCheckout_Request)
}
CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request(const CSiteLicense_ClientSeatCheckout_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientSeatCheckout_Request)
}

void CSiteLicense_ClientSeatCheckout_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CSiteLicense_ClientSeatCheckout_Request::~CSiteLicense_ClientSeatCheckout_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientSeatCheckout_Request)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Request::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Request::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Request& CSiteLicense_ClientSeatCheckout_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientSeatCheckout_Request.base);
  return *internal_default_instance();
}


void CSiteLicense_ClientSeatCheckout_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_ClientSeatCheckout_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 instanceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_ClientSeatCheckout_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_ClientSeatCheckout_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->instanceid(), output);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_ClientSeatCheckout_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientSeatCheckout_Request)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientSeatCheckout_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 2;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_ClientSeatCheckout_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_ClientSeatCheckout_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Request::Swap(CSiteLicense_ClientSeatCheckout_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Request::InternalSwap(CSiteLicense_ClientSeatCheckout_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(instanceid_, other->instanceid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_ClientSeatCheckout_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientSeatCheckout_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_ClientSeatCheckout_Response)
}
CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response(const CSiteLicense_ClientSeatCheckout_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientSeatCheckout_Response)
}

void CSiteLicense_ClientSeatCheckout_Response::SharedCtor() {
}

CSiteLicense_ClientSeatCheckout_Response::~CSiteLicense_ClientSeatCheckout_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientSeatCheckout_Response)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Response::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Response::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Response& CSiteLicense_ClientSeatCheckout_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientSeatCheckout_Response.base);
  return *internal_default_instance();
}


void CSiteLicense_ClientSeatCheckout_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_ClientSeatCheckout_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_ClientSeatCheckout_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_ClientSeatCheckout_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_ClientSeatCheckout_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientSeatCheckout_Response)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientSeatCheckout_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_ClientSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_ClientSeatCheckout_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_ClientSeatCheckout_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Response::MergeFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_ClientSeatCheckout_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_ClientSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Response::CopyFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Response::Swap(CSiteLicense_ClientSeatCheckout_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Response::InternalSwap(CSiteLicense_ClientSeatCheckout_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_ClientGetAvailableSeats_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientGetAvailableSeats_Request::kSteamidFieldNumber;
const int CSiteLicense_ClientGetAvailableSeats_Request::kInstanceidFieldNumber;
const int CSiteLicense_ClientGetAvailableSeats_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientGetAvailableSeats_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_ClientGetAvailableSeats_Request)
}
CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request(const CSiteLicense_ClientGetAvailableSeats_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientGetAvailableSeats_Request)
}

void CSiteLicense_ClientGetAvailableSeats_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CSiteLicense_ClientGetAvailableSeats_Request::~CSiteLicense_ClientGetAvailableSeats_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientGetAvailableSeats_Request)
  SharedDtor();
}

void CSiteLicense_ClientGetAvailableSeats_Request::SharedDtor() {
}

void CSiteLicense_ClientGetAvailableSeats_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientGetAvailableSeats_Request::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientGetAvailableSeats_Request& CSiteLicense_ClientGetAvailableSeats_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientGetAvailableSeats_Request.base);
  return *internal_default_instance();
}


void CSiteLicense_ClientGetAvailableSeats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientGetAvailableSeats_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientGetAvailableSeats_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_ClientGetAvailableSeats_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 instanceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_ClientGetAvailableSeats_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_ClientGetAvailableSeats_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientGetAvailableSeats_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_ClientGetAvailableSeats_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->instanceid(), output);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_ClientGetAvailableSeats_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientGetAvailableSeats_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientGetAvailableSeats_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientGetAvailableSeats_Request)
  return target;
}

size_t CSiteLicense_ClientGetAvailableSeats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientGetAvailableSeats_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 2;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_ClientGetAvailableSeats_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_ClientGetAvailableSeats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientGetAvailableSeats_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientGetAvailableSeats_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_ClientGetAvailableSeats_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_ClientGetAvailableSeats_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientGetAvailableSeats_Request::MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientGetAvailableSeats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientGetAvailableSeats_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_ClientGetAvailableSeats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientGetAvailableSeats_Request::CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientGetAvailableSeats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientGetAvailableSeats_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientGetAvailableSeats_Request::Swap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientGetAvailableSeats_Request::InternalSwap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(instanceid_, other->instanceid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_ClientGetAvailableSeats_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSiteLicense_ClientGetAvailableSeats_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientGetAvailableSeats_Response::kAvailableSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientGetAvailableSeats_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSiteLicense_ClientGetAvailableSeats_Response)
}
CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response(const CSiteLicense_ClientGetAvailableSeats_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  available_seats_ = from.available_seats_;
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientGetAvailableSeats_Response)
}

void CSiteLicense_ClientGetAvailableSeats_Response::SharedCtor() {
  available_seats_ = 0u;
}

CSiteLicense_ClientGetAvailableSeats_Response::~CSiteLicense_ClientGetAvailableSeats_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientGetAvailableSeats_Response)
  SharedDtor();
}

void CSiteLicense_ClientGetAvailableSeats_Response::SharedDtor() {
}

void CSiteLicense_ClientGetAvailableSeats_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientGetAvailableSeats_Response::descriptor() {
  ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientGetAvailableSeats_Response& CSiteLicense_ClientGetAvailableSeats_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::scc_info_CSiteLicense_ClientGetAvailableSeats_Response.base);
  return *internal_default_instance();
}


void CSiteLicense_ClientGetAvailableSeats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientGetAvailableSeats_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_seats_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientGetAvailableSeats_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSiteLicense_ClientGetAvailableSeats_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 available_seats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_available_seats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_seats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSiteLicense_ClientGetAvailableSeats_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSiteLicense_ClientGetAvailableSeats_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientGetAvailableSeats_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSiteLicense_ClientGetAvailableSeats_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 available_seats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->available_seats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSiteLicense_ClientGetAvailableSeats_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientGetAvailableSeats_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientGetAvailableSeats_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 available_seats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->available_seats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientGetAvailableSeats_Response)
  return target;
}

size_t CSiteLicense_ClientGetAvailableSeats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientGetAvailableSeats_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 available_seats = 1;
  if (has_available_seats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->available_seats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSiteLicense_ClientGetAvailableSeats_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSiteLicense_ClientGetAvailableSeats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientGetAvailableSeats_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientGetAvailableSeats_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSiteLicense_ClientGetAvailableSeats_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSiteLicense_ClientGetAvailableSeats_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientGetAvailableSeats_Response::MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientGetAvailableSeats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_available_seats()) {
    set_available_seats(from.available_seats());
  }
}

void CSiteLicense_ClientGetAvailableSeats_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSiteLicense_ClientGetAvailableSeats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientGetAvailableSeats_Response::CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientGetAvailableSeats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientGetAvailableSeats_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientGetAvailableSeats_Response::Swap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientGetAvailableSeats_Response::InternalSwap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
  using std::swap;
  swap(available_seats_, other->available_seats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSiteLicense_ClientGetAvailableSeats_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SiteManagerClient::~SiteManagerClient() {}

const ::google::protobuf::ServiceDescriptor* SiteManagerClient::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* SiteManagerClient::GetDescriptor() {
  return descriptor();
}

void SiteManagerClient::IncomingClient(::google::protobuf::RpcController* controller,
                         const ::CSiteManagerClient_IncomingClient_Request*,
                         ::CSiteManagerClient_IncomingClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IncomingClient() not implemented.");
  done->Run();
}

void SiteManagerClient::ClientSeatCheckoutNotification(::google::protobuf::RpcController* controller,
                         const ::CSiteLicense_ClientSeatCheckout_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSeatCheckoutNotification() not implemented.");
  done->Run();
}

void SiteManagerClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      IncomingClient(controller,
             ::google::protobuf::down_cast<const ::CSiteManagerClient_IncomingClient_Request*>(request),
             ::google::protobuf::down_cast< ::CSiteManagerClient_IncomingClient_Response*>(response),
             done);
      break;
    case 1:
      ClientSeatCheckoutNotification(controller,
             ::google::protobuf::down_cast<const ::CSiteLicense_ClientSeatCheckout_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SiteManagerClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteManagerClient_IncomingClient_Request::default_instance();
    case 1:
      return ::CSiteLicense_ClientSeatCheckout_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SiteManagerClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteManagerClient_IncomingClient_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteManagerClient_Stub::SiteManagerClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteManagerClient_Stub::SiteManagerClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SiteManagerClient_Stub::~SiteManagerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteManagerClient_Stub::IncomingClient(::google::protobuf::RpcController* controller,
                              const ::CSiteManagerClient_IncomingClient_Request* request,
                              ::CSiteManagerClient_IncomingClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SiteManagerClient_Stub::ClientSeatCheckoutNotification(::google::protobuf::RpcController* controller,
                              const ::CSiteLicense_ClientSeatCheckout_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

SiteLicense::~SiteLicense() {}

const ::google::protobuf::ServiceDescriptor* SiteLicense::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* SiteLicense::GetDescriptor() {
  return descriptor();
}

void SiteLicense::InitiateAssociation(::google::protobuf::RpcController* controller,
                         const ::CSiteLicense_InitiateAssociation_Request*,
                         ::CSiteLicense_InitiateAssociation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InitiateAssociation() not implemented.");
  done->Run();
}

void SiteLicense::LCSAuthenticate(::google::protobuf::RpcController* controller,
                         const ::CSiteLicense_LCSAuthenticate_Request*,
                         ::CSiteLicense_LCSAuthenticate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAuthenticate() not implemented.");
  done->Run();
}

void SiteLicense::LCSAssociateUser(::google::protobuf::RpcController* controller,
                         const ::CSiteLicense_LCSAssociateUser_Request*,
                         ::CSiteLicense_LCSAssociateUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAssociateUser() not implemented.");
  done->Run();
}

void SiteLicense::ClientSeatCheckout(::google::protobuf::RpcController* controller,
                         const ::CSiteLicense_ClientSeatCheckout_Request*,
                         ::CSiteLicense_ClientSeatCheckout_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSeatCheckout() not implemented.");
  done->Run();
}

void SiteLicense::ClientGetAvailableSeats(::google::protobuf::RpcController* controller,
                         const ::CSiteLicense_ClientGetAvailableSeats_Request*,
                         ::CSiteLicense_ClientGetAvailableSeats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetAvailableSeats() not implemented.");
  done->Run();
}

void SiteLicense::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      InitiateAssociation(controller,
             ::google::protobuf::down_cast<const ::CSiteLicense_InitiateAssociation_Request*>(request),
             ::google::protobuf::down_cast< ::CSiteLicense_InitiateAssociation_Response*>(response),
             done);
      break;
    case 1:
      LCSAuthenticate(controller,
             ::google::protobuf::down_cast<const ::CSiteLicense_LCSAuthenticate_Request*>(request),
             ::google::protobuf::down_cast< ::CSiteLicense_LCSAuthenticate_Response*>(response),
             done);
      break;
    case 2:
      LCSAssociateUser(controller,
             ::google::protobuf::down_cast<const ::CSiteLicense_LCSAssociateUser_Request*>(request),
             ::google::protobuf::down_cast< ::CSiteLicense_LCSAssociateUser_Response*>(response),
             done);
      break;
    case 3:
      ClientSeatCheckout(controller,
             ::google::protobuf::down_cast<const ::CSiteLicense_ClientSeatCheckout_Request*>(request),
             ::google::protobuf::down_cast< ::CSiteLicense_ClientSeatCheckout_Response*>(response),
             done);
      break;
    case 4:
      ClientGetAvailableSeats(controller,
             ::google::protobuf::down_cast<const ::CSiteLicense_ClientGetAvailableSeats_Request*>(request),
             ::google::protobuf::down_cast< ::CSiteLicense_ClientGetAvailableSeats_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SiteLicense::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteLicense_InitiateAssociation_Request::default_instance();
    case 1:
      return ::CSiteLicense_LCSAuthenticate_Request::default_instance();
    case 2:
      return ::CSiteLicense_LCSAssociateUser_Request::default_instance();
    case 3:
      return ::CSiteLicense_ClientSeatCheckout_Request::default_instance();
    case 4:
      return ::CSiteLicense_ClientGetAvailableSeats_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SiteLicense::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteLicense_InitiateAssociation_Response::default_instance();
    case 1:
      return ::CSiteLicense_LCSAuthenticate_Response::default_instance();
    case 2:
      return ::CSiteLicense_LCSAssociateUser_Response::default_instance();
    case 3:
      return ::CSiteLicense_ClientSeatCheckout_Response::default_instance();
    case 4:
      return ::CSiteLicense_ClientGetAvailableSeats_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteLicense_Stub::SiteLicense_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteLicense_Stub::SiteLicense_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SiteLicense_Stub::~SiteLicense_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteLicense_Stub::InitiateAssociation(::google::protobuf::RpcController* controller,
                              const ::CSiteLicense_InitiateAssociation_Request* request,
                              ::CSiteLicense_InitiateAssociation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAuthenticate(::google::protobuf::RpcController* controller,
                              const ::CSiteLicense_LCSAuthenticate_Request* request,
                              ::CSiteLicense_LCSAuthenticate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAssociateUser(::google::protobuf::RpcController* controller,
                              const ::CSiteLicense_LCSAssociateUser_Request* request,
                              ::CSiteLicense_LCSAssociateUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientSeatCheckout(::google::protobuf::RpcController* controller,
                              const ::CSiteLicense_ClientSeatCheckout_Request* request,
                              ::CSiteLicense_ClientSeatCheckout_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientGetAvailableSeats(::google::protobuf::RpcController* controller,
                              const ::CSiteLicense_ClientGetAvailableSeats_Request* request,
                              ::CSiteLicense_ClientGetAvailableSeats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteManagerClient_IncomingClient_Request* Arena::CreateMaybeMessage< ::CSiteManagerClient_IncomingClient_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteManagerClient_IncomingClient_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteManagerClient_IncomingClient_Response* Arena::CreateMaybeMessage< ::CSiteManagerClient_IncomingClient_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteManagerClient_IncomingClient_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_ClientSeatCheckout_Notification* Arena::CreateMaybeMessage< ::CSiteLicense_ClientSeatCheckout_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_ClientSeatCheckout_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_InitiateAssociation_Request* Arena::CreateMaybeMessage< ::CSiteLicense_InitiateAssociation_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_InitiateAssociation_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_InitiateAssociation_Response* Arena::CreateMaybeMessage< ::CSiteLicense_InitiateAssociation_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_InitiateAssociation_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_LCSAuthenticate_Request* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAuthenticate_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_LCSAuthenticate_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_LCSAuthenticate_Response* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAuthenticate_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_LCSAuthenticate_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_LCSAssociateUser_Request* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAssociateUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_LCSAssociateUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_LCSAssociateUser_Response* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAssociateUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_LCSAssociateUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_ClientSeatCheckout_Request* Arena::CreateMaybeMessage< ::CSiteLicense_ClientSeatCheckout_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_ClientSeatCheckout_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_ClientSeatCheckout_Response* Arena::CreateMaybeMessage< ::CSiteLicense_ClientSeatCheckout_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_ClientSeatCheckout_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_ClientGetAvailableSeats_Request* Arena::CreateMaybeMessage< ::CSiteLicense_ClientGetAvailableSeats_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_ClientGetAvailableSeats_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSiteLicense_ClientGetAvailableSeats_Response* Arena::CreateMaybeMessage< ::CSiteLicense_ClientGetAvailableSeats_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CSiteLicense_ClientGetAvailableSeats_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
