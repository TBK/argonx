// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_econ.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fecon_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fecon_2esteamclient_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fecon_2esteamclient_2eproto 

namespace protobuf_steammessages_5fecon_2esteamclient_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fecon_2esteamclient_2eproto
class CEconItem_Action;
class CEconItem_ActionDefaultTypeInternal;
extern CEconItem_ActionDefaultTypeInternal _CEconItem_Action_default_instance_;
class CEconItem_Description;
class CEconItem_DescriptionDefaultTypeInternal;
extern CEconItem_DescriptionDefaultTypeInternal _CEconItem_Description_default_instance_;
class CEconItem_DescriptionLine;
class CEconItem_DescriptionLineDefaultTypeInternal;
extern CEconItem_DescriptionLineDefaultTypeInternal _CEconItem_DescriptionLine_default_instance_;
class CEconItem_Tag;
class CEconItem_TagDefaultTypeInternal;
extern CEconItem_TagDefaultTypeInternal _CEconItem_Tag_default_instance_;
class CEcon_ClientGetItemShopOverlayAuthURL_Request;
class CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal;
extern CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal _CEcon_ClientGetItemShopOverlayAuthURL_Request_default_instance_;
class CEcon_ClientGetItemShopOverlayAuthURL_Response;
class CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal;
extern CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal _CEcon_ClientGetItemShopOverlayAuthURL_Response_default_instance_;
class CEcon_GetAssetClassInfo_Request;
class CEcon_GetAssetClassInfo_RequestDefaultTypeInternal;
extern CEcon_GetAssetClassInfo_RequestDefaultTypeInternal _CEcon_GetAssetClassInfo_Request_default_instance_;
class CEcon_GetAssetClassInfo_Request_Class;
class CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal;
extern CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal _CEcon_GetAssetClassInfo_Request_Class_default_instance_;
class CEcon_GetAssetClassInfo_Response;
class CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal;
extern CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal _CEcon_GetAssetClassInfo_Response_default_instance_;
class CEcon_GetTradeOfferAccessToken_Request;
class CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal;
extern CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal _CEcon_GetTradeOfferAccessToken_Request_default_instance_;
class CEcon_GetTradeOfferAccessToken_Response;
class CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal;
extern CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal _CEcon_GetTradeOfferAccessToken_Response_default_instance_;
namespace google {
namespace protobuf {
template<> ::CEconItem_Action* Arena::CreateMaybeMessage<::CEconItem_Action>(Arena*);
template<> ::CEconItem_Description* Arena::CreateMaybeMessage<::CEconItem_Description>(Arena*);
template<> ::CEconItem_DescriptionLine* Arena::CreateMaybeMessage<::CEconItem_DescriptionLine>(Arena*);
template<> ::CEconItem_Tag* Arena::CreateMaybeMessage<::CEconItem_Tag>(Arena*);
template<> ::CEcon_ClientGetItemShopOverlayAuthURL_Request* Arena::CreateMaybeMessage<::CEcon_ClientGetItemShopOverlayAuthURL_Request>(Arena*);
template<> ::CEcon_ClientGetItemShopOverlayAuthURL_Response* Arena::CreateMaybeMessage<::CEcon_ClientGetItemShopOverlayAuthURL_Response>(Arena*);
template<> ::CEcon_GetAssetClassInfo_Request* Arena::CreateMaybeMessage<::CEcon_GetAssetClassInfo_Request>(Arena*);
template<> ::CEcon_GetAssetClassInfo_Request_Class* Arena::CreateMaybeMessage<::CEcon_GetAssetClassInfo_Request_Class>(Arena*);
template<> ::CEcon_GetAssetClassInfo_Response* Arena::CreateMaybeMessage<::CEcon_GetAssetClassInfo_Response>(Arena*);
template<> ::CEcon_GetTradeOfferAccessToken_Request* Arena::CreateMaybeMessage<::CEcon_GetTradeOfferAccessToken_Request>(Arena*);
template<> ::CEcon_GetTradeOfferAccessToken_Response* Arena::CreateMaybeMessage<::CEcon_GetTradeOfferAccessToken_Response>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CEcon_GetTradeOfferAccessToken_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_GetTradeOfferAccessToken_Request) */ {
 public:
  CEcon_GetTradeOfferAccessToken_Request();
  virtual ~CEcon_GetTradeOfferAccessToken_Request();

  CEcon_GetTradeOfferAccessToken_Request(const CEcon_GetTradeOfferAccessToken_Request& from);

  inline CEcon_GetTradeOfferAccessToken_Request& operator=(const CEcon_GetTradeOfferAccessToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_GetTradeOfferAccessToken_Request(CEcon_GetTradeOfferAccessToken_Request&& from) noexcept
    : CEcon_GetTradeOfferAccessToken_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_GetTradeOfferAccessToken_Request& operator=(CEcon_GetTradeOfferAccessToken_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_GetTradeOfferAccessToken_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_GetTradeOfferAccessToken_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetTradeOfferAccessToken_Request*>(
               &_CEcon_GetTradeOfferAccessToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CEcon_GetTradeOfferAccessToken_Request* other);
  friend void swap(CEcon_GetTradeOfferAccessToken_Request& a, CEcon_GetTradeOfferAccessToken_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_GetTradeOfferAccessToken_Request* New() const final {
    return CreateMaybeMessage<CEcon_GetTradeOfferAccessToken_Request>(NULL);
  }

  CEcon_GetTradeOfferAccessToken_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_GetTradeOfferAccessToken_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_GetTradeOfferAccessToken_Request& from);
  void MergeFrom(const CEcon_GetTradeOfferAccessToken_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetTradeOfferAccessToken_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool generate_new_token = 1;
  bool has_generate_new_token() const;
  void clear_generate_new_token();
  static const int kGenerateNewTokenFieldNumber = 1;
  bool generate_new_token() const;
  void set_generate_new_token(bool value);

  // @@protoc_insertion_point(class_scope:CEcon_GetTradeOfferAccessToken_Request)
 private:
  void set_has_generate_new_token();
  void clear_has_generate_new_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool generate_new_token_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEcon_GetTradeOfferAccessToken_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_GetTradeOfferAccessToken_Response) */ {
 public:
  CEcon_GetTradeOfferAccessToken_Response();
  virtual ~CEcon_GetTradeOfferAccessToken_Response();

  CEcon_GetTradeOfferAccessToken_Response(const CEcon_GetTradeOfferAccessToken_Response& from);

  inline CEcon_GetTradeOfferAccessToken_Response& operator=(const CEcon_GetTradeOfferAccessToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_GetTradeOfferAccessToken_Response(CEcon_GetTradeOfferAccessToken_Response&& from) noexcept
    : CEcon_GetTradeOfferAccessToken_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_GetTradeOfferAccessToken_Response& operator=(CEcon_GetTradeOfferAccessToken_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_GetTradeOfferAccessToken_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_GetTradeOfferAccessToken_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetTradeOfferAccessToken_Response*>(
               &_CEcon_GetTradeOfferAccessToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CEcon_GetTradeOfferAccessToken_Response* other);
  friend void swap(CEcon_GetTradeOfferAccessToken_Response& a, CEcon_GetTradeOfferAccessToken_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_GetTradeOfferAccessToken_Response* New() const final {
    return CreateMaybeMessage<CEcon_GetTradeOfferAccessToken_Response>(NULL);
  }

  CEcon_GetTradeOfferAccessToken_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_GetTradeOfferAccessToken_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_GetTradeOfferAccessToken_Response& from);
  void MergeFrom(const CEcon_GetTradeOfferAccessToken_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetTradeOfferAccessToken_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string trade_offer_access_token = 1;
  bool has_trade_offer_access_token() const;
  void clear_trade_offer_access_token();
  static const int kTradeOfferAccessTokenFieldNumber = 1;
  const ::std::string& trade_offer_access_token() const;
  void set_trade_offer_access_token(const ::std::string& value);
  #if LANG_CXX11
  void set_trade_offer_access_token(::std::string&& value);
  #endif
  void set_trade_offer_access_token(const char* value);
  void set_trade_offer_access_token(const char* value, size_t size);
  ::std::string* mutable_trade_offer_access_token();
  ::std::string* release_trade_offer_access_token();
  void set_allocated_trade_offer_access_token(::std::string* trade_offer_access_token);

  // @@protoc_insertion_point(class_scope:CEcon_GetTradeOfferAccessToken_Response)
 private:
  void set_has_trade_offer_access_token();
  void clear_has_trade_offer_access_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trade_offer_access_token_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEcon_ClientGetItemShopOverlayAuthURL_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_ClientGetItemShopOverlayAuthURL_Request) */ {
 public:
  CEcon_ClientGetItemShopOverlayAuthURL_Request();
  virtual ~CEcon_ClientGetItemShopOverlayAuthURL_Request();

  CEcon_ClientGetItemShopOverlayAuthURL_Request(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from);

  inline CEcon_ClientGetItemShopOverlayAuthURL_Request& operator=(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_ClientGetItemShopOverlayAuthURL_Request(CEcon_ClientGetItemShopOverlayAuthURL_Request&& from) noexcept
    : CEcon_ClientGetItemShopOverlayAuthURL_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_ClientGetItemShopOverlayAuthURL_Request& operator=(CEcon_ClientGetItemShopOverlayAuthURL_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_ClientGetItemShopOverlayAuthURL_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_ClientGetItemShopOverlayAuthURL_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_ClientGetItemShopOverlayAuthURL_Request*>(
               &_CEcon_ClientGetItemShopOverlayAuthURL_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CEcon_ClientGetItemShopOverlayAuthURL_Request* other);
  friend void swap(CEcon_ClientGetItemShopOverlayAuthURL_Request& a, CEcon_ClientGetItemShopOverlayAuthURL_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_ClientGetItemShopOverlayAuthURL_Request* New() const final {
    return CreateMaybeMessage<CEcon_ClientGetItemShopOverlayAuthURL_Request>(NULL);
  }

  CEcon_ClientGetItemShopOverlayAuthURL_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_ClientGetItemShopOverlayAuthURL_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from);
  void MergeFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_ClientGetItemShopOverlayAuthURL_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string return_url = 1;
  bool has_return_url() const;
  void clear_return_url();
  static const int kReturnUrlFieldNumber = 1;
  const ::std::string& return_url() const;
  void set_return_url(const ::std::string& value);
  #if LANG_CXX11
  void set_return_url(::std::string&& value);
  #endif
  void set_return_url(const char* value);
  void set_return_url(const char* value, size_t size);
  ::std::string* mutable_return_url();
  ::std::string* release_return_url();
  void set_allocated_return_url(::std::string* return_url);

  // @@protoc_insertion_point(class_scope:CEcon_ClientGetItemShopOverlayAuthURL_Request)
 private:
  void set_has_return_url();
  void clear_has_return_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr return_url_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEcon_ClientGetItemShopOverlayAuthURL_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_ClientGetItemShopOverlayAuthURL_Response) */ {
 public:
  CEcon_ClientGetItemShopOverlayAuthURL_Response();
  virtual ~CEcon_ClientGetItemShopOverlayAuthURL_Response();

  CEcon_ClientGetItemShopOverlayAuthURL_Response(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from);

  inline CEcon_ClientGetItemShopOverlayAuthURL_Response& operator=(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_ClientGetItemShopOverlayAuthURL_Response(CEcon_ClientGetItemShopOverlayAuthURL_Response&& from) noexcept
    : CEcon_ClientGetItemShopOverlayAuthURL_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_ClientGetItemShopOverlayAuthURL_Response& operator=(CEcon_ClientGetItemShopOverlayAuthURL_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_ClientGetItemShopOverlayAuthURL_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_ClientGetItemShopOverlayAuthURL_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_ClientGetItemShopOverlayAuthURL_Response*>(
               &_CEcon_ClientGetItemShopOverlayAuthURL_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CEcon_ClientGetItemShopOverlayAuthURL_Response* other);
  friend void swap(CEcon_ClientGetItemShopOverlayAuthURL_Response& a, CEcon_ClientGetItemShopOverlayAuthURL_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_ClientGetItemShopOverlayAuthURL_Response* New() const final {
    return CreateMaybeMessage<CEcon_ClientGetItemShopOverlayAuthURL_Response>(NULL);
  }

  CEcon_ClientGetItemShopOverlayAuthURL_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_ClientGetItemShopOverlayAuthURL_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from);
  void MergeFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_ClientGetItemShopOverlayAuthURL_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:CEcon_ClientGetItemShopOverlayAuthURL_Response)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEcon_GetAssetClassInfo_Request_Class : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_GetAssetClassInfo_Request.Class) */ {
 public:
  CEcon_GetAssetClassInfo_Request_Class();
  virtual ~CEcon_GetAssetClassInfo_Request_Class();

  CEcon_GetAssetClassInfo_Request_Class(const CEcon_GetAssetClassInfo_Request_Class& from);

  inline CEcon_GetAssetClassInfo_Request_Class& operator=(const CEcon_GetAssetClassInfo_Request_Class& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_GetAssetClassInfo_Request_Class(CEcon_GetAssetClassInfo_Request_Class&& from) noexcept
    : CEcon_GetAssetClassInfo_Request_Class() {
    *this = ::std::move(from);
  }

  inline CEcon_GetAssetClassInfo_Request_Class& operator=(CEcon_GetAssetClassInfo_Request_Class&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_GetAssetClassInfo_Request_Class& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_GetAssetClassInfo_Request_Class* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetAssetClassInfo_Request_Class*>(
               &_CEcon_GetAssetClassInfo_Request_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CEcon_GetAssetClassInfo_Request_Class* other);
  friend void swap(CEcon_GetAssetClassInfo_Request_Class& a, CEcon_GetAssetClassInfo_Request_Class& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_GetAssetClassInfo_Request_Class* New() const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Request_Class>(NULL);
  }

  CEcon_GetAssetClassInfo_Request_Class* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Request_Class>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_GetAssetClassInfo_Request_Class& from);
  void MergeFrom(const CEcon_GetAssetClassInfo_Request_Class& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetAssetClassInfo_Request_Class* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 classid = 1;
  bool has_classid() const;
  void clear_classid();
  static const int kClassidFieldNumber = 1;
  ::google::protobuf::uint64 classid() const;
  void set_classid(::google::protobuf::uint64 value);

  // optional uint64 instanceid = 2;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 2;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CEcon_GetAssetClassInfo_Request.Class)
 private:
  void set_has_classid();
  void clear_has_classid();
  void set_has_instanceid();
  void clear_has_instanceid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 classid_;
  ::google::protobuf::uint64 instanceid_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEcon_GetAssetClassInfo_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_GetAssetClassInfo_Request) */ {
 public:
  CEcon_GetAssetClassInfo_Request();
  virtual ~CEcon_GetAssetClassInfo_Request();

  CEcon_GetAssetClassInfo_Request(const CEcon_GetAssetClassInfo_Request& from);

  inline CEcon_GetAssetClassInfo_Request& operator=(const CEcon_GetAssetClassInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_GetAssetClassInfo_Request(CEcon_GetAssetClassInfo_Request&& from) noexcept
    : CEcon_GetAssetClassInfo_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_GetAssetClassInfo_Request& operator=(CEcon_GetAssetClassInfo_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_GetAssetClassInfo_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_GetAssetClassInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetAssetClassInfo_Request*>(
               &_CEcon_GetAssetClassInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CEcon_GetAssetClassInfo_Request* other);
  friend void swap(CEcon_GetAssetClassInfo_Request& a, CEcon_GetAssetClassInfo_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_GetAssetClassInfo_Request* New() const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Request>(NULL);
  }

  CEcon_GetAssetClassInfo_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_GetAssetClassInfo_Request& from);
  void MergeFrom(const CEcon_GetAssetClassInfo_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetAssetClassInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CEcon_GetAssetClassInfo_Request_Class Class;

  // accessors -------------------------------------------------------

  // repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
  int classes_size() const;
  void clear_classes();
  static const int kClassesFieldNumber = 3;
  ::CEcon_GetAssetClassInfo_Request_Class* mutable_classes(int index);
  ::google::protobuf::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >*
      mutable_classes();
  const ::CEcon_GetAssetClassInfo_Request_Class& classes(int index) const;
  ::CEcon_GetAssetClassInfo_Request_Class* add_classes();
  const ::google::protobuf::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >&
      classes() const;

  // optional string language = 1;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 1;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional uint32 appid = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CEcon_GetAssetClassInfo_Request)
 private:
  void set_has_language();
  void clear_has_language();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class > classes_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEconItem_DescriptionLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEconItem_DescriptionLine) */ {
 public:
  CEconItem_DescriptionLine();
  virtual ~CEconItem_DescriptionLine();

  CEconItem_DescriptionLine(const CEconItem_DescriptionLine& from);

  inline CEconItem_DescriptionLine& operator=(const CEconItem_DescriptionLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEconItem_DescriptionLine(CEconItem_DescriptionLine&& from) noexcept
    : CEconItem_DescriptionLine() {
    *this = ::std::move(from);
  }

  inline CEconItem_DescriptionLine& operator=(CEconItem_DescriptionLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEconItem_DescriptionLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEconItem_DescriptionLine* internal_default_instance() {
    return reinterpret_cast<const CEconItem_DescriptionLine*>(
               &_CEconItem_DescriptionLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CEconItem_DescriptionLine* other);
  friend void swap(CEconItem_DescriptionLine& a, CEconItem_DescriptionLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEconItem_DescriptionLine* New() const final {
    return CreateMaybeMessage<CEconItem_DescriptionLine>(NULL);
  }

  CEconItem_DescriptionLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEconItem_DescriptionLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEconItem_DescriptionLine& from);
  void MergeFrom(const CEconItem_DescriptionLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_DescriptionLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string label = 4;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 4;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:CEconItem_DescriptionLine)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_color();
  void clear_has_color();
  void set_has_label();
  void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEconItem_Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEconItem_Action) */ {
 public:
  CEconItem_Action();
  virtual ~CEconItem_Action();

  CEconItem_Action(const CEconItem_Action& from);

  inline CEconItem_Action& operator=(const CEconItem_Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEconItem_Action(CEconItem_Action&& from) noexcept
    : CEconItem_Action() {
    *this = ::std::move(from);
  }

  inline CEconItem_Action& operator=(CEconItem_Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEconItem_Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEconItem_Action* internal_default_instance() {
    return reinterpret_cast<const CEconItem_Action*>(
               &_CEconItem_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CEconItem_Action* other);
  friend void swap(CEconItem_Action& a, CEconItem_Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEconItem_Action* New() const final {
    return CreateMaybeMessage<CEconItem_Action>(NULL);
  }

  CEconItem_Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEconItem_Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEconItem_Action& from);
  void MergeFrom(const CEconItem_Action& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string link = 1;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 1;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CEconItem_Action)
 private:
  void set_has_link();
  void clear_has_link();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEconItem_Description : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEconItem_Description) */ {
 public:
  CEconItem_Description();
  virtual ~CEconItem_Description();

  CEconItem_Description(const CEconItem_Description& from);

  inline CEconItem_Description& operator=(const CEconItem_Description& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEconItem_Description(CEconItem_Description&& from) noexcept
    : CEconItem_Description() {
    *this = ::std::move(from);
  }

  inline CEconItem_Description& operator=(CEconItem_Description&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEconItem_Description& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEconItem_Description* internal_default_instance() {
    return reinterpret_cast<const CEconItem_Description*>(
               &_CEconItem_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CEconItem_Description* other);
  friend void swap(CEconItem_Description& a, CEconItem_Description& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEconItem_Description* New() const final {
    return CreateMaybeMessage<CEconItem_Description>(NULL);
  }

  CEconItem_Description* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEconItem_Description>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEconItem_Description& from);
  void MergeFrom(const CEconItem_Description& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CEconItem_DescriptionLine descriptions = 8;
  int descriptions_size() const;
  void clear_descriptions();
  static const int kDescriptionsFieldNumber = 8;
  ::CEconItem_DescriptionLine* mutable_descriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >*
      mutable_descriptions();
  const ::CEconItem_DescriptionLine& descriptions(int index) const;
  ::CEconItem_DescriptionLine* add_descriptions();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >&
      descriptions() const;

  // repeated .CEconItem_Action actions = 10;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 10;
  ::CEconItem_Action* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >*
      mutable_actions();
  const ::CEconItem_Action& actions(int index) const;
  ::CEconItem_Action* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >&
      actions() const;

  // repeated .CEconItem_DescriptionLine owner_descriptions = 11;
  int owner_descriptions_size() const;
  void clear_owner_descriptions();
  static const int kOwnerDescriptionsFieldNumber = 11;
  ::CEconItem_DescriptionLine* mutable_owner_descriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >*
      mutable_owner_descriptions();
  const ::CEconItem_DescriptionLine& owner_descriptions(int index) const;
  ::CEconItem_DescriptionLine* add_owner_descriptions();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >&
      owner_descriptions() const;

  // repeated .CEconItem_Action owner_actions = 12;
  int owner_actions_size() const;
  void clear_owner_actions();
  static const int kOwnerActionsFieldNumber = 12;
  ::CEconItem_Action* mutable_owner_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >*
      mutable_owner_actions();
  const ::CEconItem_Action& owner_actions(int index) const;
  ::CEconItem_Action* add_owner_actions();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >&
      owner_actions() const;

  // repeated string fraudwarnings = 13;
  int fraudwarnings_size() const;
  void clear_fraudwarnings();
  static const int kFraudwarningsFieldNumber = 13;
  const ::std::string& fraudwarnings(int index) const;
  ::std::string* mutable_fraudwarnings(int index);
  void set_fraudwarnings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fraudwarnings(int index, ::std::string&& value);
  #endif
  void set_fraudwarnings(int index, const char* value);
  void set_fraudwarnings(int index, const char* value, size_t size);
  ::std::string* add_fraudwarnings();
  void add_fraudwarnings(const ::std::string& value);
  #if LANG_CXX11
  void add_fraudwarnings(::std::string&& value);
  #endif
  void add_fraudwarnings(const char* value);
  void add_fraudwarnings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fraudwarnings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fraudwarnings();

  // repeated .CEconItem_Action market_actions = 21;
  int market_actions_size() const;
  void clear_market_actions();
  static const int kMarketActionsFieldNumber = 21;
  ::CEconItem_Action* mutable_market_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >*
      mutable_market_actions();
  const ::CEconItem_Action& market_actions(int index) const;
  ::CEconItem_Action* add_market_actions();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >&
      market_actions() const;

  // repeated .CEconItem_Tag tags = 26;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 26;
  ::CEconItem_Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Tag >*
      mutable_tags();
  const ::CEconItem_Tag& tags(int index) const;
  ::CEconItem_Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_Tag >&
      tags() const;

  // optional string background_color = 5;
  bool has_background_color() const;
  void clear_background_color();
  static const int kBackgroundColorFieldNumber = 5;
  const ::std::string& background_color() const;
  void set_background_color(const ::std::string& value);
  #if LANG_CXX11
  void set_background_color(::std::string&& value);
  #endif
  void set_background_color(const char* value);
  void set_background_color(const char* value, size_t size);
  ::std::string* mutable_background_color();
  ::std::string* release_background_color();
  void set_allocated_background_color(::std::string* background_color);

  // optional string icon_url = 6;
  bool has_icon_url() const;
  void clear_icon_url();
  static const int kIconUrlFieldNumber = 6;
  const ::std::string& icon_url() const;
  void set_icon_url(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_url(::std::string&& value);
  #endif
  void set_icon_url(const char* value);
  void set_icon_url(const char* value, size_t size);
  ::std::string* mutable_icon_url();
  ::std::string* release_icon_url();
  void set_allocated_icon_url(::std::string* icon_url);

  // optional string icon_url_large = 7;
  bool has_icon_url_large() const;
  void clear_icon_url_large();
  static const int kIconUrlLargeFieldNumber = 7;
  const ::std::string& icon_url_large() const;
  void set_icon_url_large(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_url_large(::std::string&& value);
  #endif
  void set_icon_url_large(const char* value);
  void set_icon_url_large(const char* value, size_t size);
  ::std::string* mutable_icon_url_large();
  ::std::string* release_icon_url_large();
  void set_allocated_icon_url_large(::std::string* icon_url_large);

  // optional string name = 14;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 14;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string name_color = 15;
  bool has_name_color() const;
  void clear_name_color();
  static const int kNameColorFieldNumber = 15;
  const ::std::string& name_color() const;
  void set_name_color(const ::std::string& value);
  #if LANG_CXX11
  void set_name_color(::std::string&& value);
  #endif
  void set_name_color(const char* value);
  void set_name_color(const char* value, size_t size);
  ::std::string* mutable_name_color();
  ::std::string* release_name_color();
  void set_allocated_name_color(::std::string* name_color);

  // optional string type = 16;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 16;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string market_name = 17;
  bool has_market_name() const;
  void clear_market_name();
  static const int kMarketNameFieldNumber = 17;
  const ::std::string& market_name() const;
  void set_market_name(const ::std::string& value);
  #if LANG_CXX11
  void set_market_name(::std::string&& value);
  #endif
  void set_market_name(const char* value);
  void set_market_name(const char* value, size_t size);
  ::std::string* mutable_market_name();
  ::std::string* release_market_name();
  void set_allocated_market_name(::std::string* market_name);

  // optional string market_hash_name = 18;
  bool has_market_hash_name() const;
  void clear_market_hash_name();
  static const int kMarketHashNameFieldNumber = 18;
  const ::std::string& market_hash_name() const;
  void set_market_hash_name(const ::std::string& value);
  #if LANG_CXX11
  void set_market_hash_name(::std::string&& value);
  #endif
  void set_market_hash_name(const char* value);
  void set_market_hash_name(const char* value, size_t size);
  ::std::string* mutable_market_hash_name();
  ::std::string* release_market_hash_name();
  void set_allocated_market_hash_name(::std::string* market_hash_name);

  // optional string market_fee = 19;
  bool has_market_fee() const;
  void clear_market_fee();
  static const int kMarketFeeFieldNumber = 19;
  const ::std::string& market_fee() const;
  void set_market_fee(const ::std::string& value);
  #if LANG_CXX11
  void set_market_fee(::std::string&& value);
  #endif
  void set_market_fee(const char* value);
  void set_market_fee(const char* value, size_t size);
  ::std::string* mutable_market_fee();
  ::std::string* release_market_fee();
  void set_allocated_market_fee(::std::string* market_fee);

  // optional string item_expiration = 27;
  bool has_item_expiration() const;
  void clear_item_expiration();
  static const int kItemExpirationFieldNumber = 27;
  const ::std::string& item_expiration() const;
  void set_item_expiration(const ::std::string& value);
  #if LANG_CXX11
  void set_item_expiration(::std::string&& value);
  #endif
  void set_item_expiration(const char* value);
  void set_item_expiration(const char* value, size_t size);
  ::std::string* mutable_item_expiration();
  ::std::string* release_item_expiration();
  void set_allocated_item_expiration(::std::string* item_expiration);

  // optional .CEconItem_Description contained_item = 20;
  bool has_contained_item() const;
  void clear_contained_item();
  static const int kContainedItemFieldNumber = 20;
  private:
  const ::CEconItem_Description& _internal_contained_item() const;
  public:
  const ::CEconItem_Description& contained_item() const;
  ::CEconItem_Description* release_contained_item();
  ::CEconItem_Description* mutable_contained_item();
  void set_allocated_contained_item(::CEconItem_Description* contained_item);

  // optional uint64 classid = 2;
  bool has_classid() const;
  void clear_classid();
  static const int kClassidFieldNumber = 2;
  ::google::protobuf::uint64 classid() const;
  void set_classid(::google::protobuf::uint64 value);

  // optional uint64 instanceid = 3;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 3;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional int32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::int32 appid() const;
  void set_appid(::google::protobuf::int32 value);

  // optional bool currency = 4;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 4;
  bool currency() const;
  void set_currency(bool value);

  // optional bool tradable = 9;
  bool has_tradable() const;
  void clear_tradable();
  static const int kTradableFieldNumber = 9;
  bool tradable() const;
  void set_tradable(bool value);

  // optional bool commodity = 22;
  bool has_commodity() const;
  void clear_commodity();
  static const int kCommodityFieldNumber = 22;
  bool commodity() const;
  void set_commodity(bool value);

  // optional bool marketable = 25;
  bool has_marketable() const;
  void clear_marketable();
  static const int kMarketableFieldNumber = 25;
  bool marketable() const;
  void set_marketable(bool value);

  // optional int32 market_tradable_restriction = 23;
  bool has_market_tradable_restriction() const;
  void clear_market_tradable_restriction();
  static const int kMarketTradableRestrictionFieldNumber = 23;
  ::google::protobuf::int32 market_tradable_restriction() const;
  void set_market_tradable_restriction(::google::protobuf::int32 value);

  // optional int32 market_marketable_restriction = 24;
  bool has_market_marketable_restriction() const;
  void clear_market_marketable_restriction();
  static const int kMarketMarketableRestrictionFieldNumber = 24;
  ::google::protobuf::int32 market_marketable_restriction() const;
  void set_market_marketable_restriction(::google::protobuf::int32 value);

  // optional int32 market_fee_app = 28;
  bool has_market_fee_app() const;
  void clear_market_fee_app();
  static const int kMarketFeeAppFieldNumber = 28;
  ::google::protobuf::int32 market_fee_app() const;
  void set_market_fee_app(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CEconItem_Description)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_classid();
  void clear_has_classid();
  void set_has_instanceid();
  void clear_has_instanceid();
  void set_has_currency();
  void clear_has_currency();
  void set_has_background_color();
  void clear_has_background_color();
  void set_has_icon_url();
  void clear_has_icon_url();
  void set_has_icon_url_large();
  void clear_has_icon_url_large();
  void set_has_tradable();
  void clear_has_tradable();
  void set_has_name();
  void clear_has_name();
  void set_has_name_color();
  void clear_has_name_color();
  void set_has_type();
  void clear_has_type();
  void set_has_market_name();
  void clear_has_market_name();
  void set_has_market_hash_name();
  void clear_has_market_hash_name();
  void set_has_market_fee();
  void clear_has_market_fee();
  void set_has_market_fee_app();
  void clear_has_market_fee_app();
  void set_has_contained_item();
  void clear_has_contained_item();
  void set_has_commodity();
  void clear_has_commodity();
  void set_has_market_tradable_restriction();
  void clear_has_market_tradable_restriction();
  void set_has_market_marketable_restriction();
  void clear_has_market_marketable_restriction();
  void set_has_marketable();
  void clear_has_marketable();
  void set_has_item_expiration();
  void clear_has_item_expiration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine > descriptions_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Action > actions_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine > owner_descriptions_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Action > owner_actions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fraudwarnings_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Action > market_actions_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Tag > tags_;
  ::google::protobuf::internal::ArenaStringPtr background_color_;
  ::google::protobuf::internal::ArenaStringPtr icon_url_;
  ::google::protobuf::internal::ArenaStringPtr icon_url_large_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr name_color_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr market_name_;
  ::google::protobuf::internal::ArenaStringPtr market_hash_name_;
  ::google::protobuf::internal::ArenaStringPtr market_fee_;
  ::google::protobuf::internal::ArenaStringPtr item_expiration_;
  ::CEconItem_Description* contained_item_;
  ::google::protobuf::uint64 classid_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::int32 appid_;
  bool currency_;
  bool tradable_;
  bool commodity_;
  bool marketable_;
  ::google::protobuf::int32 market_tradable_restriction_;
  ::google::protobuf::int32 market_marketable_restriction_;
  ::google::protobuf::int32 market_fee_app_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEconItem_Tag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEconItem_Tag) */ {
 public:
  CEconItem_Tag();
  virtual ~CEconItem_Tag();

  CEconItem_Tag(const CEconItem_Tag& from);

  inline CEconItem_Tag& operator=(const CEconItem_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEconItem_Tag(CEconItem_Tag&& from) noexcept
    : CEconItem_Tag() {
    *this = ::std::move(from);
  }

  inline CEconItem_Tag& operator=(CEconItem_Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEconItem_Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEconItem_Tag* internal_default_instance() {
    return reinterpret_cast<const CEconItem_Tag*>(
               &_CEconItem_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CEconItem_Tag* other);
  friend void swap(CEconItem_Tag& a, CEconItem_Tag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEconItem_Tag* New() const final {
    return CreateMaybeMessage<CEconItem_Tag>(NULL);
  }

  CEconItem_Tag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEconItem_Tag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEconItem_Tag& from);
  void MergeFrom(const CEconItem_Tag& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_Tag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // optional string internal_name = 3 [(.description) = "The internal name of the tag"];
  bool has_internal_name() const;
  void clear_internal_name();
  static const int kInternalNameFieldNumber = 3;
  const ::std::string& internal_name() const;
  void set_internal_name(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_name(::std::string&& value);
  #endif
  void set_internal_name(const char* value);
  void set_internal_name(const char* value, size_t size);
  ::std::string* mutable_internal_name();
  ::std::string* release_internal_name();
  void set_allocated_internal_name(::std::string* internal_name);

  // optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
  bool has_localized_category_name() const;
  void clear_localized_category_name();
  static const int kLocalizedCategoryNameFieldNumber = 4;
  const ::std::string& localized_category_name() const;
  void set_localized_category_name(const ::std::string& value);
  #if LANG_CXX11
  void set_localized_category_name(::std::string&& value);
  #endif
  void set_localized_category_name(const char* value);
  void set_localized_category_name(const char* value, size_t size);
  ::std::string* mutable_localized_category_name();
  ::std::string* release_localized_category_name();
  void set_allocated_localized_category_name(::std::string* localized_category_name);

  // optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
  bool has_localized_tag_name() const;
  void clear_localized_tag_name();
  static const int kLocalizedTagNameFieldNumber = 5;
  const ::std::string& localized_tag_name() const;
  void set_localized_tag_name(const ::std::string& value);
  #if LANG_CXX11
  void set_localized_tag_name(::std::string&& value);
  #endif
  void set_localized_tag_name(const char* value);
  void set_localized_tag_name(const char* value, size_t size);
  ::std::string* mutable_localized_tag_name();
  ::std::string* release_localized_tag_name();
  void set_allocated_localized_tag_name(::std::string* localized_tag_name);

  // optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional uint32 appid = 1 [(.description) = "The app that contains the item"];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CEconItem_Tag)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_category();
  void clear_has_category();
  void set_has_internal_name();
  void clear_has_internal_name();
  void set_has_localized_category_name();
  void clear_has_localized_category_name();
  void set_has_localized_tag_name();
  void clear_has_localized_tag_name();
  void set_has_color();
  void clear_has_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr internal_name_;
  ::google::protobuf::internal::ArenaStringPtr localized_category_name_;
  ::google::protobuf::internal::ArenaStringPtr localized_tag_name_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CEcon_GetAssetClassInfo_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CEcon_GetAssetClassInfo_Response) */ {
 public:
  CEcon_GetAssetClassInfo_Response();
  virtual ~CEcon_GetAssetClassInfo_Response();

  CEcon_GetAssetClassInfo_Response(const CEcon_GetAssetClassInfo_Response& from);

  inline CEcon_GetAssetClassInfo_Response& operator=(const CEcon_GetAssetClassInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CEcon_GetAssetClassInfo_Response(CEcon_GetAssetClassInfo_Response&& from) noexcept
    : CEcon_GetAssetClassInfo_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_GetAssetClassInfo_Response& operator=(CEcon_GetAssetClassInfo_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEcon_GetAssetClassInfo_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEcon_GetAssetClassInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetAssetClassInfo_Response*>(
               &_CEcon_GetAssetClassInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CEcon_GetAssetClassInfo_Response* other);
  friend void swap(CEcon_GetAssetClassInfo_Response& a, CEcon_GetAssetClassInfo_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CEcon_GetAssetClassInfo_Response* New() const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Response>(NULL);
  }

  CEcon_GetAssetClassInfo_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CEcon_GetAssetClassInfo_Response& from);
  void MergeFrom(const CEcon_GetAssetClassInfo_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetAssetClassInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CEconItem_Description descriptions = 1;
  int descriptions_size() const;
  void clear_descriptions();
  static const int kDescriptionsFieldNumber = 1;
  ::CEconItem_Description* mutable_descriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Description >*
      mutable_descriptions();
  const ::CEconItem_Description& descriptions(int index) const;
  ::CEconItem_Description* add_descriptions();
  const ::google::protobuf::RepeatedPtrField< ::CEconItem_Description >&
      descriptions() const;

  // @@protoc_insertion_point(class_scope:CEcon_GetAssetClassInfo_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CEconItem_Description > descriptions_;
  friend struct ::protobuf_steammessages_5fecon_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class Econ_Stub;

class Econ : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Econ() {};
 public:
  virtual ~Econ();

  typedef Econ_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetTradeOfferAccessToken(::google::protobuf::RpcController* controller,
                       const ::CEcon_GetTradeOfferAccessToken_Request* request,
                       ::CEcon_GetTradeOfferAccessToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetItemShopOverlayAuthURL(::google::protobuf::RpcController* controller,
                       const ::CEcon_ClientGetItemShopOverlayAuthURL_Request* request,
                       ::CEcon_ClientGetItemShopOverlayAuthURL_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAssetClassInfo(::google::protobuf::RpcController* controller,
                       const ::CEcon_GetAssetClassInfo_Request* request,
                       ::CEcon_GetAssetClassInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Econ);
};

class Econ_Stub : public Econ {
 public:
  Econ_Stub(::google::protobuf::RpcChannel* channel);
  Econ_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Econ_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Econ ------------------------------------------

  void GetTradeOfferAccessToken(::google::protobuf::RpcController* controller,
                       const ::CEcon_GetTradeOfferAccessToken_Request* request,
                       ::CEcon_GetTradeOfferAccessToken_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetItemShopOverlayAuthURL(::google::protobuf::RpcController* controller,
                       const ::CEcon_ClientGetItemShopOverlayAuthURL_Request* request,
                       ::CEcon_ClientGetItemShopOverlayAuthURL_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAssetClassInfo(::google::protobuf::RpcController* controller,
                       const ::CEcon_GetAssetClassInfo_Request* request,
                       ::CEcon_GetAssetClassInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Econ_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CEcon_GetTradeOfferAccessToken_Request

// optional bool generate_new_token = 1;
inline bool CEcon_GetTradeOfferAccessToken_Request::has_generate_new_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEcon_GetTradeOfferAccessToken_Request::set_has_generate_new_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEcon_GetTradeOfferAccessToken_Request::clear_has_generate_new_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEcon_GetTradeOfferAccessToken_Request::clear_generate_new_token() {
  generate_new_token_ = false;
  clear_has_generate_new_token();
}
inline bool CEcon_GetTradeOfferAccessToken_Request::generate_new_token() const {
  // @@protoc_insertion_point(field_get:CEcon_GetTradeOfferAccessToken_Request.generate_new_token)
  return generate_new_token_;
}
inline void CEcon_GetTradeOfferAccessToken_Request::set_generate_new_token(bool value) {
  set_has_generate_new_token();
  generate_new_token_ = value;
  // @@protoc_insertion_point(field_set:CEcon_GetTradeOfferAccessToken_Request.generate_new_token)
}

// -------------------------------------------------------------------

// CEcon_GetTradeOfferAccessToken_Response

// optional string trade_offer_access_token = 1;
inline bool CEcon_GetTradeOfferAccessToken_Response::has_trade_offer_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEcon_GetTradeOfferAccessToken_Response::set_has_trade_offer_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEcon_GetTradeOfferAccessToken_Response::clear_has_trade_offer_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEcon_GetTradeOfferAccessToken_Response::clear_trade_offer_access_token() {
  trade_offer_access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trade_offer_access_token();
}
inline const ::std::string& CEcon_GetTradeOfferAccessToken_Response::trade_offer_access_token() const {
  // @@protoc_insertion_point(field_get:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
  return trade_offer_access_token_.GetNoArena();
}
inline void CEcon_GetTradeOfferAccessToken_Response::set_trade_offer_access_token(const ::std::string& value) {
  set_has_trade_offer_access_token();
  trade_offer_access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}
#if LANG_CXX11
inline void CEcon_GetTradeOfferAccessToken_Response::set_trade_offer_access_token(::std::string&& value) {
  set_has_trade_offer_access_token();
  trade_offer_access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}
#endif
inline void CEcon_GetTradeOfferAccessToken_Response::set_trade_offer_access_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trade_offer_access_token();
  trade_offer_access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}
inline void CEcon_GetTradeOfferAccessToken_Response::set_trade_offer_access_token(const char* value, size_t size) {
  set_has_trade_offer_access_token();
  trade_offer_access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}
inline ::std::string* CEcon_GetTradeOfferAccessToken_Response::mutable_trade_offer_access_token() {
  set_has_trade_offer_access_token();
  // @@protoc_insertion_point(field_mutable:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
  return trade_offer_access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEcon_GetTradeOfferAccessToken_Response::release_trade_offer_access_token() {
  // @@protoc_insertion_point(field_release:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
  if (!has_trade_offer_access_token()) {
    return NULL;
  }
  clear_has_trade_offer_access_token();
  return trade_offer_access_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEcon_GetTradeOfferAccessToken_Response::set_allocated_trade_offer_access_token(::std::string* trade_offer_access_token) {
  if (trade_offer_access_token != NULL) {
    set_has_trade_offer_access_token();
  } else {
    clear_has_trade_offer_access_token();
  }
  trade_offer_access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_offer_access_token);
  // @@protoc_insertion_point(field_set_allocated:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}

// -------------------------------------------------------------------

// CEcon_ClientGetItemShopOverlayAuthURL_Request

// optional string return_url = 1;
inline bool CEcon_ClientGetItemShopOverlayAuthURL_Request::has_return_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_has_return_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::clear_has_return_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::clear_return_url() {
  return_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_return_url();
}
inline const ::std::string& CEcon_ClientGetItemShopOverlayAuthURL_Request::return_url() const {
  // @@protoc_insertion_point(field_get:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
  return return_url_.GetNoArena();
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_return_url(const ::std::string& value) {
  set_has_return_url();
  return_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}
#if LANG_CXX11
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_return_url(::std::string&& value) {
  set_has_return_url();
  return_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}
#endif
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_return_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_return_url();
  return_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_return_url(const char* value, size_t size) {
  set_has_return_url();
  return_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}
inline ::std::string* CEcon_ClientGetItemShopOverlayAuthURL_Request::mutable_return_url() {
  set_has_return_url();
  // @@protoc_insertion_point(field_mutable:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
  return return_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEcon_ClientGetItemShopOverlayAuthURL_Request::release_return_url() {
  // @@protoc_insertion_point(field_release:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
  if (!has_return_url()) {
    return NULL;
  }
  clear_has_return_url();
  return return_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_allocated_return_url(::std::string* return_url) {
  if (return_url != NULL) {
    set_has_return_url();
  } else {
    clear_has_return_url();
  }
  return_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_url);
  // @@protoc_insertion_point(field_set_allocated:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}

// -------------------------------------------------------------------

// CEcon_ClientGetItemShopOverlayAuthURL_Response

// optional string url = 1;
inline bool CEcon_ClientGetItemShopOverlayAuthURL_Response::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CEcon_ClientGetItemShopOverlayAuthURL_Response::url() const {
  // @@protoc_insertion_point(field_get:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
  return url_.GetNoArena();
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}
#if LANG_CXX11
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}
#endif
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}
inline ::std::string* CEcon_ClientGetItemShopOverlayAuthURL_Response::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEcon_ClientGetItemShopOverlayAuthURL_Response::release_url() {
  // @@protoc_insertion_point(field_release:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
  if (!has_url()) {
    return NULL;
  }
  clear_has_url();
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}

// -------------------------------------------------------------------

// CEcon_GetAssetClassInfo_Request_Class

// optional uint64 classid = 1;
inline bool CEcon_GetAssetClassInfo_Request_Class::has_classid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEcon_GetAssetClassInfo_Request_Class::set_has_classid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEcon_GetAssetClassInfo_Request_Class::clear_has_classid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEcon_GetAssetClassInfo_Request_Class::clear_classid() {
  classid_ = GOOGLE_ULONGLONG(0);
  clear_has_classid();
}
inline ::google::protobuf::uint64 CEcon_GetAssetClassInfo_Request_Class::classid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.Class.classid)
  return classid_;
}
inline void CEcon_GetAssetClassInfo_Request_Class::set_classid(::google::protobuf::uint64 value) {
  set_has_classid();
  classid_ = value;
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.Class.classid)
}

// optional uint64 instanceid = 2;
inline bool CEcon_GetAssetClassInfo_Request_Class::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEcon_GetAssetClassInfo_Request_Class::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEcon_GetAssetClassInfo_Request_Class::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEcon_GetAssetClassInfo_Request_Class::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 CEcon_GetAssetClassInfo_Request_Class::instanceid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.Class.instanceid)
  return instanceid_;
}
inline void CEcon_GetAssetClassInfo_Request_Class::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.Class.instanceid)
}

// -------------------------------------------------------------------

// CEcon_GetAssetClassInfo_Request

// optional string language = 1;
inline bool CEcon_GetAssetClassInfo_Request::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEcon_GetAssetClassInfo_Request::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEcon_GetAssetClassInfo_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEcon_GetAssetClassInfo_Request::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& CEcon_GetAssetClassInfo_Request::language() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.language)
  return language_.GetNoArena();
}
inline void CEcon_GetAssetClassInfo_Request::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.language)
}
#if LANG_CXX11
inline void CEcon_GetAssetClassInfo_Request::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEcon_GetAssetClassInfo_Request.language)
}
#endif
inline void CEcon_GetAssetClassInfo_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEcon_GetAssetClassInfo_Request.language)
}
inline void CEcon_GetAssetClassInfo_Request::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEcon_GetAssetClassInfo_Request.language)
}
inline ::std::string* CEcon_GetAssetClassInfo_Request::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:CEcon_GetAssetClassInfo_Request.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEcon_GetAssetClassInfo_Request::release_language() {
  // @@protoc_insertion_point(field_release:CEcon_GetAssetClassInfo_Request.language)
  if (!has_language()) {
    return NULL;
  }
  clear_has_language();
  return language_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEcon_GetAssetClassInfo_Request::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:CEcon_GetAssetClassInfo_Request.language)
}

// optional uint32 appid = 2;
inline bool CEcon_GetAssetClassInfo_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEcon_GetAssetClassInfo_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEcon_GetAssetClassInfo_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEcon_GetAssetClassInfo_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CEcon_GetAssetClassInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.appid)
  return appid_;
}
inline void CEcon_GetAssetClassInfo_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.appid)
}

// repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
inline int CEcon_GetAssetClassInfo_Request::classes_size() const {
  return classes_.size();
}
inline void CEcon_GetAssetClassInfo_Request::clear_classes() {
  classes_.Clear();
}
inline ::CEcon_GetAssetClassInfo_Request_Class* CEcon_GetAssetClassInfo_Request::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetAssetClassInfo_Request.classes)
  return classes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >*
CEcon_GetAssetClassInfo_Request::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetAssetClassInfo_Request.classes)
  return &classes_;
}
inline const ::CEcon_GetAssetClassInfo_Request_Class& CEcon_GetAssetClassInfo_Request::classes(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.classes)
  return classes_.Get(index);
}
inline ::CEcon_GetAssetClassInfo_Request_Class* CEcon_GetAssetClassInfo_Request::add_classes() {
  // @@protoc_insertion_point(field_add:CEcon_GetAssetClassInfo_Request.classes)
  return classes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >&
CEcon_GetAssetClassInfo_Request::classes() const {
  // @@protoc_insertion_point(field_list:CEcon_GetAssetClassInfo_Request.classes)
  return classes_;
}

// -------------------------------------------------------------------

// CEconItem_DescriptionLine

// optional string type = 1;
inline bool CEconItem_DescriptionLine::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEconItem_DescriptionLine::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEconItem_DescriptionLine::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEconItem_DescriptionLine::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& CEconItem_DescriptionLine::type() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.type)
  return type_.GetNoArena();
}
inline void CEconItem_DescriptionLine::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.type)
}
#if LANG_CXX11
inline void CEconItem_DescriptionLine::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_DescriptionLine.type)
}
#endif
inline void CEconItem_DescriptionLine::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_DescriptionLine.type)
}
inline void CEconItem_DescriptionLine::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_DescriptionLine.type)
}
inline ::std::string* CEconItem_DescriptionLine::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_DescriptionLine::release_type() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_DescriptionLine::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.type)
}

// optional string value = 2;
inline bool CEconItem_DescriptionLine::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEconItem_DescriptionLine::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEconItem_DescriptionLine::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEconItem_DescriptionLine::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CEconItem_DescriptionLine::value() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.value)
  return value_.GetNoArena();
}
inline void CEconItem_DescriptionLine::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.value)
}
#if LANG_CXX11
inline void CEconItem_DescriptionLine::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_DescriptionLine.value)
}
#endif
inline void CEconItem_DescriptionLine::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_DescriptionLine.value)
}
inline void CEconItem_DescriptionLine::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_DescriptionLine.value)
}
inline ::std::string* CEconItem_DescriptionLine::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_DescriptionLine::release_value() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_DescriptionLine::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.value)
}

// optional string color = 3;
inline bool CEconItem_DescriptionLine::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CEconItem_DescriptionLine::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CEconItem_DescriptionLine::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CEconItem_DescriptionLine::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& CEconItem_DescriptionLine::color() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.color)
  return color_.GetNoArena();
}
inline void CEconItem_DescriptionLine::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.color)
}
#if LANG_CXX11
inline void CEconItem_DescriptionLine::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_DescriptionLine.color)
}
#endif
inline void CEconItem_DescriptionLine::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_DescriptionLine.color)
}
inline void CEconItem_DescriptionLine::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_DescriptionLine.color)
}
inline ::std::string* CEconItem_DescriptionLine::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_DescriptionLine::release_color() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_DescriptionLine::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.color)
}

// optional string label = 4;
inline bool CEconItem_DescriptionLine::has_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CEconItem_DescriptionLine::set_has_label() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CEconItem_DescriptionLine::clear_has_label() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CEconItem_DescriptionLine::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CEconItem_DescriptionLine::label() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.label)
  return label_.GetNoArena();
}
inline void CEconItem_DescriptionLine::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.label)
}
#if LANG_CXX11
inline void CEconItem_DescriptionLine::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_DescriptionLine.label)
}
#endif
inline void CEconItem_DescriptionLine::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_DescriptionLine.label)
}
inline void CEconItem_DescriptionLine::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_DescriptionLine.label)
}
inline ::std::string* CEconItem_DescriptionLine::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_DescriptionLine::release_label() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_DescriptionLine::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.label)
}

// -------------------------------------------------------------------

// CEconItem_Action

// optional string link = 1;
inline bool CEconItem_Action::has_link() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEconItem_Action::set_has_link() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEconItem_Action::clear_has_link() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEconItem_Action::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
inline const ::std::string& CEconItem_Action::link() const {
  // @@protoc_insertion_point(field_get:CEconItem_Action.link)
  return link_.GetNoArena();
}
inline void CEconItem_Action::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Action.link)
}
#if LANG_CXX11
inline void CEconItem_Action::set_link(::std::string&& value) {
  set_has_link();
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Action.link)
}
#endif
inline void CEconItem_Action::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Action.link)
}
inline void CEconItem_Action::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Action.link)
}
inline ::std::string* CEconItem_Action::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:CEconItem_Action.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Action::release_link() {
  // @@protoc_insertion_point(field_release:CEconItem_Action.link)
  if (!has_link()) {
    return NULL;
  }
  clear_has_link();
  return link_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Action::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Action.link)
}

// optional string name = 2;
inline bool CEconItem_Action::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEconItem_Action::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEconItem_Action::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEconItem_Action::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CEconItem_Action::name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Action.name)
  return name_.GetNoArena();
}
inline void CEconItem_Action::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Action.name)
}
#if LANG_CXX11
inline void CEconItem_Action::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Action.name)
}
#endif
inline void CEconItem_Action::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Action.name)
}
inline void CEconItem_Action::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Action.name)
}
inline ::std::string* CEconItem_Action::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Action.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Action::release_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Action.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Action::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Action.name)
}

// -------------------------------------------------------------------

// CEconItem_Description

// optional int32 appid = 1;
inline bool CEconItem_Description::has_appid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CEconItem_Description::set_has_appid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CEconItem_Description::clear_has_appid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CEconItem_Description::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 CEconItem_Description::appid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.appid)
  return appid_;
}
inline void CEconItem_Description::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.appid)
}

// optional uint64 classid = 2;
inline bool CEconItem_Description::has_classid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CEconItem_Description::set_has_classid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CEconItem_Description::clear_has_classid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CEconItem_Description::clear_classid() {
  classid_ = GOOGLE_ULONGLONG(0);
  clear_has_classid();
}
inline ::google::protobuf::uint64 CEconItem_Description::classid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.classid)
  return classid_;
}
inline void CEconItem_Description::set_classid(::google::protobuf::uint64 value) {
  set_has_classid();
  classid_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.classid)
}

// optional uint64 instanceid = 3;
inline bool CEconItem_Description::has_instanceid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CEconItem_Description::set_has_instanceid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CEconItem_Description::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CEconItem_Description::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 CEconItem_Description::instanceid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.instanceid)
  return instanceid_;
}
inline void CEconItem_Description::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.instanceid)
}

// optional bool currency = 4;
inline bool CEconItem_Description::has_currency() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CEconItem_Description::set_has_currency() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CEconItem_Description::clear_has_currency() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CEconItem_Description::clear_currency() {
  currency_ = false;
  clear_has_currency();
}
inline bool CEconItem_Description::currency() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.currency)
  return currency_;
}
inline void CEconItem_Description::set_currency(bool value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.currency)
}

// optional string background_color = 5;
inline bool CEconItem_Description::has_background_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEconItem_Description::set_has_background_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEconItem_Description::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEconItem_Description::clear_background_color() {
  background_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_background_color();
}
inline const ::std::string& CEconItem_Description::background_color() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.background_color)
  return background_color_.GetNoArena();
}
inline void CEconItem_Description::set_background_color(const ::std::string& value) {
  set_has_background_color();
  background_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.background_color)
}
#if LANG_CXX11
inline void CEconItem_Description::set_background_color(::std::string&& value) {
  set_has_background_color();
  background_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.background_color)
}
#endif
inline void CEconItem_Description::set_background_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_background_color();
  background_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.background_color)
}
inline void CEconItem_Description::set_background_color(const char* value, size_t size) {
  set_has_background_color();
  background_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.background_color)
}
inline ::std::string* CEconItem_Description::mutable_background_color() {
  set_has_background_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.background_color)
  return background_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_background_color() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.background_color)
  if (!has_background_color()) {
    return NULL;
  }
  clear_has_background_color();
  return background_color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_background_color(::std::string* background_color) {
  if (background_color != NULL) {
    set_has_background_color();
  } else {
    clear_has_background_color();
  }
  background_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), background_color);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.background_color)
}

// optional string icon_url = 6;
inline bool CEconItem_Description::has_icon_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEconItem_Description::set_has_icon_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEconItem_Description::clear_has_icon_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEconItem_Description::clear_icon_url() {
  icon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_url();
}
inline const ::std::string& CEconItem_Description::icon_url() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.icon_url)
  return icon_url_.GetNoArena();
}
inline void CEconItem_Description::set_icon_url(const ::std::string& value) {
  set_has_icon_url();
  icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.icon_url)
}
#if LANG_CXX11
inline void CEconItem_Description::set_icon_url(::std::string&& value) {
  set_has_icon_url();
  icon_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.icon_url)
}
#endif
inline void CEconItem_Description::set_icon_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon_url();
  icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.icon_url)
}
inline void CEconItem_Description::set_icon_url(const char* value, size_t size) {
  set_has_icon_url();
  icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.icon_url)
}
inline ::std::string* CEconItem_Description::mutable_icon_url() {
  set_has_icon_url();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.icon_url)
  return icon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_icon_url() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.icon_url)
  if (!has_icon_url()) {
    return NULL;
  }
  clear_has_icon_url();
  return icon_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_icon_url(::std::string* icon_url) {
  if (icon_url != NULL) {
    set_has_icon_url();
  } else {
    clear_has_icon_url();
  }
  icon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_url);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.icon_url)
}

// optional string icon_url_large = 7;
inline bool CEconItem_Description::has_icon_url_large() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CEconItem_Description::set_has_icon_url_large() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CEconItem_Description::clear_has_icon_url_large() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CEconItem_Description::clear_icon_url_large() {
  icon_url_large_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_url_large();
}
inline const ::std::string& CEconItem_Description::icon_url_large() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.icon_url_large)
  return icon_url_large_.GetNoArena();
}
inline void CEconItem_Description::set_icon_url_large(const ::std::string& value) {
  set_has_icon_url_large();
  icon_url_large_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.icon_url_large)
}
#if LANG_CXX11
inline void CEconItem_Description::set_icon_url_large(::std::string&& value) {
  set_has_icon_url_large();
  icon_url_large_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.icon_url_large)
}
#endif
inline void CEconItem_Description::set_icon_url_large(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon_url_large();
  icon_url_large_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.icon_url_large)
}
inline void CEconItem_Description::set_icon_url_large(const char* value, size_t size) {
  set_has_icon_url_large();
  icon_url_large_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.icon_url_large)
}
inline ::std::string* CEconItem_Description::mutable_icon_url_large() {
  set_has_icon_url_large();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.icon_url_large)
  return icon_url_large_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_icon_url_large() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.icon_url_large)
  if (!has_icon_url_large()) {
    return NULL;
  }
  clear_has_icon_url_large();
  return icon_url_large_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_icon_url_large(::std::string* icon_url_large) {
  if (icon_url_large != NULL) {
    set_has_icon_url_large();
  } else {
    clear_has_icon_url_large();
  }
  icon_url_large_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_url_large);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.icon_url_large)
}

// repeated .CEconItem_DescriptionLine descriptions = 8;
inline int CEconItem_Description::descriptions_size() const {
  return descriptions_.size();
}
inline void CEconItem_Description::clear_descriptions() {
  descriptions_.Clear();
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.descriptions)
  return descriptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >*
CEconItem_Description::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.descriptions)
  return &descriptions_;
}
inline const ::CEconItem_DescriptionLine& CEconItem_Description::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.descriptions)
  return descriptions_.Get(index);
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::add_descriptions() {
  // @@protoc_insertion_point(field_add:CEconItem_Description.descriptions)
  return descriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >&
CEconItem_Description::descriptions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.descriptions)
  return descriptions_;
}

// optional bool tradable = 9;
inline bool CEconItem_Description::has_tradable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CEconItem_Description::set_has_tradable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CEconItem_Description::clear_has_tradable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CEconItem_Description::clear_tradable() {
  tradable_ = false;
  clear_has_tradable();
}
inline bool CEconItem_Description::tradable() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.tradable)
  return tradable_;
}
inline void CEconItem_Description::set_tradable(bool value) {
  set_has_tradable();
  tradable_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.tradable)
}

// repeated .CEconItem_Action actions = 10;
inline int CEconItem_Description::actions_size() const {
  return actions_.size();
}
inline void CEconItem_Description::clear_actions() {
  actions_.Clear();
}
inline ::CEconItem_Action* CEconItem_Description::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >*
CEconItem_Description::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.actions)
  return &actions_;
}
inline const ::CEconItem_Action& CEconItem_Description::actions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.actions)
  return actions_.Get(index);
}
inline ::CEconItem_Action* CEconItem_Description::add_actions() {
  // @@protoc_insertion_point(field_add:CEconItem_Description.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >&
CEconItem_Description::actions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.actions)
  return actions_;
}

// repeated .CEconItem_DescriptionLine owner_descriptions = 11;
inline int CEconItem_Description::owner_descriptions_size() const {
  return owner_descriptions_.size();
}
inline void CEconItem_Description::clear_owner_descriptions() {
  owner_descriptions_.Clear();
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::mutable_owner_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.owner_descriptions)
  return owner_descriptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >*
CEconItem_Description::mutable_owner_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.owner_descriptions)
  return &owner_descriptions_;
}
inline const ::CEconItem_DescriptionLine& CEconItem_Description::owner_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.owner_descriptions)
  return owner_descriptions_.Get(index);
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::add_owner_descriptions() {
  // @@protoc_insertion_point(field_add:CEconItem_Description.owner_descriptions)
  return owner_descriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_DescriptionLine >&
CEconItem_Description::owner_descriptions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.owner_descriptions)
  return owner_descriptions_;
}

// repeated .CEconItem_Action owner_actions = 12;
inline int CEconItem_Description::owner_actions_size() const {
  return owner_actions_.size();
}
inline void CEconItem_Description::clear_owner_actions() {
  owner_actions_.Clear();
}
inline ::CEconItem_Action* CEconItem_Description::mutable_owner_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.owner_actions)
  return owner_actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >*
CEconItem_Description::mutable_owner_actions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.owner_actions)
  return &owner_actions_;
}
inline const ::CEconItem_Action& CEconItem_Description::owner_actions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.owner_actions)
  return owner_actions_.Get(index);
}
inline ::CEconItem_Action* CEconItem_Description::add_owner_actions() {
  // @@protoc_insertion_point(field_add:CEconItem_Description.owner_actions)
  return owner_actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >&
CEconItem_Description::owner_actions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.owner_actions)
  return owner_actions_;
}

// repeated string fraudwarnings = 13;
inline int CEconItem_Description::fraudwarnings_size() const {
  return fraudwarnings_.size();
}
inline void CEconItem_Description::clear_fraudwarnings() {
  fraudwarnings_.Clear();
}
inline const ::std::string& CEconItem_Description::fraudwarnings(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.fraudwarnings)
  return fraudwarnings_.Get(index);
}
inline ::std::string* CEconItem_Description::mutable_fraudwarnings(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.fraudwarnings)
  return fraudwarnings_.Mutable(index);
}
inline void CEconItem_Description::set_fraudwarnings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CEconItem_Description.fraudwarnings)
  fraudwarnings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CEconItem_Description::set_fraudwarnings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CEconItem_Description.fraudwarnings)
  fraudwarnings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CEconItem_Description::set_fraudwarnings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fraudwarnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::set_fraudwarnings(int index, const char* value, size_t size) {
  fraudwarnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.fraudwarnings)
}
inline ::std::string* CEconItem_Description::add_fraudwarnings() {
  // @@protoc_insertion_point(field_add_mutable:CEconItem_Description.fraudwarnings)
  return fraudwarnings_.Add();
}
inline void CEconItem_Description::add_fraudwarnings(const ::std::string& value) {
  fraudwarnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CEconItem_Description.fraudwarnings)
}
#if LANG_CXX11
inline void CEconItem_Description::add_fraudwarnings(::std::string&& value) {
  fraudwarnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CEconItem_Description.fraudwarnings)
}
#endif
inline void CEconItem_Description::add_fraudwarnings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fraudwarnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::add_fraudwarnings(const char* value, size_t size) {
  fraudwarnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CEconItem_Description.fraudwarnings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CEconItem_Description::fraudwarnings() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.fraudwarnings)
  return fraudwarnings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CEconItem_Description::mutable_fraudwarnings() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.fraudwarnings)
  return &fraudwarnings_;
}

// optional string name = 14;
inline bool CEconItem_Description::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CEconItem_Description::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CEconItem_Description::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CEconItem_Description::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CEconItem_Description::name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.name)
  return name_.GetNoArena();
}
inline void CEconItem_Description::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.name)
}
#if LANG_CXX11
inline void CEconItem_Description::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.name)
}
#endif
inline void CEconItem_Description::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.name)
}
inline void CEconItem_Description::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.name)
}
inline ::std::string* CEconItem_Description::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.name)
}

// optional string name_color = 15;
inline bool CEconItem_Description::has_name_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CEconItem_Description::set_has_name_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CEconItem_Description::clear_has_name_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CEconItem_Description::clear_name_color() {
  name_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_color();
}
inline const ::std::string& CEconItem_Description::name_color() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.name_color)
  return name_color_.GetNoArena();
}
inline void CEconItem_Description::set_name_color(const ::std::string& value) {
  set_has_name_color();
  name_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.name_color)
}
#if LANG_CXX11
inline void CEconItem_Description::set_name_color(::std::string&& value) {
  set_has_name_color();
  name_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.name_color)
}
#endif
inline void CEconItem_Description::set_name_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_color();
  name_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.name_color)
}
inline void CEconItem_Description::set_name_color(const char* value, size_t size) {
  set_has_name_color();
  name_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.name_color)
}
inline ::std::string* CEconItem_Description::mutable_name_color() {
  set_has_name_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.name_color)
  return name_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_name_color() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.name_color)
  if (!has_name_color()) {
    return NULL;
  }
  clear_has_name_color();
  return name_color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_name_color(::std::string* name_color) {
  if (name_color != NULL) {
    set_has_name_color();
  } else {
    clear_has_name_color();
  }
  name_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_color);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.name_color)
}

// optional string type = 16;
inline bool CEconItem_Description::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CEconItem_Description::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CEconItem_Description::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CEconItem_Description::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& CEconItem_Description::type() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.type)
  return type_.GetNoArena();
}
inline void CEconItem_Description::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.type)
}
#if LANG_CXX11
inline void CEconItem_Description::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.type)
}
#endif
inline void CEconItem_Description::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.type)
}
inline void CEconItem_Description::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.type)
}
inline ::std::string* CEconItem_Description::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_type() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.type)
}

// optional string market_name = 17;
inline bool CEconItem_Description::has_market_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CEconItem_Description::set_has_market_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CEconItem_Description::clear_has_market_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CEconItem_Description::clear_market_name() {
  market_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market_name();
}
inline const ::std::string& CEconItem_Description::market_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_name)
  return market_name_.GetNoArena();
}
inline void CEconItem_Description::set_market_name(const ::std::string& value) {
  set_has_market_name();
  market_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_name)
}
#if LANG_CXX11
inline void CEconItem_Description::set_market_name(::std::string&& value) {
  set_has_market_name();
  market_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.market_name)
}
#endif
inline void CEconItem_Description::set_market_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_market_name();
  market_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.market_name)
}
inline void CEconItem_Description::set_market_name(const char* value, size_t size) {
  set_has_market_name();
  market_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.market_name)
}
inline ::std::string* CEconItem_Description::mutable_market_name() {
  set_has_market_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_name)
  return market_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_market_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_name)
  if (!has_market_name()) {
    return NULL;
  }
  clear_has_market_name();
  return market_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_market_name(::std::string* market_name) {
  if (market_name != NULL) {
    set_has_market_name();
  } else {
    clear_has_market_name();
  }
  market_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market_name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_name)
}

// optional string market_hash_name = 18;
inline bool CEconItem_Description::has_market_hash_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CEconItem_Description::set_has_market_hash_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CEconItem_Description::clear_has_market_hash_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CEconItem_Description::clear_market_hash_name() {
  market_hash_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market_hash_name();
}
inline const ::std::string& CEconItem_Description::market_hash_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_hash_name)
  return market_hash_name_.GetNoArena();
}
inline void CEconItem_Description::set_market_hash_name(const ::std::string& value) {
  set_has_market_hash_name();
  market_hash_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_hash_name)
}
#if LANG_CXX11
inline void CEconItem_Description::set_market_hash_name(::std::string&& value) {
  set_has_market_hash_name();
  market_hash_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.market_hash_name)
}
#endif
inline void CEconItem_Description::set_market_hash_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_market_hash_name();
  market_hash_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.market_hash_name)
}
inline void CEconItem_Description::set_market_hash_name(const char* value, size_t size) {
  set_has_market_hash_name();
  market_hash_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.market_hash_name)
}
inline ::std::string* CEconItem_Description::mutable_market_hash_name() {
  set_has_market_hash_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_hash_name)
  return market_hash_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_market_hash_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_hash_name)
  if (!has_market_hash_name()) {
    return NULL;
  }
  clear_has_market_hash_name();
  return market_hash_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_market_hash_name(::std::string* market_hash_name) {
  if (market_hash_name != NULL) {
    set_has_market_hash_name();
  } else {
    clear_has_market_hash_name();
  }
  market_hash_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market_hash_name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_hash_name)
}

// optional string market_fee = 19;
inline bool CEconItem_Description::has_market_fee() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CEconItem_Description::set_has_market_fee() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CEconItem_Description::clear_has_market_fee() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CEconItem_Description::clear_market_fee() {
  market_fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market_fee();
}
inline const ::std::string& CEconItem_Description::market_fee() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_fee)
  return market_fee_.GetNoArena();
}
inline void CEconItem_Description::set_market_fee(const ::std::string& value) {
  set_has_market_fee();
  market_fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_fee)
}
#if LANG_CXX11
inline void CEconItem_Description::set_market_fee(::std::string&& value) {
  set_has_market_fee();
  market_fee_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.market_fee)
}
#endif
inline void CEconItem_Description::set_market_fee(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_market_fee();
  market_fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.market_fee)
}
inline void CEconItem_Description::set_market_fee(const char* value, size_t size) {
  set_has_market_fee();
  market_fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.market_fee)
}
inline ::std::string* CEconItem_Description::mutable_market_fee() {
  set_has_market_fee();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_fee)
  return market_fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_market_fee() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_fee)
  if (!has_market_fee()) {
    return NULL;
  }
  clear_has_market_fee();
  return market_fee_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_market_fee(::std::string* market_fee) {
  if (market_fee != NULL) {
    set_has_market_fee();
  } else {
    clear_has_market_fee();
  }
  market_fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market_fee);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_fee)
}

// optional int32 market_fee_app = 28;
inline bool CEconItem_Description::has_market_fee_app() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CEconItem_Description::set_has_market_fee_app() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CEconItem_Description::clear_has_market_fee_app() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CEconItem_Description::clear_market_fee_app() {
  market_fee_app_ = 0;
  clear_has_market_fee_app();
}
inline ::google::protobuf::int32 CEconItem_Description::market_fee_app() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_fee_app)
  return market_fee_app_;
}
inline void CEconItem_Description::set_market_fee_app(::google::protobuf::int32 value) {
  set_has_market_fee_app();
  market_fee_app_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_fee_app)
}

// optional .CEconItem_Description contained_item = 20;
inline bool CEconItem_Description::has_contained_item() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CEconItem_Description::set_has_contained_item() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CEconItem_Description::clear_has_contained_item() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CEconItem_Description::clear_contained_item() {
  if (contained_item_ != NULL) contained_item_->Clear();
  clear_has_contained_item();
}
inline const ::CEconItem_Description& CEconItem_Description::_internal_contained_item() const {
  return *contained_item_;
}
inline const ::CEconItem_Description& CEconItem_Description::contained_item() const {
  const ::CEconItem_Description* p = contained_item_;
  // @@protoc_insertion_point(field_get:CEconItem_Description.contained_item)
  return p != NULL ? *p : *reinterpret_cast<const ::CEconItem_Description*>(
      &::_CEconItem_Description_default_instance_);
}
inline ::CEconItem_Description* CEconItem_Description::release_contained_item() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.contained_item)
  clear_has_contained_item();
  ::CEconItem_Description* temp = contained_item_;
  contained_item_ = NULL;
  return temp;
}
inline ::CEconItem_Description* CEconItem_Description::mutable_contained_item() {
  set_has_contained_item();
  if (contained_item_ == NULL) {
    auto* p = CreateMaybeMessage<::CEconItem_Description>(GetArenaNoVirtual());
    contained_item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.contained_item)
  return contained_item_;
}
inline void CEconItem_Description::set_allocated_contained_item(::CEconItem_Description* contained_item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contained_item_;
  }
  if (contained_item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contained_item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contained_item, submessage_arena);
    }
    set_has_contained_item();
  } else {
    clear_has_contained_item();
  }
  contained_item_ = contained_item;
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.contained_item)
}

// repeated .CEconItem_Action market_actions = 21;
inline int CEconItem_Description::market_actions_size() const {
  return market_actions_.size();
}
inline void CEconItem_Description::clear_market_actions() {
  market_actions_.Clear();
}
inline ::CEconItem_Action* CEconItem_Description::mutable_market_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_actions)
  return market_actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >*
CEconItem_Description::mutable_market_actions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.market_actions)
  return &market_actions_;
}
inline const ::CEconItem_Action& CEconItem_Description::market_actions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_actions)
  return market_actions_.Get(index);
}
inline ::CEconItem_Action* CEconItem_Description::add_market_actions() {
  // @@protoc_insertion_point(field_add:CEconItem_Description.market_actions)
  return market_actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_Action >&
CEconItem_Description::market_actions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.market_actions)
  return market_actions_;
}

// optional bool commodity = 22;
inline bool CEconItem_Description::has_commodity() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CEconItem_Description::set_has_commodity() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CEconItem_Description::clear_has_commodity() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CEconItem_Description::clear_commodity() {
  commodity_ = false;
  clear_has_commodity();
}
inline bool CEconItem_Description::commodity() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.commodity)
  return commodity_;
}
inline void CEconItem_Description::set_commodity(bool value) {
  set_has_commodity();
  commodity_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.commodity)
}

// optional int32 market_tradable_restriction = 23;
inline bool CEconItem_Description::has_market_tradable_restriction() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CEconItem_Description::set_has_market_tradable_restriction() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CEconItem_Description::clear_has_market_tradable_restriction() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CEconItem_Description::clear_market_tradable_restriction() {
  market_tradable_restriction_ = 0;
  clear_has_market_tradable_restriction();
}
inline ::google::protobuf::int32 CEconItem_Description::market_tradable_restriction() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_tradable_restriction)
  return market_tradable_restriction_;
}
inline void CEconItem_Description::set_market_tradable_restriction(::google::protobuf::int32 value) {
  set_has_market_tradable_restriction();
  market_tradable_restriction_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_tradable_restriction)
}

// optional int32 market_marketable_restriction = 24;
inline bool CEconItem_Description::has_market_marketable_restriction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CEconItem_Description::set_has_market_marketable_restriction() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CEconItem_Description::clear_has_market_marketable_restriction() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CEconItem_Description::clear_market_marketable_restriction() {
  market_marketable_restriction_ = 0;
  clear_has_market_marketable_restriction();
}
inline ::google::protobuf::int32 CEconItem_Description::market_marketable_restriction() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_marketable_restriction)
  return market_marketable_restriction_;
}
inline void CEconItem_Description::set_market_marketable_restriction(::google::protobuf::int32 value) {
  set_has_market_marketable_restriction();
  market_marketable_restriction_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_marketable_restriction)
}

// optional bool marketable = 25;
inline bool CEconItem_Description::has_marketable() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CEconItem_Description::set_has_marketable() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CEconItem_Description::clear_has_marketable() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CEconItem_Description::clear_marketable() {
  marketable_ = false;
  clear_has_marketable();
}
inline bool CEconItem_Description::marketable() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.marketable)
  return marketable_;
}
inline void CEconItem_Description::set_marketable(bool value) {
  set_has_marketable();
  marketable_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Description.marketable)
}

// repeated .CEconItem_Tag tags = 26;
inline int CEconItem_Description::tags_size() const {
  return tags_.size();
}
inline void CEconItem_Description::clear_tags() {
  tags_.Clear();
}
inline ::CEconItem_Tag* CEconItem_Description::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_Tag >*
CEconItem_Description::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.tags)
  return &tags_;
}
inline const ::CEconItem_Tag& CEconItem_Description::tags(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.tags)
  return tags_.Get(index);
}
inline ::CEconItem_Tag* CEconItem_Description::add_tags() {
  // @@protoc_insertion_point(field_add:CEconItem_Description.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_Tag >&
CEconItem_Description::tags() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.tags)
  return tags_;
}

// optional string item_expiration = 27;
inline bool CEconItem_Description::has_item_expiration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CEconItem_Description::set_has_item_expiration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CEconItem_Description::clear_has_item_expiration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CEconItem_Description::clear_item_expiration() {
  item_expiration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_expiration();
}
inline const ::std::string& CEconItem_Description::item_expiration() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.item_expiration)
  return item_expiration_.GetNoArena();
}
inline void CEconItem_Description::set_item_expiration(const ::std::string& value) {
  set_has_item_expiration();
  item_expiration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.item_expiration)
}
#if LANG_CXX11
inline void CEconItem_Description::set_item_expiration(::std::string&& value) {
  set_has_item_expiration();
  item_expiration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Description.item_expiration)
}
#endif
inline void CEconItem_Description::set_item_expiration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_expiration();
  item_expiration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.item_expiration)
}
inline void CEconItem_Description::set_item_expiration(const char* value, size_t size) {
  set_has_item_expiration();
  item_expiration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.item_expiration)
}
inline ::std::string* CEconItem_Description::mutable_item_expiration() {
  set_has_item_expiration();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.item_expiration)
  return item_expiration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Description::release_item_expiration() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.item_expiration)
  if (!has_item_expiration()) {
    return NULL;
  }
  clear_has_item_expiration();
  return item_expiration_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Description::set_allocated_item_expiration(::std::string* item_expiration) {
  if (item_expiration != NULL) {
    set_has_item_expiration();
  } else {
    clear_has_item_expiration();
  }
  item_expiration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_expiration);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.item_expiration)
}

// -------------------------------------------------------------------

// CEconItem_Tag

// optional uint32 appid = 1 [(.description) = "The app that contains the item"];
inline bool CEconItem_Tag::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CEconItem_Tag::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CEconItem_Tag::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CEconItem_Tag::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CEconItem_Tag::appid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.appid)
  return appid_;
}
inline void CEconItem_Tag::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CEconItem_Tag.appid)
}

// optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
inline bool CEconItem_Tag::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEconItem_Tag::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEconItem_Tag::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEconItem_Tag::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& CEconItem_Tag::category() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.category)
  return category_.GetNoArena();
}
inline void CEconItem_Tag::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Tag.category)
}
#if LANG_CXX11
inline void CEconItem_Tag::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Tag.category)
}
#endif
inline void CEconItem_Tag::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Tag.category)
}
inline void CEconItem_Tag::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Tag.category)
}
inline ::std::string* CEconItem_Tag::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Tag::release_category() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.category)
  if (!has_category()) {
    return NULL;
  }
  clear_has_category();
  return category_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Tag::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.category)
}

// optional string internal_name = 3 [(.description) = "The internal name of the tag"];
inline bool CEconItem_Tag::has_internal_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEconItem_Tag::set_has_internal_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEconItem_Tag::clear_has_internal_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEconItem_Tag::clear_internal_name() {
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_internal_name();
}
inline const ::std::string& CEconItem_Tag::internal_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.internal_name)
  return internal_name_.GetNoArena();
}
inline void CEconItem_Tag::set_internal_name(const ::std::string& value) {
  set_has_internal_name();
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Tag.internal_name)
}
#if LANG_CXX11
inline void CEconItem_Tag::set_internal_name(::std::string&& value) {
  set_has_internal_name();
  internal_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Tag.internal_name)
}
#endif
inline void CEconItem_Tag::set_internal_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_internal_name();
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Tag.internal_name)
}
inline void CEconItem_Tag::set_internal_name(const char* value, size_t size) {
  set_has_internal_name();
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Tag.internal_name)
}
inline ::std::string* CEconItem_Tag::mutable_internal_name() {
  set_has_internal_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.internal_name)
  return internal_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Tag::release_internal_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.internal_name)
  if (!has_internal_name()) {
    return NULL;
  }
  clear_has_internal_name();
  return internal_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Tag::set_allocated_internal_name(::std::string* internal_name) {
  if (internal_name != NULL) {
    set_has_internal_name();
  } else {
    clear_has_internal_name();
  }
  internal_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.internal_name)
}

// optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
inline bool CEconItem_Tag::has_localized_category_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CEconItem_Tag::set_has_localized_category_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CEconItem_Tag::clear_has_localized_category_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CEconItem_Tag::clear_localized_category_name() {
  localized_category_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localized_category_name();
}
inline const ::std::string& CEconItem_Tag::localized_category_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.localized_category_name)
  return localized_category_name_.GetNoArena();
}
inline void CEconItem_Tag::set_localized_category_name(const ::std::string& value) {
  set_has_localized_category_name();
  localized_category_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Tag.localized_category_name)
}
#if LANG_CXX11
inline void CEconItem_Tag::set_localized_category_name(::std::string&& value) {
  set_has_localized_category_name();
  localized_category_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Tag.localized_category_name)
}
#endif
inline void CEconItem_Tag::set_localized_category_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localized_category_name();
  localized_category_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Tag.localized_category_name)
}
inline void CEconItem_Tag::set_localized_category_name(const char* value, size_t size) {
  set_has_localized_category_name();
  localized_category_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Tag.localized_category_name)
}
inline ::std::string* CEconItem_Tag::mutable_localized_category_name() {
  set_has_localized_category_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.localized_category_name)
  return localized_category_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Tag::release_localized_category_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.localized_category_name)
  if (!has_localized_category_name()) {
    return NULL;
  }
  clear_has_localized_category_name();
  return localized_category_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Tag::set_allocated_localized_category_name(::std::string* localized_category_name) {
  if (localized_category_name != NULL) {
    set_has_localized_category_name();
  } else {
    clear_has_localized_category_name();
  }
  localized_category_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localized_category_name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.localized_category_name)
}

// optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
inline bool CEconItem_Tag::has_localized_tag_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CEconItem_Tag::set_has_localized_tag_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CEconItem_Tag::clear_has_localized_tag_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CEconItem_Tag::clear_localized_tag_name() {
  localized_tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localized_tag_name();
}
inline const ::std::string& CEconItem_Tag::localized_tag_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.localized_tag_name)
  return localized_tag_name_.GetNoArena();
}
inline void CEconItem_Tag::set_localized_tag_name(const ::std::string& value) {
  set_has_localized_tag_name();
  localized_tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Tag.localized_tag_name)
}
#if LANG_CXX11
inline void CEconItem_Tag::set_localized_tag_name(::std::string&& value) {
  set_has_localized_tag_name();
  localized_tag_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Tag.localized_tag_name)
}
#endif
inline void CEconItem_Tag::set_localized_tag_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localized_tag_name();
  localized_tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Tag.localized_tag_name)
}
inline void CEconItem_Tag::set_localized_tag_name(const char* value, size_t size) {
  set_has_localized_tag_name();
  localized_tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Tag.localized_tag_name)
}
inline ::std::string* CEconItem_Tag::mutable_localized_tag_name() {
  set_has_localized_tag_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.localized_tag_name)
  return localized_tag_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Tag::release_localized_tag_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.localized_tag_name)
  if (!has_localized_tag_name()) {
    return NULL;
  }
  clear_has_localized_tag_name();
  return localized_tag_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Tag::set_allocated_localized_tag_name(::std::string* localized_tag_name) {
  if (localized_tag_name != NULL) {
    set_has_localized_tag_name();
  } else {
    clear_has_localized_tag_name();
  }
  localized_tag_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localized_tag_name);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.localized_tag_name)
}

// optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
inline bool CEconItem_Tag::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CEconItem_Tag::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CEconItem_Tag::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CEconItem_Tag::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& CEconItem_Tag::color() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.color)
  return color_.GetNoArena();
}
inline void CEconItem_Tag::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CEconItem_Tag.color)
}
#if LANG_CXX11
inline void CEconItem_Tag::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CEconItem_Tag.color)
}
#endif
inline void CEconItem_Tag::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CEconItem_Tag.color)
}
inline void CEconItem_Tag::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Tag.color)
}
inline ::std::string* CEconItem_Tag::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CEconItem_Tag::release_color() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CEconItem_Tag::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.color)
}

// -------------------------------------------------------------------

// CEcon_GetAssetClassInfo_Response

// repeated .CEconItem_Description descriptions = 1;
inline int CEcon_GetAssetClassInfo_Response::descriptions_size() const {
  return descriptions_.size();
}
inline void CEcon_GetAssetClassInfo_Response::clear_descriptions() {
  descriptions_.Clear();
}
inline ::CEconItem_Description* CEcon_GetAssetClassInfo_Response::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetAssetClassInfo_Response.descriptions)
  return descriptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItem_Description >*
CEcon_GetAssetClassInfo_Response::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetAssetClassInfo_Response.descriptions)
  return &descriptions_;
}
inline const ::CEconItem_Description& CEcon_GetAssetClassInfo_Response::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Response.descriptions)
  return descriptions_.Get(index);
}
inline ::CEconItem_Description* CEcon_GetAssetClassInfo_Response::add_descriptions() {
  // @@protoc_insertion_point(field_add:CEcon_GetAssetClassInfo_Response.descriptions)
  return descriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItem_Description >&
CEcon_GetAssetClassInfo_Response::descriptions() const {
  // @@protoc_insertion_point(field_list:CEcon_GetAssetClassInfo_Response.descriptions)
  return descriptions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fecon_2esteamclient_2eproto
