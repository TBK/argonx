// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#include "steamdatagram_messages_auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steamdatagram_5fmessages_5fauth_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steamdatagram_5fmessages_5fauth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField;
}  // namespace protobuf_steamdatagram_5fmessages_5fauth_2eproto
class CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRelayAuthTicket_ExtraField>
      _instance;
} _CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
class CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRelayAuthTicket>
      _instance;
} _CMsgSteamDatagramRelayAuthTicket_default_instance_;
class CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramSignedRelayAuthTicket>
      _instance;
} _CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
class CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramCachedCredentialsForApp>
      _instance;
} _CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
namespace protobuf_steamdatagram_5fmessages_5fauth_2eproto {
static void InitDefaultsCMsgSteamDatagramRelayAuthTicket_ExtraField() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
    new (ptr) ::CMsgSteamDatagramRelayAuthTicket_ExtraField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramRelayAuthTicket_ExtraField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramRelayAuthTicket_ExtraField}, {}};

static void InitDefaultsCMsgSteamDatagramRelayAuthTicket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramRelayAuthTicket_default_instance_;
    new (ptr) ::CMsgSteamDatagramRelayAuthTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramRelayAuthTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramRelayAuthTicket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramRelayAuthTicket}, {
      &protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField.base,}};

static void InitDefaultsCMsgSteamDatagramSignedRelayAuthTicket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
    new (ptr) ::CMsgSteamDatagramSignedRelayAuthTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramSignedRelayAuthTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSignedRelayAuthTicket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramSignedRelayAuthTicket}, {}};

static void InitDefaultsCMsgSteamDatagramCachedCredentialsForApp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
    new (ptr) ::CMsgSteamDatagramCachedCredentialsForApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCachedCredentialsForApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCachedCredentialsForApp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramCachedCredentialsForApp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRelayAuthTicket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramSignedRelayAuthTicket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramCachedCredentialsForApp.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, string_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, int64_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, fixed64_value_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, time_expiry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, authorized_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, authorized_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, gameserver_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, gameserver_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_pop_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, virtual_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, extra_fields_),
  3,
  2,
  4,
  5,
  6,
  1,
  0,
  7,
  8,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, reserved_do_not_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, signature_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, relay_tickets_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgSteamDatagramRelayAuthTicket_ExtraField)},
  { 13, 29, sizeof(::CMsgSteamDatagramRelayAuthTicket)},
  { 40, 49, sizeof(::CMsgSteamDatagramSignedRelayAuthTicket)},
  { 53, 61, sizeof(::CMsgSteamDatagramCachedCredentialsForApp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramRelayAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramCachedCredentialsForApp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steamdatagram_messages_auth.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!steamdatagram_messages_auth.proto\"\321\003\n "
      "CMsgSteamDatagramRelayAuthTicket\022\023\n\013time"
      "_expiry\030\001 \001(\007\022\033\n\023authorized_steam_id\030\002 \001"
      "(\006\022\034\n\024authorized_public_ip\030\003 \001(\007\022\033\n\023game"
      "server_steam_id\030\004 \001(\006\022 \n\030legacy_gameserv"
      "er_net_id\030\005 \001(\006\022\032\n\022gameserver_address\030\013 "
      "\001(\t\022\030\n\020legacy_signature\030\006 \001(\014\022\016\n\006app_id\030"
      "\007 \001(\r\022 \n\030legacy_gameserver_pop_id\030\t \001(\007\022"
      "\024\n\014virtual_port\030\n \001(\r\022B\n\014extra_fields\030\010 "
      "\003(\0132,.CMsgSteamDatagramRelayAuthTicket.E"
      "xtraField\032\\\n\nExtraField\022\014\n\004name\030\001 \001(\t\022\024\n"
      "\014string_value\030\002 \001(\t\022\023\n\013int64_value\030\003 \001(\022"
      "\022\025\n\rfixed64_value\030\005 \001(\006\"x\n&CMsgSteamData"
      "gramSignedRelayAuthTicket\022\033\n\023reserved_do"
      "_not_use\030\001 \001(\006\022\016\n\006key_id\030\002 \001(\006\022\016\n\006ticket"
      "\030\003 \001(\014\022\021\n\tsignature\030\004 \001(\014\"d\n(CMsgSteamDa"
      "tagramCachedCredentialsForApp\022\023\n\013private"
      "_key\030\001 \001(\014\022\014\n\004cert\030\002 \001(\014\022\025\n\rrelay_ticket"
      "s\030\003 \003(\014B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamdatagram_messages_auth.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steamdatagram_5fmessages_5fauth_2eproto

// ===================================================================

void CMsgSteamDatagramRelayAuthTicket_ExtraField::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kNameFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kStringValueFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kInt64ValueFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kFixed64ValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramRelayAuthTicket.ExtraField)
}
CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&int64_value_, &from.int64_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed64_value_) -
    reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRelayAuthTicket.ExtraField)
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&int64_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed64_value_) -
      reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
}

CMsgSteamDatagramRelayAuthTicket_ExtraField::~CMsgSteamDatagramRelayAuthTicket_ExtraField() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  SharedDtor();
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayAuthTicket_ExtraField::descriptor() {
  ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramRelayAuthTicket_ExtraField.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRelayAuthTicket_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&int64_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed64_value_) -
        reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramRelayAuthTicket_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 int64_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_int64_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 fixed64_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_fixed64_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return false;
#undef DO_
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_value(), output);
  }

  // optional sint64 int64_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->int64_value(), output);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->fixed64_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramRelayAuthTicket.ExtraField)
}

::google::protobuf::uint8* CMsgSteamDatagramRelayAuthTicket_ExtraField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // optional sint64 int64_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->int64_value(), target);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->fixed64_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return target;
}

size_t CMsgSteamDatagramRelayAuthTicket_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string string_value = 2;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional sint64 int64_value = 3;
    if (has_int64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int64_value());
    }

    // optional fixed64 fixed64_value = 5;
    if (has_fixed64_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRelayAuthTicket_ExtraField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramRelayAuthTicket_ExtraField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRelayAuthTicket.ExtraField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRelayAuthTicket.ExtraField)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000004u) {
      int64_value_ = from.int64_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      fixed64_value_ = from.fixed64_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket_ExtraField::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::Swap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRelayAuthTicket_ExtraField::InternalSwap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  string_value_.Swap(&other->string_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(int64_value_, other->int64_value_);
  swap(fixed64_value_, other->fixed64_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamDatagramRelayAuthTicket_ExtraField::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRelayAuthTicket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRelayAuthTicket::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAuthorizedSteamIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverNetIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kGameserverAddressFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacySignatureFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAppIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverPopIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kVirtualPortFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kExtraFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramRelayAuthTicket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramRelayAuthTicket)
}
CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      extra_fields_(from.extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  legacy_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_legacy_signature()) {
    legacy_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legacy_signature_);
  }
  gameserver_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameserver_address()) {
    gameserver_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserver_address_);
  }
  ::memcpy(&authorized_steam_id_, &from.authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_port_) -
    reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(virtual_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRelayAuthTicket)
}

void CMsgSteamDatagramRelayAuthTicket::SharedCtor() {
  legacy_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserver_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_port_) -
      reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(virtual_port_));
}

CMsgSteamDatagramRelayAuthTicket::~CMsgSteamDatagramRelayAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRelayAuthTicket)
  SharedDtor();
}

void CMsgSteamDatagramRelayAuthTicket::SharedDtor() {
  legacy_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserver_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRelayAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayAuthTicket::descriptor() {
  ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramRelayAuthTicket& CMsgSteamDatagramRelayAuthTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramRelayAuthTicket.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRelayAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      gameserver_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(app_id_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&legacy_gameserver_pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_port_) -
        reinterpret_cast<char*>(&legacy_gameserver_pop_id_)) + sizeof(virtual_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramRelayAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramRelayAuthTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_time_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 authorized_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_authorized_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &authorized_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 authorized_public_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_authorized_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gameserver_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_legacy_gameserver_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes legacy_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 legacy_gameserver_pop_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_legacy_gameserver_pop_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_gameserver_pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 virtual_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_virtual_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gameserver_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserver_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameserver_address().data(), static_cast<int>(this->gameserver_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramRelayAuthTicket.gameserver_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramRelayAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramRelayAuthTicket)
  return false;
#undef DO_
}

void CMsgSteamDatagramRelayAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_expiry(), output);
  }

  // optional fixed64 authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->authorized_public_ip(), output);
  }

  // optional fixed64 gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameserver_steam_id(), output);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->legacy_gameserver_net_id(), output);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->legacy_signature(), output);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->app_id(), output);
  }

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->extra_fields(static_cast<int>(i)),
      output);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->legacy_gameserver_pop_id(), output);
  }

  // optional uint32 virtual_port = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->virtual_port(), output);
  }

  // optional string gameserver_address = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameserver_address().data(), static_cast<int>(this->gameserver_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.gameserver_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gameserver_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramRelayAuthTicket)
}

::google::protobuf::uint8* CMsgSteamDatagramRelayAuthTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_expiry(), target);
  }

  // optional fixed64 authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->legacy_gameserver_net_id(), target);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->legacy_signature(), target);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->app_id(), target);
  }

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->extra_fields(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->legacy_gameserver_pop_id(), target);
  }

  // optional uint32 virtual_port = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->virtual_port(), target);
  }

  // optional string gameserver_address = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameserver_address().data(), static_cast<int>(this->gameserver_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.gameserver_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gameserver_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRelayAuthTicket)
  return target;
}

size_t CMsgSteamDatagramRelayAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRelayAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_fields(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes legacy_signature = 6;
    if (has_legacy_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_signature());
    }

    // optional string gameserver_address = 11;
    if (has_gameserver_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserver_address());
    }

    // optional fixed64 authorized_steam_id = 2;
    if (has_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 time_expiry = 1;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

    // optional fixed32 authorized_public_ip = 3;
    if (has_authorized_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed64 gameserver_steam_id = 4;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_net_id = 5;
    if (has_legacy_gameserver_net_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 7;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional fixed32 legacy_gameserver_pop_id = 9;
    if (has_legacy_gameserver_pop_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 virtual_port = 10;
    if (has_virtual_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRelayAuthTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramRelayAuthTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRelayAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRelayAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_legacy_signature();
      legacy_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legacy_signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gameserver_address();
      gameserver_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserver_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      authorized_steam_id_ = from.authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_expiry_ = from.time_expiry_;
    }
    if (cached_has_bits & 0x00000010u) {
      authorized_public_ip_ = from.authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      gameserver_steam_id_ = from.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_gameserver_net_id_ = from.legacy_gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      legacy_gameserver_pop_id_ = from.legacy_gameserver_pop_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      virtual_port_ = from.virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayAuthTicket::Swap(CMsgSteamDatagramRelayAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRelayAuthTicket::InternalSwap(CMsgSteamDatagramRelayAuthTicket* other) {
  using std::swap;
  CastToBase(&extra_fields_)->InternalSwap(CastToBase(&other->extra_fields_));
  legacy_signature_.Swap(&other->legacy_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gameserver_address_.Swap(&other->gameserver_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authorized_steam_id_, other->authorized_steam_id_);
  swap(time_expiry_, other->time_expiry_);
  swap(authorized_public_ip_, other->authorized_public_ip_);
  swap(gameserver_steam_id_, other->gameserver_steam_id_);
  swap(legacy_gameserver_net_id_, other->legacy_gameserver_net_id_);
  swap(app_id_, other->app_id_);
  swap(legacy_gameserver_pop_id_, other->legacy_gameserver_pop_id_);
  swap(virtual_port_, other->virtual_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamDatagramRelayAuthTicket::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramSignedRelayAuthTicket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramSignedRelayAuthTicket::kReservedDoNotUseFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kKeyIdFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kTicketFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramSignedRelayAuthTicket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramSignedRelayAuthTicket)
}
CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&reserved_do_not_use_, &from.reserved_do_not_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSignedRelayAuthTicket)
}

void CMsgSteamDatagramSignedRelayAuthTicket::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reserved_do_not_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_id_) -
      reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
}

CMsgSteamDatagramSignedRelayAuthTicket::~CMsgSteamDatagramSignedRelayAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSignedRelayAuthTicket)
  SharedDtor();
}

void CMsgSteamDatagramSignedRelayAuthTicket::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSignedRelayAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSignedRelayAuthTicket::descriptor() {
  ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramSignedRelayAuthTicket& CMsgSteamDatagramSignedRelayAuthTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramSignedRelayAuthTicket.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramSignedRelayAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSignedRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&reserved_do_not_use_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_id_) -
        reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramSignedRelayAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramSignedRelayAuthTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 reserved_do_not_use = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_reserved_do_not_use();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &reserved_do_not_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramSignedRelayAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramSignedRelayAuthTicket)
  return false;
#undef DO_
}

void CMsgSteamDatagramSignedRelayAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramSignedRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 reserved_do_not_use = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->reserved_do_not_use(), output);
  }

  // optional fixed64 key_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->key_id(), output);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramSignedRelayAuthTicket)
}

::google::protobuf::uint8* CMsgSteamDatagramSignedRelayAuthTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSignedRelayAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 reserved_do_not_use = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->reserved_do_not_use(), target);
  }

  // optional fixed64 key_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->key_id(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSignedRelayAuthTicket)
  return target;
}

size_t CMsgSteamDatagramSignedRelayAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSignedRelayAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional bytes signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional fixed64 reserved_do_not_use = 1;
    if (has_reserved_do_not_use()) {
      total_size += 1 + 8;
    }

    // optional fixed64 key_id = 2;
    if (has_key_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSignedRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSignedRelayAuthTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramSignedRelayAuthTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSignedRelayAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSignedRelayAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSignedRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      reserved_do_not_use_ = from.reserved_do_not_use_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_id_ = from.key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSignedRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSignedRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSignedRelayAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSignedRelayAuthTicket::Swap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramSignedRelayAuthTicket::InternalSwap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
  using std::swap;
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reserved_do_not_use_, other->reserved_do_not_use_);
  swap(key_id_, other->key_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamDatagramSignedRelayAuthTicket::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramCachedCredentialsForApp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCachedCredentialsForApp::kPrivateKeyFieldNumber;
const int CMsgSteamDatagramCachedCredentialsForApp::kCertFieldNumber;
const int CMsgSteamDatagramCachedCredentialsForApp::kRelayTicketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramCachedCredentialsForApp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramCachedCredentialsForApp)
}
CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      relay_tickets_(from.relay_tickets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_key()) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert()) {
    cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCachedCredentialsForApp)
}

void CMsgSteamDatagramCachedCredentialsForApp::SharedCtor() {
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramCachedCredentialsForApp::~CMsgSteamDatagramCachedCredentialsForApp() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCachedCredentialsForApp)
  SharedDtor();
}

void CMsgSteamDatagramCachedCredentialsForApp::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCachedCredentialsForApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCachedCredentialsForApp::descriptor() {
  ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramCachedCredentialsForApp& CMsgSteamDatagramCachedCredentialsForApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamdatagram_5fmessages_5fauth_2eproto::scc_info_CMsgSteamDatagramCachedCredentialsForApp.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCachedCredentialsForApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCachedCredentialsForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_tickets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      private_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cert_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramCachedCredentialsForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramCachedCredentialsForApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes private_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes cert = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes relay_tickets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_relay_tickets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramCachedCredentialsForApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramCachedCredentialsForApp)
  return false;
#undef DO_
}

void CMsgSteamDatagramCachedCredentialsForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramCachedCredentialsForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->private_key(), output);
  }

  // optional bytes cert = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cert(), output);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0, n = this->relay_tickets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->relay_tickets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramCachedCredentialsForApp)
}

::google::protobuf::uint8* CMsgSteamDatagramCachedCredentialsForApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCachedCredentialsForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->private_key(), target);
  }

  // optional bytes cert = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cert(), target);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0, n = this->relay_tickets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->relay_tickets(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCachedCredentialsForApp)
  return target;
}

size_t CMsgSteamDatagramCachedCredentialsForApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCachedCredentialsForApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes relay_tickets = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->relay_tickets_size());
  for (int i = 0, n = this->relay_tickets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->relay_tickets(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

    // optional bytes cert = 2;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCachedCredentialsForApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCachedCredentialsForApp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramCachedCredentialsForApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCachedCredentialsForApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCachedCredentialsForApp)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCachedCredentialsForApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_tickets_.MergeFrom(from.relay_tickets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cert();
      cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
  }
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCachedCredentialsForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCachedCredentialsForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCachedCredentialsForApp::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCachedCredentialsForApp::Swap(CMsgSteamDatagramCachedCredentialsForApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCachedCredentialsForApp::InternalSwap(CMsgSteamDatagramCachedCredentialsForApp* other) {
  using std::swap;
  relay_tickets_.InternalSwap(CastToBase(&other->relay_tickets_));
  private_key_.Swap(&other->private_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cert_.Swap(&other->cert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamDatagramCachedCredentialsForApp::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_5fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_5fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamDatagramRelayAuthTicket_ExtraField* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamDatagramRelayAuthTicket* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRelayAuthTicket >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramRelayAuthTicket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamDatagramSignedRelayAuthTicket* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSignedRelayAuthTicket >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramSignedRelayAuthTicket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamDatagramCachedCredentialsForApp* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCachedCredentialsForApp >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramCachedCredentialsForApp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
