// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_stream_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CFrameEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CFrameStatAccumulatedValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStreamVideoMode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingClientCaps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingClientConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingClientHandshakeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingServerHandshakeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CFrameStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CNegotiatedConfig;
}  // namespace protobuf_stream_2eproto
class CDiscoveryPingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDiscoveryPingRequest>
      _instance;
} _CDiscoveryPingRequest_default_instance_;
class CDiscoveryPingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDiscoveryPingResponse>
      _instance;
} _CDiscoveryPingResponse_default_instance_;
class CStreamingClientHandshakeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamingClientHandshakeInfo>
      _instance;
} _CStreamingClientHandshakeInfo_default_instance_;
class CClientHandshakeMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientHandshakeMsg>
      _instance;
} _CClientHandshakeMsg_default_instance_;
class CStreamingServerHandshakeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamingServerHandshakeInfo>
      _instance;
} _CStreamingServerHandshakeInfo_default_instance_;
class CServerHandshakeMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CServerHandshakeMsg>
      _instance;
} _CServerHandshakeMsg_default_instance_;
class CAuthenticationRequestMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAuthenticationRequestMsg>
      _instance;
} _CAuthenticationRequestMsg_default_instance_;
class CAuthenticationResponseMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAuthenticationResponseMsg>
      _instance;
} _CAuthenticationResponseMsg_default_instance_;
class CKeepAliveMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CKeepAliveMsg>
      _instance;
} _CKeepAliveMsg_default_instance_;
class CStartNetworkTestMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStartNetworkTestMsg>
      _instance;
} _CStartNetworkTestMsg_default_instance_;
class CStreamVideoModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamVideoMode>
      _instance;
} _CStreamVideoMode_default_instance_;
class CStreamingClientCapsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamingClientCaps>
      _instance;
} _CStreamingClientCaps_default_instance_;
class CStreamingClientConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamingClientConfig>
      _instance;
} _CStreamingClientConfig_default_instance_;
class CStreamingServerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamingServerConfig>
      _instance;
} _CStreamingServerConfig_default_instance_;
class CNegotiatedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNegotiatedConfig>
      _instance;
} _CNegotiatedConfig_default_instance_;
class CNegotiationInitMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNegotiationInitMsg>
      _instance;
} _CNegotiationInitMsg_default_instance_;
class CNegotiationSetConfigMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNegotiationSetConfigMsg>
      _instance;
} _CNegotiationSetConfigMsg_default_instance_;
class CNegotiationCompleteMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNegotiationCompleteMsg>
      _instance;
} _CNegotiationCompleteMsg_default_instance_;
class CStartAudioDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStartAudioDataMsg>
      _instance;
} _CStartAudioDataMsg_default_instance_;
class CStopAudioDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStopAudioDataMsg>
      _instance;
} _CStopAudioDataMsg_default_instance_;
class CStartVideoDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStartVideoDataMsg>
      _instance;
} _CStartVideoDataMsg_default_instance_;
class CStopVideoDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStopVideoDataMsg>
      _instance;
} _CStopVideoDataMsg_default_instance_;
class CInputLatencyTestMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputLatencyTestMsg>
      _instance;
} _CInputLatencyTestMsg_default_instance_;
class CInputMouseMotionMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputMouseMotionMsg>
      _instance;
} _CInputMouseMotionMsg_default_instance_;
class CInputMouseWheelMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputMouseWheelMsg>
      _instance;
} _CInputMouseWheelMsg_default_instance_;
class CInputMouseDownMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputMouseDownMsg>
      _instance;
} _CInputMouseDownMsg_default_instance_;
class CInputMouseUpMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputMouseUpMsg>
      _instance;
} _CInputMouseUpMsg_default_instance_;
class CInputKeyDownMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputKeyDownMsg>
      _instance;
} _CInputKeyDownMsg_default_instance_;
class CInputKeyUpMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputKeyUpMsg>
      _instance;
} _CInputKeyUpMsg_default_instance_;
class CInputTextMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CInputTextMsg>
      _instance;
} _CInputTextMsg_default_instance_;
class CSetTitleMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetTitleMsg>
      _instance;
} _CSetTitleMsg_default_instance_;
class CSetIconMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetIconMsg>
      _instance;
} _CSetIconMsg_default_instance_;
class CShowCursorMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CShowCursorMsg>
      _instance;
} _CShowCursorMsg_default_instance_;
class CHideCursorMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHideCursorMsg>
      _instance;
} _CHideCursorMsg_default_instance_;
class CSetCursorMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetCursorMsg>
      _instance;
} _CSetCursorMsg_default_instance_;
class CGetCursorImageMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGetCursorImageMsg>
      _instance;
} _CGetCursorImageMsg_default_instance_;
class CSetCursorImageMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetCursorImageMsg>
      _instance;
} _CSetCursorImageMsg_default_instance_;
class CVideoDecoderInfoMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideoDecoderInfoMsg>
      _instance;
} _CVideoDecoderInfoMsg_default_instance_;
class CVideoEncoderInfoMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideoEncoderInfoMsg>
      _instance;
} _CVideoEncoderInfoMsg_default_instance_;
class CQuitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CQuitRequest>
      _instance;
} _CQuitRequest_default_instance_;
class CDeleteCursorMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDeleteCursorMsg>
      _instance;
} _CDeleteCursorMsg_default_instance_;
class CSetStreamingClientConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetStreamingClientConfig>
      _instance;
} _CSetStreamingClientConfig_default_instance_;
class CSetQoSMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetQoSMsg>
      _instance;
} _CSetQoSMsg_default_instance_;
class CSetTargetFramerateMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetTargetFramerateMsg>
      _instance;
} _CSetTargetFramerateMsg_default_instance_;
class CSetTargetBitrateMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetTargetBitrateMsg>
      _instance;
} _CSetTargetBitrateMsg_default_instance_;
class COverlayEnabledMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<COverlayEnabledMsg>
      _instance;
} _COverlayEnabledMsg_default_instance_;
class CSetGammaRampMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetGammaRampMsg>
      _instance;
} _CSetGammaRampMsg_default_instance_;
class CSetActivityMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetActivityMsg>
      _instance;
} _CSetActivityMsg_default_instance_;
class CSystemSuspendMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSystemSuspendMsg>
      _instance;
} _CSystemSuspendMsg_default_instance_;
class CVirtualHereRequestMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualHereRequestMsg>
      _instance;
} _CVirtualHereRequestMsg_default_instance_;
class CVirtualHereReadyMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualHereReadyMsg>
      _instance;
} _CVirtualHereReadyMsg_default_instance_;
class CVirtualHereShareDeviceMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVirtualHereShareDeviceMsg>
      _instance;
} _CVirtualHereShareDeviceMsg_default_instance_;
class CSetSpectatorModeMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetSpectatorModeMsg>
      _instance;
} _CSetSpectatorModeMsg_default_instance_;
class CRemoteHIDMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CRemoteHIDMsg>
      _instance;
} _CRemoteHIDMsg_default_instance_;
class CTouchConfigActiveMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTouchConfigActiveMsg>
      _instance;
} _CTouchConfigActiveMsg_default_instance_;
class CGetTouchConfigDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGetTouchConfigDataMsg>
      _instance;
} _CGetTouchConfigDataMsg_default_instance_;
class CSetTouchConfigDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetTouchConfigDataMsg>
      _instance;
} _CSetTouchConfigDataMsg_default_instance_;
class CSaveTouchConfigLayoutMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSaveTouchConfigLayoutMsg>
      _instance;
} _CSaveTouchConfigLayoutMsg_default_instance_;
class CTouchActionSetActiveMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTouchActionSetActiveMsg>
      _instance;
} _CTouchActionSetActiveMsg_default_instance_;
class CGetTouchIconDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGetTouchIconDataMsg>
      _instance;
} _CGetTouchIconDataMsg_default_instance_;
class CSetTouchIconDataMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSetTouchIconDataMsg>
      _instance;
} _CSetTouchIconDataMsg_default_instance_;
class CStreamDataLostMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamDataLostMsg>
      _instance;
} _CStreamDataLostMsg_default_instance_;
class CAudioFormatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAudioFormat>
      _instance;
} _CAudioFormat_default_instance_;
class CVideoFormatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideoFormat>
      _instance;
} _CVideoFormat_default_instance_;
class CFrameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFrameEvent>
      _instance;
} _CFrameEvent_default_instance_;
class CFrameStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFrameStats>
      _instance;
} _CFrameStats_default_instance_;
class CFrameStatAccumulatedValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFrameStatAccumulatedValue>
      _instance;
} _CFrameStatAccumulatedValue_default_instance_;
class CFrameStatsListMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFrameStatsListMsg>
      _instance;
} _CFrameStatsListMsg_default_instance_;
class CStreamingSessionStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStreamingSessionStats>
      _instance;
} _CStreamingSessionStats_default_instance_;
class CDebugDumpMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDebugDumpMsg>
      _instance;
} _CDebugDumpMsg_default_instance_;
class CLogMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLogMsg>
      _instance;
} _CLogMsg_default_instance_;
class CLogUploadMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLogUploadMsg>
      _instance;
} _CLogUploadMsg_default_instance_;
namespace protobuf_stream_2eproto {
static void InitDefaultsCDiscoveryPingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDiscoveryPingRequest_default_instance_;
    new (ptr) ::CDiscoveryPingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDiscoveryPingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDiscoveryPingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDiscoveryPingRequest}, {}};

static void InitDefaultsCDiscoveryPingResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDiscoveryPingResponse_default_instance_;
    new (ptr) ::CDiscoveryPingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDiscoveryPingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDiscoveryPingResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDiscoveryPingResponse}, {}};

static void InitDefaultsCStreamingClientHandshakeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamingClientHandshakeInfo_default_instance_;
    new (ptr) ::CStreamingClientHandshakeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamingClientHandshakeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingClientHandshakeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamingClientHandshakeInfo}, {}};

static void InitDefaultsCClientHandshakeMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClientHandshakeMsg_default_instance_;
    new (ptr) ::CClientHandshakeMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClientHandshakeMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CClientHandshakeMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCClientHandshakeMsg}, {
      &protobuf_stream_2eproto::scc_info_CStreamingClientHandshakeInfo.base,}};

static void InitDefaultsCStreamingServerHandshakeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamingServerHandshakeInfo_default_instance_;
    new (ptr) ::CStreamingServerHandshakeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamingServerHandshakeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingServerHandshakeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamingServerHandshakeInfo}, {}};

static void InitDefaultsCServerHandshakeMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CServerHandshakeMsg_default_instance_;
    new (ptr) ::CServerHandshakeMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CServerHandshakeMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CServerHandshakeMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCServerHandshakeMsg}, {
      &protobuf_stream_2eproto::scc_info_CStreamingServerHandshakeInfo.base,}};

static void InitDefaultsCAuthenticationRequestMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAuthenticationRequestMsg_default_instance_;
    new (ptr) ::CAuthenticationRequestMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAuthenticationRequestMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAuthenticationRequestMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAuthenticationRequestMsg}, {}};

static void InitDefaultsCAuthenticationResponseMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAuthenticationResponseMsg_default_instance_;
    new (ptr) ::CAuthenticationResponseMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAuthenticationResponseMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAuthenticationResponseMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAuthenticationResponseMsg}, {}};

static void InitDefaultsCKeepAliveMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CKeepAliveMsg_default_instance_;
    new (ptr) ::CKeepAliveMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CKeepAliveMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CKeepAliveMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCKeepAliveMsg}, {}};

static void InitDefaultsCStartNetworkTestMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStartNetworkTestMsg_default_instance_;
    new (ptr) ::CStartNetworkTestMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStartNetworkTestMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStartNetworkTestMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStartNetworkTestMsg}, {}};

static void InitDefaultsCStreamVideoMode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamVideoMode_default_instance_;
    new (ptr) ::CStreamVideoMode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamVideoMode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamVideoMode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamVideoMode}, {}};

static void InitDefaultsCStreamingClientCaps() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamingClientCaps_default_instance_;
    new (ptr) ::CStreamingClientCaps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamingClientCaps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingClientCaps =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamingClientCaps}, {}};

static void InitDefaultsCStreamingClientConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamingClientConfig_default_instance_;
    new (ptr) ::CStreamingClientConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamingClientConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingClientConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamingClientConfig}, {}};

static void InitDefaultsCStreamingServerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamingServerConfig_default_instance_;
    new (ptr) ::CStreamingServerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamingServerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingServerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamingServerConfig}, {}};

static void InitDefaultsCNegotiatedConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CNegotiatedConfig_default_instance_;
    new (ptr) ::CNegotiatedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNegotiatedConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CNegotiatedConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCNegotiatedConfig}, {
      &protobuf_stream_2eproto::scc_info_CStreamVideoMode.base,}};

static void InitDefaultsCNegotiationInitMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CNegotiationInitMsg_default_instance_;
    new (ptr) ::CNegotiationInitMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNegotiationInitMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CNegotiationInitMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCNegotiationInitMsg}, {}};

static void InitDefaultsCNegotiationSetConfigMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CNegotiationSetConfigMsg_default_instance_;
    new (ptr) ::CNegotiationSetConfigMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNegotiationSetConfigMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CNegotiationSetConfigMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCNegotiationSetConfigMsg}, {
      &protobuf_stream_2eproto::scc_info_CNegotiatedConfig.base,
      &protobuf_stream_2eproto::scc_info_CStreamingClientConfig.base,
      &protobuf_stream_2eproto::scc_info_CStreamingClientCaps.base,}};

static void InitDefaultsCNegotiationCompleteMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CNegotiationCompleteMsg_default_instance_;
    new (ptr) ::CNegotiationCompleteMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNegotiationCompleteMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CNegotiationCompleteMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCNegotiationCompleteMsg}, {}};

static void InitDefaultsCStartAudioDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStartAudioDataMsg_default_instance_;
    new (ptr) ::CStartAudioDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStartAudioDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStartAudioDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStartAudioDataMsg}, {}};

static void InitDefaultsCStopAudioDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStopAudioDataMsg_default_instance_;
    new (ptr) ::CStopAudioDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStopAudioDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStopAudioDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStopAudioDataMsg}, {}};

static void InitDefaultsCStartVideoDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStartVideoDataMsg_default_instance_;
    new (ptr) ::CStartVideoDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStartVideoDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStartVideoDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStartVideoDataMsg}, {}};

static void InitDefaultsCStopVideoDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStopVideoDataMsg_default_instance_;
    new (ptr) ::CStopVideoDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStopVideoDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStopVideoDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStopVideoDataMsg}, {}};

static void InitDefaultsCInputLatencyTestMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputLatencyTestMsg_default_instance_;
    new (ptr) ::CInputLatencyTestMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputLatencyTestMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputLatencyTestMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputLatencyTestMsg}, {}};

static void InitDefaultsCInputMouseMotionMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputMouseMotionMsg_default_instance_;
    new (ptr) ::CInputMouseMotionMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputMouseMotionMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputMouseMotionMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputMouseMotionMsg}, {}};

static void InitDefaultsCInputMouseWheelMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputMouseWheelMsg_default_instance_;
    new (ptr) ::CInputMouseWheelMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputMouseWheelMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputMouseWheelMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputMouseWheelMsg}, {}};

static void InitDefaultsCInputMouseDownMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputMouseDownMsg_default_instance_;
    new (ptr) ::CInputMouseDownMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputMouseDownMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputMouseDownMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputMouseDownMsg}, {}};

static void InitDefaultsCInputMouseUpMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputMouseUpMsg_default_instance_;
    new (ptr) ::CInputMouseUpMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputMouseUpMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputMouseUpMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputMouseUpMsg}, {}};

static void InitDefaultsCInputKeyDownMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputKeyDownMsg_default_instance_;
    new (ptr) ::CInputKeyDownMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputKeyDownMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputKeyDownMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputKeyDownMsg}, {}};

static void InitDefaultsCInputKeyUpMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputKeyUpMsg_default_instance_;
    new (ptr) ::CInputKeyUpMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputKeyUpMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputKeyUpMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputKeyUpMsg}, {}};

static void InitDefaultsCInputTextMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CInputTextMsg_default_instance_;
    new (ptr) ::CInputTextMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CInputTextMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CInputTextMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCInputTextMsg}, {}};

static void InitDefaultsCSetTitleMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetTitleMsg_default_instance_;
    new (ptr) ::CSetTitleMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetTitleMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetTitleMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetTitleMsg}, {}};

static void InitDefaultsCSetIconMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetIconMsg_default_instance_;
    new (ptr) ::CSetIconMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetIconMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetIconMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetIconMsg}, {}};

static void InitDefaultsCShowCursorMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CShowCursorMsg_default_instance_;
    new (ptr) ::CShowCursorMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CShowCursorMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CShowCursorMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCShowCursorMsg}, {}};

static void InitDefaultsCHideCursorMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHideCursorMsg_default_instance_;
    new (ptr) ::CHideCursorMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHideCursorMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHideCursorMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHideCursorMsg}, {}};

static void InitDefaultsCSetCursorMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetCursorMsg_default_instance_;
    new (ptr) ::CSetCursorMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetCursorMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetCursorMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetCursorMsg}, {}};

static void InitDefaultsCGetCursorImageMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGetCursorImageMsg_default_instance_;
    new (ptr) ::CGetCursorImageMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGetCursorImageMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGetCursorImageMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGetCursorImageMsg}, {}};

static void InitDefaultsCSetCursorImageMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetCursorImageMsg_default_instance_;
    new (ptr) ::CSetCursorImageMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetCursorImageMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetCursorImageMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetCursorImageMsg}, {}};

static void InitDefaultsCVideoDecoderInfoMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideoDecoderInfoMsg_default_instance_;
    new (ptr) ::CVideoDecoderInfoMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideoDecoderInfoMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideoDecoderInfoMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideoDecoderInfoMsg}, {}};

static void InitDefaultsCVideoEncoderInfoMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideoEncoderInfoMsg_default_instance_;
    new (ptr) ::CVideoEncoderInfoMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideoEncoderInfoMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideoEncoderInfoMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideoEncoderInfoMsg}, {}};

static void InitDefaultsCQuitRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CQuitRequest_default_instance_;
    new (ptr) ::CQuitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CQuitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CQuitRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCQuitRequest}, {}};

static void InitDefaultsCDeleteCursorMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDeleteCursorMsg_default_instance_;
    new (ptr) ::CDeleteCursorMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDeleteCursorMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDeleteCursorMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDeleteCursorMsg}, {}};

static void InitDefaultsCSetStreamingClientConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetStreamingClientConfig_default_instance_;
    new (ptr) ::CSetStreamingClientConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetStreamingClientConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSetStreamingClientConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSetStreamingClientConfig}, {
      &protobuf_stream_2eproto::scc_info_CStreamingClientConfig.base,}};

static void InitDefaultsCSetQoSMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetQoSMsg_default_instance_;
    new (ptr) ::CSetQoSMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetQoSMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetQoSMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetQoSMsg}, {}};

static void InitDefaultsCSetTargetFramerateMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetTargetFramerateMsg_default_instance_;
    new (ptr) ::CSetTargetFramerateMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetTargetFramerateMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetTargetFramerateMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetTargetFramerateMsg}, {}};

static void InitDefaultsCSetTargetBitrateMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetTargetBitrateMsg_default_instance_;
    new (ptr) ::CSetTargetBitrateMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetTargetBitrateMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetTargetBitrateMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetTargetBitrateMsg}, {}};

static void InitDefaultsCOverlayEnabledMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_COverlayEnabledMsg_default_instance_;
    new (ptr) ::COverlayEnabledMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::COverlayEnabledMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_COverlayEnabledMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCOverlayEnabledMsg}, {}};

static void InitDefaultsCSetGammaRampMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetGammaRampMsg_default_instance_;
    new (ptr) ::CSetGammaRampMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetGammaRampMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetGammaRampMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetGammaRampMsg}, {}};

static void InitDefaultsCSetActivityMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetActivityMsg_default_instance_;
    new (ptr) ::CSetActivityMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetActivityMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetActivityMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetActivityMsg}, {}};

static void InitDefaultsCSystemSuspendMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSystemSuspendMsg_default_instance_;
    new (ptr) ::CSystemSuspendMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSystemSuspendMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSystemSuspendMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSystemSuspendMsg}, {}};

static void InitDefaultsCVirtualHereRequestMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVirtualHereRequestMsg_default_instance_;
    new (ptr) ::CVirtualHereRequestMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVirtualHereRequestMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualHereRequestMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVirtualHereRequestMsg}, {}};

static void InitDefaultsCVirtualHereReadyMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVirtualHereReadyMsg_default_instance_;
    new (ptr) ::CVirtualHereReadyMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVirtualHereReadyMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualHereReadyMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVirtualHereReadyMsg}, {}};

static void InitDefaultsCVirtualHereShareDeviceMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVirtualHereShareDeviceMsg_default_instance_;
    new (ptr) ::CVirtualHereShareDeviceMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVirtualHereShareDeviceMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVirtualHereShareDeviceMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVirtualHereShareDeviceMsg}, {}};

static void InitDefaultsCSetSpectatorModeMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetSpectatorModeMsg_default_instance_;
    new (ptr) ::CSetSpectatorModeMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetSpectatorModeMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetSpectatorModeMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetSpectatorModeMsg}, {}};

static void InitDefaultsCRemoteHIDMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CRemoteHIDMsg_default_instance_;
    new (ptr) ::CRemoteHIDMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CRemoteHIDMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CRemoteHIDMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCRemoteHIDMsg}, {}};

static void InitDefaultsCTouchConfigActiveMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CTouchConfigActiveMsg_default_instance_;
    new (ptr) ::CTouchConfigActiveMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTouchConfigActiveMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTouchConfigActiveMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTouchConfigActiveMsg}, {}};

static void InitDefaultsCGetTouchConfigDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGetTouchConfigDataMsg_default_instance_;
    new (ptr) ::CGetTouchConfigDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGetTouchConfigDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGetTouchConfigDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGetTouchConfigDataMsg}, {}};

static void InitDefaultsCSetTouchConfigDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetTouchConfigDataMsg_default_instance_;
    new (ptr) ::CSetTouchConfigDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetTouchConfigDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetTouchConfigDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetTouchConfigDataMsg}, {}};

static void InitDefaultsCSaveTouchConfigLayoutMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSaveTouchConfigLayoutMsg_default_instance_;
    new (ptr) ::CSaveTouchConfigLayoutMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSaveTouchConfigLayoutMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSaveTouchConfigLayoutMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSaveTouchConfigLayoutMsg}, {}};

static void InitDefaultsCTouchActionSetActiveMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CTouchActionSetActiveMsg_default_instance_;
    new (ptr) ::CTouchActionSetActiveMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTouchActionSetActiveMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTouchActionSetActiveMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTouchActionSetActiveMsg}, {}};

static void InitDefaultsCGetTouchIconDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGetTouchIconDataMsg_default_instance_;
    new (ptr) ::CGetTouchIconDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGetTouchIconDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGetTouchIconDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGetTouchIconDataMsg}, {}};

static void InitDefaultsCSetTouchIconDataMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSetTouchIconDataMsg_default_instance_;
    new (ptr) ::CSetTouchIconDataMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSetTouchIconDataMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSetTouchIconDataMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSetTouchIconDataMsg}, {}};

static void InitDefaultsCStreamDataLostMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamDataLostMsg_default_instance_;
    new (ptr) ::CStreamDataLostMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamDataLostMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamDataLostMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamDataLostMsg}, {}};

static void InitDefaultsCAudioFormat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAudioFormat_default_instance_;
    new (ptr) ::CAudioFormat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAudioFormat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAudioFormat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAudioFormat}, {}};

static void InitDefaultsCVideoFormat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideoFormat_default_instance_;
    new (ptr) ::CVideoFormat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideoFormat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideoFormat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideoFormat}, {}};

static void InitDefaultsCFrameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFrameEvent_default_instance_;
    new (ptr) ::CFrameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFrameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFrameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFrameEvent}, {}};

static void InitDefaultsCFrameStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFrameStats_default_instance_;
    new (ptr) ::CFrameStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFrameStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CFrameStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCFrameStats}, {
      &protobuf_stream_2eproto::scc_info_CFrameEvent.base,}};

static void InitDefaultsCFrameStatAccumulatedValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFrameStatAccumulatedValue_default_instance_;
    new (ptr) ::CFrameStatAccumulatedValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFrameStatAccumulatedValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFrameStatAccumulatedValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFrameStatAccumulatedValue}, {}};

static void InitDefaultsCFrameStatsListMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFrameStatsListMsg_default_instance_;
    new (ptr) ::CFrameStatsListMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFrameStatsListMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CFrameStatsListMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCFrameStatsListMsg}, {
      &protobuf_stream_2eproto::scc_info_CFrameStats.base,
      &protobuf_stream_2eproto::scc_info_CFrameStatAccumulatedValue.base,}};

static void InitDefaultsCStreamingSessionStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CStreamingSessionStats_default_instance_;
    new (ptr) ::CStreamingSessionStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CStreamingSessionStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStreamingSessionStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStreamingSessionStats}, {}};

static void InitDefaultsCDebugDumpMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDebugDumpMsg_default_instance_;
    new (ptr) ::CDebugDumpMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDebugDumpMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDebugDumpMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDebugDumpMsg}, {}};

static void InitDefaultsCLogMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLogMsg_default_instance_;
    new (ptr) ::CLogMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLogMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CLogMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCLogMsg}, {}};

static void InitDefaultsCLogUploadMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLogUploadMsg_default_instance_;
    new (ptr) ::CLogUploadMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLogUploadMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CLogUploadMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCLogUploadMsg}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDiscoveryPingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDiscoveryPingResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamingClientHandshakeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientHandshakeMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamingServerHandshakeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CServerHandshakeMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAuthenticationRequestMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAuthenticationResponseMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CKeepAliveMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStartNetworkTestMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamVideoMode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamingClientCaps.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamingClientConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamingServerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CNegotiatedConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CNegotiationInitMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CNegotiationSetConfigMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CNegotiationCompleteMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStartAudioDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStopAudioDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStartVideoDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStopVideoDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputLatencyTestMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputMouseMotionMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputMouseWheelMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputMouseDownMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputMouseUpMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputKeyDownMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputKeyUpMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CInputTextMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetTitleMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetIconMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CShowCursorMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHideCursorMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetCursorMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGetCursorImageMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetCursorImageMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideoDecoderInfoMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideoEncoderInfoMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CQuitRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDeleteCursorMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetStreamingClientConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetQoSMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetTargetFramerateMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetTargetBitrateMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_COverlayEnabledMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetGammaRampMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetActivityMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSystemSuspendMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualHereRequestMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualHereReadyMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVirtualHereShareDeviceMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetSpectatorModeMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CRemoteHIDMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTouchConfigActiveMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGetTouchConfigDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetTouchConfigDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSaveTouchConfigLayoutMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTouchActionSetActiveMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGetTouchIconDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSetTouchIconDataMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamDataLostMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAudioFormat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideoFormat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFrameEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFrameStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFrameStatAccumulatedValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFrameStatsListMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStreamingSessionStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDebugDumpMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CLogMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CLogUploadMsg.base);
}

::google::protobuf::Metadata file_level_metadata[72];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[23];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingRequest, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingRequest, packet_size_requested_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingResponse, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDiscoveryPingResponse, packet_size_received_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientHandshakeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientHandshakeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientHandshakeInfo, network_test_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHandshakeMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHandshakeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHandshakeMsg, info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerHandshakeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerHandshakeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerHandshakeInfo, mtu_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CServerHandshakeMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CServerHandshakeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CServerHandshakeMsg, info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationRequestMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationRequestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationRequestMsg, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationRequestMsg, version_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationResponseMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationResponseMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationResponseMsg, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAuthenticationResponseMsg, version_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeepAliveMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeepAliveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartNetworkTestMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartNetworkTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartNetworkTestMsg, frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartNetworkTestMsg, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartNetworkTestMsg, bitrate_kbps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartNetworkTestMsg, burst_bitrate_kbps_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, refresh_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, refresh_rate_numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamVideoMode, refresh_rate_denominator_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, system_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, system_can_suspend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, maximum_decode_bitrate_kbps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, maximum_burst_bitrate_kbps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, supports_video_hevc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, disable_steam_store_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, disable_client_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, disable_intel_hardware_encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, disable_amd_hardware_encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientCaps, disable_nvidia_hardware_encoding_),
  0,
  3,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, maximum_resolution_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, maximum_resolution_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, maximum_framerate_numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, maximum_framerate_denominator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, maximum_bitrate_kbps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, enable_hardware_decoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, enable_performance_overlay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, enable_video_streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, enable_audio_streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, enable_input_streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, audio_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingClientConfig, enable_video_hevc_),
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  4,
  9,
  10,
  11,
  12,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, change_desktop_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, dynamically_adjust_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, enable_capture_nvfbc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, enable_hardware_encoding_nvidia_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, enable_hardware_encoding_amd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, enable_hardware_encoding_intel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, software_encoding_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingServerConfig, enable_traffic_priority_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, reliable_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, selected_audio_codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, selected_video_codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, available_video_modes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiatedConfig, enable_remote_hid_),
  2,
  0,
  1,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationInitMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationInitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationInitMsg, reliable_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationInitMsg, supported_audio_codecs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationInitMsg, supported_video_codecs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationInitMsg, supports_remote_hid_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationSetConfigMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationSetConfigMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationSetConfigMsg, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationSetConfigMsg, streaming_client_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationSetConfigMsg, streaming_client_caps_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationCompleteMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNegotiationCompleteMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, codec_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartAudioDataMsg, channels_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStopAudioDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStopAudioDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, codec_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStartVideoDataMsg, height_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStopVideoDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStopVideoDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputLatencyTestMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputLatencyTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputLatencyTestMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputLatencyTestMsg, color_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, x_normalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, y_normalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, dx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseMotionMsg, dy_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseWheelMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseWheelMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseWheelMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseWheelMsg, direction_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseDownMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseDownMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseDownMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseDownMsg, button_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseUpMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseUpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseUpMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputMouseUpMsg, button_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyDownMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyDownMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyDownMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyDownMsg, scancode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyUpMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyUpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyUpMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputKeyUpMsg, scancode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputTextMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputTextMsg, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CInputTextMsg, text_utf8_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTitleMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTitleMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTitleMsg, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetIconMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetIconMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetIconMsg, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetIconMsg, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetIconMsg, image_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CShowCursorMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CShowCursorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CShowCursorMsg, x_normalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CShowCursorMsg, y_normalized_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHideCursorMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHideCursorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorMsg, cursor_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetCursorImageMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetCursorImageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetCursorImageMsg, cursor_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, cursor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, hot_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, hot_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetCursorImageMsg, image_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoDecoderInfoMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoDecoderInfoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoDecoderInfoMsg, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoDecoderInfoMsg, threads_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoEncoderInfoMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoEncoderInfoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoEncoderInfoMsg, info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CQuitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CQuitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDeleteCursorMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDeleteCursorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDeleteCursorMsg, cursor_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetStreamingClientConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetStreamingClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetStreamingClientConfig, config_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetQoSMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetQoSMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetQoSMsg, use_qos_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetFramerateMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetFramerateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetFramerateMsg, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetFramerateMsg, reasons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetFramerateMsg, framerate_numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetFramerateMsg, framerate_denominator_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetBitrateMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetBitrateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTargetBitrateMsg, bitrate_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::COverlayEnabledMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::COverlayEnabledMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::COverlayEnabledMsg, enabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetGammaRampMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetGammaRampMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetGammaRampMsg, gamma_ramp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetActivityMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetActivityMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetActivityMsg, activity_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSystemSuspendMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSystemSuspendMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereRequestMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereRequestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereRequestMsg, hostname_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereReadyMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereReadyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereReadyMsg, licensed_device_count_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereShareDeviceMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereShareDeviceMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVirtualHereShareDeviceMsg, device_address_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetSpectatorModeMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetSpectatorModeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetSpectatorModeMsg, enabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CRemoteHIDMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CRemoteHIDMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CRemoteHIDMsg, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchConfigActiveMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchConfigActiveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchConfigActiveMsg, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchConfigActiveMsg, revision_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchConfigDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchConfigDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchConfigDataMsg, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchConfigDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchConfigDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchConfigDataMsg, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchConfigDataMsg, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchConfigDataMsg, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchConfigDataMsg, layout_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSaveTouchConfigLayoutMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSaveTouchConfigLayoutMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSaveTouchConfigLayoutMsg, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSaveTouchConfigLayoutMsg, layout_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchActionSetActiveMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchActionSetActiveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchActionSetActiveMsg, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTouchActionSetActiveMsg, actionset_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchIconDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchIconDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchIconDataMsg, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGetTouchIconDataMsg, icon_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchIconDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchIconDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchIconDataMsg, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchIconDataMsg, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSetTouchIconDataMsg, data_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamDataLostMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamDataLostMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamDataLostMsg, packets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAudioFormat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAudioFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAudioFormat, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAudioFormat, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAudioFormat, channels_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoFormat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoFormat, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoFormat, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideoFormat, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameEvent, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameEvent, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, input_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, frame_start_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, frame_display_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, ping_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, server_bitrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, client_bitrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, link_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, packet_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStats, frame_size_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatAccumulatedValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatAccumulatedValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatAccumulatedValue, stat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatAccumulatedValue, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatAccumulatedValue, average_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatAccumulatedValue, stddev_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatsListMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatsListMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatsListMsg, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatsListMsg, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatsListMsg, accumulated_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFrameStatsListMsg, latest_frame_id_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingSessionStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingSessionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingSessionStats, frame_loss_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingSessionStats, average_network_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CStreamingSessionStats, stddev_network_time_ms_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDebugDumpMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDebugDumpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDebugDumpMsg, screenshot_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogMsg, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogUploadMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogUploadMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogUploadMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLogUploadMsg, data_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CDiscoveryPingRequest)},
  { 9, 16, sizeof(::CDiscoveryPingResponse)},
  { 18, 24, sizeof(::CStreamingClientHandshakeInfo)},
  { 25, 31, sizeof(::CClientHandshakeMsg)},
  { 32, 38, sizeof(::CStreamingServerHandshakeInfo)},
  { 39, 45, sizeof(::CServerHandshakeMsg)},
  { 46, 53, sizeof(::CAuthenticationRequestMsg)},
  { 55, 62, sizeof(::CAuthenticationResponseMsg)},
  { 64, 69, sizeof(::CKeepAliveMsg)},
  { 69, 78, sizeof(::CStartNetworkTestMsg)},
  { 82, 92, sizeof(::CStreamVideoMode)},
  { 97, 112, sizeof(::CStreamingClientCaps)},
  { 122, 140, sizeof(::CStreamingClientConfig)},
  { 153, 166, sizeof(::CStreamingServerConfig)},
  { 174, 184, sizeof(::CNegotiatedConfig)},
  { 189, 198, sizeof(::CNegotiationInitMsg)},
  { 202, 210, sizeof(::CNegotiationSetConfigMsg)},
  { 213, 218, sizeof(::CNegotiationCompleteMsg)},
  { 218, 228, sizeof(::CStartAudioDataMsg)},
  { 233, 238, sizeof(::CStopAudioDataMsg)},
  { 238, 248, sizeof(::CStartVideoDataMsg)},
  { 253, 258, sizeof(::CStopVideoDataMsg)},
  { 258, 265, sizeof(::CInputLatencyTestMsg)},
  { 267, 277, sizeof(::CInputMouseMotionMsg)},
  { 282, 289, sizeof(::CInputMouseWheelMsg)},
  { 291, 298, sizeof(::CInputMouseDownMsg)},
  { 300, 307, sizeof(::CInputMouseUpMsg)},
  { 309, 316, sizeof(::CInputKeyDownMsg)},
  { 318, 325, sizeof(::CInputKeyUpMsg)},
  { 327, 334, sizeof(::CInputTextMsg)},
  { 336, 342, sizeof(::CSetTitleMsg)},
  { 343, 351, sizeof(::CSetIconMsg)},
  { 354, 361, sizeof(::CShowCursorMsg)},
  { 363, 368, sizeof(::CHideCursorMsg)},
  { 368, 374, sizeof(::CSetCursorMsg)},
  { 375, 381, sizeof(::CGetCursorImageMsg)},
  { 382, 393, sizeof(::CSetCursorImageMsg)},
  { 399, 406, sizeof(::CVideoDecoderInfoMsg)},
  { 408, 414, sizeof(::CVideoEncoderInfoMsg)},
  { 415, 420, sizeof(::CQuitRequest)},
  { 420, 426, sizeof(::CDeleteCursorMsg)},
  { 427, 433, sizeof(::CSetStreamingClientConfig)},
  { 434, 440, sizeof(::CSetQoSMsg)},
  { 441, 450, sizeof(::CSetTargetFramerateMsg)},
  { 454, 460, sizeof(::CSetTargetBitrateMsg)},
  { 461, 467, sizeof(::COverlayEnabledMsg)},
  { 468, 474, sizeof(::CSetGammaRampMsg)},
  { 475, 481, sizeof(::CSetActivityMsg)},
  { 482, 487, sizeof(::CSystemSuspendMsg)},
  { 487, 493, sizeof(::CVirtualHereRequestMsg)},
  { 494, 500, sizeof(::CVirtualHereReadyMsg)},
  { 501, 507, sizeof(::CVirtualHereShareDeviceMsg)},
  { 508, 514, sizeof(::CSetSpectatorModeMsg)},
  { 515, 521, sizeof(::CRemoteHIDMsg)},
  { 522, 529, sizeof(::CTouchConfigActiveMsg)},
  { 531, 537, sizeof(::CGetTouchConfigDataMsg)},
  { 538, 547, sizeof(::CSetTouchConfigDataMsg)},
  { 551, 558, sizeof(::CSaveTouchConfigLayoutMsg)},
  { 560, 567, sizeof(::CTouchActionSetActiveMsg)},
  { 569, 576, sizeof(::CGetTouchIconDataMsg)},
  { 578, 586, sizeof(::CSetTouchIconDataMsg)},
  { 589, 595, sizeof(::CStreamDataLostMsg)},
  { 596, 604, sizeof(::CAudioFormat)},
  { 607, 615, sizeof(::CVideoFormat)},
  { 618, 625, sizeof(::CFrameEvent)},
  { 627, 644, sizeof(::CFrameStats)},
  { 656, 665, sizeof(::CFrameStatAccumulatedValue)},
  { 669, 678, sizeof(::CFrameStatsListMsg)},
  { 682, 690, sizeof(::CStreamingSessionStats)},
  { 693, 699, sizeof(::CDebugDumpMsg)},
  { 700, 707, sizeof(::CLogMsg)},
  { 709, 716, sizeof(::CLogUploadMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDiscoveryPingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDiscoveryPingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamingClientHandshakeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CClientHandshakeMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamingServerHandshakeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CServerHandshakeMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAuthenticationRequestMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAuthenticationResponseMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CKeepAliveMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStartNetworkTestMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamVideoMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamingClientCaps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamingClientConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamingServerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNegotiatedConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNegotiationInitMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNegotiationSetConfigMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNegotiationCompleteMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStartAudioDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStopAudioDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStartVideoDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStopVideoDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputLatencyTestMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputMouseMotionMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputMouseWheelMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputMouseDownMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputMouseUpMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputKeyDownMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputKeyUpMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CInputTextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetTitleMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetIconMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CShowCursorMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHideCursorMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetCursorMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGetCursorImageMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetCursorImageMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideoDecoderInfoMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideoEncoderInfoMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CQuitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDeleteCursorMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetStreamingClientConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetQoSMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetTargetFramerateMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetTargetBitrateMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_COverlayEnabledMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetGammaRampMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetActivityMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSystemSuspendMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVirtualHereRequestMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVirtualHereReadyMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVirtualHereShareDeviceMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetSpectatorModeMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CRemoteHIDMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CTouchConfigActiveMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGetTouchConfigDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetTouchConfigDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSaveTouchConfigLayoutMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CTouchActionSetActiveMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGetTouchIconDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSetTouchIconDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamDataLostMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAudioFormat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideoFormat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFrameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFrameStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFrameStatAccumulatedValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFrameStatsListMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CStreamingSessionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDebugDumpMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CLogMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CLogUploadMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "stream.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 72);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014stream.proto\"H\n\025CDiscoveryPingRequest\022"
      "\020\n\010sequence\030\001 \001(\r\022\035\n\025packet_size_request"
      "ed\030\002 \001(\r\"H\n\026CDiscoveryPingResponse\022\020\n\010se"
      "quence\030\001 \001(\r\022\034\n\024packet_size_received\030\002 \001"
      "(\r\"5\n\035CStreamingClientHandshakeInfo\022\024\n\014n"
      "etwork_test\030\002 \001(\005\"C\n\023CClientHandshakeMsg"
      "\022,\n\004info\030\001 \002(\0132\036.CStreamingClientHandsha"
      "keInfo\",\n\035CStreamingServerHandshakeInfo\022"
      "\013\n\003mtu\030\001 \001(\005\"C\n\023CServerHandshakeMsg\022,\n\004i"
      "nfo\030\001 \002(\0132\036.CStreamingServerHandshakeInf"
      "o\"b\n\031CAuthenticationRequestMsg\022\r\n\005token\030"
      "\001 \001(\014\0226\n\007version\030\002 \001(\0162\017.EStreamVersion:"
      "\024k_EStreamVersionNone\"\324\001\n\032CAuthenticatio"
      "nResponseMsg\022K\n\006result\030\001 \001(\01620.CAuthenti"
      "cationResponseMsg.AuthenticationResult:\t"
      "SUCCEEDED\0226\n\007version\030\002 \001(\0162\017.EStreamVers"
      "ion:\024k_EStreamVersionNone\"1\n\024Authenticat"
      "ionResult\022\r\n\tSUCCEEDED\020\000\022\n\n\006FAILED\020\001\"\017\n\r"
      "CKeepAliveMsg\"k\n\024CStartNetworkTestMsg\022\016\n"
      "\006frames\030\001 \001(\r\022\021\n\tframerate\030\002 \001(\r\022\024\n\014bitr"
      "ate_kbps\030\003 \001(\r\022\032\n\022burst_bitrate_kbps\030\004 \001"
      "(\r\"\211\001\n\020CStreamVideoMode\022\r\n\005width\030\001 \002(\r\022\016"
      "\n\006height\030\002 \002(\r\022\024\n\014refresh_rate\030\003 \001(\r\022\036\n\026"
      "refresh_rate_numerator\030\004 \001(\r\022 \n\030refresh_"
      "rate_denominator\030\005 \001(\r\"\343\002\n\024CStreamingCli"
      "entCaps\022\023\n\013system_info\030\001 \001(\t\022\032\n\022system_c"
      "an_suspend\030\002 \001(\010\022#\n\033maximum_decode_bitra"
      "te_kbps\030\003 \001(\005\022\"\n\032maximum_burst_bitrate_k"
      "bps\030\004 \001(\005\022\033\n\023supports_video_hevc\030\005 \001(\010\022\033"
      "\n\023disable_steam_store\030\006 \001(\010\022\035\n\025disable_c"
      "lient_cursor\030\007 \001(\010\022\'\n\037disable_intel_hard"
      "ware_encoding\030\010 \001(\010\022%\n\035disable_amd_hardw"
      "are_encoding\030\t \001(\010\022(\n disable_nvidia_har"
      "dware_encoding\030\n \001(\010\"\212\004\n\026CStreamingClien"
      "tConfig\022D\n\007quality\030\001 \001(\0162\031.EStreamQualit"
      "yPreference:\030k_EStreamQualityBalanced\022\034\n"
      "\024maximum_resolution_x\030\002 \001(\r\022\034\n\024maximum_r"
      "esolution_y\030\003 \001(\r\022#\n\033maximum_framerate_n"
      "umerator\030\004 \001(\r\022%\n\035maximum_framerate_deno"
      "minator\030\005 \001(\r\022 \n\024maximum_bitrate_kbps\030\006 "
      "\001(\005:\002-1\022&\n\030enable_hardware_decoding\030\007 \001("
      "\010:\004true\022)\n\032enable_performance_overlay\030\010 "
      "\001(\010:\005false\022$\n\026enable_video_streaming\030\t \001"
      "(\010:\004true\022$\n\026enable_audio_streaming\030\n \001(\010"
      ":\004true\022$\n\026enable_input_streaming\030\013 \001(\010:\004"
      "true\022\031\n\016audio_channels\030\014 \001(\005:\0012\022 \n\021enabl"
      "e_video_hevc\030\r \001(\010:\005false\"\273\002\n\026CStreaming"
      "ServerConfig\022!\n\031change_desktop_resolutio"
      "n\030\001 \001(\010\022%\n\035dynamically_adjust_resolution"
      "\030\002 \001(\010\022\034\n\024enable_capture_nvfbc\030\003 \001(\010\022\'\n\037"
      "enable_hardware_encoding_nvidia\030\004 \001(\010\022$\n"
      "\034enable_hardware_encoding_amd\030\005 \001(\010\022&\n\036e"
      "nable_hardware_encoding_intel\030\006 \001(\010\022!\n\031s"
      "oftware_encoding_threads\030\007 \001(\005\022\037\n\027enable"
      "_traffic_priority\030\010 \001(\010\"\215\002\n\021CNegotiatedC"
      "onfig\022\025\n\rreliable_data\030\001 \001(\010\022I\n\024selected"
      "_audio_codec\030\002 \001(\0162\022.EStreamAudioCodec:\027"
      "k_EStreamAudioCodecNone\022I\n\024selected_vide"
      "o_codec\030\003 \001(\0162\022.EStreamVideoCodec:\027k_ESt"
      "reamVideoCodecNone\0220\n\025available_video_mo"
      "des\030\004 \003(\0132\021.CStreamVideoMode\022\031\n\021enable_r"
      "emote_hid\030\005 \001(\010\"\261\001\n\023CNegotiationInitMsg\022"
      "\025\n\rreliable_data\030\001 \001(\010\0222\n\026supported_audi"
      "o_codecs\030\002 \003(\0162\022.EStreamAudioCodec\0222\n\026su"
      "pported_video_codecs\030\003 \003(\0162\022.EStreamVide"
      "oCodec\022\033\n\023supports_remote_hid\030\004 \001(\010\"\256\001\n\030"
      "CNegotiationSetConfigMsg\022\"\n\006config\030\001 \002(\013"
      "2\022.CNegotiatedConfig\0228\n\027streaming_client"
      "_config\030\002 \001(\0132\027.CStreamingClientConfig\0224"
      "\n\025streaming_client_caps\030\003 \001(\0132\025.CStreami"
      "ngClientCaps\"\031\n\027CNegotiationCompleteMsg\""
      "\232\001\n\022CStartAudioDataMsg\022\017\n\007channel\030\002 \002(\r\022"
      ":\n\005codec\030\003 \001(\0162\022.EStreamAudioCodec:\027k_ES"
      "treamAudioCodecNone\022\022\n\ncodec_data\030\004 \001(\014\022"
      "\021\n\tfrequency\030\005 \001(\r\022\020\n\010channels\030\006 \001(\r\"\023\n\021"
      "CStopAudioDataMsg\"\224\001\n\022CStartVideoDataMsg"
      "\022\017\n\007channel\030\001 \002(\r\022:\n\005codec\030\002 \001(\0162\022.EStre"
      "amVideoCodec:\027k_EStreamVideoCodecNone\022\022\n"
      "\ncodec_data\030\003 \001(\014\022\r\n\005width\030\004 \001(\r\022\016\n\006heig"
      "ht\030\005 \001(\r\"\023\n\021CStopVideoDataMsg\"9\n\024CInputL"
      "atencyTestMsg\022\022\n\ninput_mark\030\001 \002(\r\022\r\n\005col"
      "or\030\002 \001(\r\"n\n\024CInputMouseMotionMsg\022\022\n\ninpu"
      "t_mark\030\001 \001(\r\022\024\n\014x_normalized\030\002 \001(\002\022\024\n\014y_"
      "normalized\030\003 \001(\002\022\n\n\002dx\030\004 \001(\005\022\n\n\002dy\030\005 \001(\005"
      "\"p\n\023CInputMouseWheelMsg\022\022\n\ninput_mark\030\001 "
      "\001(\r\022E\n\tdirection\030\002 \002(\0162\033.EStreamMouseWhe"
      "elDirection:\025k_EStreamMouseWheelUp\"g\n\022CI"
      "nputMouseDownMsg\022\022\n\ninput_mark\030\001 \001(\r\022=\n\006"
      "button\030\002 \002(\0162\023.EStreamMouseButton:\030k_ESt"
      "reamMouseButtonLeft\"e\n\020CInputMouseUpMsg\022"
      "\022\n\ninput_mark\030\001 \001(\r\022=\n\006button\030\002 \002(\0162\023.ES"
      "treamMouseButton:\030k_EStreamMouseButtonLe"
      "ft\"8\n\020CInputKeyDownMsg\022\022\n\ninput_mark\030\001 \001"
      "(\r\022\020\n\010scancode\030\002 \002(\r\"6\n\016CInputKeyUpMsg\022\022"
      "\n\ninput_mark\030\001 \001(\r\022\020\n\010scancode\030\002 \002(\r\"6\n\r"
      "CInputTextMsg\022\022\n\ninput_mark\030\001 \001(\r\022\021\n\ttex"
      "t_utf8\030\002 \002(\t\"\034\n\014CSetTitleMsg\022\014\n\004text\030\001 \001"
      "(\t\";\n\013CSetIconMsg\022\r\n\005width\030\001 \001(\005\022\016\n\006heig"
      "ht\030\002 \001(\005\022\r\n\005image\030\003 \001(\014\"<\n\016CShowCursorMs"
      "g\022\024\n\014x_normalized\030\001 \001(\002\022\024\n\014y_normalized\030"
      "\002 \001(\002\"\020\n\016CHideCursorMsg\"\"\n\rCSetCursorMsg"
      "\022\021\n\tcursor_id\030\001 \002(\004\"\'\n\022CGetCursorImageMs"
      "g\022\021\n\tcursor_id\030\001 \002(\004\"s\n\022CSetCursorImageM"
      "sg\022\021\n\tcursor_id\030\001 \002(\004\022\r\n\005width\030\002 \001(\005\022\016\n\006"
      "height\030\003 \001(\005\022\r\n\005hot_x\030\004 \001(\005\022\r\n\005hot_y\030\005 \001"
      "(\005\022\r\n\005image\030\006 \001(\014\"5\n\024CVideoDecoderInfoMs"
      "g\022\014\n\004info\030\001 \001(\t\022\017\n\007threads\030\002 \001(\005\"$\n\024CVid"
      "eoEncoderInfoMsg\022\014\n\004info\030\001 \001(\t\"\016\n\014CQuitR"
      "equest\"%\n\020CDeleteCursorMsg\022\021\n\tcursor_id\030"
      "\001 \002(\004\"D\n\031CSetStreamingClientConfig\022\'\n\006co"
      "nfig\030\001 \002(\0132\027.CStreamingClientConfig\"\035\n\nC"
      "SetQoSMsg\022\017\n\007use_qos\030\001 \002(\010\"x\n\026CSetTarget"
      "FramerateMsg\022\021\n\tframerate\030\001 \002(\r\022\017\n\007reaso"
      "ns\030\002 \001(\r\022\033\n\023framerate_numerator\030\003 \001(\r\022\035\n"
      "\025framerate_denominator\030\004 \001(\r\"\'\n\024CSetTarg"
      "etBitrateMsg\022\017\n\007bitrate\030\001 \002(\005\"%\n\022COverla"
      "yEnabledMsg\022\017\n\007enabled\030\001 \002(\010\"&\n\020CSetGamm"
      "aRampMsg\022\022\n\ngamma_ramp\030\001 \001(\014\"L\n\017CSetActi"
      "vityMsg\0229\n\010activity\030\001 \001(\0162\020.EStreamActiv"
      "ity:\025k_EStreamActivityIdle\"\023\n\021CSystemSus"
      "pendMsg\"*\n\026CVirtualHereRequestMsg\022\020\n\010hos"
      "tname\030\001 \001(\t\"5\n\024CVirtualHereReadyMsg\022\035\n\025l"
      "icensed_device_count\030\001 \001(\r\"4\n\032CVirtualHe"
      "reShareDeviceMsg\022\026\n\016device_address\030\001 \001(\t"
      "\"\'\n\024CSetSpectatorModeMsg\022\017\n\007enabled\030\001 \001("
      "\010\"\035\n\rCRemoteHIDMsg\022\014\n\004data\030\001 \001(\014\"8\n\025CTou"
      "chConfigActiveMsg\022\r\n\005appid\030\001 \001(\r\022\020\n\010revi"
      "sion\030\002 \001(\r\"\'\n\026CGetTouchConfigDataMsg\022\r\n\005"
      "appid\030\001 \001(\r\"W\n\026CSetTouchConfigDataMsg\022\r\n"
      "\005appid\030\001 \001(\r\022\020\n\010revision\030\002 \001(\r\022\014\n\004data\030\003"
      " \001(\014\022\016\n\006layout\030\004 \001(\014\":\n\031CSaveTouchConfig"
      "LayoutMsg\022\r\n\005appid\030\001 \001(\r\022\016\n\006layout\030\004 \001(\014"
      "\"\?\n\030CTouchActionSetActiveMsg\022\r\n\005appid\030\001 "
      "\001(\r\022\024\n\014actionset_id\030\002 \001(\005\"3\n\024CGetTouchIc"
      "onDataMsg\022\r\n\005appid\030\001 \001(\r\022\014\n\004icon\030\002 \001(\t\"A"
      "\n\024CSetTouchIconDataMsg\022\r\n\005appid\030\001 \001(\r\022\014\n"
      "\004icon\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\"%\n\022CStreamData"
      "LostMsg\022\017\n\007packets\030\001 \003(\r\"f\n\014CAudioFormat"
      "\0221\n\006format\030\001 \002(\0162\r.EAudioFormat:\022k_EAudi"
      "oFormatNone\022\021\n\tfrequency\030\002 \001(\r\022\020\n\010channe"
      "ls\030\003 \001(\r\"`\n\014CVideoFormat\0221\n\006format\030\001 \002(\016"
      "2\r.EVideoFormat:\022k_EVideoFormatNone\022\r\n\005w"
      "idth\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\"`\n\013CFrameEven"
      "t\022>\n\010event_id\030\001 \002(\0162\022.EStreamFrameEvent:"
      "\030k_EStreamInputEventStart\022\021\n\ttimestamp\030\002"
      " \002(\r\"\317\002\n\013CFrameStats\022\020\n\010frame_id\030\001 \002(\r\022\022"
      "\n\ninput_mark\030\002 \001(\r\022\034\n\006events\030\003 \003(\0132\014.CFr"
      "ameEvent\022@\n\006result\030\004 \002(\0162\023.EStreamFrameR"
      "esult:\033k_EStreamFrameResultPending\022\031\n\021fr"
      "ame_start_delta\030\005 \001(\002\022\033\n\023frame_display_d"
      "elta\030\006 \001(\002\022\021\n\tping_time\030\007 \001(\002\022\026\n\016server_"
      "bitrate\030\010 \001(\002\022\026\n\016client_bitrate\030\t \001(\002\022\026\n"
      "\016link_bandwidth\030\n \001(\002\022\023\n\013packet_loss\030\013 \001"
      "(\002\022\022\n\nframe_size\030\014 \001(\r\"\210\001\n\032CFrameStatAcc"
      "umulatedValue\022:\n\tstat_type\030\001 \002(\0162\026.EFram"
      "eAccumulatedStat:\017k_EFrameStatFPS\022\r\n\005cou"
      "nt\030\002 \002(\005\022\017\n\007average\030\003 \002(\002\022\016\n\006stddev\030\004 \001("
      "\002\"\301\001\n\022CFrameStatsListMsg\022=\n\tdata_type\030\001 "
      "\002(\0162\023.EStreamingDataType:\025k_EStreamingAu"
      "dioData\022\033\n\005stats\030\002 \003(\0132\014.CFrameStats\0226\n\021"
      "accumulated_stats\030\003 \003(\0132\033.CFrameStatAccu"
      "mulatedValue\022\027\n\017latest_frame_id\030\004 \002(\005\"x\n"
      "\026CStreamingSessionStats\022\035\n\025frame_loss_pe"
      "rcentage\030\001 \001(\002\022\037\n\027average_network_time_m"
      "s\030\002 \001(\002\022\036\n\026stddev_network_time_ms\030\003 \001(\002\""
      "#\n\rCDebugDumpMsg\022\022\n\nscreenshot\030\001 \001(\014\"(\n\007"
      "CLogMsg\022\014\n\004type\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"P"
      "\n\rCLogUploadMsg\0221\n\004type\030\001 \001(\0162\r.ELogFile"
      "Type:\024k_ELogFileSystemBoot\022\014\n\004data\030\003 \001(\014"
      "*\263\001\n\016EStreamChannel\022$\n\027k_EStreamChannelI"
      "nvalid\020\377\377\377\377\377\377\377\377\377\001\022\035\n\031k_EStreamChannelDis"
      "covery\020\000\022\033\n\027k_EStreamChannelControl\020\001\022\031\n"
      "\025k_EStreamChannelStats\020\002\022$\n k_EStreamCha"
      "nnelDataChannelStart\020\003*`\n\027EStreamDiscove"
      "ryMessage\022!\n\035k_EStreamDiscoveryPingReque"
      "st\020\001\022\"\n\036k_EStreamDiscoveryPingResponse\020\002"
      "*\346\025\n\025EStreamControlMessage\022)\n%k_EStreamC"
      "ontrolAuthenticationRequest\020\001\022*\n&k_EStre"
      "amControlAuthenticationResponse\020\002\022#\n\037k_E"
      "StreamControlNegotiationInit\020\003\022(\n$k_EStr"
      "eamControlNegotiationSetConfig\020\004\022\'\n#k_ES"
      "treamControlNegotiationComplete\020\005\022#\n\037k_E"
      "StreamControlClientHandshake\020\006\022#\n\037k_EStr"
      "eamControlServerHandshake\020\007\022$\n k_EStream"
      "ControlStartNetworkTest\020\010\022\035\n\031k_EStreamCo"
      "ntrolKeepAlive\020\t\022\'\n#k_EStreamControl_LAS"
      "T_SETUP_MESSAGE\020\017\022\"\n\036k_EStreamControlSta"
      "rtAudioData\0202\022!\n\035k_EStreamControlStopAud"
      "ioData\0203\022\"\n\036k_EStreamControlStartVideoDa"
      "ta\0204\022!\n\035k_EStreamControlStopVideoData\0205\022"
      "$\n k_EStreamControlInputMouseMotion\0206\022#\n"
      "\037k_EStreamControlInputMouseWheel\0207\022\"\n\036k_"
      "EStreamControlInputMouseDown\0208\022 \n\034k_EStr"
      "eamControlInputMouseUp\0209\022 \n\034k_EStreamCon"
      "trolInputKeyDown\020:\022\036\n\032k_EStreamControlIn"
      "putKeyUp\020;\0221\n-k_EStreamControlInputGamep"
      "adAttached_OBSOLETE\020<\022.\n*k_EStreamContro"
      "lInputGamepadEvent_OBSOLETE\020=\0221\n-k_EStre"
      "amControlInputGamepadDetached_OBSOLETE\020>"
      "\022\036\n\032k_EStreamControlShowCursor\020\?\022\036\n\032k_ES"
      "treamControlHideCursor\020@\022\035\n\031k_EStreamCon"
      "trolSetCursor\020A\022\"\n\036k_EStreamControlGetCu"
      "rsorImage\020B\022\"\n\036k_EStreamControlSetCursor"
      "Image\020C\022 \n\034k_EStreamControlDeleteCursor\020"
      "D\022&\n\"k_EStreamControlSetTargetFramerate\020"
      "E\022$\n k_EStreamControlInputLatencyTest\020F\022"
      "*\n&k_EStreamControlGamepadRumble_OBSOLET"
      "E\020G\022\"\n\036k_EStreamControlOverlayEnabled\020J\022"
      "4\n0k_EStreamControlInputControllerAttach"
      "ed_OBSOLETE\020K\0221\n-k_EStreamControlInputCo"
      "ntrollerState_OBSOLETE\020L\022/\n+k_EStreamCon"
      "trolTriggerHapticPulse_OBSOLETE\020M\0224\n0k_E"
      "StreamControlInputControllerDetached_OBS"
      "OLETE\020N\022$\n k_EStreamControlVideoDecoderI"
      "nfo\020P\022\034\n\030k_EStreamControlSetTitle\020Q\022\033\n\027k"
      "_EStreamControlSetIcon\020R\022\037\n\033k_EStreamCon"
      "trolQuitRequest\020S\022\032\n\026k_EStreamControlSet"
      "QoS\020W\022<\n8k_EStreamControlInputController"
      "WirelessPresence_OBSOLETE\020X\022 \n\034k_EStream"
      "ControlSetGammaRamp\020Y\022$\n k_EStreamContro"
      "lVideoEncoderInfo\020Z\0224\n0k_EStreamControlI"
      "nputControllerStateHID_OBSOLETE\020]\022$\n k_E"
      "StreamControlSetTargetBitrate\020^\0228\n4k_ESt"
      "reamControlSetControllerPairingEnabled_O"
      "BSOLETE\020_\0227\n3k_EStreamControlSetControll"
      "erPairingResult_OBSOLETE\020`\0228\n4k_EStreamC"
      "ontrolTriggerControllerDisconnect_OBSOLE"
      "TE\020a\022\037\n\033k_EStreamControlSetActivity\020b\022,\n"
      "(k_EStreamControlSetStreamingClientConfi"
      "g\020c\022!\n\035k_EStreamControlSystemSuspend\020d\0222"
      "\n.k_EStreamControlSetControllerSettings_"
      "OBSOLETE\020e\022&\n\"k_EStreamControlVirtualHer"
      "eRequest\020f\022$\n k_EStreamControlVirtualHer"
      "eReady\020g\022*\n&k_EStreamControlVirtualHereS"
      "hareDevice\020h\022$\n k_EStreamControlSetSpect"
      "atorMode\020i\022\035\n\031k_EStreamControlRemoteHID\020"
      "j\022\'\n#k_EStreamControlStartMicrophoneData"
      "\020k\022&\n\"k_EStreamControlStopMicrophoneData"
      "\020l\022\035\n\031k_EStreamControlInputText\020m\022%\n!k_E"
      "StreamControlTouchConfigActive\020n\022&\n\"k_ES"
      "treamControlGetTouchConfigData\020o\022&\n\"k_ES"
      "treamControlSetTouchConfigData\020p\022)\n%k_ES"
      "treamControlSaveTouchConfigLayout\020q\022(\n$k"
      "_EStreamControlTouchActionSetActive\020r\022$\n"
      " k_EStreamControlGetTouchIconData\020s\022$\n k"
      "_EStreamControlSetTouchIconData\020t*G\n\016ESt"
      "reamVersion\022\030\n\024k_EStreamVersionNone\020\000\022\033\n"
      "\027k_EStreamVersionCurrent\020\001*\300\001\n\021EStreamAu"
      "dioCodec\022\033\n\027k_EStreamAudioCodecNone\020\000\022\032\n"
      "\026k_EStreamAudioCodecRaw\020\001\022\035\n\031k_EStreamAu"
      "dioCodecVorbis\020\002\022\033\n\027k_EStreamAudioCodecO"
      "pus\020\003\022\032\n\026k_EStreamAudioCodecMP3\020\004\022\032\n\026k_E"
      "StreamAudioCodecAAC\020\005*\372\001\n\021EStreamVideoCo"
      "dec\022\033\n\027k_EStreamVideoCodecNone\020\000\022\032\n\026k_ES"
      "treamVideoCodecRaw\020\001\022\032\n\026k_EStreamVideoCo"
      "decVP8\020\002\022\032\n\026k_EStreamVideoCodecVP9\020\003\022\033\n\027"
      "k_EStreamVideoCodecH264\020\004\022\033\n\027k_EStreamVi"
      "deoCodecHEVC\020\005\022\034\n\030k_EStreamVideoCodecORB"
      "X1\020\006\022\034\n\030k_EStreamVideoCodecORBX2\020\007*q\n\030ES"
      "treamQualityPreference\022\030\n\024k_EStreamQuali"
      "tyFast\020\001\022\034\n\030k_EStreamQualityBalanced\020\002\022\035"
      "\n\031k_EStreamQualityBeautiful\020\003*X\n\016EStream"
      "Bitrate\022\'\n\032k_EStreamBitrateAutodetect\020\377\377"
      "\377\377\377\377\377\377\377\001\022\035\n\031k_EStreamBitrateUnlimited\020\000*"
      "j\n\022EStreamingDataType\022\031\n\025k_EStreamingAud"
      "ioData\020\000\022\031\n\025k_EStreamingVideoData\020\001\022\036\n\032k"
      "_EStreamingMicrophoneData\020\002*\313\001\n\022EStreamM"
      "ouseButton\022\034\n\030k_EStreamMouseButtonLeft\020\001"
      "\022\035\n\031k_EStreamMouseButtonRight\020\002\022\036\n\032k_ESt"
      "reamMouseButtonMiddle\020\020\022\032\n\026k_EStreamMous"
      "eButtonX1\020 \022\032\n\026k_EStreamMouseButtonX2\020@\022"
      " \n\033k_EStreamMouseButtonUnknown\020\200 *\230\001\n\032ES"
      "treamMouseWheelDirection\022\031\n\025k_EStreamMou"
      "seWheelUp\020x\022$\n\027k_EStreamMouseWheelDown\020\210"
      "\377\377\377\377\377\377\377\377\001\022\033\n\027k_EStreamMouseWheelLeft\020\003\022\034"
      "\n\030k_EStreamMouseWheelRight\020\004*\247\006\n\027EStream"
      "GamepadInputType\022 \n\034k_EStreamGamepadInpu"
      "tInvalid\020\000\022\037\n\033k_EStreamGamepadInputDPadU"
      "p\020\001\022!\n\035k_EStreamGamepadInputDPadDown\020\002\022!"
      "\n\035k_EStreamGamepadInputDPadLeft\020\004\022\"\n\036k_E"
      "StreamGamepadInputDPadRight\020\010\022\036\n\032k_EStre"
      "amGamepadInputStart\020\020\022\035\n\031k_EStreamGamepa"
      "dInputBack\020 \022\"\n\036k_EStreamGamepadInputLef"
      "tThumb\020@\022$\n\037k_EStreamGamepadInputRightTh"
      "umb\020\200\001\022&\n!k_EStreamGamepadInputLeftShoul"
      "der\020\200\002\022\'\n\"k_EStreamGamepadInputRightShou"
      "lder\020\200\004\022\037\n\032k_EStreamGamepadInputGuide\020\200\010"
      "\022\033\n\026k_EStreamGamepadInputA\020\200 \022\033\n\026k_EStre"
      "amGamepadInputB\020\200@\022\034\n\026k_EStreamGamepadIn"
      "putX\020\200\200\001\022\034\n\026k_EStreamGamepadInputY\020\200\200\002\022%"
      "\n\037k_EStreamGamepadInputLeftThumbX\020\200\200\004\022%\n"
      "\037k_EStreamGamepadInputLeftThumbY\020\200\200\010\022&\n "
      "k_EStreamGamepadInputRightThumbX\020\200\200\020\022&\n "
      "k_EStreamGamepadInputRightThumbY\020\200\200 \022&\n "
      "k_EStreamGamepadInputLeftTrigger\020\200\200@\022(\n!"
      "k_EStreamGamepadInputRightTrigger\020\200\200\200\001*\211"
      "\002\n\027EStreamFramerateLimiter\022!\n\035k_EStreamF"
      "ramerateSlowCapture\020\001\022!\n\035k_EStreamFramer"
      "ateSlowConvert\020\002\022 \n\034k_EStreamFramerateSl"
      "owEncode\020\004\022!\n\035k_EStreamFramerateSlowNetw"
      "ork\020\010\022 \n\034k_EStreamFramerateSlowDecode\020\020\022"
      "\036\n\032k_EStreamFramerateSlowGame\020 \022!\n\035k_ESt"
      "reamFramerateSlowDisplay\020@*e\n\017EStreamAct"
      "ivity\022\031\n\025k_EStreamActivityIdle\020\001\022\031\n\025k_ES"
      "treamActivityGame\020\002\022\034\n\030k_EStreamActivity"
      "Desktop\020\003*D\n\022EStreamDataMessage\022\027\n\023k_ESt"
      "reamDataPacket\020\001\022\025\n\021k_EStreamDataLost\020\002*"
      "d\n\014EAudioFormat\022\026\n\022k_EAudioFormatNone\020\000\022"
      "#\n\037k_EAudioFormat16BitLittleEndian\020\001\022\027\n\023"
      "k_EAudioFormatFloat\020\002*W\n\014EVideoFormat\022\026\n"
      "\022k_EVideoFormatNone\020\000\022\026\n\022k_EVideoFormatY"
      "V12\020\001\022\027\n\023k_EVideoFormatAccel\020\002*\327\001\n\023EStre"
      "amStatsMessage\022\035\n\031k_EStreamStatsFrameEve"
      "nts\020\001\022\033\n\027k_EStreamStatsDebugDump\020\002\022\034\n\030k_"
      "EStreamStatsLogMessage\020\003\022 \n\034k_EStreamSta"
      "tsLogUploadBegin\020\004\022\037\n\033k_EStreamStatsLogU"
      "ploadData\020\005\022#\n\037k_EStreamStatsLogUploadCo"
      "mplete\020\006*\205\005\n\021EStreamFrameEvent\022\034\n\030k_EStr"
      "eamInputEventStart\020\000\022\033\n\027k_EStreamInputEv"
      "entSend\020\001\022\033\n\027k_EStreamInputEventRecv\020\002\022\035"
      "\n\031k_EStreamInputEventQueued\020\003\022\036\n\032k_EStre"
      "amInputEventHandled\020\004\022\034\n\030k_EStreamFrameE"
      "ventStart\020\005\022#\n\037k_EStreamFrameEventCaptur"
      "eBegin\020\006\022!\n\035k_EStreamFrameEventCaptureEn"
      "d\020\007\022#\n\037k_EStreamFrameEventConvertBegin\020\010"
      "\022!\n\035k_EStreamFrameEventConvertEnd\020\t\022\"\n\036k"
      "_EStreamFrameEventEncodeBegin\020\n\022 \n\034k_ESt"
      "reamFrameEventEncodeEnd\020\013\022\033\n\027k_EStreamFr"
      "ameEventSend\020\014\022\033\n\027k_EStreamFrameEventRec"
      "v\020\r\022\"\n\036k_EStreamFrameEventDecodeBegin\020\016\022"
      " \n\034k_EStreamFrameEventDecodeEnd\020\017\022\"\n\036k_E"
      "StreamFrameEventUploadBegin\020\020\022 \n\034k_EStre"
      "amFrameEventUploadEnd\020\021\022\037\n\033k_EStreamFram"
      "eEventComplete\020\022*\324\002\n\022EStreamFrameResult\022"
      "\037\n\033k_EStreamFrameResultPending\020\000\022!\n\035k_ES"
      "treamFrameResultDisplayed\020\001\022*\n&k_EStream"
      "FrameResultDroppedNetworkSlow\020\002\022*\n&k_ESt"
      "reamFrameResultDroppedNetworkLost\020\003\022)\n%k"
      "_EStreamFrameResultDroppedDecodeSlow\020\004\022,"
      "\n(k_EStreamFrameResultDroppedDecodeCorru"
      "pt\020\005\022#\n\037k_EStreamFrameResultDroppedLate\020"
      "\006\022$\n k_EStreamFrameResultDroppedReset\020\007*"
      "\242\005\n\025EFrameAccumulatedStat\022\023\n\017k_EFrameSta"
      "tFPS\020\000\022!\n\035k_EFrameStatCaptureDurationMS\020"
      "\001\022!\n\035k_EFrameStatConvertDurationMS\020\002\022 \n\034"
      "k_EFrameStatEncodeDurationMS\020\003\022\037\n\033k_EFra"
      "meStatSteamDurationMS\020\004\022 \n\034k_EFrameStatS"
      "erverDurationMS\020\005\022!\n\035k_EFrameStatNetwork"
      "DurationMS\020\006\022 \n\034k_EFrameStatDecodeDurati"
      "onMS\020\007\022!\n\035k_EFrameStatDisplayDurationMS\020"
      "\010\022 \n\034k_EFrameStatClientDurationMS\020\t\022\037\n\033k"
      "_EFrameStatFrameDurationMS\020\n\022\036\n\032k_EFrame"
      "StatInputLatencyMS\020\013\022\035\n\031k_EFrameStatGame"
      "LatencyMS\020\014\022\"\n\036k_EFrameStatRoundTripLate"
      "ncyMS\020\r\022\032\n\026k_EFrameStatPingTimeMS\020\016\022\'\n#k"
      "_EFrameStatServerBitrateKbitPerSec\020\017\022\'\n#"
      "k_EFrameStatClientBitrateKbitPerSec\020\020\022\'\n"
      "#k_EFrameStatLinkBandwidthKbitPerSec\020\021\022$"
      "\n k_EFrameStatPacketLossPercentage\020\022*^\n\014"
      "ELogFileType\022\030\n\024k_ELogFileSystemBoot\020\000\022\031"
      "\n\025k_ELogFileSystemReset\020\001\022\031\n\025k_ELogFileS"
      "ystemDebug\020\002B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 14459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stream.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_stream_2eproto
const ::google::protobuf::EnumDescriptor* CAuthenticationResponseMsg_AuthenticationResult_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[0];
}
bool CAuthenticationResponseMsg_AuthenticationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CAuthenticationResponseMsg_AuthenticationResult CAuthenticationResponseMsg::SUCCEEDED;
const CAuthenticationResponseMsg_AuthenticationResult CAuthenticationResponseMsg::FAILED;
const CAuthenticationResponseMsg_AuthenticationResult CAuthenticationResponseMsg::AuthenticationResult_MIN;
const CAuthenticationResponseMsg_AuthenticationResult CAuthenticationResponseMsg::AuthenticationResult_MAX;
const int CAuthenticationResponseMsg::AuthenticationResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EStreamChannel_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[1];
}
bool EStreamChannel_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamDiscoveryMessage_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[2];
}
bool EStreamDiscoveryMessage_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamControlMessage_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[3];
}
bool EStreamControlMessage_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 80:
    case 81:
    case 82:
    case 83:
    case 87:
    case 88:
    case 89:
    case 90:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamVersion_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[4];
}
bool EStreamVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamAudioCodec_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[5];
}
bool EStreamAudioCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamVideoCodec_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[6];
}
bool EStreamVideoCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamQualityPreference_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[7];
}
bool EStreamQualityPreference_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamBitrate_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[8];
}
bool EStreamBitrate_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamingDataType_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[9];
}
bool EStreamingDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamMouseButton_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[10];
}
bool EStreamMouseButton_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 16:
    case 32:
    case 64:
    case 4096:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamMouseWheelDirection_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[11];
}
bool EStreamMouseWheelDirection_IsValid(int value) {
  switch (value) {
    case -120:
    case 3:
    case 4:
    case 120:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamGamepadInputType_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[12];
}
bool EStreamGamepadInputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamFramerateLimiter_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[13];
}
bool EStreamFramerateLimiter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamActivity_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[14];
}
bool EStreamActivity_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamDataMessage_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[15];
}
bool EStreamDataMessage_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAudioFormat_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[16];
}
bool EAudioFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVideoFormat_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[17];
}
bool EVideoFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamStatsMessage_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[18];
}
bool EStreamStatsMessage_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamFrameEvent_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[19];
}
bool EStreamFrameEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStreamFrameResult_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[20];
}
bool EStreamFrameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFrameAccumulatedStat_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[21];
}
bool EFrameAccumulatedStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELogFileType_descriptor() {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stream_2eproto::file_level_enum_descriptors[22];
}
bool ELogFileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CDiscoveryPingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDiscoveryPingRequest::kSequenceFieldNumber;
const int CDiscoveryPingRequest::kPacketSizeRequestedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDiscoveryPingRequest::CDiscoveryPingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CDiscoveryPingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDiscoveryPingRequest)
}
CDiscoveryPingRequest::CDiscoveryPingRequest(const CDiscoveryPingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_size_requested_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(packet_size_requested_));
  // @@protoc_insertion_point(copy_constructor:CDiscoveryPingRequest)
}

void CDiscoveryPingRequest::SharedCtor() {
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_size_requested_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(packet_size_requested_));
}

CDiscoveryPingRequest::~CDiscoveryPingRequest() {
  // @@protoc_insertion_point(destructor:CDiscoveryPingRequest)
  SharedDtor();
}

void CDiscoveryPingRequest::SharedDtor() {
}

void CDiscoveryPingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDiscoveryPingRequest::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDiscoveryPingRequest& CDiscoveryPingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CDiscoveryPingRequest.base);
  return *internal_default_instance();
}


void CDiscoveryPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CDiscoveryPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packet_size_requested_) -
        reinterpret_cast<char*>(&sequence_)) + sizeof(packet_size_requested_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDiscoveryPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDiscoveryPingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packet_size_requested = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_packet_size_requested();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_size_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDiscoveryPingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDiscoveryPingRequest)
  return false;
#undef DO_
}

void CDiscoveryPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDiscoveryPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // optional uint32 packet_size_requested = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->packet_size_requested(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDiscoveryPingRequest)
}

::google::protobuf::uint8* CDiscoveryPingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDiscoveryPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // optional uint32 packet_size_requested = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->packet_size_requested(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDiscoveryPingRequest)
  return target;
}

size_t CDiscoveryPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDiscoveryPingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional uint32 packet_size_requested = 2;
    if (has_packet_size_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_size_requested());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDiscoveryPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDiscoveryPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDiscoveryPingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDiscoveryPingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDiscoveryPingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDiscoveryPingRequest)
    MergeFrom(*source);
  }
}

void CDiscoveryPingRequest::MergeFrom(const CDiscoveryPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDiscoveryPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000002u) {
      packet_size_requested_ = from.packet_size_requested_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDiscoveryPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDiscoveryPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDiscoveryPingRequest::CopyFrom(const CDiscoveryPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDiscoveryPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDiscoveryPingRequest::IsInitialized() const {
  return true;
}

void CDiscoveryPingRequest::Swap(CDiscoveryPingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDiscoveryPingRequest::InternalSwap(CDiscoveryPingRequest* other) {
  using std::swap;
  swap(sequence_, other->sequence_);
  swap(packet_size_requested_, other->packet_size_requested_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDiscoveryPingRequest::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDiscoveryPingResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDiscoveryPingResponse::kSequenceFieldNumber;
const int CDiscoveryPingResponse::kPacketSizeReceivedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDiscoveryPingResponse::CDiscoveryPingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CDiscoveryPingResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDiscoveryPingResponse)
}
CDiscoveryPingResponse::CDiscoveryPingResponse(const CDiscoveryPingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_size_received_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(packet_size_received_));
  // @@protoc_insertion_point(copy_constructor:CDiscoveryPingResponse)
}

void CDiscoveryPingResponse::SharedCtor() {
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_size_received_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(packet_size_received_));
}

CDiscoveryPingResponse::~CDiscoveryPingResponse() {
  // @@protoc_insertion_point(destructor:CDiscoveryPingResponse)
  SharedDtor();
}

void CDiscoveryPingResponse::SharedDtor() {
}

void CDiscoveryPingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDiscoveryPingResponse::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDiscoveryPingResponse& CDiscoveryPingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CDiscoveryPingResponse.base);
  return *internal_default_instance();
}


void CDiscoveryPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CDiscoveryPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packet_size_received_) -
        reinterpret_cast<char*>(&sequence_)) + sizeof(packet_size_received_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDiscoveryPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDiscoveryPingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packet_size_received = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_packet_size_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_size_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDiscoveryPingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDiscoveryPingResponse)
  return false;
#undef DO_
}

void CDiscoveryPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDiscoveryPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // optional uint32 packet_size_received = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->packet_size_received(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDiscoveryPingResponse)
}

::google::protobuf::uint8* CDiscoveryPingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDiscoveryPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // optional uint32 packet_size_received = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->packet_size_received(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDiscoveryPingResponse)
  return target;
}

size_t CDiscoveryPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDiscoveryPingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional uint32 packet_size_received = 2;
    if (has_packet_size_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_size_received());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDiscoveryPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDiscoveryPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CDiscoveryPingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDiscoveryPingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDiscoveryPingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDiscoveryPingResponse)
    MergeFrom(*source);
  }
}

void CDiscoveryPingResponse::MergeFrom(const CDiscoveryPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDiscoveryPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000002u) {
      packet_size_received_ = from.packet_size_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDiscoveryPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDiscoveryPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDiscoveryPingResponse::CopyFrom(const CDiscoveryPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDiscoveryPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDiscoveryPingResponse::IsInitialized() const {
  return true;
}

void CDiscoveryPingResponse::Swap(CDiscoveryPingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDiscoveryPingResponse::InternalSwap(CDiscoveryPingResponse* other) {
  using std::swap;
  swap(sequence_, other->sequence_);
  swap(packet_size_received_, other->packet_size_received_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDiscoveryPingResponse::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamingClientHandshakeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamingClientHandshakeInfo::kNetworkTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamingClientHandshakeInfo::CStreamingClientHandshakeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamingClientHandshakeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamingClientHandshakeInfo)
}
CStreamingClientHandshakeInfo::CStreamingClientHandshakeInfo(const CStreamingClientHandshakeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_test_ = from.network_test_;
  // @@protoc_insertion_point(copy_constructor:CStreamingClientHandshakeInfo)
}

void CStreamingClientHandshakeInfo::SharedCtor() {
  network_test_ = 0;
}

CStreamingClientHandshakeInfo::~CStreamingClientHandshakeInfo() {
  // @@protoc_insertion_point(destructor:CStreamingClientHandshakeInfo)
  SharedDtor();
}

void CStreamingClientHandshakeInfo::SharedDtor() {
}

void CStreamingClientHandshakeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamingClientHandshakeInfo::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamingClientHandshakeInfo& CStreamingClientHandshakeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamingClientHandshakeInfo.base);
  return *internal_default_instance();
}


void CStreamingClientHandshakeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamingClientHandshakeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_test_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamingClientHandshakeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamingClientHandshakeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 network_test = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_network_test();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamingClientHandshakeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamingClientHandshakeInfo)
  return false;
#undef DO_
}

void CStreamingClientHandshakeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamingClientHandshakeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 network_test = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->network_test(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamingClientHandshakeInfo)
}

::google::protobuf::uint8* CStreamingClientHandshakeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamingClientHandshakeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 network_test = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->network_test(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamingClientHandshakeInfo)
  return target;
}

size_t CStreamingClientHandshakeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamingClientHandshakeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 network_test = 2;
  if (has_network_test()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->network_test());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamingClientHandshakeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamingClientHandshakeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamingClientHandshakeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamingClientHandshakeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamingClientHandshakeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamingClientHandshakeInfo)
    MergeFrom(*source);
  }
}

void CStreamingClientHandshakeInfo::MergeFrom(const CStreamingClientHandshakeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamingClientHandshakeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_test()) {
    set_network_test(from.network_test());
  }
}

void CStreamingClientHandshakeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamingClientHandshakeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamingClientHandshakeInfo::CopyFrom(const CStreamingClientHandshakeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamingClientHandshakeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamingClientHandshakeInfo::IsInitialized() const {
  return true;
}

void CStreamingClientHandshakeInfo::Swap(CStreamingClientHandshakeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamingClientHandshakeInfo::InternalSwap(CStreamingClientHandshakeInfo* other) {
  using std::swap;
  swap(network_test_, other->network_test_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamingClientHandshakeInfo::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CClientHandshakeMsg::InitAsDefaultInstance() {
  ::_CClientHandshakeMsg_default_instance_._instance.get_mutable()->info_ = const_cast< ::CStreamingClientHandshakeInfo*>(
      ::CStreamingClientHandshakeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientHandshakeMsg::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientHandshakeMsg::CClientHandshakeMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CClientHandshakeMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClientHandshakeMsg)
}
CClientHandshakeMsg::CClientHandshakeMsg(const CClientHandshakeMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::CStreamingClientHandshakeInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CClientHandshakeMsg)
}

void CClientHandshakeMsg::SharedCtor() {
  info_ = NULL;
}

CClientHandshakeMsg::~CClientHandshakeMsg() {
  // @@protoc_insertion_point(destructor:CClientHandshakeMsg)
  SharedDtor();
}

void CClientHandshakeMsg::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void CClientHandshakeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CClientHandshakeMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientHandshakeMsg& CClientHandshakeMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CClientHandshakeMsg.base);
  return *internal_default_instance();
}


void CClientHandshakeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientHandshakeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientHandshakeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClientHandshakeMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CStreamingClientHandshakeInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClientHandshakeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClientHandshakeMsg)
  return false;
#undef DO_
}

void CClientHandshakeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClientHandshakeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CStreamingClientHandshakeInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClientHandshakeMsg)
}

::google::protobuf::uint8* CClientHandshakeMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CClientHandshakeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CStreamingClientHandshakeInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientHandshakeMsg)
  return target;
}

size_t CClientHandshakeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientHandshakeMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .CStreamingClientHandshakeInfo info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientHandshakeMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientHandshakeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientHandshakeMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientHandshakeMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientHandshakeMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientHandshakeMsg)
    MergeFrom(*source);
  }
}

void CClientHandshakeMsg::MergeFrom(const CClientHandshakeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientHandshakeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::CStreamingClientHandshakeInfo::MergeFrom(from.info());
  }
}

void CClientHandshakeMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientHandshakeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientHandshakeMsg::CopyFrom(const CClientHandshakeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientHandshakeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientHandshakeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CClientHandshakeMsg::Swap(CClientHandshakeMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientHandshakeMsg::InternalSwap(CClientHandshakeMsg* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CClientHandshakeMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamingServerHandshakeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamingServerHandshakeInfo::kMtuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamingServerHandshakeInfo::CStreamingServerHandshakeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamingServerHandshakeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamingServerHandshakeInfo)
}
CStreamingServerHandshakeInfo::CStreamingServerHandshakeInfo(const CStreamingServerHandshakeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mtu_ = from.mtu_;
  // @@protoc_insertion_point(copy_constructor:CStreamingServerHandshakeInfo)
}

void CStreamingServerHandshakeInfo::SharedCtor() {
  mtu_ = 0;
}

CStreamingServerHandshakeInfo::~CStreamingServerHandshakeInfo() {
  // @@protoc_insertion_point(destructor:CStreamingServerHandshakeInfo)
  SharedDtor();
}

void CStreamingServerHandshakeInfo::SharedDtor() {
}

void CStreamingServerHandshakeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamingServerHandshakeInfo::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamingServerHandshakeInfo& CStreamingServerHandshakeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamingServerHandshakeInfo.base);
  return *internal_default_instance();
}


void CStreamingServerHandshakeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamingServerHandshakeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtu_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamingServerHandshakeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamingServerHandshakeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mtu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mtu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamingServerHandshakeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamingServerHandshakeInfo)
  return false;
#undef DO_
}

void CStreamingServerHandshakeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamingServerHandshakeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mtu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mtu(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamingServerHandshakeInfo)
}

::google::protobuf::uint8* CStreamingServerHandshakeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamingServerHandshakeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mtu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mtu(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamingServerHandshakeInfo)
  return target;
}

size_t CStreamingServerHandshakeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamingServerHandshakeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 mtu = 1;
  if (has_mtu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mtu());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamingServerHandshakeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamingServerHandshakeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamingServerHandshakeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamingServerHandshakeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamingServerHandshakeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamingServerHandshakeInfo)
    MergeFrom(*source);
  }
}

void CStreamingServerHandshakeInfo::MergeFrom(const CStreamingServerHandshakeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamingServerHandshakeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mtu()) {
    set_mtu(from.mtu());
  }
}

void CStreamingServerHandshakeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamingServerHandshakeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamingServerHandshakeInfo::CopyFrom(const CStreamingServerHandshakeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamingServerHandshakeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamingServerHandshakeInfo::IsInitialized() const {
  return true;
}

void CStreamingServerHandshakeInfo::Swap(CStreamingServerHandshakeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamingServerHandshakeInfo::InternalSwap(CStreamingServerHandshakeInfo* other) {
  using std::swap;
  swap(mtu_, other->mtu_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamingServerHandshakeInfo::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CServerHandshakeMsg::InitAsDefaultInstance() {
  ::_CServerHandshakeMsg_default_instance_._instance.get_mutable()->info_ = const_cast< ::CStreamingServerHandshakeInfo*>(
      ::CStreamingServerHandshakeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CServerHandshakeMsg::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CServerHandshakeMsg::CServerHandshakeMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CServerHandshakeMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CServerHandshakeMsg)
}
CServerHandshakeMsg::CServerHandshakeMsg(const CServerHandshakeMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::CStreamingServerHandshakeInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CServerHandshakeMsg)
}

void CServerHandshakeMsg::SharedCtor() {
  info_ = NULL;
}

CServerHandshakeMsg::~CServerHandshakeMsg() {
  // @@protoc_insertion_point(destructor:CServerHandshakeMsg)
  SharedDtor();
}

void CServerHandshakeMsg::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void CServerHandshakeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CServerHandshakeMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CServerHandshakeMsg& CServerHandshakeMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CServerHandshakeMsg.base);
  return *internal_default_instance();
}


void CServerHandshakeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerHandshakeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CServerHandshakeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CServerHandshakeMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CStreamingServerHandshakeInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CServerHandshakeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CServerHandshakeMsg)
  return false;
#undef DO_
}

void CServerHandshakeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CServerHandshakeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CStreamingServerHandshakeInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CServerHandshakeMsg)
}

::google::protobuf::uint8* CServerHandshakeMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CServerHandshakeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CStreamingServerHandshakeInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerHandshakeMsg)
  return target;
}

size_t CServerHandshakeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerHandshakeMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .CStreamingServerHandshakeInfo info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CServerHandshakeMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CServerHandshakeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CServerHandshakeMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CServerHandshakeMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CServerHandshakeMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CServerHandshakeMsg)
    MergeFrom(*source);
  }
}

void CServerHandshakeMsg::MergeFrom(const CServerHandshakeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CServerHandshakeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::CStreamingServerHandshakeInfo::MergeFrom(from.info());
  }
}

void CServerHandshakeMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CServerHandshakeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CServerHandshakeMsg::CopyFrom(const CServerHandshakeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerHandshakeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerHandshakeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CServerHandshakeMsg::Swap(CServerHandshakeMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CServerHandshakeMsg::InternalSwap(CServerHandshakeMsg* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CServerHandshakeMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAuthenticationRequestMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAuthenticationRequestMsg::kTokenFieldNumber;
const int CAuthenticationRequestMsg::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAuthenticationRequestMsg::CAuthenticationRequestMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CAuthenticationRequestMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAuthenticationRequestMsg)
}
CAuthenticationRequestMsg::CAuthenticationRequestMsg(const CAuthenticationRequestMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CAuthenticationRequestMsg)
}

void CAuthenticationRequestMsg::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

CAuthenticationRequestMsg::~CAuthenticationRequestMsg() {
  // @@protoc_insertion_point(destructor:CAuthenticationRequestMsg)
  SharedDtor();
}

void CAuthenticationRequestMsg::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAuthenticationRequestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAuthenticationRequestMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAuthenticationRequestMsg& CAuthenticationRequestMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CAuthenticationRequestMsg.base);
  return *internal_default_instance();
}


void CAuthenticationRequestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CAuthenticationRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmptyNoArena();
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAuthenticationRequestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAuthenticationRequestMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamVersion_IsValid(value)) {
            set_version(static_cast< ::EStreamVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAuthenticationRequestMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAuthenticationRequestMsg)
  return false;
#undef DO_
}

void CAuthenticationRequestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAuthenticationRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->token(), output);
  }

  // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAuthenticationRequestMsg)
}

::google::protobuf::uint8* CAuthenticationRequestMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAuthenticationRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes token = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->token(), target);
  }

  // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAuthenticationRequestMsg)
  return target;
}

size_t CAuthenticationRequestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAuthenticationRequestMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAuthenticationRequestMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAuthenticationRequestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CAuthenticationRequestMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAuthenticationRequestMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAuthenticationRequestMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAuthenticationRequestMsg)
    MergeFrom(*source);
  }
}

void CAuthenticationRequestMsg::MergeFrom(const CAuthenticationRequestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAuthenticationRequestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAuthenticationRequestMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAuthenticationRequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAuthenticationRequestMsg::CopyFrom(const CAuthenticationRequestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAuthenticationRequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAuthenticationRequestMsg::IsInitialized() const {
  return true;
}

void CAuthenticationRequestMsg::Swap(CAuthenticationRequestMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAuthenticationRequestMsg::InternalSwap(CAuthenticationRequestMsg* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAuthenticationRequestMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAuthenticationResponseMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAuthenticationResponseMsg::kResultFieldNumber;
const int CAuthenticationResponseMsg::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAuthenticationResponseMsg::CAuthenticationResponseMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CAuthenticationResponseMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAuthenticationResponseMsg)
}
CAuthenticationResponseMsg::CAuthenticationResponseMsg(const CAuthenticationResponseMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&result_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CAuthenticationResponseMsg)
}

void CAuthenticationResponseMsg::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&result_)) + sizeof(version_));
}

CAuthenticationResponseMsg::~CAuthenticationResponseMsg() {
  // @@protoc_insertion_point(destructor:CAuthenticationResponseMsg)
  SharedDtor();
}

void CAuthenticationResponseMsg::SharedDtor() {
}

void CAuthenticationResponseMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAuthenticationResponseMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAuthenticationResponseMsg& CAuthenticationResponseMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CAuthenticationResponseMsg.base);
  return *internal_default_instance();
}


void CAuthenticationResponseMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CAuthenticationResponseMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&result_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAuthenticationResponseMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAuthenticationResponseMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CAuthenticationResponseMsg.AuthenticationResult result = 1 [default = SUCCEEDED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CAuthenticationResponseMsg_AuthenticationResult_IsValid(value)) {
            set_result(static_cast< ::CAuthenticationResponseMsg_AuthenticationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamVersion_IsValid(value)) {
            set_version(static_cast< ::EStreamVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAuthenticationResponseMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAuthenticationResponseMsg)
  return false;
#undef DO_
}

void CAuthenticationResponseMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAuthenticationResponseMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CAuthenticationResponseMsg.AuthenticationResult result = 1 [default = SUCCEEDED];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAuthenticationResponseMsg)
}

::google::protobuf::uint8* CAuthenticationResponseMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAuthenticationResponseMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CAuthenticationResponseMsg.AuthenticationResult result = 1 [default = SUCCEEDED];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAuthenticationResponseMsg)
  return target;
}

size_t CAuthenticationResponseMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAuthenticationResponseMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CAuthenticationResponseMsg.AuthenticationResult result = 1 [default = SUCCEEDED];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .EStreamVersion version = 2 [default = k_EStreamVersionNone];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAuthenticationResponseMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAuthenticationResponseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CAuthenticationResponseMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAuthenticationResponseMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAuthenticationResponseMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAuthenticationResponseMsg)
    MergeFrom(*source);
  }
}

void CAuthenticationResponseMsg::MergeFrom(const CAuthenticationResponseMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAuthenticationResponseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAuthenticationResponseMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAuthenticationResponseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAuthenticationResponseMsg::CopyFrom(const CAuthenticationResponseMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAuthenticationResponseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAuthenticationResponseMsg::IsInitialized() const {
  return true;
}

void CAuthenticationResponseMsg::Swap(CAuthenticationResponseMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAuthenticationResponseMsg::InternalSwap(CAuthenticationResponseMsg* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAuthenticationResponseMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CKeepAliveMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeepAliveMsg::CKeepAliveMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CKeepAliveMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CKeepAliveMsg)
}
CKeepAliveMsg::CKeepAliveMsg(const CKeepAliveMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CKeepAliveMsg)
}

void CKeepAliveMsg::SharedCtor() {
}

CKeepAliveMsg::~CKeepAliveMsg() {
  // @@protoc_insertion_point(destructor:CKeepAliveMsg)
  SharedDtor();
}

void CKeepAliveMsg::SharedDtor() {
}

void CKeepAliveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CKeepAliveMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeepAliveMsg& CKeepAliveMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CKeepAliveMsg.base);
  return *internal_default_instance();
}


void CKeepAliveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeepAliveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeepAliveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CKeepAliveMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CKeepAliveMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CKeepAliveMsg)
  return false;
#undef DO_
}

void CKeepAliveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CKeepAliveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CKeepAliveMsg)
}

::google::protobuf::uint8* CKeepAliveMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CKeepAliveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeepAliveMsg)
  return target;
}

size_t CKeepAliveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeepAliveMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeepAliveMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeepAliveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeepAliveMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeepAliveMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeepAliveMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeepAliveMsg)
    MergeFrom(*source);
  }
}

void CKeepAliveMsg::MergeFrom(const CKeepAliveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeepAliveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CKeepAliveMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeepAliveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeepAliveMsg::CopyFrom(const CKeepAliveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeepAliveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeepAliveMsg::IsInitialized() const {
  return true;
}

void CKeepAliveMsg::Swap(CKeepAliveMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeepAliveMsg::InternalSwap(CKeepAliveMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CKeepAliveMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStartNetworkTestMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStartNetworkTestMsg::kFramesFieldNumber;
const int CStartNetworkTestMsg::kFramerateFieldNumber;
const int CStartNetworkTestMsg::kBitrateKbpsFieldNumber;
const int CStartNetworkTestMsg::kBurstBitrateKbpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStartNetworkTestMsg::CStartNetworkTestMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStartNetworkTestMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStartNetworkTestMsg)
}
CStartNetworkTestMsg::CStartNetworkTestMsg(const CStartNetworkTestMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frames_, &from.frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&burst_bitrate_kbps_) -
    reinterpret_cast<char*>(&frames_)) + sizeof(burst_bitrate_kbps_));
  // @@protoc_insertion_point(copy_constructor:CStartNetworkTestMsg)
}

void CStartNetworkTestMsg::SharedCtor() {
  ::memset(&frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burst_bitrate_kbps_) -
      reinterpret_cast<char*>(&frames_)) + sizeof(burst_bitrate_kbps_));
}

CStartNetworkTestMsg::~CStartNetworkTestMsg() {
  // @@protoc_insertion_point(destructor:CStartNetworkTestMsg)
  SharedDtor();
}

void CStartNetworkTestMsg::SharedDtor() {
}

void CStartNetworkTestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStartNetworkTestMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStartNetworkTestMsg& CStartNetworkTestMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStartNetworkTestMsg.base);
  return *internal_default_instance();
}


void CStartNetworkTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CStartNetworkTestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&burst_bitrate_kbps_) -
        reinterpret_cast<char*>(&frames_)) + sizeof(burst_bitrate_kbps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStartNetworkTestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStartNetworkTestMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 framerate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_framerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_kbps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bitrate_kbps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 burst_bitrate_kbps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_burst_bitrate_kbps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burst_bitrate_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStartNetworkTestMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStartNetworkTestMsg)
  return false;
#undef DO_
}

void CStartNetworkTestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStartNetworkTestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 frames = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frames(), output);
  }

  // optional uint32 framerate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framerate(), output);
  }

  // optional uint32 bitrate_kbps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bitrate_kbps(), output);
  }

  // optional uint32 burst_bitrate_kbps = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->burst_bitrate_kbps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStartNetworkTestMsg)
}

::google::protobuf::uint8* CStartNetworkTestMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStartNetworkTestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 frames = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frames(), target);
  }

  // optional uint32 framerate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framerate(), target);
  }

  // optional uint32 bitrate_kbps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bitrate_kbps(), target);
  }

  // optional uint32 burst_bitrate_kbps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->burst_bitrate_kbps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStartNetworkTestMsg)
  return target;
}

size_t CStartNetworkTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStartNetworkTestMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 frames = 1;
    if (has_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frames());
    }

    // optional uint32 framerate = 2;
    if (has_framerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framerate());
    }

    // optional uint32 bitrate_kbps = 3;
    if (has_bitrate_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_kbps());
    }

    // optional uint32 burst_bitrate_kbps = 4;
    if (has_burst_bitrate_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->burst_bitrate_kbps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStartNetworkTestMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStartNetworkTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CStartNetworkTestMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStartNetworkTestMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStartNetworkTestMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStartNetworkTestMsg)
    MergeFrom(*source);
  }
}

void CStartNetworkTestMsg::MergeFrom(const CStartNetworkTestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStartNetworkTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      frames_ = from.frames_;
    }
    if (cached_has_bits & 0x00000002u) {
      framerate_ = from.framerate_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_kbps_ = from.bitrate_kbps_;
    }
    if (cached_has_bits & 0x00000008u) {
      burst_bitrate_kbps_ = from.burst_bitrate_kbps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStartNetworkTestMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStartNetworkTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStartNetworkTestMsg::CopyFrom(const CStartNetworkTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStartNetworkTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStartNetworkTestMsg::IsInitialized() const {
  return true;
}

void CStartNetworkTestMsg::Swap(CStartNetworkTestMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStartNetworkTestMsg::InternalSwap(CStartNetworkTestMsg* other) {
  using std::swap;
  swap(frames_, other->frames_);
  swap(framerate_, other->framerate_);
  swap(bitrate_kbps_, other->bitrate_kbps_);
  swap(burst_bitrate_kbps_, other->burst_bitrate_kbps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStartNetworkTestMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamVideoMode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamVideoMode::kWidthFieldNumber;
const int CStreamVideoMode::kHeightFieldNumber;
const int CStreamVideoMode::kRefreshRateFieldNumber;
const int CStreamVideoMode::kRefreshRateNumeratorFieldNumber;
const int CStreamVideoMode::kRefreshRateDenominatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamVideoMode::CStreamVideoMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamVideoMode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamVideoMode)
}
CStreamVideoMode::CStreamVideoMode(const CStreamVideoMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_rate_denominator_) -
    reinterpret_cast<char*>(&width_)) + sizeof(refresh_rate_denominator_));
  // @@protoc_insertion_point(copy_constructor:CStreamVideoMode)
}

void CStreamVideoMode::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_rate_denominator_) -
      reinterpret_cast<char*>(&width_)) + sizeof(refresh_rate_denominator_));
}

CStreamVideoMode::~CStreamVideoMode() {
  // @@protoc_insertion_point(destructor:CStreamVideoMode)
  SharedDtor();
}

void CStreamVideoMode::SharedDtor() {
}

void CStreamVideoMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamVideoMode::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamVideoMode& CStreamVideoMode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamVideoMode.base);
  return *internal_default_instance();
}


void CStreamVideoMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamVideoMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&refresh_rate_denominator_) -
        reinterpret_cast<char*>(&width_)) + sizeof(refresh_rate_denominator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamVideoMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamVideoMode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 refresh_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_refresh_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 refresh_rate_numerator = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_refresh_rate_numerator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_rate_numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 refresh_rate_denominator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_refresh_rate_denominator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_rate_denominator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamVideoMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamVideoMode)
  return false;
#undef DO_
}

void CStreamVideoMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamVideoMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // optional uint32 refresh_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->refresh_rate(), output);
  }

  // optional uint32 refresh_rate_numerator = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refresh_rate_numerator(), output);
  }

  // optional uint32 refresh_rate_denominator = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refresh_rate_denominator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamVideoMode)
}

::google::protobuf::uint8* CStreamVideoMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamVideoMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // optional uint32 refresh_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->refresh_rate(), target);
  }

  // optional uint32 refresh_rate_numerator = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refresh_rate_numerator(), target);
  }

  // optional uint32 refresh_rate_denominator = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refresh_rate_denominator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamVideoMode)
  return target;
}

size_t CStreamVideoMode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CStreamVideoMode)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t CStreamVideoMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamVideoMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 refresh_rate = 3;
    if (has_refresh_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_rate());
    }

    // optional uint32 refresh_rate_numerator = 4;
    if (has_refresh_rate_numerator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_rate_numerator());
    }

    // optional uint32 refresh_rate_denominator = 5;
    if (has_refresh_rate_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_rate_denominator());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamVideoMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamVideoMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamVideoMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamVideoMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamVideoMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamVideoMode)
    MergeFrom(*source);
  }
}

void CStreamVideoMode::MergeFrom(const CStreamVideoMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamVideoMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      refresh_rate_ = from.refresh_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      refresh_rate_numerator_ = from.refresh_rate_numerator_;
    }
    if (cached_has_bits & 0x00000010u) {
      refresh_rate_denominator_ = from.refresh_rate_denominator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStreamVideoMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamVideoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamVideoMode::CopyFrom(const CStreamVideoMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamVideoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamVideoMode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CStreamVideoMode::Swap(CStreamVideoMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamVideoMode::InternalSwap(CStreamVideoMode* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(refresh_rate_, other->refresh_rate_);
  swap(refresh_rate_numerator_, other->refresh_rate_numerator_);
  swap(refresh_rate_denominator_, other->refresh_rate_denominator_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamVideoMode::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamingClientCaps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamingClientCaps::kSystemInfoFieldNumber;
const int CStreamingClientCaps::kSystemCanSuspendFieldNumber;
const int CStreamingClientCaps::kMaximumDecodeBitrateKbpsFieldNumber;
const int CStreamingClientCaps::kMaximumBurstBitrateKbpsFieldNumber;
const int CStreamingClientCaps::kSupportsVideoHevcFieldNumber;
const int CStreamingClientCaps::kDisableSteamStoreFieldNumber;
const int CStreamingClientCaps::kDisableClientCursorFieldNumber;
const int CStreamingClientCaps::kDisableIntelHardwareEncodingFieldNumber;
const int CStreamingClientCaps::kDisableAmdHardwareEncodingFieldNumber;
const int CStreamingClientCaps::kDisableNvidiaHardwareEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamingClientCaps::CStreamingClientCaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamingClientCaps.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamingClientCaps)
}
CStreamingClientCaps::CStreamingClientCaps(const CStreamingClientCaps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_info()) {
    system_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_info_);
  }
  ::memcpy(&maximum_decode_bitrate_kbps_, &from.maximum_decode_bitrate_kbps_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_nvidia_hardware_encoding_) -
    reinterpret_cast<char*>(&maximum_decode_bitrate_kbps_)) + sizeof(disable_nvidia_hardware_encoding_));
  // @@protoc_insertion_point(copy_constructor:CStreamingClientCaps)
}

void CStreamingClientCaps::SharedCtor() {
  system_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maximum_decode_bitrate_kbps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_nvidia_hardware_encoding_) -
      reinterpret_cast<char*>(&maximum_decode_bitrate_kbps_)) + sizeof(disable_nvidia_hardware_encoding_));
}

CStreamingClientCaps::~CStreamingClientCaps() {
  // @@protoc_insertion_point(destructor:CStreamingClientCaps)
  SharedDtor();
}

void CStreamingClientCaps::SharedDtor() {
  system_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStreamingClientCaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamingClientCaps::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamingClientCaps& CStreamingClientCaps::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamingClientCaps.base);
  return *internal_default_instance();
}


void CStreamingClientCaps::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamingClientCaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    system_info_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&maximum_decode_bitrate_kbps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_intel_hardware_encoding_) -
        reinterpret_cast<char*>(&maximum_decode_bitrate_kbps_)) + sizeof(disable_intel_hardware_encoding_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&disable_amd_hardware_encoding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_nvidia_hardware_encoding_) -
        reinterpret_cast<char*>(&disable_amd_hardware_encoding_)) + sizeof(disable_nvidia_hardware_encoding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamingClientCaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamingClientCaps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string system_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_info().data(), static_cast<int>(this->system_info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CStreamingClientCaps.system_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool system_can_suspend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_system_can_suspend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_can_suspend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_decode_bitrate_kbps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maximum_decode_bitrate_kbps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_decode_bitrate_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_burst_bitrate_kbps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_maximum_burst_bitrate_kbps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_burst_bitrate_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_video_hevc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_supports_video_hevc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_video_hevc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_steam_store = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_disable_steam_store();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_steam_store_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_client_cursor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_disable_client_cursor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_client_cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_intel_hardware_encoding = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_disable_intel_hardware_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_intel_hardware_encoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_amd_hardware_encoding = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_disable_amd_hardware_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_amd_hardware_encoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_nvidia_hardware_encoding = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_disable_nvidia_hardware_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_nvidia_hardware_encoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamingClientCaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamingClientCaps)
  return false;
#undef DO_
}

void CStreamingClientCaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamingClientCaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string system_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_info().data(), static_cast<int>(this->system_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CStreamingClientCaps.system_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_info(), output);
  }

  // optional bool system_can_suspend = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->system_can_suspend(), output);
  }

  // optional int32 maximum_decode_bitrate_kbps = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maximum_decode_bitrate_kbps(), output);
  }

  // optional int32 maximum_burst_bitrate_kbps = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maximum_burst_bitrate_kbps(), output);
  }

  // optional bool supports_video_hevc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->supports_video_hevc(), output);
  }

  // optional bool disable_steam_store = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disable_steam_store(), output);
  }

  // optional bool disable_client_cursor = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_client_cursor(), output);
  }

  // optional bool disable_intel_hardware_encoding = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->disable_intel_hardware_encoding(), output);
  }

  // optional bool disable_amd_hardware_encoding = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->disable_amd_hardware_encoding(), output);
  }

  // optional bool disable_nvidia_hardware_encoding = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->disable_nvidia_hardware_encoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamingClientCaps)
}

::google::protobuf::uint8* CStreamingClientCaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamingClientCaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string system_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_info().data(), static_cast<int>(this->system_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CStreamingClientCaps.system_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->system_info(), target);
  }

  // optional bool system_can_suspend = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->system_can_suspend(), target);
  }

  // optional int32 maximum_decode_bitrate_kbps = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maximum_decode_bitrate_kbps(), target);
  }

  // optional int32 maximum_burst_bitrate_kbps = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maximum_burst_bitrate_kbps(), target);
  }

  // optional bool supports_video_hevc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->supports_video_hevc(), target);
  }

  // optional bool disable_steam_store = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disable_steam_store(), target);
  }

  // optional bool disable_client_cursor = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_client_cursor(), target);
  }

  // optional bool disable_intel_hardware_encoding = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->disable_intel_hardware_encoding(), target);
  }

  // optional bool disable_amd_hardware_encoding = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->disable_amd_hardware_encoding(), target);
  }

  // optional bool disable_nvidia_hardware_encoding = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->disable_nvidia_hardware_encoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamingClientCaps)
  return target;
}

size_t CStreamingClientCaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamingClientCaps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string system_info = 1;
    if (has_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_info());
    }

    // optional int32 maximum_decode_bitrate_kbps = 3;
    if (has_maximum_decode_bitrate_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_decode_bitrate_kbps());
    }

    // optional int32 maximum_burst_bitrate_kbps = 4;
    if (has_maximum_burst_bitrate_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_burst_bitrate_kbps());
    }

    // optional bool system_can_suspend = 2;
    if (has_system_can_suspend()) {
      total_size += 1 + 1;
    }

    // optional bool supports_video_hevc = 5;
    if (has_supports_video_hevc()) {
      total_size += 1 + 1;
    }

    // optional bool disable_steam_store = 6;
    if (has_disable_steam_store()) {
      total_size += 1 + 1;
    }

    // optional bool disable_client_cursor = 7;
    if (has_disable_client_cursor()) {
      total_size += 1 + 1;
    }

    // optional bool disable_intel_hardware_encoding = 8;
    if (has_disable_intel_hardware_encoding()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool disable_amd_hardware_encoding = 9;
    if (has_disable_amd_hardware_encoding()) {
      total_size += 1 + 1;
    }

    // optional bool disable_nvidia_hardware_encoding = 10;
    if (has_disable_nvidia_hardware_encoding()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamingClientCaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamingClientCaps)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamingClientCaps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamingClientCaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamingClientCaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamingClientCaps)
    MergeFrom(*source);
  }
}

void CStreamingClientCaps::MergeFrom(const CStreamingClientCaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamingClientCaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_system_info();
      system_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_decode_bitrate_kbps_ = from.maximum_decode_bitrate_kbps_;
    }
    if (cached_has_bits & 0x00000004u) {
      maximum_burst_bitrate_kbps_ = from.maximum_burst_bitrate_kbps_;
    }
    if (cached_has_bits & 0x00000008u) {
      system_can_suspend_ = from.system_can_suspend_;
    }
    if (cached_has_bits & 0x00000010u) {
      supports_video_hevc_ = from.supports_video_hevc_;
    }
    if (cached_has_bits & 0x00000020u) {
      disable_steam_store_ = from.disable_steam_store_;
    }
    if (cached_has_bits & 0x00000040u) {
      disable_client_cursor_ = from.disable_client_cursor_;
    }
    if (cached_has_bits & 0x00000080u) {
      disable_intel_hardware_encoding_ = from.disable_intel_hardware_encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      disable_amd_hardware_encoding_ = from.disable_amd_hardware_encoding_;
    }
    if (cached_has_bits & 0x00000200u) {
      disable_nvidia_hardware_encoding_ = from.disable_nvidia_hardware_encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStreamingClientCaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamingClientCaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamingClientCaps::CopyFrom(const CStreamingClientCaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamingClientCaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamingClientCaps::IsInitialized() const {
  return true;
}

void CStreamingClientCaps::Swap(CStreamingClientCaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamingClientCaps::InternalSwap(CStreamingClientCaps* other) {
  using std::swap;
  system_info_.Swap(&other->system_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maximum_decode_bitrate_kbps_, other->maximum_decode_bitrate_kbps_);
  swap(maximum_burst_bitrate_kbps_, other->maximum_burst_bitrate_kbps_);
  swap(system_can_suspend_, other->system_can_suspend_);
  swap(supports_video_hevc_, other->supports_video_hevc_);
  swap(disable_steam_store_, other->disable_steam_store_);
  swap(disable_client_cursor_, other->disable_client_cursor_);
  swap(disable_intel_hardware_encoding_, other->disable_intel_hardware_encoding_);
  swap(disable_amd_hardware_encoding_, other->disable_amd_hardware_encoding_);
  swap(disable_nvidia_hardware_encoding_, other->disable_nvidia_hardware_encoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamingClientCaps::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamingClientConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamingClientConfig::kQualityFieldNumber;
const int CStreamingClientConfig::kMaximumResolutionXFieldNumber;
const int CStreamingClientConfig::kMaximumResolutionYFieldNumber;
const int CStreamingClientConfig::kMaximumFramerateNumeratorFieldNumber;
const int CStreamingClientConfig::kMaximumFramerateDenominatorFieldNumber;
const int CStreamingClientConfig::kMaximumBitrateKbpsFieldNumber;
const int CStreamingClientConfig::kEnableHardwareDecodingFieldNumber;
const int CStreamingClientConfig::kEnablePerformanceOverlayFieldNumber;
const int CStreamingClientConfig::kEnableVideoStreamingFieldNumber;
const int CStreamingClientConfig::kEnableAudioStreamingFieldNumber;
const int CStreamingClientConfig::kEnableInputStreamingFieldNumber;
const int CStreamingClientConfig::kAudioChannelsFieldNumber;
const int CStreamingClientConfig::kEnableVideoHevcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamingClientConfig::CStreamingClientConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamingClientConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamingClientConfig)
}
CStreamingClientConfig::CStreamingClientConfig(const CStreamingClientConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maximum_resolution_x_, &from.maximum_resolution_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_channels_) -
    reinterpret_cast<char*>(&maximum_resolution_x_)) + sizeof(audio_channels_));
  // @@protoc_insertion_point(copy_constructor:CStreamingClientConfig)
}

void CStreamingClientConfig::SharedCtor() {
  ::memset(&maximum_resolution_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_video_hevc_) -
      reinterpret_cast<char*>(&maximum_resolution_x_)) + sizeof(enable_video_hevc_));
  quality_ = 2;
  maximum_bitrate_kbps_ = -1;
  enable_hardware_decoding_ = true;
  enable_video_streaming_ = true;
  enable_audio_streaming_ = true;
  enable_input_streaming_ = true;
  audio_channels_ = 2;
}

CStreamingClientConfig::~CStreamingClientConfig() {
  // @@protoc_insertion_point(destructor:CStreamingClientConfig)
  SharedDtor();
}

void CStreamingClientConfig::SharedDtor() {
}

void CStreamingClientConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamingClientConfig::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamingClientConfig& CStreamingClientConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamingClientConfig.base);
  return *internal_default_instance();
}


void CStreamingClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamingClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&maximum_resolution_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_video_hevc_) -
        reinterpret_cast<char*>(&maximum_resolution_x_)) + sizeof(enable_video_hevc_));
    quality_ = 2;
    maximum_bitrate_kbps_ = -1;
  }
  if (cached_has_bits & 7936u) {
    enable_hardware_decoding_ = true;
    enable_video_streaming_ = true;
    enable_audio_streaming_ = true;
    enable_input_streaming_ = true;
    audio_channels_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamingClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamingClientConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EStreamQualityPreference quality = 1 [default = k_EStreamQualityBalanced];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamQualityPreference_IsValid(value)) {
            set_quality(static_cast< ::EStreamQualityPreference >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maximum_resolution_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_maximum_resolution_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_resolution_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maximum_resolution_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maximum_resolution_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_resolution_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maximum_framerate_numerator = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_maximum_framerate_numerator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_framerate_numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maximum_framerate_denominator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_maximum_framerate_denominator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_framerate_denominator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_bitrate_kbps = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_maximum_bitrate_kbps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_bitrate_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hardware_decoding = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_enable_hardware_decoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hardware_decoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_performance_overlay = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_enable_performance_overlay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_performance_overlay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_video_streaming = 9 [default = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_enable_video_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_video_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_audio_streaming = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_enable_audio_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_audio_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_input_streaming = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_enable_input_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_input_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_channels = 12 [default = 2];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_audio_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_video_hevc = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_enable_video_hevc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_video_hevc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamingClientConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamingClientConfig)
  return false;
#undef DO_
}

void CStreamingClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamingClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStreamQualityPreference quality = 1 [default = k_EStreamQualityBalanced];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->quality(), output);
  }

  // optional uint32 maximum_resolution_x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maximum_resolution_x(), output);
  }

  // optional uint32 maximum_resolution_y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maximum_resolution_y(), output);
  }

  // optional uint32 maximum_framerate_numerator = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maximum_framerate_numerator(), output);
  }

  // optional uint32 maximum_framerate_denominator = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maximum_framerate_denominator(), output);
  }

  // optional int32 maximum_bitrate_kbps = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maximum_bitrate_kbps(), output);
  }

  // optional bool enable_hardware_decoding = 7 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_hardware_decoding(), output);
  }

  // optional bool enable_performance_overlay = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_performance_overlay(), output);
  }

  // optional bool enable_video_streaming = 9 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_video_streaming(), output);
  }

  // optional bool enable_audio_streaming = 10 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_audio_streaming(), output);
  }

  // optional bool enable_input_streaming = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_input_streaming(), output);
  }

  // optional int32 audio_channels = 12 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->audio_channels(), output);
  }

  // optional bool enable_video_hevc = 13 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_video_hevc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamingClientConfig)
}

::google::protobuf::uint8* CStreamingClientConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamingClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStreamQualityPreference quality = 1 [default = k_EStreamQualityBalanced];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->quality(), target);
  }

  // optional uint32 maximum_resolution_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maximum_resolution_x(), target);
  }

  // optional uint32 maximum_resolution_y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maximum_resolution_y(), target);
  }

  // optional uint32 maximum_framerate_numerator = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maximum_framerate_numerator(), target);
  }

  // optional uint32 maximum_framerate_denominator = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maximum_framerate_denominator(), target);
  }

  // optional int32 maximum_bitrate_kbps = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maximum_bitrate_kbps(), target);
  }

  // optional bool enable_hardware_decoding = 7 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_hardware_decoding(), target);
  }

  // optional bool enable_performance_overlay = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_performance_overlay(), target);
  }

  // optional bool enable_video_streaming = 9 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_video_streaming(), target);
  }

  // optional bool enable_audio_streaming = 10 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_audio_streaming(), target);
  }

  // optional bool enable_input_streaming = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_input_streaming(), target);
  }

  // optional int32 audio_channels = 12 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->audio_channels(), target);
  }

  // optional bool enable_video_hevc = 13 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enable_video_hevc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamingClientConfig)
  return target;
}

size_t CStreamingClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamingClientConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 maximum_resolution_x = 2;
    if (has_maximum_resolution_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximum_resolution_x());
    }

    // optional uint32 maximum_resolution_y = 3;
    if (has_maximum_resolution_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximum_resolution_y());
    }

    // optional uint32 maximum_framerate_numerator = 4;
    if (has_maximum_framerate_numerator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximum_framerate_numerator());
    }

    // optional uint32 maximum_framerate_denominator = 5;
    if (has_maximum_framerate_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximum_framerate_denominator());
    }

    // optional bool enable_performance_overlay = 8 [default = false];
    if (has_enable_performance_overlay()) {
      total_size += 1 + 1;
    }

    // optional bool enable_video_hevc = 13 [default = false];
    if (has_enable_video_hevc()) {
      total_size += 1 + 1;
    }

    // optional .EStreamQualityPreference quality = 1 [default = k_EStreamQualityBalanced];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional int32 maximum_bitrate_kbps = 6 [default = -1];
    if (has_maximum_bitrate_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_bitrate_kbps());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool enable_hardware_decoding = 7 [default = true];
    if (has_enable_hardware_decoding()) {
      total_size += 1 + 1;
    }

    // optional bool enable_video_streaming = 9 [default = true];
    if (has_enable_video_streaming()) {
      total_size += 1 + 1;
    }

    // optional bool enable_audio_streaming = 10 [default = true];
    if (has_enable_audio_streaming()) {
      total_size += 1 + 1;
    }

    // optional bool enable_input_streaming = 11 [default = true];
    if (has_enable_input_streaming()) {
      total_size += 1 + 1;
    }

    // optional int32 audio_channels = 12 [default = 2];
    if (has_audio_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamingClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamingClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamingClientConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamingClientConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamingClientConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamingClientConfig)
    MergeFrom(*source);
  }
}

void CStreamingClientConfig::MergeFrom(const CStreamingClientConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamingClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      maximum_resolution_x_ = from.maximum_resolution_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_resolution_y_ = from.maximum_resolution_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      maximum_framerate_numerator_ = from.maximum_framerate_numerator_;
    }
    if (cached_has_bits & 0x00000008u) {
      maximum_framerate_denominator_ = from.maximum_framerate_denominator_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_performance_overlay_ = from.enable_performance_overlay_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_video_hevc_ = from.enable_video_hevc_;
    }
    if (cached_has_bits & 0x00000040u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000080u) {
      maximum_bitrate_kbps_ = from.maximum_bitrate_kbps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      enable_hardware_decoding_ = from.enable_hardware_decoding_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_video_streaming_ = from.enable_video_streaming_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_audio_streaming_ = from.enable_audio_streaming_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_input_streaming_ = from.enable_input_streaming_;
    }
    if (cached_has_bits & 0x00001000u) {
      audio_channels_ = from.audio_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStreamingClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamingClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamingClientConfig::CopyFrom(const CStreamingClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamingClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamingClientConfig::IsInitialized() const {
  return true;
}

void CStreamingClientConfig::Swap(CStreamingClientConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamingClientConfig::InternalSwap(CStreamingClientConfig* other) {
  using std::swap;
  swap(maximum_resolution_x_, other->maximum_resolution_x_);
  swap(maximum_resolution_y_, other->maximum_resolution_y_);
  swap(maximum_framerate_numerator_, other->maximum_framerate_numerator_);
  swap(maximum_framerate_denominator_, other->maximum_framerate_denominator_);
  swap(enable_performance_overlay_, other->enable_performance_overlay_);
  swap(enable_video_hevc_, other->enable_video_hevc_);
  swap(quality_, other->quality_);
  swap(maximum_bitrate_kbps_, other->maximum_bitrate_kbps_);
  swap(enable_hardware_decoding_, other->enable_hardware_decoding_);
  swap(enable_video_streaming_, other->enable_video_streaming_);
  swap(enable_audio_streaming_, other->enable_audio_streaming_);
  swap(enable_input_streaming_, other->enable_input_streaming_);
  swap(audio_channels_, other->audio_channels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamingClientConfig::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamingServerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamingServerConfig::kChangeDesktopResolutionFieldNumber;
const int CStreamingServerConfig::kDynamicallyAdjustResolutionFieldNumber;
const int CStreamingServerConfig::kEnableCaptureNvfbcFieldNumber;
const int CStreamingServerConfig::kEnableHardwareEncodingNvidiaFieldNumber;
const int CStreamingServerConfig::kEnableHardwareEncodingAmdFieldNumber;
const int CStreamingServerConfig::kEnableHardwareEncodingIntelFieldNumber;
const int CStreamingServerConfig::kSoftwareEncodingThreadsFieldNumber;
const int CStreamingServerConfig::kEnableTrafficPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamingServerConfig::CStreamingServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamingServerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamingServerConfig)
}
CStreamingServerConfig::CStreamingServerConfig(const CStreamingServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&change_desktop_resolution_, &from.change_desktop_resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&software_encoding_threads_) -
    reinterpret_cast<char*>(&change_desktop_resolution_)) + sizeof(software_encoding_threads_));
  // @@protoc_insertion_point(copy_constructor:CStreamingServerConfig)
}

void CStreamingServerConfig::SharedCtor() {
  ::memset(&change_desktop_resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&software_encoding_threads_) -
      reinterpret_cast<char*>(&change_desktop_resolution_)) + sizeof(software_encoding_threads_));
}

CStreamingServerConfig::~CStreamingServerConfig() {
  // @@protoc_insertion_point(destructor:CStreamingServerConfig)
  SharedDtor();
}

void CStreamingServerConfig::SharedDtor() {
}

void CStreamingServerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamingServerConfig::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamingServerConfig& CStreamingServerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamingServerConfig.base);
  return *internal_default_instance();
}


void CStreamingServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamingServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&change_desktop_resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&software_encoding_threads_) -
        reinterpret_cast<char*>(&change_desktop_resolution_)) + sizeof(software_encoding_threads_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamingServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamingServerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool change_desktop_resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_change_desktop_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &change_desktop_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dynamically_adjust_resolution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dynamically_adjust_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamically_adjust_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_capture_nvfbc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enable_capture_nvfbc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_capture_nvfbc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hardware_encoding_nvidia = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enable_hardware_encoding_nvidia();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hardware_encoding_nvidia_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hardware_encoding_amd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enable_hardware_encoding_amd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hardware_encoding_amd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hardware_encoding_intel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_enable_hardware_encoding_intel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hardware_encoding_intel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 software_encoding_threads = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_software_encoding_threads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &software_encoding_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_traffic_priority = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_enable_traffic_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_traffic_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamingServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamingServerConfig)
  return false;
#undef DO_
}

void CStreamingServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamingServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool change_desktop_resolution = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->change_desktop_resolution(), output);
  }

  // optional bool dynamically_adjust_resolution = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dynamically_adjust_resolution(), output);
  }

  // optional bool enable_capture_nvfbc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_capture_nvfbc(), output);
  }

  // optional bool enable_hardware_encoding_nvidia = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_hardware_encoding_nvidia(), output);
  }

  // optional bool enable_hardware_encoding_amd = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_hardware_encoding_amd(), output);
  }

  // optional bool enable_hardware_encoding_intel = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_hardware_encoding_intel(), output);
  }

  // optional int32 software_encoding_threads = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->software_encoding_threads(), output);
  }

  // optional bool enable_traffic_priority = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_traffic_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamingServerConfig)
}

::google::protobuf::uint8* CStreamingServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamingServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool change_desktop_resolution = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->change_desktop_resolution(), target);
  }

  // optional bool dynamically_adjust_resolution = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dynamically_adjust_resolution(), target);
  }

  // optional bool enable_capture_nvfbc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_capture_nvfbc(), target);
  }

  // optional bool enable_hardware_encoding_nvidia = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_hardware_encoding_nvidia(), target);
  }

  // optional bool enable_hardware_encoding_amd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_hardware_encoding_amd(), target);
  }

  // optional bool enable_hardware_encoding_intel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable_hardware_encoding_intel(), target);
  }

  // optional int32 software_encoding_threads = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->software_encoding_threads(), target);
  }

  // optional bool enable_traffic_priority = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_traffic_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamingServerConfig)
  return target;
}

size_t CStreamingServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamingServerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool change_desktop_resolution = 1;
    if (has_change_desktop_resolution()) {
      total_size += 1 + 1;
    }

    // optional bool dynamically_adjust_resolution = 2;
    if (has_dynamically_adjust_resolution()) {
      total_size += 1 + 1;
    }

    // optional bool enable_capture_nvfbc = 3;
    if (has_enable_capture_nvfbc()) {
      total_size += 1 + 1;
    }

    // optional bool enable_hardware_encoding_nvidia = 4;
    if (has_enable_hardware_encoding_nvidia()) {
      total_size += 1 + 1;
    }

    // optional bool enable_hardware_encoding_amd = 5;
    if (has_enable_hardware_encoding_amd()) {
      total_size += 1 + 1;
    }

    // optional bool enable_hardware_encoding_intel = 6;
    if (has_enable_hardware_encoding_intel()) {
      total_size += 1 + 1;
    }

    // optional bool enable_traffic_priority = 8;
    if (has_enable_traffic_priority()) {
      total_size += 1 + 1;
    }

    // optional int32 software_encoding_threads = 7;
    if (has_software_encoding_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->software_encoding_threads());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamingServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamingServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamingServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamingServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamingServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamingServerConfig)
    MergeFrom(*source);
  }
}

void CStreamingServerConfig::MergeFrom(const CStreamingServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamingServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      change_desktop_resolution_ = from.change_desktop_resolution_;
    }
    if (cached_has_bits & 0x00000002u) {
      dynamically_adjust_resolution_ = from.dynamically_adjust_resolution_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_capture_nvfbc_ = from.enable_capture_nvfbc_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_hardware_encoding_nvidia_ = from.enable_hardware_encoding_nvidia_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_hardware_encoding_amd_ = from.enable_hardware_encoding_amd_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_hardware_encoding_intel_ = from.enable_hardware_encoding_intel_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_traffic_priority_ = from.enable_traffic_priority_;
    }
    if (cached_has_bits & 0x00000080u) {
      software_encoding_threads_ = from.software_encoding_threads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStreamingServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamingServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamingServerConfig::CopyFrom(const CStreamingServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamingServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamingServerConfig::IsInitialized() const {
  return true;
}

void CStreamingServerConfig::Swap(CStreamingServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamingServerConfig::InternalSwap(CStreamingServerConfig* other) {
  using std::swap;
  swap(change_desktop_resolution_, other->change_desktop_resolution_);
  swap(dynamically_adjust_resolution_, other->dynamically_adjust_resolution_);
  swap(enable_capture_nvfbc_, other->enable_capture_nvfbc_);
  swap(enable_hardware_encoding_nvidia_, other->enable_hardware_encoding_nvidia_);
  swap(enable_hardware_encoding_amd_, other->enable_hardware_encoding_amd_);
  swap(enable_hardware_encoding_intel_, other->enable_hardware_encoding_intel_);
  swap(enable_traffic_priority_, other->enable_traffic_priority_);
  swap(software_encoding_threads_, other->software_encoding_threads_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamingServerConfig::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNegotiatedConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNegotiatedConfig::kReliableDataFieldNumber;
const int CNegotiatedConfig::kSelectedAudioCodecFieldNumber;
const int CNegotiatedConfig::kSelectedVideoCodecFieldNumber;
const int CNegotiatedConfig::kAvailableVideoModesFieldNumber;
const int CNegotiatedConfig::kEnableRemoteHidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNegotiatedConfig::CNegotiatedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CNegotiatedConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNegotiatedConfig)
}
CNegotiatedConfig::CNegotiatedConfig(const CNegotiatedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      available_video_modes_(from.available_video_modes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&selected_audio_codec_, &from.selected_audio_codec_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_remote_hid_) -
    reinterpret_cast<char*>(&selected_audio_codec_)) + sizeof(enable_remote_hid_));
  // @@protoc_insertion_point(copy_constructor:CNegotiatedConfig)
}

void CNegotiatedConfig::SharedCtor() {
  ::memset(&selected_audio_codec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_remote_hid_) -
      reinterpret_cast<char*>(&selected_audio_codec_)) + sizeof(enable_remote_hid_));
}

CNegotiatedConfig::~CNegotiatedConfig() {
  // @@protoc_insertion_point(destructor:CNegotiatedConfig)
  SharedDtor();
}

void CNegotiatedConfig::SharedDtor() {
}

void CNegotiatedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CNegotiatedConfig::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNegotiatedConfig& CNegotiatedConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CNegotiatedConfig.base);
  return *internal_default_instance();
}


void CNegotiatedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CNegotiatedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_video_modes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&selected_audio_codec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_remote_hid_) -
        reinterpret_cast<char*>(&selected_audio_codec_)) + sizeof(enable_remote_hid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNegotiatedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNegotiatedConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reliable_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reliable_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliable_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EStreamAudioCodec selected_audio_codec = 2 [default = k_EStreamAudioCodecNone];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamAudioCodec_IsValid(value)) {
            set_selected_audio_codec(static_cast< ::EStreamAudioCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EStreamVideoCodec selected_video_codec = 3 [default = k_EStreamVideoCodecNone];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamVideoCodec_IsValid(value)) {
            set_selected_video_codec(static_cast< ::EStreamVideoCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CStreamVideoMode available_video_modes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_available_video_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_remote_hid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enable_remote_hid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_remote_hid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNegotiatedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNegotiatedConfig)
  return false;
#undef DO_
}

void CNegotiatedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNegotiatedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable_data = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reliable_data(), output);
  }

  // optional .EStreamAudioCodec selected_audio_codec = 2 [default = k_EStreamAudioCodecNone];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->selected_audio_codec(), output);
  }

  // optional .EStreamVideoCodec selected_video_codec = 3 [default = k_EStreamVideoCodecNone];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->selected_video_codec(), output);
  }

  // repeated .CStreamVideoMode available_video_modes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->available_video_modes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->available_video_modes(static_cast<int>(i)),
      output);
  }

  // optional bool enable_remote_hid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_remote_hid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNegotiatedConfig)
}

::google::protobuf::uint8* CNegotiatedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNegotiatedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable_data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reliable_data(), target);
  }

  // optional .EStreamAudioCodec selected_audio_codec = 2 [default = k_EStreamAudioCodecNone];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->selected_audio_codec(), target);
  }

  // optional .EStreamVideoCodec selected_video_codec = 3 [default = k_EStreamVideoCodecNone];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->selected_video_codec(), target);
  }

  // repeated .CStreamVideoMode available_video_modes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->available_video_modes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->available_video_modes(static_cast<int>(i)), deterministic, target);
  }

  // optional bool enable_remote_hid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_remote_hid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNegotiatedConfig)
  return target;
}

size_t CNegotiatedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNegotiatedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CStreamVideoMode available_video_modes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->available_video_modes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->available_video_modes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .EStreamAudioCodec selected_audio_codec = 2 [default = k_EStreamAudioCodecNone];
    if (has_selected_audio_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selected_audio_codec());
    }

    // optional .EStreamVideoCodec selected_video_codec = 3 [default = k_EStreamVideoCodecNone];
    if (has_selected_video_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selected_video_codec());
    }

    // optional bool reliable_data = 1;
    if (has_reliable_data()) {
      total_size += 1 + 1;
    }

    // optional bool enable_remote_hid = 5;
    if (has_enable_remote_hid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNegotiatedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNegotiatedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CNegotiatedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNegotiatedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNegotiatedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNegotiatedConfig)
    MergeFrom(*source);
  }
}

void CNegotiatedConfig::MergeFrom(const CNegotiatedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNegotiatedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_video_modes_.MergeFrom(from.available_video_modes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      selected_audio_codec_ = from.selected_audio_codec_;
    }
    if (cached_has_bits & 0x00000002u) {
      selected_video_codec_ = from.selected_video_codec_;
    }
    if (cached_has_bits & 0x00000004u) {
      reliable_data_ = from.reliable_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_remote_hid_ = from.enable_remote_hid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNegotiatedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNegotiatedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNegotiatedConfig::CopyFrom(const CNegotiatedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNegotiatedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNegotiatedConfig::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->available_video_modes())) return false;
  return true;
}

void CNegotiatedConfig::Swap(CNegotiatedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNegotiatedConfig::InternalSwap(CNegotiatedConfig* other) {
  using std::swap;
  CastToBase(&available_video_modes_)->InternalSwap(CastToBase(&other->available_video_modes_));
  swap(selected_audio_codec_, other->selected_audio_codec_);
  swap(selected_video_codec_, other->selected_video_codec_);
  swap(reliable_data_, other->reliable_data_);
  swap(enable_remote_hid_, other->enable_remote_hid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CNegotiatedConfig::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNegotiationInitMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNegotiationInitMsg::kReliableDataFieldNumber;
const int CNegotiationInitMsg::kSupportedAudioCodecsFieldNumber;
const int CNegotiationInitMsg::kSupportedVideoCodecsFieldNumber;
const int CNegotiationInitMsg::kSupportsRemoteHidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNegotiationInitMsg::CNegotiationInitMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CNegotiationInitMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNegotiationInitMsg)
}
CNegotiationInitMsg::CNegotiationInitMsg(const CNegotiationInitMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      supported_audio_codecs_(from.supported_audio_codecs_),
      supported_video_codecs_(from.supported_video_codecs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reliable_data_, &from.reliable_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&supports_remote_hid_) -
    reinterpret_cast<char*>(&reliable_data_)) + sizeof(supports_remote_hid_));
  // @@protoc_insertion_point(copy_constructor:CNegotiationInitMsg)
}

void CNegotiationInitMsg::SharedCtor() {
  ::memset(&reliable_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supports_remote_hid_) -
      reinterpret_cast<char*>(&reliable_data_)) + sizeof(supports_remote_hid_));
}

CNegotiationInitMsg::~CNegotiationInitMsg() {
  // @@protoc_insertion_point(destructor:CNegotiationInitMsg)
  SharedDtor();
}

void CNegotiationInitMsg::SharedDtor() {
}

void CNegotiationInitMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CNegotiationInitMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNegotiationInitMsg& CNegotiationInitMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CNegotiationInitMsg.base);
  return *internal_default_instance();
}


void CNegotiationInitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CNegotiationInitMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_audio_codecs_.Clear();
  supported_video_codecs_.Clear();
  ::memset(&reliable_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supports_remote_hid_) -
      reinterpret_cast<char*>(&reliable_data_)) + sizeof(supports_remote_hid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNegotiationInitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNegotiationInitMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reliable_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reliable_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliable_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EStreamAudioCodec supported_audio_codecs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamAudioCodec_IsValid(value)) {
            add_supported_audio_codecs(static_cast< ::EStreamAudioCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::EStreamAudioCodec_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_supported_audio_codecs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EStreamVideoCodec supported_video_codecs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamVideoCodec_IsValid(value)) {
            add_supported_video_codecs(static_cast< ::EStreamVideoCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::EStreamVideoCodec_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_supported_video_codecs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_remote_hid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_supports_remote_hid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_remote_hid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNegotiationInitMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNegotiationInitMsg)
  return false;
#undef DO_
}

void CNegotiationInitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNegotiationInitMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reliable_data(), output);
  }

  // repeated .EStreamAudioCodec supported_audio_codecs = 2;
  for (int i = 0, n = this->supported_audio_codecs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supported_audio_codecs(i), output);
  }

  // repeated .EStreamVideoCodec supported_video_codecs = 3;
  for (int i = 0, n = this->supported_video_codecs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->supported_video_codecs(i), output);
  }

  // optional bool supports_remote_hid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->supports_remote_hid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNegotiationInitMsg)
}

::google::protobuf::uint8* CNegotiationInitMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNegotiationInitMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reliable_data(), target);
  }

  // repeated .EStreamAudioCodec supported_audio_codecs = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->supported_audio_codecs_, target);

  // repeated .EStreamVideoCodec supported_video_codecs = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->supported_video_codecs_, target);

  // optional bool supports_remote_hid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->supports_remote_hid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNegotiationInitMsg)
  return target;
}

size_t CNegotiationInitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNegotiationInitMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .EStreamAudioCodec supported_audio_codecs = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->supported_audio_codecs_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_audio_codecs(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .EStreamVideoCodec supported_video_codecs = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->supported_video_codecs_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_video_codecs(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool reliable_data = 1;
    if (has_reliable_data()) {
      total_size += 1 + 1;
    }

    // optional bool supports_remote_hid = 4;
    if (has_supports_remote_hid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNegotiationInitMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNegotiationInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CNegotiationInitMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNegotiationInitMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNegotiationInitMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNegotiationInitMsg)
    MergeFrom(*source);
  }
}

void CNegotiationInitMsg::MergeFrom(const CNegotiationInitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNegotiationInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_audio_codecs_.MergeFrom(from.supported_audio_codecs_);
  supported_video_codecs_.MergeFrom(from.supported_video_codecs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      reliable_data_ = from.reliable_data_;
    }
    if (cached_has_bits & 0x00000002u) {
      supports_remote_hid_ = from.supports_remote_hid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNegotiationInitMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNegotiationInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNegotiationInitMsg::CopyFrom(const CNegotiationInitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNegotiationInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNegotiationInitMsg::IsInitialized() const {
  return true;
}

void CNegotiationInitMsg::Swap(CNegotiationInitMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNegotiationInitMsg::InternalSwap(CNegotiationInitMsg* other) {
  using std::swap;
  supported_audio_codecs_.InternalSwap(&other->supported_audio_codecs_);
  supported_video_codecs_.InternalSwap(&other->supported_video_codecs_);
  swap(reliable_data_, other->reliable_data_);
  swap(supports_remote_hid_, other->supports_remote_hid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CNegotiationInitMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNegotiationSetConfigMsg::InitAsDefaultInstance() {
  ::_CNegotiationSetConfigMsg_default_instance_._instance.get_mutable()->config_ = const_cast< ::CNegotiatedConfig*>(
      ::CNegotiatedConfig::internal_default_instance());
  ::_CNegotiationSetConfigMsg_default_instance_._instance.get_mutable()->streaming_client_config_ = const_cast< ::CStreamingClientConfig*>(
      ::CStreamingClientConfig::internal_default_instance());
  ::_CNegotiationSetConfigMsg_default_instance_._instance.get_mutable()->streaming_client_caps_ = const_cast< ::CStreamingClientCaps*>(
      ::CStreamingClientCaps::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNegotiationSetConfigMsg::kConfigFieldNumber;
const int CNegotiationSetConfigMsg::kStreamingClientConfigFieldNumber;
const int CNegotiationSetConfigMsg::kStreamingClientCapsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNegotiationSetConfigMsg::CNegotiationSetConfigMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CNegotiationSetConfigMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNegotiationSetConfigMsg)
}
CNegotiationSetConfigMsg::CNegotiationSetConfigMsg(const CNegotiationSetConfigMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::CNegotiatedConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_streaming_client_config()) {
    streaming_client_config_ = new ::CStreamingClientConfig(*from.streaming_client_config_);
  } else {
    streaming_client_config_ = NULL;
  }
  if (from.has_streaming_client_caps()) {
    streaming_client_caps_ = new ::CStreamingClientCaps(*from.streaming_client_caps_);
  } else {
    streaming_client_caps_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CNegotiationSetConfigMsg)
}

void CNegotiationSetConfigMsg::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streaming_client_caps_) -
      reinterpret_cast<char*>(&config_)) + sizeof(streaming_client_caps_));
}

CNegotiationSetConfigMsg::~CNegotiationSetConfigMsg() {
  // @@protoc_insertion_point(destructor:CNegotiationSetConfigMsg)
  SharedDtor();
}

void CNegotiationSetConfigMsg::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete streaming_client_config_;
  if (this != internal_default_instance()) delete streaming_client_caps_;
}

void CNegotiationSetConfigMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CNegotiationSetConfigMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNegotiationSetConfigMsg& CNegotiationSetConfigMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CNegotiationSetConfigMsg.base);
  return *internal_default_instance();
}


void CNegotiationSetConfigMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CNegotiationSetConfigMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(streaming_client_config_ != NULL);
      streaming_client_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(streaming_client_caps_ != NULL);
      streaming_client_caps_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNegotiationSetConfigMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNegotiationSetConfigMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CNegotiatedConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CStreamingClientConfig streaming_client_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_client_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CStreamingClientCaps streaming_client_caps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_client_caps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNegotiationSetConfigMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNegotiationSetConfigMsg)
  return false;
#undef DO_
}

void CNegotiationSetConfigMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNegotiationSetConfigMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CNegotiatedConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // optional .CStreamingClientConfig streaming_client_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_streaming_client_config(), output);
  }

  // optional .CStreamingClientCaps streaming_client_caps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_streaming_client_caps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNegotiationSetConfigMsg)
}

::google::protobuf::uint8* CNegotiationSetConfigMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNegotiationSetConfigMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CNegotiatedConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // optional .CStreamingClientConfig streaming_client_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_streaming_client_config(), deterministic, target);
  }

  // optional .CStreamingClientCaps streaming_client_caps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_streaming_client_caps(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNegotiationSetConfigMsg)
  return target;
}

size_t CNegotiationSetConfigMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNegotiationSetConfigMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .CNegotiatedConfig config = 1;
  if (has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .CStreamingClientConfig streaming_client_config = 2;
    if (has_streaming_client_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_client_config_);
    }

    // optional .CStreamingClientCaps streaming_client_caps = 3;
    if (has_streaming_client_caps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_client_caps_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNegotiationSetConfigMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNegotiationSetConfigMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CNegotiationSetConfigMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNegotiationSetConfigMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNegotiationSetConfigMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNegotiationSetConfigMsg)
    MergeFrom(*source);
  }
}

void CNegotiationSetConfigMsg::MergeFrom(const CNegotiationSetConfigMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNegotiationSetConfigMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_config()->::CNegotiatedConfig::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_streaming_client_config()->::CStreamingClientConfig::MergeFrom(from.streaming_client_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_streaming_client_caps()->::CStreamingClientCaps::MergeFrom(from.streaming_client_caps());
    }
  }
}

void CNegotiationSetConfigMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNegotiationSetConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNegotiationSetConfigMsg::CopyFrom(const CNegotiationSetConfigMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNegotiationSetConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNegotiationSetConfigMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_config()) {
    if (!this->config_->IsInitialized()) return false;
  }
  return true;
}

void CNegotiationSetConfigMsg::Swap(CNegotiationSetConfigMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNegotiationSetConfigMsg::InternalSwap(CNegotiationSetConfigMsg* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(streaming_client_config_, other->streaming_client_config_);
  swap(streaming_client_caps_, other->streaming_client_caps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CNegotiationSetConfigMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNegotiationCompleteMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNegotiationCompleteMsg::CNegotiationCompleteMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CNegotiationCompleteMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNegotiationCompleteMsg)
}
CNegotiationCompleteMsg::CNegotiationCompleteMsg(const CNegotiationCompleteMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNegotiationCompleteMsg)
}

void CNegotiationCompleteMsg::SharedCtor() {
}

CNegotiationCompleteMsg::~CNegotiationCompleteMsg() {
  // @@protoc_insertion_point(destructor:CNegotiationCompleteMsg)
  SharedDtor();
}

void CNegotiationCompleteMsg::SharedDtor() {
}

void CNegotiationCompleteMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CNegotiationCompleteMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNegotiationCompleteMsg& CNegotiationCompleteMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CNegotiationCompleteMsg.base);
  return *internal_default_instance();
}


void CNegotiationCompleteMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CNegotiationCompleteMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNegotiationCompleteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNegotiationCompleteMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CNegotiationCompleteMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNegotiationCompleteMsg)
  return false;
#undef DO_
}

void CNegotiationCompleteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNegotiationCompleteMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNegotiationCompleteMsg)
}

::google::protobuf::uint8* CNegotiationCompleteMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNegotiationCompleteMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNegotiationCompleteMsg)
  return target;
}

size_t CNegotiationCompleteMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNegotiationCompleteMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNegotiationCompleteMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNegotiationCompleteMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CNegotiationCompleteMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNegotiationCompleteMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNegotiationCompleteMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNegotiationCompleteMsg)
    MergeFrom(*source);
  }
}

void CNegotiationCompleteMsg::MergeFrom(const CNegotiationCompleteMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNegotiationCompleteMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CNegotiationCompleteMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNegotiationCompleteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNegotiationCompleteMsg::CopyFrom(const CNegotiationCompleteMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNegotiationCompleteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNegotiationCompleteMsg::IsInitialized() const {
  return true;
}

void CNegotiationCompleteMsg::Swap(CNegotiationCompleteMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNegotiationCompleteMsg::InternalSwap(CNegotiationCompleteMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CNegotiationCompleteMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStartAudioDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStartAudioDataMsg::kChannelFieldNumber;
const int CStartAudioDataMsg::kCodecFieldNumber;
const int CStartAudioDataMsg::kCodecDataFieldNumber;
const int CStartAudioDataMsg::kFrequencyFieldNumber;
const int CStartAudioDataMsg::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStartAudioDataMsg::CStartAudioDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStartAudioDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStartAudioDataMsg)
}
CStartAudioDataMsg::CStartAudioDataMsg(const CStartAudioDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codec_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_codec_data()) {
    codec_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_data_);
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(channels_));
  // @@protoc_insertion_point(copy_constructor:CStartAudioDataMsg)
}

void CStartAudioDataMsg::SharedCtor() {
  codec_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channels_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(channels_));
}

CStartAudioDataMsg::~CStartAudioDataMsg() {
  // @@protoc_insertion_point(destructor:CStartAudioDataMsg)
  SharedDtor();
}

void CStartAudioDataMsg::SharedDtor() {
  codec_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStartAudioDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStartAudioDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStartAudioDataMsg& CStartAudioDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStartAudioDataMsg.base);
  return *internal_default_instance();
}


void CStartAudioDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CStartAudioDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    codec_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channels_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStartAudioDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStartAudioDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EStreamAudioCodec codec = 3 [default = k_EStreamAudioCodecNone];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamAudioCodec_IsValid(value)) {
            set_codec(static_cast< ::EStreamAudioCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes codec_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_codec_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 frequency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStartAudioDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStartAudioDataMsg)
  return false;
#undef DO_
}

void CStartAudioDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStartAudioDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // optional .EStreamAudioCodec codec = 3 [default = k_EStreamAudioCodecNone];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->codec(), output);
  }

  // optional bytes codec_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->codec_data(), output);
  }

  // optional uint32 frequency = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->frequency(), output);
  }

  // optional uint32 channels = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channels(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStartAudioDataMsg)
}

::google::protobuf::uint8* CStartAudioDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStartAudioDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  // optional .EStreamAudioCodec codec = 3 [default = k_EStreamAudioCodecNone];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->codec(), target);
  }

  // optional bytes codec_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->codec_data(), target);
  }

  // optional uint32 frequency = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frequency(), target);
  }

  // optional uint32 channels = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channels(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStartAudioDataMsg)
  return target;
}

size_t CStartAudioDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStartAudioDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 channel = 2;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }
  // optional bytes codec_data = 4;
  if (has_codec_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->codec_data());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional .EStreamAudioCodec codec = 3 [default = k_EStreamAudioCodecNone];
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec());
    }

    // optional uint32 frequency = 5;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

    // optional uint32 channels = 6;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStartAudioDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStartAudioDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CStartAudioDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStartAudioDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStartAudioDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStartAudioDataMsg)
    MergeFrom(*source);
  }
}

void CStartAudioDataMsg::MergeFrom(const CStartAudioDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStartAudioDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_codec_data();
      codec_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      codec_ = from.codec_;
    }
    if (cached_has_bits & 0x00000008u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000010u) {
      channels_ = from.channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStartAudioDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStartAudioDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStartAudioDataMsg::CopyFrom(const CStartAudioDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStartAudioDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStartAudioDataMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CStartAudioDataMsg::Swap(CStartAudioDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStartAudioDataMsg::InternalSwap(CStartAudioDataMsg* other) {
  using std::swap;
  codec_data_.Swap(&other->codec_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(codec_, other->codec_);
  swap(frequency_, other->frequency_);
  swap(channels_, other->channels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStartAudioDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStopAudioDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStopAudioDataMsg::CStopAudioDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStopAudioDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStopAudioDataMsg)
}
CStopAudioDataMsg::CStopAudioDataMsg(const CStopAudioDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStopAudioDataMsg)
}

void CStopAudioDataMsg::SharedCtor() {
}

CStopAudioDataMsg::~CStopAudioDataMsg() {
  // @@protoc_insertion_point(destructor:CStopAudioDataMsg)
  SharedDtor();
}

void CStopAudioDataMsg::SharedDtor() {
}

void CStopAudioDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStopAudioDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStopAudioDataMsg& CStopAudioDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStopAudioDataMsg.base);
  return *internal_default_instance();
}


void CStopAudioDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CStopAudioDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStopAudioDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStopAudioDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CStopAudioDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStopAudioDataMsg)
  return false;
#undef DO_
}

void CStopAudioDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStopAudioDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStopAudioDataMsg)
}

::google::protobuf::uint8* CStopAudioDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStopAudioDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStopAudioDataMsg)
  return target;
}

size_t CStopAudioDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStopAudioDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStopAudioDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStopAudioDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CStopAudioDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStopAudioDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStopAudioDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStopAudioDataMsg)
    MergeFrom(*source);
  }
}

void CStopAudioDataMsg::MergeFrom(const CStopAudioDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStopAudioDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStopAudioDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStopAudioDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStopAudioDataMsg::CopyFrom(const CStopAudioDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStopAudioDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStopAudioDataMsg::IsInitialized() const {
  return true;
}

void CStopAudioDataMsg::Swap(CStopAudioDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStopAudioDataMsg::InternalSwap(CStopAudioDataMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStopAudioDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStartVideoDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStartVideoDataMsg::kChannelFieldNumber;
const int CStartVideoDataMsg::kCodecFieldNumber;
const int CStartVideoDataMsg::kCodecDataFieldNumber;
const int CStartVideoDataMsg::kWidthFieldNumber;
const int CStartVideoDataMsg::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStartVideoDataMsg::CStartVideoDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStartVideoDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStartVideoDataMsg)
}
CStartVideoDataMsg::CStartVideoDataMsg(const CStartVideoDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codec_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_codec_data()) {
    codec_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_data_);
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CStartVideoDataMsg)
}

void CStartVideoDataMsg::SharedCtor() {
  codec_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(height_));
}

CStartVideoDataMsg::~CStartVideoDataMsg() {
  // @@protoc_insertion_point(destructor:CStartVideoDataMsg)
  SharedDtor();
}

void CStartVideoDataMsg::SharedDtor() {
  codec_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStartVideoDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStartVideoDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStartVideoDataMsg& CStartVideoDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStartVideoDataMsg.base);
  return *internal_default_instance();
}


void CStartVideoDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CStartVideoDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    codec_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStartVideoDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStartVideoDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EStreamVideoCodec codec = 2 [default = k_EStreamVideoCodecNone];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamVideoCodec_IsValid(value)) {
            set_codec(static_cast< ::EStreamVideoCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes codec_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_codec_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStartVideoDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStartVideoDataMsg)
  return false;
#undef DO_
}

void CStartVideoDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStartVideoDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional .EStreamVideoCodec codec = 2 [default = k_EStreamVideoCodecNone];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->codec(), output);
  }

  // optional bytes codec_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->codec_data(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStartVideoDataMsg)
}

::google::protobuf::uint8* CStartVideoDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStartVideoDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional .EStreamVideoCodec codec = 2 [default = k_EStreamVideoCodecNone];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->codec(), target);
  }

  // optional bytes codec_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->codec_data(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStartVideoDataMsg)
  return target;
}

size_t CStartVideoDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStartVideoDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 channel = 1;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }
  // optional bytes codec_data = 3;
  if (has_codec_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->codec_data());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional .EStreamVideoCodec codec = 2 [default = k_EStreamVideoCodecNone];
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStartVideoDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStartVideoDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CStartVideoDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStartVideoDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStartVideoDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStartVideoDataMsg)
    MergeFrom(*source);
  }
}

void CStartVideoDataMsg::MergeFrom(const CStartVideoDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStartVideoDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_codec_data();
      codec_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      codec_ = from.codec_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStartVideoDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStartVideoDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStartVideoDataMsg::CopyFrom(const CStartVideoDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStartVideoDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStartVideoDataMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CStartVideoDataMsg::Swap(CStartVideoDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStartVideoDataMsg::InternalSwap(CStartVideoDataMsg* other) {
  using std::swap;
  codec_data_.Swap(&other->codec_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(codec_, other->codec_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStartVideoDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStopVideoDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStopVideoDataMsg::CStopVideoDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStopVideoDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStopVideoDataMsg)
}
CStopVideoDataMsg::CStopVideoDataMsg(const CStopVideoDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStopVideoDataMsg)
}

void CStopVideoDataMsg::SharedCtor() {
}

CStopVideoDataMsg::~CStopVideoDataMsg() {
  // @@protoc_insertion_point(destructor:CStopVideoDataMsg)
  SharedDtor();
}

void CStopVideoDataMsg::SharedDtor() {
}

void CStopVideoDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStopVideoDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStopVideoDataMsg& CStopVideoDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStopVideoDataMsg.base);
  return *internal_default_instance();
}


void CStopVideoDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CStopVideoDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStopVideoDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStopVideoDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CStopVideoDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStopVideoDataMsg)
  return false;
#undef DO_
}

void CStopVideoDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStopVideoDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStopVideoDataMsg)
}

::google::protobuf::uint8* CStopVideoDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStopVideoDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStopVideoDataMsg)
  return target;
}

size_t CStopVideoDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStopVideoDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStopVideoDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStopVideoDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CStopVideoDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStopVideoDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStopVideoDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStopVideoDataMsg)
    MergeFrom(*source);
  }
}

void CStopVideoDataMsg::MergeFrom(const CStopVideoDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStopVideoDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStopVideoDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStopVideoDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStopVideoDataMsg::CopyFrom(const CStopVideoDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStopVideoDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStopVideoDataMsg::IsInitialized() const {
  return true;
}

void CStopVideoDataMsg::Swap(CStopVideoDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStopVideoDataMsg::InternalSwap(CStopVideoDataMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStopVideoDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputLatencyTestMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputLatencyTestMsg::kInputMarkFieldNumber;
const int CInputLatencyTestMsg::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputLatencyTestMsg::CInputLatencyTestMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputLatencyTestMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputLatencyTestMsg)
}
CInputLatencyTestMsg::CInputLatencyTestMsg(const CInputLatencyTestMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:CInputLatencyTestMsg)
}

void CInputLatencyTestMsg::SharedCtor() {
  ::memset(&input_mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&input_mark_)) + sizeof(color_));
}

CInputLatencyTestMsg::~CInputLatencyTestMsg() {
  // @@protoc_insertion_point(destructor:CInputLatencyTestMsg)
  SharedDtor();
}

void CInputLatencyTestMsg::SharedDtor() {
}

void CInputLatencyTestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputLatencyTestMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputLatencyTestMsg& CInputLatencyTestMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputLatencyTestMsg.base);
  return *internal_default_instance();
}


void CInputLatencyTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputLatencyTestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&input_mark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&input_mark_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputLatencyTestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputLatencyTestMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputLatencyTestMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputLatencyTestMsg)
  return false;
#undef DO_
}

void CInputLatencyTestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputLatencyTestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputLatencyTestMsg)
}

::google::protobuf::uint8* CInputLatencyTestMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputLatencyTestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputLatencyTestMsg)
  return target;
}

size_t CInputLatencyTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputLatencyTestMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }
  // optional uint32 color = 2;
  if (has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputLatencyTestMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputLatencyTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputLatencyTestMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputLatencyTestMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputLatencyTestMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputLatencyTestMsg)
    MergeFrom(*source);
  }
}

void CInputLatencyTestMsg::MergeFrom(const CInputLatencyTestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputLatencyTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputLatencyTestMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputLatencyTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputLatencyTestMsg::CopyFrom(const CInputLatencyTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputLatencyTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputLatencyTestMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CInputLatencyTestMsg::Swap(CInputLatencyTestMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputLatencyTestMsg::InternalSwap(CInputLatencyTestMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(color_, other->color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputLatencyTestMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputMouseMotionMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputMouseMotionMsg::kInputMarkFieldNumber;
const int CInputMouseMotionMsg::kXNormalizedFieldNumber;
const int CInputMouseMotionMsg::kYNormalizedFieldNumber;
const int CInputMouseMotionMsg::kDxFieldNumber;
const int CInputMouseMotionMsg::kDyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputMouseMotionMsg::CInputMouseMotionMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputMouseMotionMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputMouseMotionMsg)
}
CInputMouseMotionMsg::CInputMouseMotionMsg(const CInputMouseMotionMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&dy_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(dy_));
  // @@protoc_insertion_point(copy_constructor:CInputMouseMotionMsg)
}

void CInputMouseMotionMsg::SharedCtor() {
  ::memset(&input_mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dy_) -
      reinterpret_cast<char*>(&input_mark_)) + sizeof(dy_));
}

CInputMouseMotionMsg::~CInputMouseMotionMsg() {
  // @@protoc_insertion_point(destructor:CInputMouseMotionMsg)
  SharedDtor();
}

void CInputMouseMotionMsg::SharedDtor() {
}

void CInputMouseMotionMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputMouseMotionMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputMouseMotionMsg& CInputMouseMotionMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputMouseMotionMsg.base);
  return *internal_default_instance();
}


void CInputMouseMotionMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputMouseMotionMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&input_mark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dy_) -
        reinterpret_cast<char*>(&input_mark_)) + sizeof(dy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputMouseMotionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputMouseMotionMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x_normalized = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_x_normalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_normalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_normalized = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_y_normalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_normalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputMouseMotionMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputMouseMotionMsg)
  return false;
#undef DO_
}

void CInputMouseMotionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputMouseMotionMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // optional float x_normalized = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x_normalized(), output);
  }

  // optional float y_normalized = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y_normalized(), output);
  }

  // optional int32 dx = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dx(), output);
  }

  // optional int32 dy = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputMouseMotionMsg)
}

::google::protobuf::uint8* CInputMouseMotionMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputMouseMotionMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // optional float x_normalized = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x_normalized(), target);
  }

  // optional float y_normalized = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y_normalized(), target);
  }

  // optional int32 dx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dx(), target);
  }

  // optional int32 dy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputMouseMotionMsg)
  return target;
}

size_t CInputMouseMotionMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputMouseMotionMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 input_mark = 1;
    if (has_input_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_mark());
    }

    // optional float x_normalized = 2;
    if (has_x_normalized()) {
      total_size += 1 + 4;
    }

    // optional float y_normalized = 3;
    if (has_y_normalized()) {
      total_size += 1 + 4;
    }

    // optional int32 dx = 4;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dx());
    }

    // optional int32 dy = 5;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dy());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputMouseMotionMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputMouseMotionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputMouseMotionMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputMouseMotionMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputMouseMotionMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputMouseMotionMsg)
    MergeFrom(*source);
  }
}

void CInputMouseMotionMsg::MergeFrom(const CInputMouseMotionMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputMouseMotionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_normalized_ = from.x_normalized_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_normalized_ = from.y_normalized_;
    }
    if (cached_has_bits & 0x00000008u) {
      dx_ = from.dx_;
    }
    if (cached_has_bits & 0x00000010u) {
      dy_ = from.dy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputMouseMotionMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputMouseMotionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputMouseMotionMsg::CopyFrom(const CInputMouseMotionMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputMouseMotionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputMouseMotionMsg::IsInitialized() const {
  return true;
}

void CInputMouseMotionMsg::Swap(CInputMouseMotionMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputMouseMotionMsg::InternalSwap(CInputMouseMotionMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(x_normalized_, other->x_normalized_);
  swap(y_normalized_, other->y_normalized_);
  swap(dx_, other->dx_);
  swap(dy_, other->dy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputMouseMotionMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputMouseWheelMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputMouseWheelMsg::kInputMarkFieldNumber;
const int CInputMouseWheelMsg::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputMouseWheelMsg::CInputMouseWheelMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputMouseWheelMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputMouseWheelMsg)
}
CInputMouseWheelMsg::CInputMouseWheelMsg(const CInputMouseWheelMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:CInputMouseWheelMsg)
}

void CInputMouseWheelMsg::SharedCtor() {
  input_mark_ = 0u;
  direction_ = 120;
}

CInputMouseWheelMsg::~CInputMouseWheelMsg() {
  // @@protoc_insertion_point(destructor:CInputMouseWheelMsg)
  SharedDtor();
}

void CInputMouseWheelMsg::SharedDtor() {
}

void CInputMouseWheelMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputMouseWheelMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputMouseWheelMsg& CInputMouseWheelMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputMouseWheelMsg.base);
  return *internal_default_instance();
}


void CInputMouseWheelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputMouseWheelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    input_mark_ = 0u;
    direction_ = 120;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputMouseWheelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputMouseWheelMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .EStreamMouseWheelDirection direction = 2 [default = k_EStreamMouseWheelUp];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamMouseWheelDirection_IsValid(value)) {
            set_direction(static_cast< ::EStreamMouseWheelDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputMouseWheelMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputMouseWheelMsg)
  return false;
#undef DO_
}

void CInputMouseWheelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputMouseWheelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // required .EStreamMouseWheelDirection direction = 2 [default = k_EStreamMouseWheelUp];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputMouseWheelMsg)
}

::google::protobuf::uint8* CInputMouseWheelMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputMouseWheelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // required .EStreamMouseWheelDirection direction = 2 [default = k_EStreamMouseWheelUp];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputMouseWheelMsg)
  return target;
}

size_t CInputMouseWheelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputMouseWheelMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .EStreamMouseWheelDirection direction = 2 [default = k_EStreamMouseWheelUp];
  if (has_direction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }
  // optional uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputMouseWheelMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputMouseWheelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputMouseWheelMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputMouseWheelMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputMouseWheelMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputMouseWheelMsg)
    MergeFrom(*source);
  }
}

void CInputMouseWheelMsg::MergeFrom(const CInputMouseWheelMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputMouseWheelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputMouseWheelMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputMouseWheelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputMouseWheelMsg::CopyFrom(const CInputMouseWheelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputMouseWheelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputMouseWheelMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CInputMouseWheelMsg::Swap(CInputMouseWheelMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputMouseWheelMsg::InternalSwap(CInputMouseWheelMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(direction_, other->direction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputMouseWheelMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputMouseDownMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputMouseDownMsg::kInputMarkFieldNumber;
const int CInputMouseDownMsg::kButtonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputMouseDownMsg::CInputMouseDownMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputMouseDownMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputMouseDownMsg)
}
CInputMouseDownMsg::CInputMouseDownMsg(const CInputMouseDownMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(button_));
  // @@protoc_insertion_point(copy_constructor:CInputMouseDownMsg)
}

void CInputMouseDownMsg::SharedCtor() {
  input_mark_ = 0u;
  button_ = 1;
}

CInputMouseDownMsg::~CInputMouseDownMsg() {
  // @@protoc_insertion_point(destructor:CInputMouseDownMsg)
  SharedDtor();
}

void CInputMouseDownMsg::SharedDtor() {
}

void CInputMouseDownMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputMouseDownMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputMouseDownMsg& CInputMouseDownMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputMouseDownMsg.base);
  return *internal_default_instance();
}


void CInputMouseDownMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputMouseDownMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    input_mark_ = 0u;
    button_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputMouseDownMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputMouseDownMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamMouseButton_IsValid(value)) {
            set_button(static_cast< ::EStreamMouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputMouseDownMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputMouseDownMsg)
  return false;
#undef DO_
}

void CInputMouseDownMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputMouseDownMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->button(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputMouseDownMsg)
}

::google::protobuf::uint8* CInputMouseDownMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputMouseDownMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->button(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputMouseDownMsg)
  return target;
}

size_t CInputMouseDownMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputMouseDownMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
  if (has_button()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
  }
  // optional uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputMouseDownMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputMouseDownMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputMouseDownMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputMouseDownMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputMouseDownMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputMouseDownMsg)
    MergeFrom(*source);
  }
}

void CInputMouseDownMsg::MergeFrom(const CInputMouseDownMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputMouseDownMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      button_ = from.button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputMouseDownMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputMouseDownMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputMouseDownMsg::CopyFrom(const CInputMouseDownMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputMouseDownMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputMouseDownMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CInputMouseDownMsg::Swap(CInputMouseDownMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputMouseDownMsg::InternalSwap(CInputMouseDownMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(button_, other->button_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputMouseDownMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputMouseUpMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputMouseUpMsg::kInputMarkFieldNumber;
const int CInputMouseUpMsg::kButtonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputMouseUpMsg::CInputMouseUpMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputMouseUpMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputMouseUpMsg)
}
CInputMouseUpMsg::CInputMouseUpMsg(const CInputMouseUpMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(button_));
  // @@protoc_insertion_point(copy_constructor:CInputMouseUpMsg)
}

void CInputMouseUpMsg::SharedCtor() {
  input_mark_ = 0u;
  button_ = 1;
}

CInputMouseUpMsg::~CInputMouseUpMsg() {
  // @@protoc_insertion_point(destructor:CInputMouseUpMsg)
  SharedDtor();
}

void CInputMouseUpMsg::SharedDtor() {
}

void CInputMouseUpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputMouseUpMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputMouseUpMsg& CInputMouseUpMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputMouseUpMsg.base);
  return *internal_default_instance();
}


void CInputMouseUpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputMouseUpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    input_mark_ = 0u;
    button_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputMouseUpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputMouseUpMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamMouseButton_IsValid(value)) {
            set_button(static_cast< ::EStreamMouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputMouseUpMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputMouseUpMsg)
  return false;
#undef DO_
}

void CInputMouseUpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputMouseUpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->button(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputMouseUpMsg)
}

::google::protobuf::uint8* CInputMouseUpMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputMouseUpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->button(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputMouseUpMsg)
  return target;
}

size_t CInputMouseUpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputMouseUpMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .EStreamMouseButton button = 2 [default = k_EStreamMouseButtonLeft];
  if (has_button()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
  }
  // optional uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputMouseUpMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputMouseUpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputMouseUpMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputMouseUpMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputMouseUpMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputMouseUpMsg)
    MergeFrom(*source);
  }
}

void CInputMouseUpMsg::MergeFrom(const CInputMouseUpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputMouseUpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      button_ = from.button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputMouseUpMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputMouseUpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputMouseUpMsg::CopyFrom(const CInputMouseUpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputMouseUpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputMouseUpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CInputMouseUpMsg::Swap(CInputMouseUpMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputMouseUpMsg::InternalSwap(CInputMouseUpMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(button_, other->button_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputMouseUpMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputKeyDownMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputKeyDownMsg::kInputMarkFieldNumber;
const int CInputKeyDownMsg::kScancodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputKeyDownMsg::CInputKeyDownMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputKeyDownMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputKeyDownMsg)
}
CInputKeyDownMsg::CInputKeyDownMsg(const CInputKeyDownMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&scancode_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(scancode_));
  // @@protoc_insertion_point(copy_constructor:CInputKeyDownMsg)
}

void CInputKeyDownMsg::SharedCtor() {
  ::memset(&input_mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scancode_) -
      reinterpret_cast<char*>(&input_mark_)) + sizeof(scancode_));
}

CInputKeyDownMsg::~CInputKeyDownMsg() {
  // @@protoc_insertion_point(destructor:CInputKeyDownMsg)
  SharedDtor();
}

void CInputKeyDownMsg::SharedDtor() {
}

void CInputKeyDownMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputKeyDownMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputKeyDownMsg& CInputKeyDownMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputKeyDownMsg.base);
  return *internal_default_instance();
}


void CInputKeyDownMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputKeyDownMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&input_mark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scancode_) -
        reinterpret_cast<char*>(&input_mark_)) + sizeof(scancode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputKeyDownMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputKeyDownMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scancode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scancode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scancode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputKeyDownMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputKeyDownMsg)
  return false;
#undef DO_
}

void CInputKeyDownMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputKeyDownMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // required uint32 scancode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scancode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputKeyDownMsg)
}

::google::protobuf::uint8* CInputKeyDownMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputKeyDownMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // required uint32 scancode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scancode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputKeyDownMsg)
  return target;
}

size_t CInputKeyDownMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputKeyDownMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 scancode = 2;
  if (has_scancode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scancode());
  }
  // optional uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputKeyDownMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputKeyDownMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputKeyDownMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputKeyDownMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputKeyDownMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputKeyDownMsg)
    MergeFrom(*source);
  }
}

void CInputKeyDownMsg::MergeFrom(const CInputKeyDownMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputKeyDownMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      scancode_ = from.scancode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputKeyDownMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputKeyDownMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputKeyDownMsg::CopyFrom(const CInputKeyDownMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputKeyDownMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputKeyDownMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CInputKeyDownMsg::Swap(CInputKeyDownMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputKeyDownMsg::InternalSwap(CInputKeyDownMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(scancode_, other->scancode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputKeyDownMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputKeyUpMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputKeyUpMsg::kInputMarkFieldNumber;
const int CInputKeyUpMsg::kScancodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputKeyUpMsg::CInputKeyUpMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputKeyUpMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputKeyUpMsg)
}
CInputKeyUpMsg::CInputKeyUpMsg(const CInputKeyUpMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_mark_, &from.input_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&scancode_) -
    reinterpret_cast<char*>(&input_mark_)) + sizeof(scancode_));
  // @@protoc_insertion_point(copy_constructor:CInputKeyUpMsg)
}

void CInputKeyUpMsg::SharedCtor() {
  ::memset(&input_mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scancode_) -
      reinterpret_cast<char*>(&input_mark_)) + sizeof(scancode_));
}

CInputKeyUpMsg::~CInputKeyUpMsg() {
  // @@protoc_insertion_point(destructor:CInputKeyUpMsg)
  SharedDtor();
}

void CInputKeyUpMsg::SharedDtor() {
}

void CInputKeyUpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputKeyUpMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputKeyUpMsg& CInputKeyUpMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputKeyUpMsg.base);
  return *internal_default_instance();
}


void CInputKeyUpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputKeyUpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&input_mark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scancode_) -
        reinterpret_cast<char*>(&input_mark_)) + sizeof(scancode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputKeyUpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputKeyUpMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scancode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scancode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scancode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputKeyUpMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputKeyUpMsg)
  return false;
#undef DO_
}

void CInputKeyUpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputKeyUpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // required uint32 scancode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scancode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputKeyUpMsg)
}

::google::protobuf::uint8* CInputKeyUpMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputKeyUpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // required uint32 scancode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scancode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputKeyUpMsg)
  return target;
}

size_t CInputKeyUpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputKeyUpMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 scancode = 2;
  if (has_scancode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scancode());
  }
  // optional uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputKeyUpMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputKeyUpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputKeyUpMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputKeyUpMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputKeyUpMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputKeyUpMsg)
    MergeFrom(*source);
  }
}

void CInputKeyUpMsg::MergeFrom(const CInputKeyUpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputKeyUpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000002u) {
      scancode_ = from.scancode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputKeyUpMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputKeyUpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputKeyUpMsg::CopyFrom(const CInputKeyUpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputKeyUpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputKeyUpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CInputKeyUpMsg::Swap(CInputKeyUpMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputKeyUpMsg::InternalSwap(CInputKeyUpMsg* other) {
  using std::swap;
  swap(input_mark_, other->input_mark_);
  swap(scancode_, other->scancode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputKeyUpMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CInputTextMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInputTextMsg::kInputMarkFieldNumber;
const int CInputTextMsg::kTextUtf8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInputTextMsg::CInputTextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CInputTextMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CInputTextMsg)
}
CInputTextMsg::CInputTextMsg(const CInputTextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_utf8()) {
    text_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_utf8_);
  }
  input_mark_ = from.input_mark_;
  // @@protoc_insertion_point(copy_constructor:CInputTextMsg)
}

void CInputTextMsg::SharedCtor() {
  text_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_mark_ = 0u;
}

CInputTextMsg::~CInputTextMsg() {
  // @@protoc_insertion_point(destructor:CInputTextMsg)
  SharedDtor();
}

void CInputTextMsg::SharedDtor() {
  text_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInputTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CInputTextMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInputTextMsg& CInputTextMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CInputTextMsg.base);
  return *internal_default_instance();
}


void CInputTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CInputTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_utf8_.ClearNonDefaultToEmptyNoArena();
  }
  input_mark_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInputTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CInputTextMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text_utf8 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_utf8()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_utf8().data(), static_cast<int>(this->text_utf8().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CInputTextMsg.text_utf8");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CInputTextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CInputTextMsg)
  return false;
#undef DO_
}

void CInputTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CInputTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input_mark(), output);
  }

  // required string text_utf8 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_utf8().data(), static_cast<int>(this->text_utf8().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CInputTextMsg.text_utf8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_utf8(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CInputTextMsg)
}

::google::protobuf::uint8* CInputTextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CInputTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 input_mark = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_mark(), target);
  }

  // required string text_utf8 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_utf8().data(), static_cast<int>(this->text_utf8().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CInputTextMsg.text_utf8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_utf8(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInputTextMsg)
  return target;
}

size_t CInputTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInputTextMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text_utf8 = 2;
  if (has_text_utf8()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_utf8());
  }
  // optional uint32 input_mark = 1;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CInputTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CInputTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CInputTextMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInputTextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CInputTextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CInputTextMsg)
    MergeFrom(*source);
  }
}

void CInputTextMsg::MergeFrom(const CInputTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInputTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text_utf8();
      text_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_utf8_);
    }
    if (cached_has_bits & 0x00000002u) {
      input_mark_ = from.input_mark_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInputTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CInputTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInputTextMsg::CopyFrom(const CInputTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInputTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInputTextMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CInputTextMsg::Swap(CInputTextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInputTextMsg::InternalSwap(CInputTextMsg* other) {
  using std::swap;
  text_utf8_.Swap(&other->text_utf8_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_mark_, other->input_mark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CInputTextMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetTitleMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetTitleMsg::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetTitleMsg::CSetTitleMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetTitleMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetTitleMsg)
}
CSetTitleMsg::CSetTitleMsg(const CSetTitleMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:CSetTitleMsg)
}

void CSetTitleMsg::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSetTitleMsg::~CSetTitleMsg() {
  // @@protoc_insertion_point(destructor:CSetTitleMsg)
  SharedDtor();
}

void CSetTitleMsg::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSetTitleMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetTitleMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetTitleMsg& CSetTitleMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetTitleMsg.base);
  return *internal_default_instance();
}


void CSetTitleMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetTitleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetTitleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetTitleMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSetTitleMsg.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetTitleMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetTitleMsg)
  return false;
#undef DO_
}

void CSetTitleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetTitleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSetTitleMsg.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetTitleMsg)
}

::google::protobuf::uint8* CSetTitleMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetTitleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSetTitleMsg.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetTitleMsg)
  return target;
}

size_t CSetTitleMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetTitleMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetTitleMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetTitleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetTitleMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetTitleMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetTitleMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetTitleMsg)
    MergeFrom(*source);
  }
}

void CSetTitleMsg::MergeFrom(const CSetTitleMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetTitleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CSetTitleMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetTitleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetTitleMsg::CopyFrom(const CSetTitleMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetTitleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetTitleMsg::IsInitialized() const {
  return true;
}

void CSetTitleMsg::Swap(CSetTitleMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetTitleMsg::InternalSwap(CSetTitleMsg* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetTitleMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetIconMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetIconMsg::kWidthFieldNumber;
const int CSetIconMsg::kHeightFieldNumber;
const int CSetIconMsg::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetIconMsg::CSetIconMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetIconMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetIconMsg)
}
CSetIconMsg::CSetIconMsg(const CSetIconMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CSetIconMsg)
}

void CSetIconMsg::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

CSetIconMsg::~CSetIconMsg() {
  // @@protoc_insertion_point(destructor:CSetIconMsg)
  SharedDtor();
}

void CSetIconMsg::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSetIconMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetIconMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetIconMsg& CSetIconMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetIconMsg.base);
  return *internal_default_instance();
}


void CSetIconMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetIconMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetIconMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetIconMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetIconMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetIconMsg)
  return false;
#undef DO_
}

void CSetIconMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetIconMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional bytes image = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetIconMsg)
}

::google::protobuf::uint8* CSetIconMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetIconMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional bytes image = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetIconMsg)
  return target;
}

size_t CSetIconMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetIconMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetIconMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetIconMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetIconMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetIconMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetIconMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetIconMsg)
    MergeFrom(*source);
  }
}

void CSetIconMsg::MergeFrom(const CSetIconMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetIconMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSetIconMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetIconMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetIconMsg::CopyFrom(const CSetIconMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetIconMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetIconMsg::IsInitialized() const {
  return true;
}

void CSetIconMsg::Swap(CSetIconMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetIconMsg::InternalSwap(CSetIconMsg* other) {
  using std::swap;
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetIconMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CShowCursorMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShowCursorMsg::kXNormalizedFieldNumber;
const int CShowCursorMsg::kYNormalizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShowCursorMsg::CShowCursorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CShowCursorMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CShowCursorMsg)
}
CShowCursorMsg::CShowCursorMsg(const CShowCursorMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_normalized_, &from.x_normalized_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_normalized_) -
    reinterpret_cast<char*>(&x_normalized_)) + sizeof(y_normalized_));
  // @@protoc_insertion_point(copy_constructor:CShowCursorMsg)
}

void CShowCursorMsg::SharedCtor() {
  ::memset(&x_normalized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_normalized_) -
      reinterpret_cast<char*>(&x_normalized_)) + sizeof(y_normalized_));
}

CShowCursorMsg::~CShowCursorMsg() {
  // @@protoc_insertion_point(destructor:CShowCursorMsg)
  SharedDtor();
}

void CShowCursorMsg::SharedDtor() {
}

void CShowCursorMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CShowCursorMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShowCursorMsg& CShowCursorMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CShowCursorMsg.base);
  return *internal_default_instance();
}


void CShowCursorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CShowCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_normalized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_normalized_) -
        reinterpret_cast<char*>(&x_normalized_)) + sizeof(y_normalized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShowCursorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CShowCursorMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_normalized = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x_normalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_normalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_normalized = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y_normalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_normalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CShowCursorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CShowCursorMsg)
  return false;
#undef DO_
}

void CShowCursorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CShowCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x_normalized = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_normalized(), output);
  }

  // optional float y_normalized = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_normalized(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CShowCursorMsg)
}

::google::protobuf::uint8* CShowCursorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CShowCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x_normalized = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_normalized(), target);
  }

  // optional float y_normalized = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_normalized(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CShowCursorMsg)
  return target;
}

size_t CShowCursorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CShowCursorMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x_normalized = 1;
    if (has_x_normalized()) {
      total_size += 1 + 4;
    }

    // optional float y_normalized = 2;
    if (has_y_normalized()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShowCursorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CShowCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CShowCursorMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShowCursorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CShowCursorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CShowCursorMsg)
    MergeFrom(*source);
  }
}

void CShowCursorMsg::MergeFrom(const CShowCursorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CShowCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_normalized_ = from.x_normalized_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_normalized_ = from.y_normalized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CShowCursorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CShowCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShowCursorMsg::CopyFrom(const CShowCursorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CShowCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShowCursorMsg::IsInitialized() const {
  return true;
}

void CShowCursorMsg::Swap(CShowCursorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShowCursorMsg::InternalSwap(CShowCursorMsg* other) {
  using std::swap;
  swap(x_normalized_, other->x_normalized_);
  swap(y_normalized_, other->y_normalized_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CShowCursorMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHideCursorMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHideCursorMsg::CHideCursorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CHideCursorMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHideCursorMsg)
}
CHideCursorMsg::CHideCursorMsg(const CHideCursorMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHideCursorMsg)
}

void CHideCursorMsg::SharedCtor() {
}

CHideCursorMsg::~CHideCursorMsg() {
  // @@protoc_insertion_point(destructor:CHideCursorMsg)
  SharedDtor();
}

void CHideCursorMsg::SharedDtor() {
}

void CHideCursorMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHideCursorMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHideCursorMsg& CHideCursorMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CHideCursorMsg.base);
  return *internal_default_instance();
}


void CHideCursorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CHideCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHideCursorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHideCursorMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CHideCursorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHideCursorMsg)
  return false;
#undef DO_
}

void CHideCursorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHideCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHideCursorMsg)
}

::google::protobuf::uint8* CHideCursorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHideCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHideCursorMsg)
  return target;
}

size_t CHideCursorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHideCursorMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHideCursorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHideCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CHideCursorMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHideCursorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHideCursorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHideCursorMsg)
    MergeFrom(*source);
  }
}

void CHideCursorMsg::MergeFrom(const CHideCursorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHideCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHideCursorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHideCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHideCursorMsg::CopyFrom(const CHideCursorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHideCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHideCursorMsg::IsInitialized() const {
  return true;
}

void CHideCursorMsg::Swap(CHideCursorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHideCursorMsg::InternalSwap(CHideCursorMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHideCursorMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetCursorMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetCursorMsg::kCursorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetCursorMsg::CSetCursorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetCursorMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetCursorMsg)
}
CSetCursorMsg::CSetCursorMsg(const CSetCursorMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_id_ = from.cursor_id_;
  // @@protoc_insertion_point(copy_constructor:CSetCursorMsg)
}

void CSetCursorMsg::SharedCtor() {
  cursor_id_ = GOOGLE_ULONGLONG(0);
}

CSetCursorMsg::~CSetCursorMsg() {
  // @@protoc_insertion_point(destructor:CSetCursorMsg)
  SharedDtor();
}

void CSetCursorMsg::SharedDtor() {
}

void CSetCursorMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetCursorMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetCursorMsg& CSetCursorMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetCursorMsg.base);
  return *internal_default_instance();
}


void CSetCursorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetCursorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetCursorMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetCursorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetCursorMsg)
  return false;
#undef DO_
}

void CSetCursorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetCursorMsg)
}

::google::protobuf::uint8* CSetCursorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cursor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetCursorMsg)
  return target;
}

size_t CSetCursorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetCursorMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 cursor_id = 1;
  if (has_cursor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cursor_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetCursorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetCursorMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetCursorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetCursorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetCursorMsg)
    MergeFrom(*source);
  }
}

void CSetCursorMsg::MergeFrom(const CSetCursorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cursor_id()) {
    set_cursor_id(from.cursor_id());
  }
}

void CSetCursorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetCursorMsg::CopyFrom(const CSetCursorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetCursorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CSetCursorMsg::Swap(CSetCursorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetCursorMsg::InternalSwap(CSetCursorMsg* other) {
  using std::swap;
  swap(cursor_id_, other->cursor_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetCursorMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGetCursorImageMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGetCursorImageMsg::kCursorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGetCursorImageMsg::CGetCursorImageMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CGetCursorImageMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGetCursorImageMsg)
}
CGetCursorImageMsg::CGetCursorImageMsg(const CGetCursorImageMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_id_ = from.cursor_id_;
  // @@protoc_insertion_point(copy_constructor:CGetCursorImageMsg)
}

void CGetCursorImageMsg::SharedCtor() {
  cursor_id_ = GOOGLE_ULONGLONG(0);
}

CGetCursorImageMsg::~CGetCursorImageMsg() {
  // @@protoc_insertion_point(destructor:CGetCursorImageMsg)
  SharedDtor();
}

void CGetCursorImageMsg::SharedDtor() {
}

void CGetCursorImageMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGetCursorImageMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGetCursorImageMsg& CGetCursorImageMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CGetCursorImageMsg.base);
  return *internal_default_instance();
}


void CGetCursorImageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CGetCursorImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGetCursorImageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGetCursorImageMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGetCursorImageMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGetCursorImageMsg)
  return false;
#undef DO_
}

void CGetCursorImageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGetCursorImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGetCursorImageMsg)
}

::google::protobuf::uint8* CGetCursorImageMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGetCursorImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cursor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGetCursorImageMsg)
  return target;
}

size_t CGetCursorImageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGetCursorImageMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 cursor_id = 1;
  if (has_cursor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cursor_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetCursorImageMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGetCursorImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetCursorImageMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGetCursorImageMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGetCursorImageMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGetCursorImageMsg)
    MergeFrom(*source);
  }
}

void CGetCursorImageMsg::MergeFrom(const CGetCursorImageMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGetCursorImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cursor_id()) {
    set_cursor_id(from.cursor_id());
  }
}

void CGetCursorImageMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGetCursorImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetCursorImageMsg::CopyFrom(const CGetCursorImageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGetCursorImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetCursorImageMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CGetCursorImageMsg::Swap(CGetCursorImageMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGetCursorImageMsg::InternalSwap(CGetCursorImageMsg* other) {
  using std::swap;
  swap(cursor_id_, other->cursor_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGetCursorImageMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetCursorImageMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetCursorImageMsg::kCursorIdFieldNumber;
const int CSetCursorImageMsg::kWidthFieldNumber;
const int CSetCursorImageMsg::kHeightFieldNumber;
const int CSetCursorImageMsg::kHotXFieldNumber;
const int CSetCursorImageMsg::kHotYFieldNumber;
const int CSetCursorImageMsg::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetCursorImageMsg::CSetCursorImageMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetCursorImageMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetCursorImageMsg)
}
CSetCursorImageMsg::CSetCursorImageMsg(const CSetCursorImageMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&cursor_id_, &from.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hot_y_) -
    reinterpret_cast<char*>(&cursor_id_)) + sizeof(hot_y_));
  // @@protoc_insertion_point(copy_constructor:CSetCursorImageMsg)
}

void CSetCursorImageMsg::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cursor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hot_y_) -
      reinterpret_cast<char*>(&cursor_id_)) + sizeof(hot_y_));
}

CSetCursorImageMsg::~CSetCursorImageMsg() {
  // @@protoc_insertion_point(destructor:CSetCursorImageMsg)
  SharedDtor();
}

void CSetCursorImageMsg::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSetCursorImageMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetCursorImageMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetCursorImageMsg& CSetCursorImageMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetCursorImageMsg.base);
  return *internal_default_instance();
}


void CSetCursorImageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetCursorImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hot_y_) -
        reinterpret_cast<char*>(&cursor_id_)) + sizeof(hot_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetCursorImageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetCursorImageMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hot_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hot_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hot_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hot_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes image = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetCursorImageMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetCursorImageMsg)
  return false;
#undef DO_
}

void CSetCursorImageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetCursorImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_id(), output);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 hot_x = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hot_x(), output);
  }

  // optional int32 hot_y = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hot_y(), output);
  }

  // optional bytes image = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetCursorImageMsg)
}

::google::protobuf::uint8* CSetCursorImageMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetCursorImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cursor_id(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 hot_x = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hot_x(), target);
  }

  // optional int32 hot_y = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hot_y(), target);
  }

  // optional bytes image = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetCursorImageMsg)
  return target;
}

size_t CSetCursorImageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetCursorImageMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 cursor_id = 1;
  if (has_cursor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cursor_id());
  }
  // optional bytes image = 6;
  if (has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 hot_x = 4;
    if (has_hot_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hot_x());
    }

    // optional int32 hot_y = 5;
    if (has_hot_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hot_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetCursorImageMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetCursorImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetCursorImageMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetCursorImageMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetCursorImageMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetCursorImageMsg)
    MergeFrom(*source);
  }
}

void CSetCursorImageMsg::MergeFrom(const CSetCursorImageMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetCursorImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      cursor_id_ = from.cursor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      hot_x_ = from.hot_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      hot_y_ = from.hot_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSetCursorImageMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetCursorImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetCursorImageMsg::CopyFrom(const CSetCursorImageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetCursorImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetCursorImageMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CSetCursorImageMsg::Swap(CSetCursorImageMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetCursorImageMsg::InternalSwap(CSetCursorImageMsg* other) {
  using std::swap;
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cursor_id_, other->cursor_id_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(hot_x_, other->hot_x_);
  swap(hot_y_, other->hot_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetCursorImageMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideoDecoderInfoMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideoDecoderInfoMsg::kInfoFieldNumber;
const int CVideoDecoderInfoMsg::kThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideoDecoderInfoMsg::CVideoDecoderInfoMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CVideoDecoderInfoMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideoDecoderInfoMsg)
}
CVideoDecoderInfoMsg::CVideoDecoderInfoMsg(const CVideoDecoderInfoMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  threads_ = from.threads_;
  // @@protoc_insertion_point(copy_constructor:CVideoDecoderInfoMsg)
}

void CVideoDecoderInfoMsg::SharedCtor() {
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threads_ = 0;
}

CVideoDecoderInfoMsg::~CVideoDecoderInfoMsg() {
  // @@protoc_insertion_point(destructor:CVideoDecoderInfoMsg)
  SharedDtor();
}

void CVideoDecoderInfoMsg::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVideoDecoderInfoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideoDecoderInfoMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideoDecoderInfoMsg& CVideoDecoderInfoMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CVideoDecoderInfoMsg.base);
  return *internal_default_instance();
}


void CVideoDecoderInfoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideoDecoderInfoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    info_.ClearNonDefaultToEmptyNoArena();
  }
  threads_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideoDecoderInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideoDecoderInfoMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CVideoDecoderInfoMsg.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 threads = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_threads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideoDecoderInfoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideoDecoderInfoMsg)
  return false;
#undef DO_
}

void CVideoDecoderInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideoDecoderInfoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVideoDecoderInfoMsg.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // optional int32 threads = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideoDecoderInfoMsg)
}

::google::protobuf::uint8* CVideoDecoderInfoMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideoDecoderInfoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVideoDecoderInfoMsg.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // optional int32 threads = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideoDecoderInfoMsg)
  return target;
}

size_t CVideoDecoderInfoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideoDecoderInfoMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional int32 threads = 2;
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threads());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideoDecoderInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideoDecoderInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideoDecoderInfoMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideoDecoderInfoMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideoDecoderInfoMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideoDecoderInfoMsg)
    MergeFrom(*source);
  }
}

void CVideoDecoderInfoMsg::MergeFrom(const CVideoDecoderInfoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideoDecoderInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000002u) {
      threads_ = from.threads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideoDecoderInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideoDecoderInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideoDecoderInfoMsg::CopyFrom(const CVideoDecoderInfoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideoDecoderInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideoDecoderInfoMsg::IsInitialized() const {
  return true;
}

void CVideoDecoderInfoMsg::Swap(CVideoDecoderInfoMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideoDecoderInfoMsg::InternalSwap(CVideoDecoderInfoMsg* other) {
  using std::swap;
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(threads_, other->threads_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideoDecoderInfoMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideoEncoderInfoMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideoEncoderInfoMsg::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideoEncoderInfoMsg::CVideoEncoderInfoMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CVideoEncoderInfoMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideoEncoderInfoMsg)
}
CVideoEncoderInfoMsg::CVideoEncoderInfoMsg(const CVideoEncoderInfoMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  // @@protoc_insertion_point(copy_constructor:CVideoEncoderInfoMsg)
}

void CVideoEncoderInfoMsg::SharedCtor() {
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CVideoEncoderInfoMsg::~CVideoEncoderInfoMsg() {
  // @@protoc_insertion_point(destructor:CVideoEncoderInfoMsg)
  SharedDtor();
}

void CVideoEncoderInfoMsg::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVideoEncoderInfoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideoEncoderInfoMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideoEncoderInfoMsg& CVideoEncoderInfoMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CVideoEncoderInfoMsg.base);
  return *internal_default_instance();
}


void CVideoEncoderInfoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideoEncoderInfoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    info_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideoEncoderInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideoEncoderInfoMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CVideoEncoderInfoMsg.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideoEncoderInfoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideoEncoderInfoMsg)
  return false;
#undef DO_
}

void CVideoEncoderInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideoEncoderInfoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVideoEncoderInfoMsg.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideoEncoderInfoMsg)
}

::google::protobuf::uint8* CVideoEncoderInfoMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideoEncoderInfoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVideoEncoderInfoMsg.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideoEncoderInfoMsg)
  return target;
}

size_t CVideoEncoderInfoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideoEncoderInfoMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideoEncoderInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideoEncoderInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideoEncoderInfoMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideoEncoderInfoMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideoEncoderInfoMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideoEncoderInfoMsg)
    MergeFrom(*source);
  }
}

void CVideoEncoderInfoMsg::MergeFrom(const CVideoEncoderInfoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideoEncoderInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    set_has_info();
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
}

void CVideoEncoderInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideoEncoderInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideoEncoderInfoMsg::CopyFrom(const CVideoEncoderInfoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideoEncoderInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideoEncoderInfoMsg::IsInitialized() const {
  return true;
}

void CVideoEncoderInfoMsg::Swap(CVideoEncoderInfoMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideoEncoderInfoMsg::InternalSwap(CVideoEncoderInfoMsg* other) {
  using std::swap;
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideoEncoderInfoMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CQuitRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQuitRequest::CQuitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CQuitRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuitRequest)
}
CQuitRequest::CQuitRequest(const CQuitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CQuitRequest)
}

void CQuitRequest::SharedCtor() {
}

CQuitRequest::~CQuitRequest() {
  // @@protoc_insertion_point(destructor:CQuitRequest)
  SharedDtor();
}

void CQuitRequest::SharedDtor() {
}

void CQuitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CQuitRequest::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CQuitRequest& CQuitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CQuitRequest.base);
  return *internal_default_instance();
}


void CQuitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CQuitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CQuitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuitRequest)
  return false;
#undef DO_
}

void CQuitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuitRequest)
}

::google::protobuf::uint8* CQuitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CQuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuitRequest)
  return target;
}

size_t CQuitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQuitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQuitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CQuitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CQuitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQuitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQuitRequest)
    MergeFrom(*source);
  }
}

void CQuitRequest::MergeFrom(const CQuitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CQuitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQuitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuitRequest::CopyFrom(const CQuitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuitRequest::IsInitialized() const {
  return true;
}

void CQuitRequest::Swap(CQuitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQuitRequest::InternalSwap(CQuitRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CQuitRequest::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDeleteCursorMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeleteCursorMsg::kCursorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeleteCursorMsg::CDeleteCursorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CDeleteCursorMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDeleteCursorMsg)
}
CDeleteCursorMsg::CDeleteCursorMsg(const CDeleteCursorMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_id_ = from.cursor_id_;
  // @@protoc_insertion_point(copy_constructor:CDeleteCursorMsg)
}

void CDeleteCursorMsg::SharedCtor() {
  cursor_id_ = GOOGLE_ULONGLONG(0);
}

CDeleteCursorMsg::~CDeleteCursorMsg() {
  // @@protoc_insertion_point(destructor:CDeleteCursorMsg)
  SharedDtor();
}

void CDeleteCursorMsg::SharedDtor() {
}

void CDeleteCursorMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDeleteCursorMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeleteCursorMsg& CDeleteCursorMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CDeleteCursorMsg.base);
  return *internal_default_instance();
}


void CDeleteCursorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeleteCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeleteCursorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDeleteCursorMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDeleteCursorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDeleteCursorMsg)
  return false;
#undef DO_
}

void CDeleteCursorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDeleteCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDeleteCursorMsg)
}

::google::protobuf::uint8* CDeleteCursorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDeleteCursorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cursor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeleteCursorMsg)
  return target;
}

size_t CDeleteCursorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeleteCursorMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 cursor_id = 1;
  if (has_cursor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cursor_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeleteCursorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeleteCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeleteCursorMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeleteCursorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeleteCursorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeleteCursorMsg)
    MergeFrom(*source);
  }
}

void CDeleteCursorMsg::MergeFrom(const CDeleteCursorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeleteCursorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cursor_id()) {
    set_cursor_id(from.cursor_id());
  }
}

void CDeleteCursorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeleteCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeleteCursorMsg::CopyFrom(const CDeleteCursorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeleteCursorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeleteCursorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDeleteCursorMsg::Swap(CDeleteCursorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeleteCursorMsg::InternalSwap(CDeleteCursorMsg* other) {
  using std::swap;
  swap(cursor_id_, other->cursor_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDeleteCursorMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetStreamingClientConfig::InitAsDefaultInstance() {
  ::_CSetStreamingClientConfig_default_instance_._instance.get_mutable()->config_ = const_cast< ::CStreamingClientConfig*>(
      ::CStreamingClientConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetStreamingClientConfig::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetStreamingClientConfig::CSetStreamingClientConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetStreamingClientConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetStreamingClientConfig)
}
CSetStreamingClientConfig::CSetStreamingClientConfig(const CSetStreamingClientConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::CStreamingClientConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CSetStreamingClientConfig)
}

void CSetStreamingClientConfig::SharedCtor() {
  config_ = NULL;
}

CSetStreamingClientConfig::~CSetStreamingClientConfig() {
  // @@protoc_insertion_point(destructor:CSetStreamingClientConfig)
  SharedDtor();
}

void CSetStreamingClientConfig::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
}

void CSetStreamingClientConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetStreamingClientConfig::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetStreamingClientConfig& CSetStreamingClientConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetStreamingClientConfig.base);
  return *internal_default_instance();
}


void CSetStreamingClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetStreamingClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(config_ != NULL);
    config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetStreamingClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetStreamingClientConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CStreamingClientConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetStreamingClientConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetStreamingClientConfig)
  return false;
#undef DO_
}

void CSetStreamingClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetStreamingClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CStreamingClientConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetStreamingClientConfig)
}

::google::protobuf::uint8* CSetStreamingClientConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetStreamingClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CStreamingClientConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetStreamingClientConfig)
  return target;
}

size_t CSetStreamingClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetStreamingClientConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .CStreamingClientConfig config = 1;
  if (has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetStreamingClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetStreamingClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetStreamingClientConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetStreamingClientConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetStreamingClientConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetStreamingClientConfig)
    MergeFrom(*source);
  }
}

void CSetStreamingClientConfig::MergeFrom(const CSetStreamingClientConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetStreamingClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::CStreamingClientConfig::MergeFrom(from.config());
  }
}

void CSetStreamingClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetStreamingClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetStreamingClientConfig::CopyFrom(const CSetStreamingClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetStreamingClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetStreamingClientConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CSetStreamingClientConfig::Swap(CSetStreamingClientConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetStreamingClientConfig::InternalSwap(CSetStreamingClientConfig* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetStreamingClientConfig::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetQoSMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetQoSMsg::kUseQosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetQoSMsg::CSetQoSMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetQoSMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetQoSMsg)
}
CSetQoSMsg::CSetQoSMsg(const CSetQoSMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  use_qos_ = from.use_qos_;
  // @@protoc_insertion_point(copy_constructor:CSetQoSMsg)
}

void CSetQoSMsg::SharedCtor() {
  use_qos_ = false;
}

CSetQoSMsg::~CSetQoSMsg() {
  // @@protoc_insertion_point(destructor:CSetQoSMsg)
  SharedDtor();
}

void CSetQoSMsg::SharedDtor() {
}

void CSetQoSMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetQoSMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetQoSMsg& CSetQoSMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetQoSMsg.base);
  return *internal_default_instance();
}


void CSetQoSMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetQoSMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_qos_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetQoSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetQoSMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_qos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_qos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_qos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetQoSMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetQoSMsg)
  return false;
#undef DO_
}

void CSetQoSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetQoSMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool use_qos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_qos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetQoSMsg)
}

::google::protobuf::uint8* CSetQoSMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetQoSMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool use_qos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_qos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetQoSMsg)
  return target;
}

size_t CSetQoSMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetQoSMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool use_qos = 1;
  if (has_use_qos()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetQoSMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetQoSMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetQoSMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetQoSMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetQoSMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetQoSMsg)
    MergeFrom(*source);
  }
}

void CSetQoSMsg::MergeFrom(const CSetQoSMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetQoSMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_use_qos()) {
    set_use_qos(from.use_qos());
  }
}

void CSetQoSMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetQoSMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetQoSMsg::CopyFrom(const CSetQoSMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetQoSMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetQoSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CSetQoSMsg::Swap(CSetQoSMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetQoSMsg::InternalSwap(CSetQoSMsg* other) {
  using std::swap;
  swap(use_qos_, other->use_qos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetQoSMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetTargetFramerateMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetTargetFramerateMsg::kFramerateFieldNumber;
const int CSetTargetFramerateMsg::kReasonsFieldNumber;
const int CSetTargetFramerateMsg::kFramerateNumeratorFieldNumber;
const int CSetTargetFramerateMsg::kFramerateDenominatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetTargetFramerateMsg::CSetTargetFramerateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetTargetFramerateMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetTargetFramerateMsg)
}
CSetTargetFramerateMsg::CSetTargetFramerateMsg(const CSetTargetFramerateMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&framerate_, &from.framerate_,
    static_cast<size_t>(reinterpret_cast<char*>(&framerate_denominator_) -
    reinterpret_cast<char*>(&framerate_)) + sizeof(framerate_denominator_));
  // @@protoc_insertion_point(copy_constructor:CSetTargetFramerateMsg)
}

void CSetTargetFramerateMsg::SharedCtor() {
  ::memset(&framerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&framerate_denominator_) -
      reinterpret_cast<char*>(&framerate_)) + sizeof(framerate_denominator_));
}

CSetTargetFramerateMsg::~CSetTargetFramerateMsg() {
  // @@protoc_insertion_point(destructor:CSetTargetFramerateMsg)
  SharedDtor();
}

void CSetTargetFramerateMsg::SharedDtor() {
}

void CSetTargetFramerateMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetTargetFramerateMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetTargetFramerateMsg& CSetTargetFramerateMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetTargetFramerateMsg.base);
  return *internal_default_instance();
}


void CSetTargetFramerateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetTargetFramerateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&framerate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&framerate_denominator_) -
        reinterpret_cast<char*>(&framerate_)) + sizeof(framerate_denominator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetTargetFramerateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetTargetFramerateMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framerate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_framerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reasons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reasons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reasons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 framerate_numerator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_framerate_numerator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 framerate_denominator = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_framerate_denominator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_denominator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetTargetFramerateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetTargetFramerateMsg)
  return false;
#undef DO_
}

void CSetTargetFramerateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetTargetFramerateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 framerate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framerate(), output);
  }

  // optional uint32 reasons = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reasons(), output);
  }

  // optional uint32 framerate_numerator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->framerate_numerator(), output);
  }

  // optional uint32 framerate_denominator = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->framerate_denominator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetTargetFramerateMsg)
}

::google::protobuf::uint8* CSetTargetFramerateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetTargetFramerateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 framerate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framerate(), target);
  }

  // optional uint32 reasons = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reasons(), target);
  }

  // optional uint32 framerate_numerator = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->framerate_numerator(), target);
  }

  // optional uint32 framerate_denominator = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->framerate_denominator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetTargetFramerateMsg)
  return target;
}

size_t CSetTargetFramerateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetTargetFramerateMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 framerate = 1;
  if (has_framerate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->framerate());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional uint32 reasons = 2;
    if (has_reasons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reasons());
    }

    // optional uint32 framerate_numerator = 3;
    if (has_framerate_numerator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framerate_numerator());
    }

    // optional uint32 framerate_denominator = 4;
    if (has_framerate_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framerate_denominator());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetTargetFramerateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetTargetFramerateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetTargetFramerateMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetTargetFramerateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetTargetFramerateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetTargetFramerateMsg)
    MergeFrom(*source);
  }
}

void CSetTargetFramerateMsg::MergeFrom(const CSetTargetFramerateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetTargetFramerateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      framerate_ = from.framerate_;
    }
    if (cached_has_bits & 0x00000002u) {
      reasons_ = from.reasons_;
    }
    if (cached_has_bits & 0x00000004u) {
      framerate_numerator_ = from.framerate_numerator_;
    }
    if (cached_has_bits & 0x00000008u) {
      framerate_denominator_ = from.framerate_denominator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSetTargetFramerateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetTargetFramerateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetTargetFramerateMsg::CopyFrom(const CSetTargetFramerateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetTargetFramerateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetTargetFramerateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CSetTargetFramerateMsg::Swap(CSetTargetFramerateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetTargetFramerateMsg::InternalSwap(CSetTargetFramerateMsg* other) {
  using std::swap;
  swap(framerate_, other->framerate_);
  swap(reasons_, other->reasons_);
  swap(framerate_numerator_, other->framerate_numerator_);
  swap(framerate_denominator_, other->framerate_denominator_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetTargetFramerateMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetTargetBitrateMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetTargetBitrateMsg::kBitrateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetTargetBitrateMsg::CSetTargetBitrateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetTargetBitrateMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetTargetBitrateMsg)
}
CSetTargetBitrateMsg::CSetTargetBitrateMsg(const CSetTargetBitrateMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bitrate_ = from.bitrate_;
  // @@protoc_insertion_point(copy_constructor:CSetTargetBitrateMsg)
}

void CSetTargetBitrateMsg::SharedCtor() {
  bitrate_ = 0;
}

CSetTargetBitrateMsg::~CSetTargetBitrateMsg() {
  // @@protoc_insertion_point(destructor:CSetTargetBitrateMsg)
  SharedDtor();
}

void CSetTargetBitrateMsg::SharedDtor() {
}

void CSetTargetBitrateMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetTargetBitrateMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetTargetBitrateMsg& CSetTargetBitrateMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetTargetBitrateMsg.base);
  return *internal_default_instance();
}


void CSetTargetBitrateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetTargetBitrateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitrate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetTargetBitrateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetTargetBitrateMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bitrate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bitrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetTargetBitrateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetTargetBitrateMsg)
  return false;
#undef DO_
}

void CSetTargetBitrateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetTargetBitrateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bitrate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bitrate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetTargetBitrateMsg)
}

::google::protobuf::uint8* CSetTargetBitrateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetTargetBitrateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bitrate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bitrate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetTargetBitrateMsg)
  return target;
}

size_t CSetTargetBitrateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetTargetBitrateMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 bitrate = 1;
  if (has_bitrate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bitrate());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetTargetBitrateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetTargetBitrateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetTargetBitrateMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetTargetBitrateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetTargetBitrateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetTargetBitrateMsg)
    MergeFrom(*source);
  }
}

void CSetTargetBitrateMsg::MergeFrom(const CSetTargetBitrateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetTargetBitrateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bitrate()) {
    set_bitrate(from.bitrate());
  }
}

void CSetTargetBitrateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetTargetBitrateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetTargetBitrateMsg::CopyFrom(const CSetTargetBitrateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetTargetBitrateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetTargetBitrateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CSetTargetBitrateMsg::Swap(CSetTargetBitrateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetTargetBitrateMsg::InternalSwap(CSetTargetBitrateMsg* other) {
  using std::swap;
  swap(bitrate_, other->bitrate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetTargetBitrateMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void COverlayEnabledMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COverlayEnabledMsg::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COverlayEnabledMsg::COverlayEnabledMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_COverlayEnabledMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:COverlayEnabledMsg)
}
COverlayEnabledMsg::COverlayEnabledMsg(const COverlayEnabledMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:COverlayEnabledMsg)
}

void COverlayEnabledMsg::SharedCtor() {
  enabled_ = false;
}

COverlayEnabledMsg::~COverlayEnabledMsg() {
  // @@protoc_insertion_point(destructor:COverlayEnabledMsg)
  SharedDtor();
}

void COverlayEnabledMsg::SharedDtor() {
}

void COverlayEnabledMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* COverlayEnabledMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COverlayEnabledMsg& COverlayEnabledMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_COverlayEnabledMsg.base);
  return *internal_default_instance();
}


void COverlayEnabledMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:COverlayEnabledMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COverlayEnabledMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COverlayEnabledMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COverlayEnabledMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COverlayEnabledMsg)
  return false;
#undef DO_
}

void COverlayEnabledMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COverlayEnabledMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COverlayEnabledMsg)
}

::google::protobuf::uint8* COverlayEnabledMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:COverlayEnabledMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COverlayEnabledMsg)
  return target;
}

size_t COverlayEnabledMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COverlayEnabledMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COverlayEnabledMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COverlayEnabledMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const COverlayEnabledMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COverlayEnabledMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COverlayEnabledMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COverlayEnabledMsg)
    MergeFrom(*source);
  }
}

void COverlayEnabledMsg::MergeFrom(const COverlayEnabledMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COverlayEnabledMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void COverlayEnabledMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COverlayEnabledMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COverlayEnabledMsg::CopyFrom(const COverlayEnabledMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COverlayEnabledMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COverlayEnabledMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void COverlayEnabledMsg::Swap(COverlayEnabledMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COverlayEnabledMsg::InternalSwap(COverlayEnabledMsg* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata COverlayEnabledMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetGammaRampMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetGammaRampMsg::kGammaRampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetGammaRampMsg::CSetGammaRampMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetGammaRampMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetGammaRampMsg)
}
CSetGammaRampMsg::CSetGammaRampMsg(const CSetGammaRampMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamma_ramp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gamma_ramp()) {
    gamma_ramp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamma_ramp_);
  }
  // @@protoc_insertion_point(copy_constructor:CSetGammaRampMsg)
}

void CSetGammaRampMsg::SharedCtor() {
  gamma_ramp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSetGammaRampMsg::~CSetGammaRampMsg() {
  // @@protoc_insertion_point(destructor:CSetGammaRampMsg)
  SharedDtor();
}

void CSetGammaRampMsg::SharedDtor() {
  gamma_ramp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSetGammaRampMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetGammaRampMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetGammaRampMsg& CSetGammaRampMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetGammaRampMsg.base);
  return *internal_default_instance();
}


void CSetGammaRampMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetGammaRampMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gamma_ramp_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetGammaRampMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetGammaRampMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gamma_ramp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamma_ramp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetGammaRampMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetGammaRampMsg)
  return false;
#undef DO_
}

void CSetGammaRampMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetGammaRampMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gamma_ramp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gamma_ramp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetGammaRampMsg)
}

::google::protobuf::uint8* CSetGammaRampMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetGammaRampMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gamma_ramp = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gamma_ramp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetGammaRampMsg)
  return target;
}

size_t CSetGammaRampMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetGammaRampMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes gamma_ramp = 1;
  if (has_gamma_ramp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gamma_ramp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetGammaRampMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetGammaRampMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetGammaRampMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetGammaRampMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetGammaRampMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetGammaRampMsg)
    MergeFrom(*source);
  }
}

void CSetGammaRampMsg::MergeFrom(const CSetGammaRampMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetGammaRampMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gamma_ramp()) {
    set_has_gamma_ramp();
    gamma_ramp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamma_ramp_);
  }
}

void CSetGammaRampMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetGammaRampMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetGammaRampMsg::CopyFrom(const CSetGammaRampMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetGammaRampMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetGammaRampMsg::IsInitialized() const {
  return true;
}

void CSetGammaRampMsg::Swap(CSetGammaRampMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetGammaRampMsg::InternalSwap(CSetGammaRampMsg* other) {
  using std::swap;
  gamma_ramp_.Swap(&other->gamma_ramp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetGammaRampMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetActivityMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetActivityMsg::kActivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetActivityMsg::CSetActivityMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetActivityMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetActivityMsg)
}
CSetActivityMsg::CSetActivityMsg(const CSetActivityMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activity_ = from.activity_;
  // @@protoc_insertion_point(copy_constructor:CSetActivityMsg)
}

void CSetActivityMsg::SharedCtor() {
  activity_ = 1;
}

CSetActivityMsg::~CSetActivityMsg() {
  // @@protoc_insertion_point(destructor:CSetActivityMsg)
  SharedDtor();
}

void CSetActivityMsg::SharedDtor() {
}

void CSetActivityMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetActivityMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetActivityMsg& CSetActivityMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetActivityMsg.base);
  return *internal_default_instance();
}


void CSetActivityMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetActivityMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetActivityMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetActivityMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EStreamActivity activity = 1 [default = k_EStreamActivityIdle];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamActivity_IsValid(value)) {
            set_activity(static_cast< ::EStreamActivity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetActivityMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetActivityMsg)
  return false;
#undef DO_
}

void CSetActivityMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetActivityMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStreamActivity activity = 1 [default = k_EStreamActivityIdle];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetActivityMsg)
}

::google::protobuf::uint8* CSetActivityMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetActivityMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStreamActivity activity = 1 [default = k_EStreamActivityIdle];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetActivityMsg)
  return target;
}

size_t CSetActivityMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetActivityMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .EStreamActivity activity = 1 [default = k_EStreamActivityIdle];
  if (has_activity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetActivityMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetActivityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetActivityMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetActivityMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetActivityMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetActivityMsg)
    MergeFrom(*source);
  }
}

void CSetActivityMsg::MergeFrom(const CSetActivityMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetActivityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_activity()) {
    set_activity(from.activity());
  }
}

void CSetActivityMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetActivityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetActivityMsg::CopyFrom(const CSetActivityMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetActivityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetActivityMsg::IsInitialized() const {
  return true;
}

void CSetActivityMsg::Swap(CSetActivityMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetActivityMsg::InternalSwap(CSetActivityMsg* other) {
  using std::swap;
  swap(activity_, other->activity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetActivityMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSystemSuspendMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSystemSuspendMsg::CSystemSuspendMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSystemSuspendMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSystemSuspendMsg)
}
CSystemSuspendMsg::CSystemSuspendMsg(const CSystemSuspendMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSystemSuspendMsg)
}

void CSystemSuspendMsg::SharedCtor() {
}

CSystemSuspendMsg::~CSystemSuspendMsg() {
  // @@protoc_insertion_point(destructor:CSystemSuspendMsg)
  SharedDtor();
}

void CSystemSuspendMsg::SharedDtor() {
}

void CSystemSuspendMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSystemSuspendMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSystemSuspendMsg& CSystemSuspendMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSystemSuspendMsg.base);
  return *internal_default_instance();
}


void CSystemSuspendMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSystemSuspendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSystemSuspendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSystemSuspendMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CSystemSuspendMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSystemSuspendMsg)
  return false;
#undef DO_
}

void CSystemSuspendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSystemSuspendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSystemSuspendMsg)
}

::google::protobuf::uint8* CSystemSuspendMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSystemSuspendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSystemSuspendMsg)
  return target;
}

size_t CSystemSuspendMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSystemSuspendMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSystemSuspendMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSystemSuspendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSystemSuspendMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSystemSuspendMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSystemSuspendMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSystemSuspendMsg)
    MergeFrom(*source);
  }
}

void CSystemSuspendMsg::MergeFrom(const CSystemSuspendMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSystemSuspendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSystemSuspendMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSystemSuspendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSystemSuspendMsg::CopyFrom(const CSystemSuspendMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSystemSuspendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSystemSuspendMsg::IsInitialized() const {
  return true;
}

void CSystemSuspendMsg::Swap(CSystemSuspendMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSystemSuspendMsg::InternalSwap(CSystemSuspendMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSystemSuspendMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVirtualHereRequestMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualHereRequestMsg::kHostnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualHereRequestMsg::CVirtualHereRequestMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CVirtualHereRequestMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVirtualHereRequestMsg)
}
CVirtualHereRequestMsg::CVirtualHereRequestMsg(const CVirtualHereRequestMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  // @@protoc_insertion_point(copy_constructor:CVirtualHereRequestMsg)
}

void CVirtualHereRequestMsg::SharedCtor() {
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CVirtualHereRequestMsg::~CVirtualHereRequestMsg() {
  // @@protoc_insertion_point(destructor:CVirtualHereRequestMsg)
  SharedDtor();
}

void CVirtualHereRequestMsg::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVirtualHereRequestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVirtualHereRequestMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVirtualHereRequestMsg& CVirtualHereRequestMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CVirtualHereRequestMsg.base);
  return *internal_default_instance();
}


void CVirtualHereRequestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualHereRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVirtualHereRequestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVirtualHereRequestMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CVirtualHereRequestMsg.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVirtualHereRequestMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVirtualHereRequestMsg)
  return false;
#undef DO_
}

void CVirtualHereRequestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVirtualHereRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVirtualHereRequestMsg.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVirtualHereRequestMsg)
}

::google::protobuf::uint8* CVirtualHereRequestMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualHereRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVirtualHereRequestMsg.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualHereRequestMsg)
  return target;
}

size_t CVirtualHereRequestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualHereRequestMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string hostname = 1;
  if (has_hostname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualHereRequestMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVirtualHereRequestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualHereRequestMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVirtualHereRequestMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVirtualHereRequestMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVirtualHereRequestMsg)
    MergeFrom(*source);
  }
}

void CVirtualHereRequestMsg::MergeFrom(const CVirtualHereRequestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualHereRequestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hostname()) {
    set_has_hostname();
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
}

void CVirtualHereRequestMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVirtualHereRequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualHereRequestMsg::CopyFrom(const CVirtualHereRequestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualHereRequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualHereRequestMsg::IsInitialized() const {
  return true;
}

void CVirtualHereRequestMsg::Swap(CVirtualHereRequestMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualHereRequestMsg::InternalSwap(CVirtualHereRequestMsg* other) {
  using std::swap;
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVirtualHereRequestMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVirtualHereReadyMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualHereReadyMsg::kLicensedDeviceCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualHereReadyMsg::CVirtualHereReadyMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CVirtualHereReadyMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVirtualHereReadyMsg)
}
CVirtualHereReadyMsg::CVirtualHereReadyMsg(const CVirtualHereReadyMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  licensed_device_count_ = from.licensed_device_count_;
  // @@protoc_insertion_point(copy_constructor:CVirtualHereReadyMsg)
}

void CVirtualHereReadyMsg::SharedCtor() {
  licensed_device_count_ = 0u;
}

CVirtualHereReadyMsg::~CVirtualHereReadyMsg() {
  // @@protoc_insertion_point(destructor:CVirtualHereReadyMsg)
  SharedDtor();
}

void CVirtualHereReadyMsg::SharedDtor() {
}

void CVirtualHereReadyMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVirtualHereReadyMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVirtualHereReadyMsg& CVirtualHereReadyMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CVirtualHereReadyMsg.base);
  return *internal_default_instance();
}


void CVirtualHereReadyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualHereReadyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licensed_device_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVirtualHereReadyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVirtualHereReadyMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licensed_device_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_licensed_device_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licensed_device_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVirtualHereReadyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVirtualHereReadyMsg)
  return false;
#undef DO_
}

void CVirtualHereReadyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVirtualHereReadyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 licensed_device_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licensed_device_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVirtualHereReadyMsg)
}

::google::protobuf::uint8* CVirtualHereReadyMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualHereReadyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 licensed_device_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licensed_device_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualHereReadyMsg)
  return target;
}

size_t CVirtualHereReadyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualHereReadyMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 licensed_device_count = 1;
  if (has_licensed_device_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->licensed_device_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualHereReadyMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVirtualHereReadyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualHereReadyMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVirtualHereReadyMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVirtualHereReadyMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVirtualHereReadyMsg)
    MergeFrom(*source);
  }
}

void CVirtualHereReadyMsg::MergeFrom(const CVirtualHereReadyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualHereReadyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_licensed_device_count()) {
    set_licensed_device_count(from.licensed_device_count());
  }
}

void CVirtualHereReadyMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVirtualHereReadyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualHereReadyMsg::CopyFrom(const CVirtualHereReadyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualHereReadyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualHereReadyMsg::IsInitialized() const {
  return true;
}

void CVirtualHereReadyMsg::Swap(CVirtualHereReadyMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualHereReadyMsg::InternalSwap(CVirtualHereReadyMsg* other) {
  using std::swap;
  swap(licensed_device_count_, other->licensed_device_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVirtualHereReadyMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVirtualHereShareDeviceMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVirtualHereShareDeviceMsg::kDeviceAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVirtualHereShareDeviceMsg::CVirtualHereShareDeviceMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CVirtualHereShareDeviceMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVirtualHereShareDeviceMsg)
}
CVirtualHereShareDeviceMsg::CVirtualHereShareDeviceMsg(const CVirtualHereShareDeviceMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_address()) {
    device_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_address_);
  }
  // @@protoc_insertion_point(copy_constructor:CVirtualHereShareDeviceMsg)
}

void CVirtualHereShareDeviceMsg::SharedCtor() {
  device_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CVirtualHereShareDeviceMsg::~CVirtualHereShareDeviceMsg() {
  // @@protoc_insertion_point(destructor:CVirtualHereShareDeviceMsg)
  SharedDtor();
}

void CVirtualHereShareDeviceMsg::SharedDtor() {
  device_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVirtualHereShareDeviceMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVirtualHereShareDeviceMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVirtualHereShareDeviceMsg& CVirtualHereShareDeviceMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CVirtualHereShareDeviceMsg.base);
  return *internal_default_instance();
}


void CVirtualHereShareDeviceMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualHereShareDeviceMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVirtualHereShareDeviceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVirtualHereShareDeviceMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_address().data(), static_cast<int>(this->device_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CVirtualHereShareDeviceMsg.device_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVirtualHereShareDeviceMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVirtualHereShareDeviceMsg)
  return false;
#undef DO_
}

void CVirtualHereShareDeviceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVirtualHereShareDeviceMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_address().data(), static_cast<int>(this->device_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVirtualHereShareDeviceMsg.device_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVirtualHereShareDeviceMsg)
}

::google::protobuf::uint8* CVirtualHereShareDeviceMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualHereShareDeviceMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_address().data(), static_cast<int>(this->device_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVirtualHereShareDeviceMsg.device_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualHereShareDeviceMsg)
  return target;
}

size_t CVirtualHereShareDeviceMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualHereShareDeviceMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string device_address = 1;
  if (has_device_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVirtualHereShareDeviceMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVirtualHereShareDeviceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CVirtualHereShareDeviceMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVirtualHereShareDeviceMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVirtualHereShareDeviceMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVirtualHereShareDeviceMsg)
    MergeFrom(*source);
  }
}

void CVirtualHereShareDeviceMsg::MergeFrom(const CVirtualHereShareDeviceMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualHereShareDeviceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_address()) {
    set_has_device_address();
    device_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_address_);
  }
}

void CVirtualHereShareDeviceMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVirtualHereShareDeviceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVirtualHereShareDeviceMsg::CopyFrom(const CVirtualHereShareDeviceMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualHereShareDeviceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualHereShareDeviceMsg::IsInitialized() const {
  return true;
}

void CVirtualHereShareDeviceMsg::Swap(CVirtualHereShareDeviceMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVirtualHereShareDeviceMsg::InternalSwap(CVirtualHereShareDeviceMsg* other) {
  using std::swap;
  device_address_.Swap(&other->device_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVirtualHereShareDeviceMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetSpectatorModeMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetSpectatorModeMsg::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetSpectatorModeMsg::CSetSpectatorModeMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetSpectatorModeMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetSpectatorModeMsg)
}
CSetSpectatorModeMsg::CSetSpectatorModeMsg(const CSetSpectatorModeMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CSetSpectatorModeMsg)
}

void CSetSpectatorModeMsg::SharedCtor() {
  enabled_ = false;
}

CSetSpectatorModeMsg::~CSetSpectatorModeMsg() {
  // @@protoc_insertion_point(destructor:CSetSpectatorModeMsg)
  SharedDtor();
}

void CSetSpectatorModeMsg::SharedDtor() {
}

void CSetSpectatorModeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetSpectatorModeMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetSpectatorModeMsg& CSetSpectatorModeMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetSpectatorModeMsg.base);
  return *internal_default_instance();
}


void CSetSpectatorModeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetSpectatorModeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetSpectatorModeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetSpectatorModeMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetSpectatorModeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetSpectatorModeMsg)
  return false;
#undef DO_
}

void CSetSpectatorModeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetSpectatorModeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetSpectatorModeMsg)
}

::google::protobuf::uint8* CSetSpectatorModeMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetSpectatorModeMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetSpectatorModeMsg)
  return target;
}

size_t CSetSpectatorModeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetSpectatorModeMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetSpectatorModeMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetSpectatorModeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetSpectatorModeMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetSpectatorModeMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetSpectatorModeMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetSpectatorModeMsg)
    MergeFrom(*source);
  }
}

void CSetSpectatorModeMsg::MergeFrom(const CSetSpectatorModeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetSpectatorModeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CSetSpectatorModeMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetSpectatorModeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetSpectatorModeMsg::CopyFrom(const CSetSpectatorModeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetSpectatorModeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetSpectatorModeMsg::IsInitialized() const {
  return true;
}

void CSetSpectatorModeMsg::Swap(CSetSpectatorModeMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetSpectatorModeMsg::InternalSwap(CSetSpectatorModeMsg* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetSpectatorModeMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CRemoteHIDMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRemoteHIDMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRemoteHIDMsg::CRemoteHIDMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CRemoteHIDMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CRemoteHIDMsg)
}
CRemoteHIDMsg::CRemoteHIDMsg(const CRemoteHIDMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteHIDMsg)
}

void CRemoteHIDMsg::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CRemoteHIDMsg::~CRemoteHIDMsg() {
  // @@protoc_insertion_point(destructor:CRemoteHIDMsg)
  SharedDtor();
}

void CRemoteHIDMsg::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CRemoteHIDMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CRemoteHIDMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CRemoteHIDMsg& CRemoteHIDMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CRemoteHIDMsg.base);
  return *internal_default_instance();
}


void CRemoteHIDMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteHIDMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CRemoteHIDMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CRemoteHIDMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CRemoteHIDMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CRemoteHIDMsg)
  return false;
#undef DO_
}

void CRemoteHIDMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CRemoteHIDMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CRemoteHIDMsg)
}

::google::protobuf::uint8* CRemoteHIDMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteHIDMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteHIDMsg)
  return target;
}

size_t CRemoteHIDMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteHIDMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteHIDMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteHIDMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteHIDMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CRemoteHIDMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteHIDMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteHIDMsg)
    MergeFrom(*source);
  }
}

void CRemoteHIDMsg::MergeFrom(const CRemoteHIDMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteHIDMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CRemoteHIDMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteHIDMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteHIDMsg::CopyFrom(const CRemoteHIDMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteHIDMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteHIDMsg::IsInitialized() const {
  return true;
}

void CRemoteHIDMsg::Swap(CRemoteHIDMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRemoteHIDMsg::InternalSwap(CRemoteHIDMsg* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CRemoteHIDMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CTouchConfigActiveMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTouchConfigActiveMsg::kAppidFieldNumber;
const int CTouchConfigActiveMsg::kRevisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTouchConfigActiveMsg::CTouchConfigActiveMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CTouchConfigActiveMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTouchConfigActiveMsg)
}
CTouchConfigActiveMsg::CTouchConfigActiveMsg(const CTouchConfigActiveMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
  // @@protoc_insertion_point(copy_constructor:CTouchConfigActiveMsg)
}

void CTouchConfigActiveMsg::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
}

CTouchConfigActiveMsg::~CTouchConfigActiveMsg() {
  // @@protoc_insertion_point(destructor:CTouchConfigActiveMsg)
  SharedDtor();
}

void CTouchConfigActiveMsg::SharedDtor() {
}

void CTouchConfigActiveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CTouchConfigActiveMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTouchConfigActiveMsg& CTouchConfigActiveMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CTouchConfigActiveMsg.base);
  return *internal_default_instance();
}


void CTouchConfigActiveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CTouchConfigActiveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revision_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTouchConfigActiveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CTouchConfigActiveMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_revision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CTouchConfigActiveMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CTouchConfigActiveMsg)
  return false;
#undef DO_
}

void CTouchConfigActiveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CTouchConfigActiveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 revision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->revision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CTouchConfigActiveMsg)
}

::google::protobuf::uint8* CTouchConfigActiveMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CTouchConfigActiveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 revision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->revision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTouchConfigActiveMsg)
  return target;
}

size_t CTouchConfigActiveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTouchConfigActiveMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTouchConfigActiveMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTouchConfigActiveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CTouchConfigActiveMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTouchConfigActiveMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTouchConfigActiveMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTouchConfigActiveMsg)
    MergeFrom(*source);
  }
}

void CTouchConfigActiveMsg::MergeFrom(const CTouchConfigActiveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTouchConfigActiveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      revision_ = from.revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTouchConfigActiveMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTouchConfigActiveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTouchConfigActiveMsg::CopyFrom(const CTouchConfigActiveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTouchConfigActiveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTouchConfigActiveMsg::IsInitialized() const {
  return true;
}

void CTouchConfigActiveMsg::Swap(CTouchConfigActiveMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTouchConfigActiveMsg::InternalSwap(CTouchConfigActiveMsg* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(revision_, other->revision_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CTouchConfigActiveMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGetTouchConfigDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGetTouchConfigDataMsg::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGetTouchConfigDataMsg::CGetTouchConfigDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CGetTouchConfigDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGetTouchConfigDataMsg)
}
CGetTouchConfigDataMsg::CGetTouchConfigDataMsg(const CGetTouchConfigDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGetTouchConfigDataMsg)
}

void CGetTouchConfigDataMsg::SharedCtor() {
  appid_ = 0u;
}

CGetTouchConfigDataMsg::~CGetTouchConfigDataMsg() {
  // @@protoc_insertion_point(destructor:CGetTouchConfigDataMsg)
  SharedDtor();
}

void CGetTouchConfigDataMsg::SharedDtor() {
}

void CGetTouchConfigDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGetTouchConfigDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGetTouchConfigDataMsg& CGetTouchConfigDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CGetTouchConfigDataMsg.base);
  return *internal_default_instance();
}


void CGetTouchConfigDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CGetTouchConfigDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGetTouchConfigDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGetTouchConfigDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGetTouchConfigDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGetTouchConfigDataMsg)
  return false;
#undef DO_
}

void CGetTouchConfigDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGetTouchConfigDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGetTouchConfigDataMsg)
}

::google::protobuf::uint8* CGetTouchConfigDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGetTouchConfigDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGetTouchConfigDataMsg)
  return target;
}

size_t CGetTouchConfigDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGetTouchConfigDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetTouchConfigDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGetTouchConfigDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetTouchConfigDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGetTouchConfigDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGetTouchConfigDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGetTouchConfigDataMsg)
    MergeFrom(*source);
  }
}

void CGetTouchConfigDataMsg::MergeFrom(const CGetTouchConfigDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGetTouchConfigDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CGetTouchConfigDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGetTouchConfigDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetTouchConfigDataMsg::CopyFrom(const CGetTouchConfigDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGetTouchConfigDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetTouchConfigDataMsg::IsInitialized() const {
  return true;
}

void CGetTouchConfigDataMsg::Swap(CGetTouchConfigDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGetTouchConfigDataMsg::InternalSwap(CGetTouchConfigDataMsg* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGetTouchConfigDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetTouchConfigDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetTouchConfigDataMsg::kAppidFieldNumber;
const int CSetTouchConfigDataMsg::kRevisionFieldNumber;
const int CSetTouchConfigDataMsg::kDataFieldNumber;
const int CSetTouchConfigDataMsg::kLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetTouchConfigDataMsg::CSetTouchConfigDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetTouchConfigDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetTouchConfigDataMsg)
}
CSetTouchConfigDataMsg::CSetTouchConfigDataMsg(const CSetTouchConfigDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  layout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layout()) {
    layout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
  // @@protoc_insertion_point(copy_constructor:CSetTouchConfigDataMsg)
}

void CSetTouchConfigDataMsg::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
}

CSetTouchConfigDataMsg::~CSetTouchConfigDataMsg() {
  // @@protoc_insertion_point(destructor:CSetTouchConfigDataMsg)
  SharedDtor();
}

void CSetTouchConfigDataMsg::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSetTouchConfigDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetTouchConfigDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetTouchConfigDataMsg& CSetTouchConfigDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetTouchConfigDataMsg.base);
  return *internal_default_instance();
}


void CSetTouchConfigDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetTouchConfigDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      layout_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revision_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetTouchConfigDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetTouchConfigDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_revision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes layout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetTouchConfigDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetTouchConfigDataMsg)
  return false;
#undef DO_
}

void CSetTouchConfigDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetTouchConfigDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 revision = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->revision(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional bytes layout = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetTouchConfigDataMsg)
}

::google::protobuf::uint8* CSetTouchConfigDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetTouchConfigDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 revision = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->revision(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional bytes layout = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetTouchConfigDataMsg)
  return target;
}

size_t CSetTouchConfigDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetTouchConfigDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes layout = 4;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layout());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetTouchConfigDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetTouchConfigDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetTouchConfigDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetTouchConfigDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetTouchConfigDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetTouchConfigDataMsg)
    MergeFrom(*source);
  }
}

void CSetTouchConfigDataMsg::MergeFrom(const CSetTouchConfigDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetTouchConfigDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_layout();
      layout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      revision_ = from.revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSetTouchConfigDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetTouchConfigDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetTouchConfigDataMsg::CopyFrom(const CSetTouchConfigDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetTouchConfigDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetTouchConfigDataMsg::IsInitialized() const {
  return true;
}

void CSetTouchConfigDataMsg::Swap(CSetTouchConfigDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetTouchConfigDataMsg::InternalSwap(CSetTouchConfigDataMsg* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  layout_.Swap(&other->layout_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(revision_, other->revision_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetTouchConfigDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSaveTouchConfigLayoutMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSaveTouchConfigLayoutMsg::kAppidFieldNumber;
const int CSaveTouchConfigLayoutMsg::kLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSaveTouchConfigLayoutMsg::CSaveTouchConfigLayoutMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSaveTouchConfigLayoutMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSaveTouchConfigLayoutMsg)
}
CSaveTouchConfigLayoutMsg::CSaveTouchConfigLayoutMsg(const CSaveTouchConfigLayoutMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layout()) {
    layout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CSaveTouchConfigLayoutMsg)
}

void CSaveTouchConfigLayoutMsg::SharedCtor() {
  layout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CSaveTouchConfigLayoutMsg::~CSaveTouchConfigLayoutMsg() {
  // @@protoc_insertion_point(destructor:CSaveTouchConfigLayoutMsg)
  SharedDtor();
}

void CSaveTouchConfigLayoutMsg::SharedDtor() {
  layout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSaveTouchConfigLayoutMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSaveTouchConfigLayoutMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSaveTouchConfigLayoutMsg& CSaveTouchConfigLayoutMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSaveTouchConfigLayoutMsg.base);
  return *internal_default_instance();
}


void CSaveTouchConfigLayoutMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSaveTouchConfigLayoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    layout_.ClearNonDefaultToEmptyNoArena();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSaveTouchConfigLayoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSaveTouchConfigLayoutMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes layout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSaveTouchConfigLayoutMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSaveTouchConfigLayoutMsg)
  return false;
#undef DO_
}

void CSaveTouchConfigLayoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSaveTouchConfigLayoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bytes layout = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSaveTouchConfigLayoutMsg)
}

::google::protobuf::uint8* CSaveTouchConfigLayoutMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSaveTouchConfigLayoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bytes layout = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSaveTouchConfigLayoutMsg)
  return target;
}

size_t CSaveTouchConfigLayoutMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSaveTouchConfigLayoutMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes layout = 4;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layout());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSaveTouchConfigLayoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSaveTouchConfigLayoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSaveTouchConfigLayoutMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSaveTouchConfigLayoutMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSaveTouchConfigLayoutMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSaveTouchConfigLayoutMsg)
    MergeFrom(*source);
  }
}

void CSaveTouchConfigLayoutMsg::MergeFrom(const CSaveTouchConfigLayoutMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSaveTouchConfigLayoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_layout();
      layout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSaveTouchConfigLayoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSaveTouchConfigLayoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSaveTouchConfigLayoutMsg::CopyFrom(const CSaveTouchConfigLayoutMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSaveTouchConfigLayoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSaveTouchConfigLayoutMsg::IsInitialized() const {
  return true;
}

void CSaveTouchConfigLayoutMsg::Swap(CSaveTouchConfigLayoutMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSaveTouchConfigLayoutMsg::InternalSwap(CSaveTouchConfigLayoutMsg* other) {
  using std::swap;
  layout_.Swap(&other->layout_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSaveTouchConfigLayoutMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CTouchActionSetActiveMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTouchActionSetActiveMsg::kAppidFieldNumber;
const int CTouchActionSetActiveMsg::kActionsetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTouchActionSetActiveMsg::CTouchActionSetActiveMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CTouchActionSetActiveMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTouchActionSetActiveMsg)
}
CTouchActionSetActiveMsg::CTouchActionSetActiveMsg(const CTouchActionSetActiveMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionset_id_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(actionset_id_));
  // @@protoc_insertion_point(copy_constructor:CTouchActionSetActiveMsg)
}

void CTouchActionSetActiveMsg::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionset_id_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(actionset_id_));
}

CTouchActionSetActiveMsg::~CTouchActionSetActiveMsg() {
  // @@protoc_insertion_point(destructor:CTouchActionSetActiveMsg)
  SharedDtor();
}

void CTouchActionSetActiveMsg::SharedDtor() {
}

void CTouchActionSetActiveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CTouchActionSetActiveMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTouchActionSetActiveMsg& CTouchActionSetActiveMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CTouchActionSetActiveMsg.base);
  return *internal_default_instance();
}


void CTouchActionSetActiveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CTouchActionSetActiveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&actionset_id_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(actionset_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTouchActionSetActiveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CTouchActionSetActiveMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 actionset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_actionset_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CTouchActionSetActiveMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CTouchActionSetActiveMsg)
  return false;
#undef DO_
}

void CTouchActionSetActiveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CTouchActionSetActiveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional int32 actionset_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actionset_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CTouchActionSetActiveMsg)
}

::google::protobuf::uint8* CTouchActionSetActiveMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CTouchActionSetActiveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional int32 actionset_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actionset_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTouchActionSetActiveMsg)
  return target;
}

size_t CTouchActionSetActiveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTouchActionSetActiveMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional int32 actionset_id = 2;
    if (has_actionset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionset_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTouchActionSetActiveMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTouchActionSetActiveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CTouchActionSetActiveMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTouchActionSetActiveMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTouchActionSetActiveMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTouchActionSetActiveMsg)
    MergeFrom(*source);
  }
}

void CTouchActionSetActiveMsg::MergeFrom(const CTouchActionSetActiveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTouchActionSetActiveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      actionset_id_ = from.actionset_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTouchActionSetActiveMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTouchActionSetActiveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTouchActionSetActiveMsg::CopyFrom(const CTouchActionSetActiveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTouchActionSetActiveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTouchActionSetActiveMsg::IsInitialized() const {
  return true;
}

void CTouchActionSetActiveMsg::Swap(CTouchActionSetActiveMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTouchActionSetActiveMsg::InternalSwap(CTouchActionSetActiveMsg* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(actionset_id_, other->actionset_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CTouchActionSetActiveMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGetTouchIconDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGetTouchIconDataMsg::kAppidFieldNumber;
const int CGetTouchIconDataMsg::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGetTouchIconDataMsg::CGetTouchIconDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CGetTouchIconDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGetTouchIconDataMsg)
}
CGetTouchIconDataMsg::CGetTouchIconDataMsg(const CGetTouchIconDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGetTouchIconDataMsg)
}

void CGetTouchIconDataMsg::SharedCtor() {
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CGetTouchIconDataMsg::~CGetTouchIconDataMsg() {
  // @@protoc_insertion_point(destructor:CGetTouchIconDataMsg)
  SharedDtor();
}

void CGetTouchIconDataMsg::SharedDtor() {
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGetTouchIconDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGetTouchIconDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGetTouchIconDataMsg& CGetTouchIconDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CGetTouchIconDataMsg.base);
  return *internal_default_instance();
}


void CGetTouchIconDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CGetTouchIconDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    icon_.ClearNonDefaultToEmptyNoArena();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGetTouchIconDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGetTouchIconDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGetTouchIconDataMsg.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGetTouchIconDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGetTouchIconDataMsg)
  return false;
#undef DO_
}

void CGetTouchIconDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGetTouchIconDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGetTouchIconDataMsg.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGetTouchIconDataMsg)
}

::google::protobuf::uint8* CGetTouchIconDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGetTouchIconDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGetTouchIconDataMsg.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGetTouchIconDataMsg)
  return target;
}

size_t CGetTouchIconDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGetTouchIconDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetTouchIconDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGetTouchIconDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetTouchIconDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGetTouchIconDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGetTouchIconDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGetTouchIconDataMsg)
    MergeFrom(*source);
  }
}

void CGetTouchIconDataMsg::MergeFrom(const CGetTouchIconDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGetTouchIconDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGetTouchIconDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGetTouchIconDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetTouchIconDataMsg::CopyFrom(const CGetTouchIconDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGetTouchIconDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetTouchIconDataMsg::IsInitialized() const {
  return true;
}

void CGetTouchIconDataMsg::Swap(CGetTouchIconDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGetTouchIconDataMsg::InternalSwap(CGetTouchIconDataMsg* other) {
  using std::swap;
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGetTouchIconDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSetTouchIconDataMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSetTouchIconDataMsg::kAppidFieldNumber;
const int CSetTouchIconDataMsg::kIconFieldNumber;
const int CSetTouchIconDataMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSetTouchIconDataMsg::CSetTouchIconDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CSetTouchIconDataMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSetTouchIconDataMsg)
}
CSetTouchIconDataMsg::CSetTouchIconDataMsg(const CSetTouchIconDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CSetTouchIconDataMsg)
}

void CSetTouchIconDataMsg::SharedCtor() {
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CSetTouchIconDataMsg::~CSetTouchIconDataMsg() {
  // @@protoc_insertion_point(destructor:CSetTouchIconDataMsg)
  SharedDtor();
}

void CSetTouchIconDataMsg::SharedDtor() {
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSetTouchIconDataMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSetTouchIconDataMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSetTouchIconDataMsg& CSetTouchIconDataMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CSetTouchIconDataMsg.base);
  return *internal_default_instance();
}


void CSetTouchIconDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSetTouchIconDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSetTouchIconDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSetTouchIconDataMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSetTouchIconDataMsg.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSetTouchIconDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSetTouchIconDataMsg)
  return false;
#undef DO_
}

void CSetTouchIconDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSetTouchIconDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSetTouchIconDataMsg.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSetTouchIconDataMsg)
}

::google::protobuf::uint8* CSetTouchIconDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSetTouchIconDataMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSetTouchIconDataMsg.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSetTouchIconDataMsg)
  return target;
}

size_t CSetTouchIconDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSetTouchIconDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetTouchIconDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSetTouchIconDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetTouchIconDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSetTouchIconDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSetTouchIconDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSetTouchIconDataMsg)
    MergeFrom(*source);
  }
}

void CSetTouchIconDataMsg::MergeFrom(const CSetTouchIconDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSetTouchIconDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSetTouchIconDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSetTouchIconDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetTouchIconDataMsg::CopyFrom(const CSetTouchIconDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSetTouchIconDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetTouchIconDataMsg::IsInitialized() const {
  return true;
}

void CSetTouchIconDataMsg::Swap(CSetTouchIconDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSetTouchIconDataMsg::InternalSwap(CSetTouchIconDataMsg* other) {
  using std::swap;
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSetTouchIconDataMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamDataLostMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamDataLostMsg::kPacketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamDataLostMsg::CStreamDataLostMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamDataLostMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamDataLostMsg)
}
CStreamDataLostMsg::CStreamDataLostMsg(const CStreamDataLostMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      packets_(from.packets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStreamDataLostMsg)
}

void CStreamDataLostMsg::SharedCtor() {
}

CStreamDataLostMsg::~CStreamDataLostMsg() {
  // @@protoc_insertion_point(destructor:CStreamDataLostMsg)
  SharedDtor();
}

void CStreamDataLostMsg::SharedDtor() {
}

void CStreamDataLostMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamDataLostMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamDataLostMsg& CStreamDataLostMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamDataLostMsg.base);
  return *internal_default_instance();
}


void CStreamDataLostMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamDataLostMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamDataLostMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamDataLostMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 packets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_packets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamDataLostMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamDataLostMsg)
  return false;
#undef DO_
}

void CStreamDataLostMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamDataLostMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packets = 1;
  for (int i = 0, n = this->packets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->packets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamDataLostMsg)
}

::google::protobuf::uint8* CStreamDataLostMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamDataLostMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packets = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->packets_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamDataLostMsg)
  return target;
}

size_t CStreamDataLostMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamDataLostMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 packets = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->packets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->packets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamDataLostMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamDataLostMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamDataLostMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamDataLostMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamDataLostMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamDataLostMsg)
    MergeFrom(*source);
  }
}

void CStreamDataLostMsg::MergeFrom(const CStreamDataLostMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamDataLostMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packets_.MergeFrom(from.packets_);
}

void CStreamDataLostMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamDataLostMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamDataLostMsg::CopyFrom(const CStreamDataLostMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamDataLostMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamDataLostMsg::IsInitialized() const {
  return true;
}

void CStreamDataLostMsg::Swap(CStreamDataLostMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamDataLostMsg::InternalSwap(CStreamDataLostMsg* other) {
  using std::swap;
  packets_.InternalSwap(&other->packets_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamDataLostMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAudioFormat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAudioFormat::kFormatFieldNumber;
const int CAudioFormat::kFrequencyFieldNumber;
const int CAudioFormat::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAudioFormat::CAudioFormat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CAudioFormat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAudioFormat)
}
CAudioFormat::CAudioFormat(const CAudioFormat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&format_)) + sizeof(channels_));
  // @@protoc_insertion_point(copy_constructor:CAudioFormat)
}

void CAudioFormat::SharedCtor() {
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channels_) -
      reinterpret_cast<char*>(&format_)) + sizeof(channels_));
}

CAudioFormat::~CAudioFormat() {
  // @@protoc_insertion_point(destructor:CAudioFormat)
  SharedDtor();
}

void CAudioFormat::SharedDtor() {
}

void CAudioFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAudioFormat::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAudioFormat& CAudioFormat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CAudioFormat.base);
  return *internal_default_instance();
}


void CAudioFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:CAudioFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channels_) -
        reinterpret_cast<char*>(&format_)) + sizeof(channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAudioFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAudioFormat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EAudioFormat format = 1 [default = k_EAudioFormatNone];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EAudioFormat_IsValid(value)) {
            set_format(static_cast< ::EAudioFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAudioFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAudioFormat)
  return false;
#undef DO_
}

void CAudioFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAudioFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EAudioFormat format = 1 [default = k_EAudioFormatNone];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // optional uint32 frequency = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  // optional uint32 channels = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channels(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAudioFormat)
}

::google::protobuf::uint8* CAudioFormat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAudioFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EAudioFormat format = 1 [default = k_EAudioFormatNone];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // optional uint32 frequency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  // optional uint32 channels = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channels(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAudioFormat)
  return target;
}

size_t CAudioFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAudioFormat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .EAudioFormat format = 1 [default = k_EAudioFormatNone];
  if (has_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint32 frequency = 2;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

    // optional uint32 channels = 3;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAudioFormat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAudioFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const CAudioFormat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAudioFormat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAudioFormat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAudioFormat)
    MergeFrom(*source);
  }
}

void CAudioFormat::MergeFrom(const CAudioFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAudioFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000002u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000004u) {
      channels_ = from.channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAudioFormat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAudioFormat::CopyFrom(const CAudioFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAudioFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CAudioFormat::Swap(CAudioFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAudioFormat::InternalSwap(CAudioFormat* other) {
  using std::swap;
  swap(format_, other->format_);
  swap(frequency_, other->frequency_);
  swap(channels_, other->channels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAudioFormat::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideoFormat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideoFormat::kFormatFieldNumber;
const int CVideoFormat::kWidthFieldNumber;
const int CVideoFormat::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideoFormat::CVideoFormat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CVideoFormat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideoFormat)
}
CVideoFormat::CVideoFormat(const CVideoFormat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&format_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CVideoFormat)
}

void CVideoFormat::SharedCtor() {
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&format_)) + sizeof(height_));
}

CVideoFormat::~CVideoFormat() {
  // @@protoc_insertion_point(destructor:CVideoFormat)
  SharedDtor();
}

void CVideoFormat::SharedDtor() {
}

void CVideoFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideoFormat::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideoFormat& CVideoFormat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CVideoFormat.base);
  return *internal_default_instance();
}


void CVideoFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideoFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&format_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideoFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideoFormat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EVideoFormat format = 1 [default = k_EVideoFormatNone];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EVideoFormat_IsValid(value)) {
            set_format(static_cast< ::EVideoFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideoFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideoFormat)
  return false;
#undef DO_
}

void CVideoFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideoFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EVideoFormat format = 1 [default = k_EVideoFormatNone];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideoFormat)
}

::google::protobuf::uint8* CVideoFormat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideoFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EVideoFormat format = 1 [default = k_EVideoFormatNone];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideoFormat)
  return target;
}

size_t CVideoFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideoFormat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .EVideoFormat format = 1 [default = k_EVideoFormatNone];
  if (has_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideoFormat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideoFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideoFormat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideoFormat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideoFormat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideoFormat)
    MergeFrom(*source);
  }
}

void CVideoFormat::MergeFrom(const CVideoFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideoFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideoFormat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideoFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideoFormat::CopyFrom(const CVideoFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideoFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideoFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CVideoFormat::Swap(CVideoFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideoFormat::InternalSwap(CVideoFormat* other) {
  using std::swap;
  swap(format_, other->format_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideoFormat::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFrameEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFrameEvent::kEventIdFieldNumber;
const int CFrameEvent::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFrameEvent::CFrameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CFrameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFrameEvent)
}
CFrameEvent::CFrameEvent(const CFrameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CFrameEvent)
}

void CFrameEvent::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(timestamp_));
}

CFrameEvent::~CFrameEvent() {
  // @@protoc_insertion_point(destructor:CFrameEvent)
  SharedDtor();
}

void CFrameEvent::SharedDtor() {
}

void CFrameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFrameEvent::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFrameEvent& CFrameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CFrameEvent.base);
  return *internal_default_instance();
}


void CFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CFrameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFrameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFrameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EStreamFrameEvent event_id = 1 [default = k_EStreamInputEventStart];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamFrameEvent_IsValid(value)) {
            set_event_id(static_cast< ::EStreamFrameEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFrameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFrameEvent)
  return false;
#undef DO_
}

void CFrameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFrameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EStreamFrameEvent event_id = 1 [default = k_EStreamInputEventStart];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // required uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFrameEvent)
}

::google::protobuf::uint8* CFrameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFrameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EStreamFrameEvent event_id = 1 [default = k_EStreamInputEventStart];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // required uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFrameEvent)
  return target;
}

size_t CFrameEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CFrameEvent)
  size_t total_size = 0;

  if (has_event_id()) {
    // required .EStreamFrameEvent event_id = 1 [default = k_EStreamInputEventStart];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
  }

  if (has_timestamp()) {
    // required uint32 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  return total_size;
}
size_t CFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFrameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .EStreamFrameEvent event_id = 1 [default = k_EStreamInputEventStart];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());

    // required uint32 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFrameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFrameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CFrameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFrameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFrameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFrameEvent)
    MergeFrom(*source);
  }
}

void CFrameEvent::MergeFrom(const CFrameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFrameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFrameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFrameEvent::CopyFrom(const CFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFrameEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CFrameEvent::Swap(CFrameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFrameEvent::InternalSwap(CFrameEvent* other) {
  using std::swap;
  swap(event_id_, other->event_id_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFrameEvent::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFrameStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFrameStats::kFrameIdFieldNumber;
const int CFrameStats::kInputMarkFieldNumber;
const int CFrameStats::kEventsFieldNumber;
const int CFrameStats::kResultFieldNumber;
const int CFrameStats::kFrameStartDeltaFieldNumber;
const int CFrameStats::kFrameDisplayDeltaFieldNumber;
const int CFrameStats::kPingTimeFieldNumber;
const int CFrameStats::kServerBitrateFieldNumber;
const int CFrameStats::kClientBitrateFieldNumber;
const int CFrameStats::kLinkBandwidthFieldNumber;
const int CFrameStats::kPacketLossFieldNumber;
const int CFrameStats::kFrameSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFrameStats::CFrameStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CFrameStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFrameStats)
}
CFrameStats::CFrameStats(const CFrameStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_size_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_size_));
  // @@protoc_insertion_point(copy_constructor:CFrameStats)
}

void CFrameStats::SharedCtor() {
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_size_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_size_));
}

CFrameStats::~CFrameStats() {
  // @@protoc_insertion_point(destructor:CFrameStats)
  SharedDtor();
}

void CFrameStats::SharedDtor() {
}

void CFrameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFrameStats::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFrameStats& CFrameStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CFrameStats.base);
  return *internal_default_instance();
}


void CFrameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CFrameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&frame_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_bitrate_) -
        reinterpret_cast<char*>(&frame_id_)) + sizeof(client_bitrate_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&link_bandwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_size_) -
        reinterpret_cast<char*>(&link_bandwidth_)) + sizeof(frame_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFrameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFrameStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_mark = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_input_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CFrameEvent events = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .EStreamFrameResult result = 4 [default = k_EStreamFrameResultPending];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamFrameResult_IsValid(value)) {
            set_result(static_cast< ::EStreamFrameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frame_start_delta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_frame_start_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frame_start_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frame_display_delta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_frame_display_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frame_display_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ping_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_ping_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ping_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_bitrate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_server_bitrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float client_bitrate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_client_bitrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &client_bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float link_bandwidth = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_link_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float packet_loss = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_packet_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 frame_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_frame_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFrameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFrameStats)
  return false;
#undef DO_
}

void CFrameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFrameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_id(), output);
  }

  // optional uint32 input_mark = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_mark(), output);
  }

  // repeated .CFrameEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->events(static_cast<int>(i)),
      output);
  }

  // required .EStreamFrameResult result = 4 [default = k_EStreamFrameResultPending];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional float frame_start_delta = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->frame_start_delta(), output);
  }

  // optional float frame_display_delta = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->frame_display_delta(), output);
  }

  // optional float ping_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ping_time(), output);
  }

  // optional float server_bitrate = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->server_bitrate(), output);
  }

  // optional float client_bitrate = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->client_bitrate(), output);
  }

  // optional float link_bandwidth = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->link_bandwidth(), output);
  }

  // optional float packet_loss = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->packet_loss(), output);
  }

  // optional uint32 frame_size = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->frame_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFrameStats)
}

::google::protobuf::uint8* CFrameStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFrameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_id(), target);
  }

  // optional uint32 input_mark = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_mark(), target);
  }

  // repeated .CFrameEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->events(static_cast<int>(i)), deterministic, target);
  }

  // required .EStreamFrameResult result = 4 [default = k_EStreamFrameResultPending];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional float frame_start_delta = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->frame_start_delta(), target);
  }

  // optional float frame_display_delta = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->frame_display_delta(), target);
  }

  // optional float ping_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ping_time(), target);
  }

  // optional float server_bitrate = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->server_bitrate(), target);
  }

  // optional float client_bitrate = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->client_bitrate(), target);
  }

  // optional float link_bandwidth = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->link_bandwidth(), target);
  }

  // optional float packet_loss = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->packet_loss(), target);
  }

  // optional uint32 frame_size = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->frame_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFrameStats)
  return target;
}

size_t CFrameStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CFrameStats)
  size_t total_size = 0;

  if (has_frame_id()) {
    // required uint32 frame_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_id());
  }

  if (has_result()) {
    // required .EStreamFrameResult result = 4 [default = k_EStreamFrameResultPending];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t CFrameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFrameStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint32 frame_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_id());

    // required .EStreamFrameResult result = 4 [default = k_EStreamFrameResultPending];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .CFrameEvent events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // optional uint32 input_mark = 2;
  if (has_input_mark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_mark());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional float frame_start_delta = 5;
    if (has_frame_start_delta()) {
      total_size += 1 + 4;
    }

    // optional float frame_display_delta = 6;
    if (has_frame_display_delta()) {
      total_size += 1 + 4;
    }

    // optional float ping_time = 7;
    if (has_ping_time()) {
      total_size += 1 + 4;
    }

    // optional float server_bitrate = 8;
    if (has_server_bitrate()) {
      total_size += 1 + 4;
    }

    // optional float client_bitrate = 9;
    if (has_client_bitrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float link_bandwidth = 10;
    if (has_link_bandwidth()) {
      total_size += 1 + 4;
    }

    // optional float packet_loss = 11;
    if (has_packet_loss()) {
      total_size += 1 + 4;
    }

    // optional uint32 frame_size = 12;
    if (has_frame_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFrameStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFrameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CFrameStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFrameStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFrameStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFrameStats)
    MergeFrom(*source);
  }
}

void CFrameStats::MergeFrom(const CFrameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFrameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      frame_id_ = from.frame_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      input_mark_ = from.input_mark_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_start_delta_ = from.frame_start_delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_display_delta_ = from.frame_display_delta_;
    }
    if (cached_has_bits & 0x00000020u) {
      ping_time_ = from.ping_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_bitrate_ = from.server_bitrate_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_bitrate_ = from.client_bitrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      link_bandwidth_ = from.link_bandwidth_;
    }
    if (cached_has_bits & 0x00000200u) {
      packet_loss_ = from.packet_loss_;
    }
    if (cached_has_bits & 0x00000400u) {
      frame_size_ = from.frame_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFrameStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFrameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFrameStats::CopyFrom(const CFrameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFrameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFrameStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void CFrameStats::Swap(CFrameStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFrameStats::InternalSwap(CFrameStats* other) {
  using std::swap;
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  swap(frame_id_, other->frame_id_);
  swap(input_mark_, other->input_mark_);
  swap(result_, other->result_);
  swap(frame_start_delta_, other->frame_start_delta_);
  swap(frame_display_delta_, other->frame_display_delta_);
  swap(ping_time_, other->ping_time_);
  swap(server_bitrate_, other->server_bitrate_);
  swap(client_bitrate_, other->client_bitrate_);
  swap(link_bandwidth_, other->link_bandwidth_);
  swap(packet_loss_, other->packet_loss_);
  swap(frame_size_, other->frame_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFrameStats::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFrameStatAccumulatedValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFrameStatAccumulatedValue::kStatTypeFieldNumber;
const int CFrameStatAccumulatedValue::kCountFieldNumber;
const int CFrameStatAccumulatedValue::kAverageFieldNumber;
const int CFrameStatAccumulatedValue::kStddevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFrameStatAccumulatedValue::CFrameStatAccumulatedValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CFrameStatAccumulatedValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFrameStatAccumulatedValue)
}
CFrameStatAccumulatedValue::CFrameStatAccumulatedValue(const CFrameStatAccumulatedValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_type_, &from.stat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&stat_type_)) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:CFrameStatAccumulatedValue)
}

void CFrameStatAccumulatedValue::SharedCtor() {
  ::memset(&stat_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stddev_) -
      reinterpret_cast<char*>(&stat_type_)) + sizeof(stddev_));
}

CFrameStatAccumulatedValue::~CFrameStatAccumulatedValue() {
  // @@protoc_insertion_point(destructor:CFrameStatAccumulatedValue)
  SharedDtor();
}

void CFrameStatAccumulatedValue::SharedDtor() {
}

void CFrameStatAccumulatedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFrameStatAccumulatedValue::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFrameStatAccumulatedValue& CFrameStatAccumulatedValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CFrameStatAccumulatedValue.base);
  return *internal_default_instance();
}


void CFrameStatAccumulatedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CFrameStatAccumulatedValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&stat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stddev_) -
        reinterpret_cast<char*>(&stat_type_)) + sizeof(stddev_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFrameStatAccumulatedValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFrameStatAccumulatedValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EFrameAccumulatedStat stat_type = 1 [default = k_EFrameStatFPS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EFrameAccumulatedStat_IsValid(value)) {
            set_stat_type(static_cast< ::EFrameAccumulatedStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float average = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_average();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stddev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFrameStatAccumulatedValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFrameStatAccumulatedValue)
  return false;
#undef DO_
}

void CFrameStatAccumulatedValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFrameStatAccumulatedValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EFrameAccumulatedStat stat_type = 1 [default = k_EFrameStatFPS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_type(), output);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required float average = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->average(), output);
  }

  // optional float stddev = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFrameStatAccumulatedValue)
}

::google::protobuf::uint8* CFrameStatAccumulatedValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFrameStatAccumulatedValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EFrameAccumulatedStat stat_type = 1 [default = k_EFrameStatFPS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_type(), target);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required float average = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->average(), target);
  }

  // optional float stddev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFrameStatAccumulatedValue)
  return target;
}

size_t CFrameStatAccumulatedValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CFrameStatAccumulatedValue)
  size_t total_size = 0;

  if (has_stat_type()) {
    // required .EFrameAccumulatedStat stat_type = 1 [default = k_EFrameStatFPS];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_type());
  }

  if (has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_average()) {
    // required float average = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CFrameStatAccumulatedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFrameStatAccumulatedValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .EFrameAccumulatedStat stat_type = 1 [default = k_EFrameStatFPS];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_type());

    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required float average = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float stddev = 4;
  if (has_stddev()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFrameStatAccumulatedValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFrameStatAccumulatedValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CFrameStatAccumulatedValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFrameStatAccumulatedValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFrameStatAccumulatedValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFrameStatAccumulatedValue)
    MergeFrom(*source);
  }
}

void CFrameStatAccumulatedValue::MergeFrom(const CFrameStatAccumulatedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFrameStatAccumulatedValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      stat_type_ = from.stat_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      average_ = from.average_;
    }
    if (cached_has_bits & 0x00000008u) {
      stddev_ = from.stddev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFrameStatAccumulatedValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFrameStatAccumulatedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFrameStatAccumulatedValue::CopyFrom(const CFrameStatAccumulatedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFrameStatAccumulatedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFrameStatAccumulatedValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CFrameStatAccumulatedValue::Swap(CFrameStatAccumulatedValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFrameStatAccumulatedValue::InternalSwap(CFrameStatAccumulatedValue* other) {
  using std::swap;
  swap(stat_type_, other->stat_type_);
  swap(count_, other->count_);
  swap(average_, other->average_);
  swap(stddev_, other->stddev_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFrameStatAccumulatedValue::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFrameStatsListMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFrameStatsListMsg::kDataTypeFieldNumber;
const int CFrameStatsListMsg::kStatsFieldNumber;
const int CFrameStatsListMsg::kAccumulatedStatsFieldNumber;
const int CFrameStatsListMsg::kLatestFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFrameStatsListMsg::CFrameStatsListMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CFrameStatsListMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFrameStatsListMsg)
}
CFrameStatsListMsg::CFrameStatsListMsg(const CFrameStatsListMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      accumulated_stats_(from.accumulated_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_frame_id_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(latest_frame_id_));
  // @@protoc_insertion_point(copy_constructor:CFrameStatsListMsg)
}

void CFrameStatsListMsg::SharedCtor() {
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_frame_id_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(latest_frame_id_));
}

CFrameStatsListMsg::~CFrameStatsListMsg() {
  // @@protoc_insertion_point(destructor:CFrameStatsListMsg)
  SharedDtor();
}

void CFrameStatsListMsg::SharedDtor() {
}

void CFrameStatsListMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFrameStatsListMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFrameStatsListMsg& CFrameStatsListMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CFrameStatsListMsg.base);
  return *internal_default_instance();
}


void CFrameStatsListMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CFrameStatsListMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  accumulated_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&data_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latest_frame_id_) -
        reinterpret_cast<char*>(&data_type_)) + sizeof(latest_frame_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFrameStatsListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFrameStatsListMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EStreamingDataType data_type = 1 [default = k_EStreamingAudioData];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStreamingDataType_IsValid(value)) {
            set_data_type(static_cast< ::EStreamingDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CFrameStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CFrameStatAccumulatedValue accumulated_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accumulated_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 latest_frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_latest_frame_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latest_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFrameStatsListMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFrameStatsListMsg)
  return false;
#undef DO_
}

void CFrameStatsListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFrameStatsListMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EStreamingDataType data_type = 1 [default = k_EStreamingAudioData];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // repeated .CFrameStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stats(static_cast<int>(i)),
      output);
  }

  // repeated .CFrameStatAccumulatedValue accumulated_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accumulated_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->accumulated_stats(static_cast<int>(i)),
      output);
  }

  // required int32 latest_frame_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->latest_frame_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFrameStatsListMsg)
}

::google::protobuf::uint8* CFrameStatsListMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFrameStatsListMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EStreamingDataType data_type = 1 [default = k_EStreamingAudioData];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // repeated .CFrameStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stats(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CFrameStatAccumulatedValue accumulated_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accumulated_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->accumulated_stats(static_cast<int>(i)), deterministic, target);
  }

  // required int32 latest_frame_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->latest_frame_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFrameStatsListMsg)
  return target;
}

size_t CFrameStatsListMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CFrameStatsListMsg)
  size_t total_size = 0;

  if (has_data_type()) {
    // required .EStreamingDataType data_type = 1 [default = k_EStreamingAudioData];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  if (has_latest_frame_id()) {
    // required int32 latest_frame_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latest_frame_id());
  }

  return total_size;
}
size_t CFrameStatsListMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFrameStatsListMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .EStreamingDataType data_type = 1 [default = k_EStreamingAudioData];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());

    // required int32 latest_frame_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latest_frame_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .CFrameStats stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // repeated .CFrameStatAccumulatedValue accumulated_stats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->accumulated_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accumulated_stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFrameStatsListMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFrameStatsListMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CFrameStatsListMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFrameStatsListMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFrameStatsListMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFrameStatsListMsg)
    MergeFrom(*source);
  }
}

void CFrameStatsListMsg::MergeFrom(const CFrameStatsListMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFrameStatsListMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  accumulated_stats_.MergeFrom(from.accumulated_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      latest_frame_id_ = from.latest_frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFrameStatsListMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFrameStatsListMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFrameStatsListMsg::CopyFrom(const CFrameStatsListMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFrameStatsListMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFrameStatsListMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stats())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->accumulated_stats())) return false;
  return true;
}

void CFrameStatsListMsg::Swap(CFrameStatsListMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFrameStatsListMsg::InternalSwap(CFrameStatsListMsg* other) {
  using std::swap;
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  CastToBase(&accumulated_stats_)->InternalSwap(CastToBase(&other->accumulated_stats_));
  swap(data_type_, other->data_type_);
  swap(latest_frame_id_, other->latest_frame_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFrameStatsListMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStreamingSessionStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStreamingSessionStats::kFrameLossPercentageFieldNumber;
const int CStreamingSessionStats::kAverageNetworkTimeMsFieldNumber;
const int CStreamingSessionStats::kStddevNetworkTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStreamingSessionStats::CStreamingSessionStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CStreamingSessionStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CStreamingSessionStats)
}
CStreamingSessionStats::CStreamingSessionStats(const CStreamingSessionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_loss_percentage_, &from.frame_loss_percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&stddev_network_time_ms_) -
    reinterpret_cast<char*>(&frame_loss_percentage_)) + sizeof(stddev_network_time_ms_));
  // @@protoc_insertion_point(copy_constructor:CStreamingSessionStats)
}

void CStreamingSessionStats::SharedCtor() {
  ::memset(&frame_loss_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stddev_network_time_ms_) -
      reinterpret_cast<char*>(&frame_loss_percentage_)) + sizeof(stddev_network_time_ms_));
}

CStreamingSessionStats::~CStreamingSessionStats() {
  // @@protoc_insertion_point(destructor:CStreamingSessionStats)
  SharedDtor();
}

void CStreamingSessionStats::SharedDtor() {
}

void CStreamingSessionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStreamingSessionStats::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStreamingSessionStats& CStreamingSessionStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CStreamingSessionStats.base);
  return *internal_default_instance();
}


void CStreamingSessionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CStreamingSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&frame_loss_percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stddev_network_time_ms_) -
        reinterpret_cast<char*>(&frame_loss_percentage_)) + sizeof(stddev_network_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStreamingSessionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CStreamingSessionStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float frame_loss_percentage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_frame_loss_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frame_loss_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float average_network_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_average_network_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_network_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stddev_network_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_stddev_network_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_network_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CStreamingSessionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CStreamingSessionStats)
  return false;
#undef DO_
}

void CStreamingSessionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CStreamingSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float frame_loss_percentage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frame_loss_percentage(), output);
  }

  // optional float average_network_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->average_network_time_ms(), output);
  }

  // optional float stddev_network_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev_network_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CStreamingSessionStats)
}

::google::protobuf::uint8* CStreamingSessionStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CStreamingSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float frame_loss_percentage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frame_loss_percentage(), target);
  }

  // optional float average_network_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->average_network_time_ms(), target);
  }

  // optional float stddev_network_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev_network_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStreamingSessionStats)
  return target;
}

size_t CStreamingSessionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStreamingSessionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float frame_loss_percentage = 1;
    if (has_frame_loss_percentage()) {
      total_size += 1 + 4;
    }

    // optional float average_network_time_ms = 2;
    if (has_average_network_time_ms()) {
      total_size += 1 + 4;
    }

    // optional float stddev_network_time_ms = 3;
    if (has_stddev_network_time_ms()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStreamingSessionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStreamingSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CStreamingSessionStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStreamingSessionStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStreamingSessionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStreamingSessionStats)
    MergeFrom(*source);
  }
}

void CStreamingSessionStats::MergeFrom(const CStreamingSessionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStreamingSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      frame_loss_percentage_ = from.frame_loss_percentage_;
    }
    if (cached_has_bits & 0x00000002u) {
      average_network_time_ms_ = from.average_network_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      stddev_network_time_ms_ = from.stddev_network_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStreamingSessionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStreamingSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStreamingSessionStats::CopyFrom(const CStreamingSessionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStreamingSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStreamingSessionStats::IsInitialized() const {
  return true;
}

void CStreamingSessionStats::Swap(CStreamingSessionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStreamingSessionStats::InternalSwap(CStreamingSessionStats* other) {
  using std::swap;
  swap(frame_loss_percentage_, other->frame_loss_percentage_);
  swap(average_network_time_ms_, other->average_network_time_ms_);
  swap(stddev_network_time_ms_, other->stddev_network_time_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStreamingSessionStats::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDebugDumpMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDebugDumpMsg::kScreenshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDebugDumpMsg::CDebugDumpMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CDebugDumpMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDebugDumpMsg)
}
CDebugDumpMsg::CDebugDumpMsg(const CDebugDumpMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  screenshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_screenshot()) {
    screenshot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.screenshot_);
  }
  // @@protoc_insertion_point(copy_constructor:CDebugDumpMsg)
}

void CDebugDumpMsg::SharedCtor() {
  screenshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDebugDumpMsg::~CDebugDumpMsg() {
  // @@protoc_insertion_point(destructor:CDebugDumpMsg)
  SharedDtor();
}

void CDebugDumpMsg::SharedDtor() {
  screenshot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDebugDumpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDebugDumpMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDebugDumpMsg& CDebugDumpMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CDebugDumpMsg.base);
  return *internal_default_instance();
}


void CDebugDumpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CDebugDumpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    screenshot_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDebugDumpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDebugDumpMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes screenshot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_screenshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDebugDumpMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDebugDumpMsg)
  return false;
#undef DO_
}

void CDebugDumpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDebugDumpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes screenshot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->screenshot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDebugDumpMsg)
}

::google::protobuf::uint8* CDebugDumpMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDebugDumpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes screenshot = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->screenshot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDebugDumpMsg)
  return target;
}

size_t CDebugDumpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDebugDumpMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes screenshot = 1;
  if (has_screenshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->screenshot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDebugDumpMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDebugDumpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDebugDumpMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDebugDumpMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDebugDumpMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDebugDumpMsg)
    MergeFrom(*source);
  }
}

void CDebugDumpMsg::MergeFrom(const CDebugDumpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDebugDumpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_screenshot()) {
    set_has_screenshot();
    screenshot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.screenshot_);
  }
}

void CDebugDumpMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDebugDumpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDebugDumpMsg::CopyFrom(const CDebugDumpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDebugDumpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDebugDumpMsg::IsInitialized() const {
  return true;
}

void CDebugDumpMsg::Swap(CDebugDumpMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDebugDumpMsg::InternalSwap(CDebugDumpMsg* other) {
  using std::swap;
  screenshot_.Swap(&other->screenshot_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDebugDumpMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CLogMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLogMsg::kTypeFieldNumber;
const int CLogMsg::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLogMsg::CLogMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CLogMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLogMsg)
}
CLogMsg::CLogMsg(const CLogMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CLogMsg)
}

void CLogMsg::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CLogMsg::~CLogMsg() {
  // @@protoc_insertion_point(destructor:CLogMsg)
  SharedDtor();
}

void CLogMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLogMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CLogMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLogMsg& CLogMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CLogMsg.base);
  return *internal_default_instance();
}


void CLogMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLogMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLogMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLogMsg.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLogMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLogMsg)
  return false;
#undef DO_
}

void CLogMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLogMsg.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLogMsg)
}

::google::protobuf::uint8* CLogMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLogMsg.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLogMsg)
  return target;
}

size_t CLogMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLogMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLogMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CLogMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLogMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLogMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLogMsg)
    MergeFrom(*source);
  }
}

void CLogMsg::MergeFrom(const CLogMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLogMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLogMsg::CopyFrom(const CLogMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLogMsg::IsInitialized() const {
  return true;
}

void CLogMsg::Swap(CLogMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLogMsg::InternalSwap(CLogMsg* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CLogMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CLogUploadMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLogUploadMsg::kTypeFieldNumber;
const int CLogUploadMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLogUploadMsg::CLogUploadMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_2eproto::scc_info_CLogUploadMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLogUploadMsg)
}
CLogUploadMsg::CLogUploadMsg(const CLogUploadMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CLogUploadMsg)
}

void CLogUploadMsg::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CLogUploadMsg::~CLogUploadMsg() {
  // @@protoc_insertion_point(destructor:CLogUploadMsg)
  SharedDtor();
}

void CLogUploadMsg::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLogUploadMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CLogUploadMsg::descriptor() {
  ::protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLogUploadMsg& CLogUploadMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_2eproto::scc_info_CLogUploadMsg.base);
  return *internal_default_instance();
}


void CLogUploadMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CLogUploadMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLogUploadMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLogUploadMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ELogFileType type = 1 [default = k_ELogFileSystemBoot];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ELogFileType_IsValid(value)) {
            set_type(static_cast< ::ELogFileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLogUploadMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLogUploadMsg)
  return false;
#undef DO_
}

void CLogUploadMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLogUploadMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ELogFileType type = 1 [default = k_ELogFileSystemBoot];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLogUploadMsg)
}

::google::protobuf::uint8* CLogUploadMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CLogUploadMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ELogFileType type = 1 [default = k_ELogFileSystemBoot];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLogUploadMsg)
  return target;
}

size_t CLogUploadMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLogUploadMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .ELogFileType type = 1 [default = k_ELogFileSystemBoot];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLogUploadMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLogUploadMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CLogUploadMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLogUploadMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLogUploadMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLogUploadMsg)
    MergeFrom(*source);
  }
}

void CLogUploadMsg::MergeFrom(const CLogUploadMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLogUploadMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLogUploadMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLogUploadMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLogUploadMsg::CopyFrom(const CLogUploadMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLogUploadMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLogUploadMsg::IsInitialized() const {
  return true;
}

void CLogUploadMsg::Swap(CLogUploadMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLogUploadMsg::InternalSwap(CLogUploadMsg* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CLogUploadMsg::GetMetadata() const {
  protobuf_stream_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stream_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDiscoveryPingRequest* Arena::CreateMaybeMessage< ::CDiscoveryPingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CDiscoveryPingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDiscoveryPingResponse* Arena::CreateMaybeMessage< ::CDiscoveryPingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CDiscoveryPingResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamingClientHandshakeInfo* Arena::CreateMaybeMessage< ::CStreamingClientHandshakeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamingClientHandshakeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CClientHandshakeMsg* Arena::CreateMaybeMessage< ::CClientHandshakeMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CClientHandshakeMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamingServerHandshakeInfo* Arena::CreateMaybeMessage< ::CStreamingServerHandshakeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamingServerHandshakeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CServerHandshakeMsg* Arena::CreateMaybeMessage< ::CServerHandshakeMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CServerHandshakeMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAuthenticationRequestMsg* Arena::CreateMaybeMessage< ::CAuthenticationRequestMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CAuthenticationRequestMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAuthenticationResponseMsg* Arena::CreateMaybeMessage< ::CAuthenticationResponseMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CAuthenticationResponseMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CKeepAliveMsg* Arena::CreateMaybeMessage< ::CKeepAliveMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CKeepAliveMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStartNetworkTestMsg* Arena::CreateMaybeMessage< ::CStartNetworkTestMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CStartNetworkTestMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamVideoMode* Arena::CreateMaybeMessage< ::CStreamVideoMode >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamVideoMode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamingClientCaps* Arena::CreateMaybeMessage< ::CStreamingClientCaps >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamingClientCaps >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamingClientConfig* Arena::CreateMaybeMessage< ::CStreamingClientConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamingClientConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamingServerConfig* Arena::CreateMaybeMessage< ::CStreamingServerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamingServerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CNegotiatedConfig* Arena::CreateMaybeMessage< ::CNegotiatedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CNegotiatedConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CNegotiationInitMsg* Arena::CreateMaybeMessage< ::CNegotiationInitMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CNegotiationInitMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CNegotiationSetConfigMsg* Arena::CreateMaybeMessage< ::CNegotiationSetConfigMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CNegotiationSetConfigMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CNegotiationCompleteMsg* Arena::CreateMaybeMessage< ::CNegotiationCompleteMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CNegotiationCompleteMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStartAudioDataMsg* Arena::CreateMaybeMessage< ::CStartAudioDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CStartAudioDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStopAudioDataMsg* Arena::CreateMaybeMessage< ::CStopAudioDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CStopAudioDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStartVideoDataMsg* Arena::CreateMaybeMessage< ::CStartVideoDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CStartVideoDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStopVideoDataMsg* Arena::CreateMaybeMessage< ::CStopVideoDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CStopVideoDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputLatencyTestMsg* Arena::CreateMaybeMessage< ::CInputLatencyTestMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputLatencyTestMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputMouseMotionMsg* Arena::CreateMaybeMessage< ::CInputMouseMotionMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputMouseMotionMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputMouseWheelMsg* Arena::CreateMaybeMessage< ::CInputMouseWheelMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputMouseWheelMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputMouseDownMsg* Arena::CreateMaybeMessage< ::CInputMouseDownMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputMouseDownMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputMouseUpMsg* Arena::CreateMaybeMessage< ::CInputMouseUpMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputMouseUpMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputKeyDownMsg* Arena::CreateMaybeMessage< ::CInputKeyDownMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputKeyDownMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputKeyUpMsg* Arena::CreateMaybeMessage< ::CInputKeyUpMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputKeyUpMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CInputTextMsg* Arena::CreateMaybeMessage< ::CInputTextMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CInputTextMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetTitleMsg* Arena::CreateMaybeMessage< ::CSetTitleMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetTitleMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetIconMsg* Arena::CreateMaybeMessage< ::CSetIconMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetIconMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CShowCursorMsg* Arena::CreateMaybeMessage< ::CShowCursorMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CShowCursorMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHideCursorMsg* Arena::CreateMaybeMessage< ::CHideCursorMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CHideCursorMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetCursorMsg* Arena::CreateMaybeMessage< ::CSetCursorMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetCursorMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGetCursorImageMsg* Arena::CreateMaybeMessage< ::CGetCursorImageMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CGetCursorImageMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetCursorImageMsg* Arena::CreateMaybeMessage< ::CSetCursorImageMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetCursorImageMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideoDecoderInfoMsg* Arena::CreateMaybeMessage< ::CVideoDecoderInfoMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CVideoDecoderInfoMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideoEncoderInfoMsg* Arena::CreateMaybeMessage< ::CVideoEncoderInfoMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CVideoEncoderInfoMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CQuitRequest* Arena::CreateMaybeMessage< ::CQuitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CQuitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDeleteCursorMsg* Arena::CreateMaybeMessage< ::CDeleteCursorMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CDeleteCursorMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetStreamingClientConfig* Arena::CreateMaybeMessage< ::CSetStreamingClientConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CSetStreamingClientConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetQoSMsg* Arena::CreateMaybeMessage< ::CSetQoSMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetQoSMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetTargetFramerateMsg* Arena::CreateMaybeMessage< ::CSetTargetFramerateMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetTargetFramerateMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetTargetBitrateMsg* Arena::CreateMaybeMessage< ::CSetTargetBitrateMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetTargetBitrateMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::COverlayEnabledMsg* Arena::CreateMaybeMessage< ::COverlayEnabledMsg >(Arena* arena) {
  return Arena::CreateInternal< ::COverlayEnabledMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetGammaRampMsg* Arena::CreateMaybeMessage< ::CSetGammaRampMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetGammaRampMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetActivityMsg* Arena::CreateMaybeMessage< ::CSetActivityMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetActivityMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSystemSuspendMsg* Arena::CreateMaybeMessage< ::CSystemSuspendMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSystemSuspendMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVirtualHereRequestMsg* Arena::CreateMaybeMessage< ::CVirtualHereRequestMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CVirtualHereRequestMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVirtualHereReadyMsg* Arena::CreateMaybeMessage< ::CVirtualHereReadyMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CVirtualHereReadyMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVirtualHereShareDeviceMsg* Arena::CreateMaybeMessage< ::CVirtualHereShareDeviceMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CVirtualHereShareDeviceMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetSpectatorModeMsg* Arena::CreateMaybeMessage< ::CSetSpectatorModeMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetSpectatorModeMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CRemoteHIDMsg* Arena::CreateMaybeMessage< ::CRemoteHIDMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CRemoteHIDMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CTouchConfigActiveMsg* Arena::CreateMaybeMessage< ::CTouchConfigActiveMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CTouchConfigActiveMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGetTouchConfigDataMsg* Arena::CreateMaybeMessage< ::CGetTouchConfigDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CGetTouchConfigDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetTouchConfigDataMsg* Arena::CreateMaybeMessage< ::CSetTouchConfigDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetTouchConfigDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSaveTouchConfigLayoutMsg* Arena::CreateMaybeMessage< ::CSaveTouchConfigLayoutMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSaveTouchConfigLayoutMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CTouchActionSetActiveMsg* Arena::CreateMaybeMessage< ::CTouchActionSetActiveMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CTouchActionSetActiveMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGetTouchIconDataMsg* Arena::CreateMaybeMessage< ::CGetTouchIconDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CGetTouchIconDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSetTouchIconDataMsg* Arena::CreateMaybeMessage< ::CSetTouchIconDataMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CSetTouchIconDataMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamDataLostMsg* Arena::CreateMaybeMessage< ::CStreamDataLostMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamDataLostMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAudioFormat* Arena::CreateMaybeMessage< ::CAudioFormat >(Arena* arena) {
  return Arena::CreateInternal< ::CAudioFormat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideoFormat* Arena::CreateMaybeMessage< ::CVideoFormat >(Arena* arena) {
  return Arena::CreateInternal< ::CVideoFormat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFrameEvent* Arena::CreateMaybeMessage< ::CFrameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::CFrameEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFrameStats* Arena::CreateMaybeMessage< ::CFrameStats >(Arena* arena) {
  return Arena::CreateInternal< ::CFrameStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFrameStatAccumulatedValue* Arena::CreateMaybeMessage< ::CFrameStatAccumulatedValue >(Arena* arena) {
  return Arena::CreateInternal< ::CFrameStatAccumulatedValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFrameStatsListMsg* Arena::CreateMaybeMessage< ::CFrameStatsListMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CFrameStatsListMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CStreamingSessionStats* Arena::CreateMaybeMessage< ::CStreamingSessionStats >(Arena* arena) {
  return Arena::CreateInternal< ::CStreamingSessionStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDebugDumpMsg* Arena::CreateMaybeMessage< ::CDebugDumpMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CDebugDumpMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CLogMsg* Arena::CreateMaybeMessage< ::CLogMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CLogMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CLogUploadMsg* Arena::CreateMaybeMessage< ::CLogUploadMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CLogUploadMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
