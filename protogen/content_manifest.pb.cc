// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#include "content_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_content_5fmanifest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_content_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContentDeltaChunks_DeltaChunk;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_content_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContentManifestPayload_FileMapping_ChunkData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_content_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ContentManifestPayload_FileMapping;
}  // namespace protobuf_content_5fmanifest_2eproto
class ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestPayload_FileMapping_ChunkData>
      _instance;
} _ContentManifestPayload_FileMapping_ChunkData_default_instance_;
class ContentManifestPayload_FileMappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestPayload_FileMapping>
      _instance;
} _ContentManifestPayload_FileMapping_default_instance_;
class ContentManifestPayloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestPayload>
      _instance;
} _ContentManifestPayload_default_instance_;
class ContentManifestMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestMetadata>
      _instance;
} _ContentManifestMetadata_default_instance_;
class ContentManifestSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestSignature>
      _instance;
} _ContentManifestSignature_default_instance_;
class ContentDeltaChunks_DeltaChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentDeltaChunks_DeltaChunk>
      _instance;
} _ContentDeltaChunks_DeltaChunk_default_instance_;
class ContentDeltaChunksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentDeltaChunks>
      _instance;
} _ContentDeltaChunks_default_instance_;
namespace protobuf_content_5fmanifest_2eproto {
static void InitDefaultsContentManifestPayload_FileMapping_ChunkData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentManifestPayload_FileMapping_ChunkData_default_instance_;
    new (ptr) ::ContentManifestPayload_FileMapping_ChunkData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentManifestPayload_FileMapping_ChunkData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContentManifestPayload_FileMapping_ChunkData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContentManifestPayload_FileMapping_ChunkData}, {}};

static void InitDefaultsContentManifestPayload_FileMapping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentManifestPayload_FileMapping_default_instance_;
    new (ptr) ::ContentManifestPayload_FileMapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentManifestPayload_FileMapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ContentManifestPayload_FileMapping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContentManifestPayload_FileMapping}, {
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload_FileMapping_ChunkData.base,}};

static void InitDefaultsContentManifestPayload() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentManifestPayload_default_instance_;
    new (ptr) ::ContentManifestPayload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentManifestPayload::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ContentManifestPayload =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContentManifestPayload}, {
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload_FileMapping.base,}};

static void InitDefaultsContentManifestMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentManifestMetadata_default_instance_;
    new (ptr) ::ContentManifestMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentManifestMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContentManifestMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContentManifestMetadata}, {}};

static void InitDefaultsContentManifestSignature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentManifestSignature_default_instance_;
    new (ptr) ::ContentManifestSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentManifestSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContentManifestSignature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContentManifestSignature}, {}};

static void InitDefaultsContentDeltaChunks_DeltaChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentDeltaChunks_DeltaChunk_default_instance_;
    new (ptr) ::ContentDeltaChunks_DeltaChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentDeltaChunks_DeltaChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContentDeltaChunks_DeltaChunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContentDeltaChunks_DeltaChunk}, {}};

static void InitDefaultsContentDeltaChunks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContentDeltaChunks_default_instance_;
    new (ptr) ::ContentDeltaChunks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContentDeltaChunks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ContentDeltaChunks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContentDeltaChunks}, {
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentDeltaChunks_DeltaChunk.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ContentManifestPayload_FileMapping_ChunkData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentManifestPayload_FileMapping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentManifestPayload.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentManifestMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentManifestSignature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentDeltaChunks_DeltaChunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentDeltaChunks.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, cb_original_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, cb_compressed_),
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, sha_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, sha_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, chunks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload_FileMapping, linktarget_),
  0,
  4,
  5,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestPayload, mappings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, gid_manifest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, creation_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, filenames_encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, cb_disk_original_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, cb_disk_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, unique_chunks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, crc_encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestMetadata, crc_clear_),
  1,
  0,
  2,
  4,
  3,
  6,
  5,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestSignature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentManifestSignature, signature_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, sha_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, sha_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, size_original_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, patch_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, chunk_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks, manifest_id_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks, manifest_id_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContentDeltaChunks, deltachunks_),
  2,
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::ContentManifestPayload_FileMapping_ChunkData)},
  { 15, 27, sizeof(::ContentManifestPayload_FileMapping)},
  { 34, 40, sizeof(::ContentManifestPayload)},
  { 41, 55, sizeof(::ContentManifestMetadata)},
  { 64, 70, sizeof(::ContentManifestSignature)},
  { 71, 81, sizeof(::ContentDeltaChunks_DeltaChunk)},
  { 86, 95, sizeof(::ContentDeltaChunks)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentManifestPayload_FileMapping_ChunkData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentManifestPayload_FileMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentManifestPayload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentManifestMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentManifestSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentDeltaChunks_DeltaChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContentDeltaChunks_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "content_manifest.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026content_manifest.proto\"\357\002\n\026ContentMani"
      "festPayload\0225\n\010mappings\030\001 \003(\0132#.ContentM"
      "anifestPayload.FileMapping\032\235\002\n\013FileMappi"
      "ng\022\020\n\010filename\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\r\n\005fl"
      "ags\030\003 \001(\r\022\024\n\014sha_filename\030\004 \001(\014\022\023\n\013sha_c"
      "ontent\030\005 \001(\014\022=\n\006chunks\030\006 \003(\0132-.ContentMa"
      "nifestPayload.FileMapping.ChunkData\022\022\n\nl"
      "inktarget\030\007 \001(\t\032a\n\tChunkData\022\013\n\003sha\030\001 \001("
      "\014\022\013\n\003crc\030\002 \001(\007\022\016\n\006offset\030\003 \001(\004\022\023\n\013cb_ori"
      "ginal\030\004 \001(\r\022\025\n\rcb_compressed\030\005 \001(\r\"\354\001\n\027C"
      "ontentManifestMetadata\022\020\n\010depot_id\030\001 \001(\r"
      "\022\024\n\014gid_manifest\030\002 \001(\004\022\025\n\rcreation_time\030"
      "\003 \001(\r\022\033\n\023filenames_encrypted\030\004 \001(\010\022\030\n\020cb"
      "_disk_original\030\005 \001(\004\022\032\n\022cb_disk_compress"
      "ed\030\006 \001(\004\022\025\n\runique_chunks\030\007 \001(\r\022\025\n\rcrc_e"
      "ncrypted\030\010 \001(\r\022\021\n\tcrc_clear\030\t \001(\r\"-\n\030Con"
      "tentManifestSignature\022\021\n\tsignature\030\001 \001(\014"
      "\"\205\002\n\022ContentDeltaChunks\022\020\n\010depot_id\030\001 \001("
      "\r\022\032\n\022manifest_id_source\030\002 \001(\004\022\032\n\022manifes"
      "t_id_target\030\003 \001(\004\0223\n\013deltaChunks\030\004 \003(\0132\036"
      ".ContentDeltaChunks.DeltaChunk\032p\n\nDeltaC"
      "hunk\022\022\n\nsha_source\030\001 \001(\014\022\022\n\nsha_target\030\002"
      " \001(\014\022\025\n\rsize_original\030\003 \001(\r\022\024\n\014patch_met"
      "hod\030\004 \001(\r\022\r\n\005chunk\030\005 \001(\014B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 951);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content_manifest.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_content_5fmanifest_2eproto

// ===================================================================

void ContentManifestPayload_FileMapping_ChunkData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestPayload_FileMapping_ChunkData::kShaFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCrcFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kOffsetFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCbOriginalFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCbCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload_FileMapping_ChunkData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentManifestPayload.FileMapping.ChunkData)
}
ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&cb_compressed_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(cb_compressed_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload.FileMapping.ChunkData)
}

void ContentManifestPayload_FileMapping_ChunkData::SharedCtor() {
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cb_compressed_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(cb_compressed_));
}

ContentManifestPayload_FileMapping_ChunkData::~ContentManifestPayload_FileMapping_ChunkData() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload.FileMapping.ChunkData)
  SharedDtor();
}

void ContentManifestPayload_FileMapping_ChunkData::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestPayload_FileMapping_ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentManifestPayload_FileMapping_ChunkData::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping_ChunkData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload_FileMapping_ChunkData.base);
  return *internal_default_instance();
}


void ContentManifestPayload_FileMapping_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload.FileMapping.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cb_compressed_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(cb_compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestPayload_FileMapping_ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentManifestPayload.FileMapping.ChunkData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 crc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cb_original = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cb_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_original_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cb_compressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cb_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentManifestPayload.FileMapping.ChunkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentManifestPayload.FileMapping.ChunkData)
  return false;
#undef DO_
}

void ContentManifestPayload_FileMapping_ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentManifestPayload.FileMapping.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha(), output);
  }

  // optional fixed32 crc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->crc(), output);
  }

  // optional uint64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  // optional uint32 cb_original = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cb_original(), output);
  }

  // optional uint32 cb_compressed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cb_compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentManifestPayload.FileMapping.ChunkData)
}

::google::protobuf::uint8* ContentManifestPayload_FileMapping_ChunkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload.FileMapping.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha(), target);
  }

  // optional fixed32 crc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->crc(), target);
  }

  // optional uint64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  // optional uint32 cb_original = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cb_original(), target);
  }

  // optional uint32 cb_compressed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cb_compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload.FileMapping.ChunkData)
  return target;
}

size_t ContentManifestPayload_FileMapping_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload.FileMapping.ChunkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes sha = 1;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint64 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional fixed32 crc = 2;
    if (has_crc()) {
      total_size += 1 + 4;
    }

    // optional uint32 cb_original = 4;
    if (has_cb_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_original());
    }

    // optional uint32 cb_compressed = 5;
    if (has_cb_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_compressed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentManifestPayload_FileMapping_ChunkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentManifestPayload.FileMapping.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestPayload_FileMapping_ChunkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestPayload_FileMapping_ChunkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentManifestPayload.FileMapping.ChunkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentManifestPayload.FileMapping.ChunkData)
    MergeFrom(*source);
  }
}

void ContentManifestPayload_FileMapping_ChunkData::MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload.FileMapping.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_original_ = from.cb_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      cb_compressed_ = from.cb_compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentManifestPayload.FileMapping.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload.FileMapping.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping_ChunkData::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping_ChunkData::Swap(ContentManifestPayload_FileMapping_ChunkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestPayload_FileMapping_ChunkData::InternalSwap(ContentManifestPayload_FileMapping_ChunkData* other) {
  using std::swap;
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(crc_, other->crc_);
  swap(cb_original_, other->cb_original_);
  swap(cb_compressed_, other->cb_compressed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentManifestPayload_FileMapping_ChunkData::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentManifestPayload_FileMapping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestPayload_FileMapping::kFilenameFieldNumber;
const int ContentManifestPayload_FileMapping::kSizeFieldNumber;
const int ContentManifestPayload_FileMapping::kFlagsFieldNumber;
const int ContentManifestPayload_FileMapping::kShaFilenameFieldNumber;
const int ContentManifestPayload_FileMapping::kShaContentFieldNumber;
const int ContentManifestPayload_FileMapping::kChunksFieldNumber;
const int ContentManifestPayload_FileMapping::kLinktargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload_FileMapping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentManifestPayload.FileMapping)
}
ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  sha_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_filename()) {
    sha_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_filename_);
  }
  sha_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_content()) {
    sha_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_content_);
  }
  linktarget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linktarget()) {
    linktarget_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linktarget_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload.FileMapping)
}

void ContentManifestPayload_FileMapping::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linktarget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&size_)) + sizeof(flags_));
}

ContentManifestPayload_FileMapping::~ContentManifestPayload_FileMapping() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload.FileMapping)
  SharedDtor();
}

void ContentManifestPayload_FileMapping::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linktarget_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestPayload_FileMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentManifestPayload_FileMapping::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestPayload_FileMapping& ContentManifestPayload_FileMapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload_FileMapping.base);
  return *internal_default_instance();
}


void ContentManifestPayload_FileMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload.FileMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sha_content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      linktarget_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&size_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestPayload_FileMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentManifestPayload.FileMapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContentManifestPayload.FileMapping.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string linktarget = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linktarget()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linktarget().data(), static_cast<int>(this->linktarget().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContentManifestPayload.FileMapping.linktarget");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentManifestPayload.FileMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentManifestPayload.FileMapping)
  return false;
#undef DO_
}

void ContentManifestPayload_FileMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentManifestPayload.FileMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional bytes sha_filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_filename(), output);
  }

  // optional bytes sha_content = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sha_content(), output);
  }

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->chunks(static_cast<int>(i)),
      output);
  }

  // optional string linktarget = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linktarget().data(), static_cast<int>(this->linktarget().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.linktarget");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->linktarget(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentManifestPayload.FileMapping)
}

::google::protobuf::uint8* ContentManifestPayload_FileMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload.FileMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional bytes sha_filename = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_filename(), target);
  }

  // optional bytes sha_content = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sha_content(), target);
  }

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->chunks(static_cast<int>(i)), deterministic, target);
  }

  // optional string linktarget = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linktarget().data(), static_cast<int>(this->linktarget().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.linktarget");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->linktarget(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload.FileMapping)
  return target;
}

size_t ContentManifestPayload_FileMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload.FileMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->chunks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bytes sha_filename = 4;
    if (has_sha_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_filename());
    }

    // optional bytes sha_content = 5;
    if (has_sha_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_content());
    }

    // optional string linktarget = 7;
    if (has_linktarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linktarget());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentManifestPayload_FileMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentManifestPayload.FileMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestPayload_FileMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestPayload_FileMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentManifestPayload.FileMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentManifestPayload.FileMapping)
    MergeFrom(*source);
  }
}

void ContentManifestPayload_FileMapping::MergeFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload.FileMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sha_filename();
      sha_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sha_content();
      sha_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_linktarget();
      linktarget_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linktarget_);
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentManifestPayload_FileMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentManifestPayload.FileMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestPayload_FileMapping::CopyFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload.FileMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping::Swap(ContentManifestPayload_FileMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestPayload_FileMapping::InternalSwap(ContentManifestPayload_FileMapping* other) {
  using std::swap;
  CastToBase(&chunks_)->InternalSwap(CastToBase(&other->chunks_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_filename_.Swap(&other->sha_filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_content_.Swap(&other->sha_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  linktarget_.Swap(&other->linktarget_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(flags_, other->flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentManifestPayload_FileMapping::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentManifestPayload::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestPayload::kMappingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestPayload::ContentManifestPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentManifestPayload)
}
ContentManifestPayload::ContentManifestPayload(const ContentManifestPayload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload)
}

void ContentManifestPayload::SharedCtor() {
}

ContentManifestPayload::~ContentManifestPayload() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload)
  SharedDtor();
}

void ContentManifestPayload::SharedDtor() {
}

void ContentManifestPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentManifestPayload::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestPayload& ContentManifestPayload::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestPayload.base);
  return *internal_default_instance();
}


void ContentManifestPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentManifestPayload)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ContentManifestPayload.FileMapping mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentManifestPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentManifestPayload)
  return false;
#undef DO_
}

void ContentManifestPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentManifestPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentManifestPayload)
}

::google::protobuf::uint8* ContentManifestPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload)
  return target;
}

size_t ContentManifestPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentManifestPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentManifestPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestPayload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentManifestPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentManifestPayload)
    MergeFrom(*source);
  }
}

void ContentManifestPayload::MergeFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
}

void ContentManifestPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentManifestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestPayload::CopyFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload::IsInitialized() const {
  return true;
}

void ContentManifestPayload::Swap(ContentManifestPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestPayload::InternalSwap(ContentManifestPayload* other) {
  using std::swap;
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentManifestPayload::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentManifestMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestMetadata::kDepotIdFieldNumber;
const int ContentManifestMetadata::kGidManifestFieldNumber;
const int ContentManifestMetadata::kCreationTimeFieldNumber;
const int ContentManifestMetadata::kFilenamesEncryptedFieldNumber;
const int ContentManifestMetadata::kCbDiskOriginalFieldNumber;
const int ContentManifestMetadata::kCbDiskCompressedFieldNumber;
const int ContentManifestMetadata::kUniqueChunksFieldNumber;
const int ContentManifestMetadata::kCrcEncryptedFieldNumber;
const int ContentManifestMetadata::kCrcClearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestMetadata::ContentManifestMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentManifestMetadata)
}
ContentManifestMetadata::ContentManifestMetadata(const ContentManifestMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gid_manifest_, &from.gid_manifest_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_clear_) -
    reinterpret_cast<char*>(&gid_manifest_)) + sizeof(crc_clear_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestMetadata)
}

void ContentManifestMetadata::SharedCtor() {
  ::memset(&gid_manifest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_clear_) -
      reinterpret_cast<char*>(&gid_manifest_)) + sizeof(crc_clear_));
}

ContentManifestMetadata::~ContentManifestMetadata() {
  // @@protoc_insertion_point(destructor:ContentManifestMetadata)
  SharedDtor();
}

void ContentManifestMetadata::SharedDtor() {
}

void ContentManifestMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentManifestMetadata::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestMetadata& ContentManifestMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestMetadata.base);
  return *internal_default_instance();
}


void ContentManifestMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&gid_manifest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_encrypted_) -
        reinterpret_cast<char*>(&gid_manifest_)) + sizeof(crc_encrypted_));
  }
  crc_clear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentManifestMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gid_manifest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gid_manifest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_manifest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creation_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_creation_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filenames_encrypted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_filenames_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filenames_encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cb_disk_original = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cb_disk_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_disk_original_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cb_disk_compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cb_disk_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_disk_compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unique_chunks = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_unique_chunks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_chunks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_encrypted = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_crc_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_clear = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_crc_clear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_clear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentManifestMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentManifestMetadata)
  return false;
#undef DO_
}

void ContentManifestMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentManifestMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint64 gid_manifest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid_manifest(), output);
  }

  // optional uint32 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creation_time(), output);
  }

  // optional bool filenames_encrypted = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->filenames_encrypted(), output);
  }

  // optional uint64 cb_disk_original = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cb_disk_original(), output);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cb_disk_compressed(), output);
  }

  // optional uint32 unique_chunks = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unique_chunks(), output);
  }

  // optional uint32 crc_encrypted = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->crc_encrypted(), output);
  }

  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crc_clear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentManifestMetadata)
}

::google::protobuf::uint8* ContentManifestMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional uint64 gid_manifest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid_manifest(), target);
  }

  // optional uint32 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creation_time(), target);
  }

  // optional bool filenames_encrypted = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->filenames_encrypted(), target);
  }

  // optional uint64 cb_disk_original = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cb_disk_original(), target);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cb_disk_compressed(), target);
  }

  // optional uint32 unique_chunks = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->unique_chunks(), target);
  }

  // optional uint32 crc_encrypted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->crc_encrypted(), target);
  }

  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crc_clear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestMetadata)
  return target;
}

size_t ContentManifestMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 gid_manifest = 2;
    if (has_gid_manifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid_manifest());
    }

    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 creation_time = 3;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_time());
    }

    // optional uint64 cb_disk_original = 5;
    if (has_cb_disk_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cb_disk_original());
    }

    // optional bool filenames_encrypted = 4;
    if (has_filenames_encrypted()) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_chunks = 7;
    if (has_unique_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_chunks());
    }

    // optional uint64 cb_disk_compressed = 6;
    if (has_cb_disk_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cb_disk_compressed());
    }

    // optional uint32 crc_encrypted = 8;
    if (has_crc_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_encrypted());
    }

  }
  // optional uint32 crc_clear = 9;
  if (has_crc_clear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc_clear());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentManifestMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentManifestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentManifestMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentManifestMetadata)
    MergeFrom(*source);
  }
}

void ContentManifestMetadata::MergeFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gid_manifest_ = from.gid_manifest_;
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_disk_original_ = from.cb_disk_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      filenames_encrypted_ = from.filenames_encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      unique_chunks_ = from.unique_chunks_;
    }
    if (cached_has_bits & 0x00000040u) {
      cb_disk_compressed_ = from.cb_disk_compressed_;
    }
    if (cached_has_bits & 0x00000080u) {
      crc_encrypted_ = from.crc_encrypted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_crc_clear(from.crc_clear());
  }
}

void ContentManifestMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentManifestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestMetadata::CopyFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestMetadata::IsInitialized() const {
  return true;
}

void ContentManifestMetadata::Swap(ContentManifestMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestMetadata::InternalSwap(ContentManifestMetadata* other) {
  using std::swap;
  swap(gid_manifest_, other->gid_manifest_);
  swap(depot_id_, other->depot_id_);
  swap(creation_time_, other->creation_time_);
  swap(cb_disk_original_, other->cb_disk_original_);
  swap(filenames_encrypted_, other->filenames_encrypted_);
  swap(unique_chunks_, other->unique_chunks_);
  swap(cb_disk_compressed_, other->cb_disk_compressed_);
  swap(crc_encrypted_, other->crc_encrypted_);
  swap(crc_clear_, other->crc_clear_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentManifestMetadata::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentManifestSignature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestSignature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestSignature::ContentManifestSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestSignature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentManifestSignature)
}
ContentManifestSignature::ContentManifestSignature(const ContentManifestSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:ContentManifestSignature)
}

void ContentManifestSignature::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContentManifestSignature::~ContentManifestSignature() {
  // @@protoc_insertion_point(destructor:ContentManifestSignature)
  SharedDtor();
}

void ContentManifestSignature::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentManifestSignature::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestSignature& ContentManifestSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentManifestSignature.base);
  return *internal_default_instance();
}


void ContentManifestSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentManifestSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentManifestSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentManifestSignature)
  return false;
#undef DO_
}

void ContentManifestSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentManifestSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentManifestSignature)
}

::google::protobuf::uint8* ContentManifestSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestSignature)
  return target;
}

size_t ContentManifestSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentManifestSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentManifestSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentManifestSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentManifestSignature)
    MergeFrom(*source);
  }
}

void ContentManifestSignature::MergeFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    set_has_signature();
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void ContentManifestSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentManifestSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestSignature::CopyFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestSignature::IsInitialized() const {
  return true;
}

void ContentManifestSignature::Swap(ContentManifestSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestSignature::InternalSwap(ContentManifestSignature* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentManifestSignature::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentDeltaChunks_DeltaChunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentDeltaChunks_DeltaChunk::kShaSourceFieldNumber;
const int ContentDeltaChunks_DeltaChunk::kShaTargetFieldNumber;
const int ContentDeltaChunks_DeltaChunk::kSizeOriginalFieldNumber;
const int ContentDeltaChunks_DeltaChunk::kPatchMethodFieldNumber;
const int ContentDeltaChunks_DeltaChunk::kChunkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentDeltaChunks_DeltaChunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentDeltaChunks.DeltaChunk)
}
ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(const ContentDeltaChunks_DeltaChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_source()) {
    sha_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_source_);
  }
  sha_target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_target()) {
    sha_target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_target_);
  }
  chunk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chunk()) {
    chunk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_);
  }
  ::memcpy(&size_original_, &from.size_original_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_method_) -
    reinterpret_cast<char*>(&size_original_)) + sizeof(patch_method_));
  // @@protoc_insertion_point(copy_constructor:ContentDeltaChunks.DeltaChunk)
}

void ContentDeltaChunks_DeltaChunk::SharedCtor() {
  sha_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_original_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_method_) -
      reinterpret_cast<char*>(&size_original_)) + sizeof(patch_method_));
}

ContentDeltaChunks_DeltaChunk::~ContentDeltaChunks_DeltaChunk() {
  // @@protoc_insertion_point(destructor:ContentDeltaChunks.DeltaChunk)
  SharedDtor();
}

void ContentDeltaChunks_DeltaChunk::SharedDtor() {
  sha_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentDeltaChunks_DeltaChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentDeltaChunks_DeltaChunk::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentDeltaChunks_DeltaChunk& ContentDeltaChunks_DeltaChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentDeltaChunks_DeltaChunk.base);
  return *internal_default_instance();
}


void ContentDeltaChunks_DeltaChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDeltaChunks.DeltaChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sha_source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_target_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&size_original_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patch_method_) -
        reinterpret_cast<char*>(&size_original_)) + sizeof(patch_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentDeltaChunks_DeltaChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentDeltaChunks.DeltaChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_original = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_size_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_original_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 patch_method = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_patch_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chunk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentDeltaChunks.DeltaChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentDeltaChunks.DeltaChunk)
  return false;
#undef DO_
}

void ContentDeltaChunks_DeltaChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentDeltaChunks.DeltaChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha_source(), output);
  }

  // optional bytes sha_target = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_target(), output);
  }

  // optional uint32 size_original = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size_original(), output);
  }

  // optional uint32 patch_method = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->patch_method(), output);
  }

  // optional bytes chunk = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->chunk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentDeltaChunks.DeltaChunk)
}

::google::protobuf::uint8* ContentDeltaChunks_DeltaChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentDeltaChunks.DeltaChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_source = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha_source(), target);
  }

  // optional bytes sha_target = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_target(), target);
  }

  // optional uint32 size_original = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size_original(), target);
  }

  // optional uint32 patch_method = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->patch_method(), target);
  }

  // optional bytes chunk = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->chunk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentDeltaChunks.DeltaChunk)
  return target;
}

size_t ContentDeltaChunks_DeltaChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDeltaChunks.DeltaChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes sha_source = 1;
    if (has_sha_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_source());
    }

    // optional bytes sha_target = 2;
    if (has_sha_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_target());
    }

    // optional bytes chunk = 5;
    if (has_chunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chunk());
    }

    // optional uint32 size_original = 3;
    if (has_size_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_original());
    }

    // optional uint32 patch_method = 4;
    if (has_patch_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patch_method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentDeltaChunks_DeltaChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentDeltaChunks.DeltaChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentDeltaChunks_DeltaChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentDeltaChunks_DeltaChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentDeltaChunks.DeltaChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentDeltaChunks.DeltaChunk)
    MergeFrom(*source);
  }
}

void ContentDeltaChunks_DeltaChunk::MergeFrom(const ContentDeltaChunks_DeltaChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentDeltaChunks.DeltaChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_source();
      sha_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sha_target();
      sha_target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_target_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_chunk();
      chunk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_);
    }
    if (cached_has_bits & 0x00000008u) {
      size_original_ = from.size_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      patch_method_ = from.patch_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentDeltaChunks_DeltaChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentDeltaChunks.DeltaChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentDeltaChunks_DeltaChunk::CopyFrom(const ContentDeltaChunks_DeltaChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDeltaChunks.DeltaChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDeltaChunks_DeltaChunk::IsInitialized() const {
  return true;
}

void ContentDeltaChunks_DeltaChunk::Swap(ContentDeltaChunks_DeltaChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentDeltaChunks_DeltaChunk::InternalSwap(ContentDeltaChunks_DeltaChunk* other) {
  using std::swap;
  sha_source_.Swap(&other->sha_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha_target_.Swap(&other->sha_target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chunk_.Swap(&other->chunk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_original_, other->size_original_);
  swap(patch_method_, other->patch_method_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentDeltaChunks_DeltaChunk::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentDeltaChunks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentDeltaChunks::kDepotIdFieldNumber;
const int ContentDeltaChunks::kManifestIdSourceFieldNumber;
const int ContentDeltaChunks::kManifestIdTargetFieldNumber;
const int ContentDeltaChunks::kDeltaChunksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentDeltaChunks::ContentDeltaChunks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_content_5fmanifest_2eproto::scc_info_ContentDeltaChunks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContentDeltaChunks)
}
ContentDeltaChunks::ContentDeltaChunks(const ContentDeltaChunks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      deltachunks_(from.deltachunks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manifest_id_source_, &from.manifest_id_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&depot_id_) -
    reinterpret_cast<char*>(&manifest_id_source_)) + sizeof(depot_id_));
  // @@protoc_insertion_point(copy_constructor:ContentDeltaChunks)
}

void ContentDeltaChunks::SharedCtor() {
  ::memset(&manifest_id_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depot_id_) -
      reinterpret_cast<char*>(&manifest_id_source_)) + sizeof(depot_id_));
}

ContentDeltaChunks::~ContentDeltaChunks() {
  // @@protoc_insertion_point(destructor:ContentDeltaChunks)
  SharedDtor();
}

void ContentDeltaChunks::SharedDtor() {
}

void ContentDeltaChunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContentDeltaChunks::descriptor() {
  ::protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentDeltaChunks& ContentDeltaChunks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_content_5fmanifest_2eproto::scc_info_ContentDeltaChunks.base);
  return *internal_default_instance();
}


void ContentDeltaChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDeltaChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deltachunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&manifest_id_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depot_id_) -
        reinterpret_cast<char*>(&manifest_id_source_)) + sizeof(depot_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentDeltaChunks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContentDeltaChunks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 manifest_id_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_manifest_id_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &manifest_id_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 manifest_id_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_manifest_id_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &manifest_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deltachunks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContentDeltaChunks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContentDeltaChunks)
  return false;
#undef DO_
}

void ContentDeltaChunks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContentDeltaChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint64 manifest_id_source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->manifest_id_source(), output);
  }

  // optional uint64 manifest_id_target = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->manifest_id_target(), output);
  }

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deltachunks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->deltachunks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContentDeltaChunks)
}

::google::protobuf::uint8* ContentDeltaChunks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContentDeltaChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional uint64 manifest_id_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->manifest_id_source(), target);
  }

  // optional uint64 manifest_id_target = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->manifest_id_target(), target);
  }

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deltachunks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->deltachunks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentDeltaChunks)
  return target;
}

size_t ContentDeltaChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDeltaChunks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->deltachunks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deltachunks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 manifest_id_source = 2;
    if (has_manifest_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->manifest_id_source());
    }

    // optional uint64 manifest_id_target = 3;
    if (has_manifest_id_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->manifest_id_target());
    }

    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentDeltaChunks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContentDeltaChunks)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentDeltaChunks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentDeltaChunks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContentDeltaChunks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContentDeltaChunks)
    MergeFrom(*source);
  }
}

void ContentDeltaChunks::MergeFrom(const ContentDeltaChunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentDeltaChunks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deltachunks_.MergeFrom(from.deltachunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manifest_id_source_ = from.manifest_id_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      manifest_id_target_ = from.manifest_id_target_;
    }
    if (cached_has_bits & 0x00000004u) {
      depot_id_ = from.depot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentDeltaChunks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContentDeltaChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentDeltaChunks::CopyFrom(const ContentDeltaChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDeltaChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDeltaChunks::IsInitialized() const {
  return true;
}

void ContentDeltaChunks::Swap(ContentDeltaChunks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentDeltaChunks::InternalSwap(ContentDeltaChunks* other) {
  using std::swap;
  CastToBase(&deltachunks_)->InternalSwap(CastToBase(&other->deltachunks_));
  swap(manifest_id_source_, other->manifest_id_source_);
  swap(manifest_id_target_, other->manifest_id_target_);
  swap(depot_id_, other->depot_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContentDeltaChunks::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentManifestPayload_FileMapping_ChunkData* Arena::CreateMaybeMessage< ::ContentManifestPayload_FileMapping_ChunkData >(Arena* arena) {
  return Arena::CreateInternal< ::ContentManifestPayload_FileMapping_ChunkData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentManifestPayload_FileMapping* Arena::CreateMaybeMessage< ::ContentManifestPayload_FileMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ContentManifestPayload_FileMapping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentManifestPayload* Arena::CreateMaybeMessage< ::ContentManifestPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ContentManifestPayload >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentManifestMetadata* Arena::CreateMaybeMessage< ::ContentManifestMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::ContentManifestMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentManifestSignature* Arena::CreateMaybeMessage< ::ContentManifestSignature >(Arena* arena) {
  return Arena::CreateInternal< ::ContentManifestSignature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentDeltaChunks_DeltaChunk* Arena::CreateMaybeMessage< ::ContentDeltaChunks_DeltaChunk >(Arena* arena) {
  return Arena::CreateInternal< ::ContentDeltaChunks_DeltaChunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContentDeltaChunks* Arena::CreateMaybeMessage< ::ContentDeltaChunks >(Arena* arena) {
  return Arena::CreateInternal< ::ContentDeltaChunks >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
