// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_friendmessages.steamclient.proto

#include "steammessages_friendmessages.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_GetRecentMessages_Response_FriendMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession;
}  // namespace protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto
class CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_GetRecentMessages_Request>
      _instance;
} _CFriendMessages_GetRecentMessages_Request_default_instance_;
class CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_GetRecentMessages_Response_FriendMessage>
      _instance;
} _CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_;
class CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_GetRecentMessages_Response>
      _instance;
} _CFriendMessages_GetRecentMessages_Response_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendsMessages_GetActiveMessageSessions_Request>
      _instance;
} _CFriendsMessages_GetActiveMessageSessions_Request_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>
      _instance;
} _CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendsMessages_GetActiveMessageSessions_Response>
      _instance;
} _CFriendsMessages_GetActiveMessageSessions_Response_default_instance_;
class CFriendMessages_SendMessage_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_SendMessage_Request>
      _instance;
} _CFriendMessages_SendMessage_Request_default_instance_;
class CFriendMessages_SendMessage_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_SendMessage_Response>
      _instance;
} _CFriendMessages_SendMessage_Response_default_instance_;
class CFriendMessages_AckMessage_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_AckMessage_Notification>
      _instance;
} _CFriendMessages_AckMessage_Notification_default_instance_;
class CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_IsInFriendsUIBeta_Request>
      _instance;
} _CFriendMessages_IsInFriendsUIBeta_Request_default_instance_;
class CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_IsInFriendsUIBeta_Response>
      _instance;
} _CFriendMessages_IsInFriendsUIBeta_Response_default_instance_;
class CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFriendMessages_IncomingMessage_Notification>
      _instance;
} _CFriendMessages_IncomingMessage_Notification_default_instance_;
namespace protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto {
static void InitDefaultsCFriendMessages_GetRecentMessages_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_GetRecentMessages_Request_default_instance_;
    new (ptr) ::CFriendMessages_GetRecentMessages_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_GetRecentMessages_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_GetRecentMessages_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_GetRecentMessages_Request}, {}};

static void InitDefaultsCFriendMessages_GetRecentMessages_Response_FriendMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_;
    new (ptr) ::CFriendMessages_GetRecentMessages_Response_FriendMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_GetRecentMessages_Response_FriendMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_GetRecentMessages_Response_FriendMessage}, {}};

static void InitDefaultsCFriendMessages_GetRecentMessages_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_GetRecentMessages_Response_default_instance_;
    new (ptr) ::CFriendMessages_GetRecentMessages_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_GetRecentMessages_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CFriendMessages_GetRecentMessages_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCFriendMessages_GetRecentMessages_Response}, {
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Response_FriendMessage.base,}};

static void InitDefaultsCFriendsMessages_GetActiveMessageSessions_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendsMessages_GetActiveMessageSessions_Request_default_instance_;
    new (ptr) ::CFriendsMessages_GetActiveMessageSessions_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendsMessages_GetActiveMessageSessions_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendsMessages_GetActiveMessageSessions_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendsMessages_GetActiveMessageSessions_Request}, {}};

static void InitDefaultsCFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_;
    new (ptr) ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession}, {}};

static void InitDefaultsCFriendsMessages_GetActiveMessageSessions_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendsMessages_GetActiveMessageSessions_Response_default_instance_;
    new (ptr) ::CFriendsMessages_GetActiveMessageSessions_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendsMessages_GetActiveMessageSessions_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CFriendsMessages_GetActiveMessageSessions_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCFriendsMessages_GetActiveMessageSessions_Response}, {
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.base,}};

static void InitDefaultsCFriendMessages_SendMessage_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_SendMessage_Request_default_instance_;
    new (ptr) ::CFriendMessages_SendMessage_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_SendMessage_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_SendMessage_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_SendMessage_Request}, {}};

static void InitDefaultsCFriendMessages_SendMessage_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_SendMessage_Response_default_instance_;
    new (ptr) ::CFriendMessages_SendMessage_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_SendMessage_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_SendMessage_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_SendMessage_Response}, {}};

static void InitDefaultsCFriendMessages_AckMessage_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_AckMessage_Notification_default_instance_;
    new (ptr) ::CFriendMessages_AckMessage_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_AckMessage_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_AckMessage_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_AckMessage_Notification}, {}};

static void InitDefaultsCFriendMessages_IsInFriendsUIBeta_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_IsInFriendsUIBeta_Request_default_instance_;
    new (ptr) ::CFriendMessages_IsInFriendsUIBeta_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_IsInFriendsUIBeta_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_IsInFriendsUIBeta_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_IsInFriendsUIBeta_Request}, {}};

static void InitDefaultsCFriendMessages_IsInFriendsUIBeta_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_IsInFriendsUIBeta_Response_default_instance_;
    new (ptr) ::CFriendMessages_IsInFriendsUIBeta_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_IsInFriendsUIBeta_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_IsInFriendsUIBeta_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_IsInFriendsUIBeta_Response}, {}};

static void InitDefaultsCFriendMessages_IncomingMessage_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFriendMessages_IncomingMessage_Notification_default_instance_;
    new (ptr) ::CFriendMessages_IncomingMessage_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFriendMessages_IncomingMessage_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFriendMessages_IncomingMessage_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFriendMessages_IncomingMessage_Notification}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_GetRecentMessages_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_GetRecentMessages_Response_FriendMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_GetRecentMessages_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendsMessages_GetActiveMessageSessions_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendsMessages_GetActiveMessageSessions_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_SendMessage_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_SendMessage_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_AckMessage_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_IsInFriendsUIBeta_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_IsInFriendsUIBeta_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFriendMessages_IncomingMessage_Notification.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, steamid1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, steamid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, most_recent_conversation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, rtime32_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, bbcode_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, start_ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, time_last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, ordinal_last_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, ordinal_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, more_available_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, lastmessage_since_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, accountid_friend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, last_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, last_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, unread_message_count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, message_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, timestamp_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, chat_entry_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, contains_bbcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, echo_to_sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, low_priority_),
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, modified_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, server_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, ordinal_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, steamid_partner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Request, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, online_in_friendsui_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, has_used_friendsui_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, steamid_friend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, chat_entry_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, from_limited_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, rtime32_server_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, local_echo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, message_no_bbcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, low_priority_),
  2,
  3,
  6,
  0,
  4,
  5,
  7,
  1,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::CFriendMessages_GetRecentMessages_Request)},
  { 23, 32, sizeof(::CFriendMessages_GetRecentMessages_Response_FriendMessage)},
  { 36, 43, sizeof(::CFriendMessages_GetRecentMessages_Response)},
  { 45, 51, sizeof(::CFriendsMessages_GetActiveMessageSessions_Request)},
  { 52, 61, sizeof(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession)},
  { 65, 72, sizeof(::CFriendsMessages_GetActiveMessageSessions_Response)},
  { 74, 85, sizeof(::CFriendMessages_SendMessage_Request)},
  { 91, 99, sizeof(::CFriendMessages_SendMessage_Response)},
  { 102, 109, sizeof(::CFriendMessages_AckMessage_Notification)},
  { 111, 117, sizeof(::CFriendMessages_IsInFriendsUIBeta_Request)},
  { 118, 125, sizeof(::CFriendMessages_IsInFriendsUIBeta_Response)},
  { 127, 141, sizeof(::CFriendMessages_IncomingMessage_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_GetRecentMessages_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_GetRecentMessages_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendsMessages_GetActiveMessageSessions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendsMessages_GetActiveMessageSessions_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_SendMessage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_SendMessage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_AckMessage_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_IsInFriendsUIBeta_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_IsInFriendsUIBeta_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFriendMessages_IncomingMessage_Notification_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_friendmessages.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.steammessages_friendmessages.steamclie"
      "nt.proto\032,steammessages_unified_base.ste"
      "amclient.proto\"\361\005\n)CFriendMessages_GetRe"
      "centMessages_Request\022\020\n\010steamid1\030\001 \001(\006\022\020"
      "\n\010steamid2\030\002 \001(\006\022L\n\005count\030\003 \001(\rB=\202\265\0309If "
      "non-zero, cap the number of recent messa"
      "ges to return.\022s\n\030most_recent_conversati"
      "on\030\004 \001(\010BQ\202\265\030MGrab the block of chat fro"
      "m the most recent conversation (a ~5 min"
      "ute period)\022\251\001\n\022rtime32_start_time\030\005 \001(\007"
      "B\214\001\202\265\030\207\001If non-zero, return only message"
      "s with timestamps greater or equal to th"
      "is. If zero, we only return messages fro"
      "m a recent time cutoff.\022E\n\rbbcode_format"
      "\030\006 \001(\010B.\202\265\030*Return the results with bbco"
      "de formatting.\022\204\001\n\rstart_ordinal\030\007 \001(\rBm"
      "\202\265\030iCombined with start time, only messa"
      "ges after this ordinal are returned (ded"
      "upes messages in same second)\022M\n\ttime_la"
      "st\030\010 \001(\rB:\202\265\0306if present/non-zero, retur"
      "n only messages before this.\022\024\n\014ordinal_"
      "last\030\t \001(\r\"\235\002\n*CFriendMessages_GetRecent"
      "Messages_Response\022~\n\010messages\030\001 \003(\01329.CF"
      "riendMessages_GetRecentMessages_Response"
      ".FriendMessageB1\202\265\030-Array of messages, r"
      "eturned newest to oldest.\022\026\n\016more_availa"
      "ble\030\004 \001(\010\032W\n\rFriendMessage\022\021\n\taccountid\030"
      "\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\017\n\007message\030\003 \001("
      "\t\022\017\n\007ordinal\030\004 \001(\r\"\264\001\n1CFriendsMessages_"
      "GetActiveMessageSessions_Request\022\177\n\021last"
      "message_since\030\001 \001(\rBd\202\265\030`return only ses"
      "sion information where a chat message ha"
      "s been sent since this time (for polling"
      ")\"\374\002\n2CFriendsMessages_GetActiveMessageS"
      "essions_Response\022b\n\020message_sessions\030\001 \003"
      "(\0132H.CFriendsMessages_GetActiveMessageSe"
      "ssions_Response.FriendMessageSession\022i\n\t"
      "timestamp\030\002 \001(\rBV\202\265\030RThis should be pass"
      "ed in the next request as lastmessage_si"
      "nce to poll for updates\032w\n\024FriendMessage"
      "Session\022\030\n\020accountid_friend\030\001 \001(\r\022\024\n\014las"
      "t_message\030\002 \001(\r\022\021\n\tlast_view\030\003 \001(\r\022\034\n\024un"
      "read_message_count\030\004 \001(\r\"\247\001\n#CFriendMess"
      "ages_SendMessage_Request\022\017\n\007steamid\030\001 \001("
      "\006\022\027\n\017chat_entry_type\030\002 \001(\005\022\017\n\007message\030\003 "
      "\001(\t\022\027\n\017contains_bbcode\030\004 \001(\010\022\026\n\016echo_to_"
      "sender\030\005 \001(\010\022\024\n\014low_priority\030\006 \001(\010\"k\n$CF"
      "riendMessages_SendMessage_Response\022\030\n\020mo"
      "dified_message\030\001 \001(\t\022\030\n\020server_timestamp"
      "\030\002 \001(\r\022\017\n\007ordinal\030\003 \001(\r\"U\n\'CFriendMessag"
      "es_AckMessage_Notification\022\027\n\017steamid_pa"
      "rtner\030\001 \001(\006\022\021\n\ttimestamp\030\002 \001(\r\"<\n)CFrien"
      "dMessages_IsInFriendsUIBeta_Request\022\017\n\007s"
      "teamid\030\001 \001(\006\"e\n*CFriendMessages_IsInFrie"
      "ndsUIBeta_Response\022\033\n\023online_in_friendsu"
      "i\030\001 \001(\010\022\032\n\022has_used_friendsui\030\002 \001(\010\"\206\002\n,"
      "CFriendMessages_IncomingMessage_Notifica"
      "tion\022\026\n\016steamid_friend\030\001 \001(\006\022\027\n\017chat_ent"
      "ry_type\030\002 \001(\005\022\034\n\024from_limited_account\030\003 "
      "\001(\010\022\017\n\007message\030\004 \001(\t\022 \n\030rtime32_server_t"
      "imestamp\030\005 \001(\007\022\017\n\007ordinal\030\006 \001(\r\022\022\n\nlocal"
      "_echo\030\007 \001(\010\022\031\n\021message_no_bbcode\030\010 \001(\t\022\024"
      "\n\014low_priority\030\t \001(\0102\214\007\n\016FriendMessages\022"
      "\245\001\n\021GetRecentMessages\022*.CFriendMessages_"
      "GetRecentMessages_Request\032+.CFriendMessa"
      "ges_GetRecentMessages_Response\"7\202\265\0303Get "
      "a log of recent chat messages between tw"
      "o users\022\300\001\n\030GetActiveMessageSessions\0222.C"
      "FriendsMessages_GetActiveMessageSessions"
      "_Request\0323.CFriendsMessages_GetActiveMes"
      "sageSessions_Response\";\202\265\0307Get informati"
      "on about recent offline messages and cha"
      "ts\022\177\n\013SendMessage\022$.CFriendMessages_Send"
      "Message_Request\032%.CFriendMessages_SendMe"
      "ssage_Response\"#\202\265\030\037Send a chat message "
      "to a friend\022\214\001\n\nAckMessage\022(.CFriendMess"
      "ages_AckMessage_Notification\032\013.NoRespons"
      "e\"G\202\265\030CAcknowledge that we have seen the"
      " most recent message from a friend\022\233\001\n\021I"
      "sInFriendsUIBeta\022*.CFriendMessages_IsInF"
      "riendsUIBeta_Request\032+.CFriendMessages_I"
      "sInFriendsUIBeta_Response\"-\202\265\030)See if a "
      "friend is in the friendsui beta.\032a\202\265\030]A "
      "service for relaying and logging friend "
      "messages (user-to-user chats and offline"
      " messaging)2\240\002\n\024FriendMessagesClient\022r\n\017"
      "IncomingMessage\022-.CFriendMessages_Incomi"
      "ngMessage_Notification\032\013.NoResponse\"#\202\265\030"
      "\037New chat message from a friend.\022\215\001\n\024Not"
      "ifyAckMessageEcho\022(.CFriendMessages_AckM"
      "essage_Notification\032\013.NoResponse\">\202\265\030:A "
      "session acked an unread message, echo to"
      " other sessions.\032\004\300\265\030\002B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_friendmessages.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto

// ===================================================================

void CFriendMessages_GetRecentMessages_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_GetRecentMessages_Request::kSteamid1FieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kSteamid2FieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kCountFieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kMostRecentConversationFieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kRtime32StartTimeFieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kBbcodeFormatFieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kStartOrdinalFieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kTimeLastFieldNumber;
const int CFriendMessages_GetRecentMessages_Request::kOrdinalLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_GetRecentMessages_Request::CFriendMessages_GetRecentMessages_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_GetRecentMessages_Request)
}
CFriendMessages_GetRecentMessages_Request::CFriendMessages_GetRecentMessages_Request(const CFriendMessages_GetRecentMessages_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid1_, &from.steamid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_last_) -
    reinterpret_cast<char*>(&steamid1_)) + sizeof(ordinal_last_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Request)
}

void CFriendMessages_GetRecentMessages_Request::SharedCtor() {
  ::memset(&steamid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_last_) -
      reinterpret_cast<char*>(&steamid1_)) + sizeof(ordinal_last_));
}

CFriendMessages_GetRecentMessages_Request::~CFriendMessages_GetRecentMessages_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Request)
  SharedDtor();
}

void CFriendMessages_GetRecentMessages_Request::SharedDtor() {
}

void CFriendMessages_GetRecentMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_GetRecentMessages_Request::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_GetRecentMessages_Request& CFriendMessages_GetRecentMessages_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Request.base);
  return *internal_default_instance();
}


void CFriendMessages_GetRecentMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&steamid1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_last_) -
        reinterpret_cast<char*>(&steamid1_)) + sizeof(time_last_));
  }
  ordinal_last_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_GetRecentMessages_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_GetRecentMessages_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_most_recent_conversation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &most_recent_conversation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rtime32_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_bbcode_format();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbcode_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_start_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_time_last();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal_last = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ordinal_last();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_GetRecentMessages_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_GetRecentMessages_Request)
  return false;
#undef DO_
}

void CFriendMessages_GetRecentMessages_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_GetRecentMessages_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid1(), output);
  }

  // optional fixed64 steamid2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid2(), output);
  }

  // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->most_recent_conversation(), output);
  }

  // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_start_time(), output);
  }

  // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bbcode_format(), output);
  }

  // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_ordinal(), output);
  }

  // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time_last(), output);
  }

  // optional uint32 ordinal_last = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ordinal_last(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_GetRecentMessages_Request)
}

::google::protobuf::uint8* CFriendMessages_GetRecentMessages_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid1(), target);
  }

  // optional fixed64 steamid2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid2(), target);
  }

  // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->most_recent_conversation(), target);
  }

  // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_start_time(), target);
  }

  // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bbcode_format(), target);
  }

  // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_ordinal(), target);
  }

  // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time_last(), target);
  }

  // optional uint32 ordinal_last = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ordinal_last(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Request)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 steamid1 = 1;
    if (has_steamid1()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid2 = 2;
    if (has_steamid2()) {
      total_size += 1 + 8;
    }

    // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
    if (has_rtime32_start_time()) {
      total_size += 1 + 4;
    }

    // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
    if (has_most_recent_conversation()) {
      total_size += 1 + 1;
    }

    // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
    if (has_bbcode_format()) {
      total_size += 1 + 1;
    }

    // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
    if (has_start_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_ordinal());
    }

    // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
    if (has_time_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last());
    }

  }
  // optional uint32 ordinal_last = 9;
  if (has_ordinal_last()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ordinal_last());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_GetRecentMessages_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_GetRecentMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_GetRecentMessages_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_GetRecentMessages_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_GetRecentMessages_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_GetRecentMessages_Request)
    MergeFrom(*source);
  }
}

void CFriendMessages_GetRecentMessages_Request::MergeFrom(const CFriendMessages_GetRecentMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      steamid1_ = from.steamid1_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid2_ = from.steamid2_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_start_time_ = from.rtime32_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      most_recent_conversation_ = from.most_recent_conversation_;
    }
    if (cached_has_bits & 0x00000020u) {
      bbcode_format_ = from.bbcode_format_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_ordinal_ = from.start_ordinal_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_last_ = from.time_last_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_ordinal_last(from.ordinal_last());
  }
}

void CFriendMessages_GetRecentMessages_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_GetRecentMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_GetRecentMessages_Request::CopyFrom(const CFriendMessages_GetRecentMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Request::Swap(CFriendMessages_GetRecentMessages_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_GetRecentMessages_Request::InternalSwap(CFriendMessages_GetRecentMessages_Request* other) {
  using std::swap;
  swap(steamid1_, other->steamid1_);
  swap(steamid2_, other->steamid2_);
  swap(count_, other->count_);
  swap(rtime32_start_time_, other->rtime32_start_time_);
  swap(most_recent_conversation_, other->most_recent_conversation_);
  swap(bbcode_format_, other->bbcode_format_);
  swap(start_ordinal_, other->start_ordinal_);
  swap(time_last_, other->time_last_);
  swap(ordinal_last_, other->ordinal_last_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_GetRecentMessages_Request::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_GetRecentMessages_Response_FriendMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_GetRecentMessages_Response_FriendMessage::kAccountidFieldNumber;
const int CFriendMessages_GetRecentMessages_Response_FriendMessage::kTimestampFieldNumber;
const int CFriendMessages_GetRecentMessages_Response_FriendMessage::kMessageFieldNumber;
const int CFriendMessages_GetRecentMessages_Response_FriendMessage::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_GetRecentMessages_Response_FriendMessage::CFriendMessages_GetRecentMessages_Response_FriendMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Response_FriendMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_GetRecentMessages_Response.FriendMessage)
}
CFriendMessages_GetRecentMessages_Response_FriendMessage::CFriendMessages_GetRecentMessages_Response_FriendMessage(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Response.FriendMessage)
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(ordinal_));
}

CFriendMessages_GetRecentMessages_Response_FriendMessage::~CFriendMessages_GetRecentMessages_Response_FriendMessage() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  SharedDtor();
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_GetRecentMessages_Response_FriendMessage::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_GetRecentMessages_Response_FriendMessage& CFriendMessages_GetRecentMessages_Response_FriendMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Response_FriendMessage.base);
  return *internal_default_instance();
}


void CFriendMessages_GetRecentMessages_Response_FriendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_GetRecentMessages_Response_FriendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CFriendMessages_GetRecentMessages_Response.FriendMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  return false;
#undef DO_
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_GetRecentMessages_Response.FriendMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_GetRecentMessages_Response.FriendMessage)
}

::google::protobuf::uint8* CFriendMessages_GetRecentMessages_Response_FriendMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_GetRecentMessages_Response.FriendMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Response_FriendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 ordinal = 4;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_GetRecentMessages_Response_FriendMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_GetRecentMessages_Response_FriendMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_GetRecentMessages_Response.FriendMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_GetRecentMessages_Response.FriendMessage)
    MergeFrom(*source);
  }
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::MergeFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::CopyFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Response_FriendMessage::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::Swap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_GetRecentMessages_Response_FriendMessage::InternalSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(timestamp_, other->timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_GetRecentMessages_Response_FriendMessage::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_GetRecentMessages_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_GetRecentMessages_Response::kMessagesFieldNumber;
const int CFriendMessages_GetRecentMessages_Response::kMoreAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_GetRecentMessages_Response::CFriendMessages_GetRecentMessages_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_GetRecentMessages_Response)
}
CFriendMessages_GetRecentMessages_Response::CFriendMessages_GetRecentMessages_Response(const CFriendMessages_GetRecentMessages_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  more_available_ = from.more_available_;
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Response)
}

void CFriendMessages_GetRecentMessages_Response::SharedCtor() {
  more_available_ = false;
}

CFriendMessages_GetRecentMessages_Response::~CFriendMessages_GetRecentMessages_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Response)
  SharedDtor();
}

void CFriendMessages_GetRecentMessages_Response::SharedDtor() {
}

void CFriendMessages_GetRecentMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_GetRecentMessages_Response::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_GetRecentMessages_Response& CFriendMessages_GetRecentMessages_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_GetRecentMessages_Response.base);
  return *internal_default_instance();
}


void CFriendMessages_GetRecentMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  more_available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_GetRecentMessages_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_GetRecentMessages_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool more_available = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_more_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_GetRecentMessages_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_GetRecentMessages_Response)
  return false;
#undef DO_
}

void CFriendMessages_GetRecentMessages_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_GetRecentMessages_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->messages(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_available = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->more_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_GetRecentMessages_Response)
}

::google::protobuf::uint8* CFriendMessages_GetRecentMessages_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->messages(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_available = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->more_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Response)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // optional bool more_available = 4;
  if (has_more_available()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_GetRecentMessages_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_GetRecentMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_GetRecentMessages_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_GetRecentMessages_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_GetRecentMessages_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_GetRecentMessages_Response)
    MergeFrom(*source);
  }
}

void CFriendMessages_GetRecentMessages_Response::MergeFrom(const CFriendMessages_GetRecentMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.has_more_available()) {
    set_more_available(from.more_available());
  }
}

void CFriendMessages_GetRecentMessages_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_GetRecentMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_GetRecentMessages_Response::CopyFrom(const CFriendMessages_GetRecentMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Response::Swap(CFriendMessages_GetRecentMessages_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_GetRecentMessages_Response::InternalSwap(CFriendMessages_GetRecentMessages_Response* other) {
  using std::swap;
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(more_available_, other->more_available_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_GetRecentMessages_Response::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendsMessages_GetActiveMessageSessions_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendsMessages_GetActiveMessageSessions_Request::kLastmessageSinceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendsMessages_GetActiveMessageSessions_Request::CFriendsMessages_GetActiveMessageSessions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendsMessages_GetActiveMessageSessions_Request)
}
CFriendsMessages_GetActiveMessageSessions_Request::CFriendsMessages_GetActiveMessageSessions_Request(const CFriendsMessages_GetActiveMessageSessions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lastmessage_since_ = from.lastmessage_since_;
  // @@protoc_insertion_point(copy_constructor:CFriendsMessages_GetActiveMessageSessions_Request)
}

void CFriendsMessages_GetActiveMessageSessions_Request::SharedCtor() {
  lastmessage_since_ = 0u;
}

CFriendsMessages_GetActiveMessageSessions_Request::~CFriendsMessages_GetActiveMessageSessions_Request() {
  // @@protoc_insertion_point(destructor:CFriendsMessages_GetActiveMessageSessions_Request)
  SharedDtor();
}

void CFriendsMessages_GetActiveMessageSessions_Request::SharedDtor() {
}

void CFriendsMessages_GetActiveMessageSessions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendsMessages_GetActiveMessageSessions_Request::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendsMessages_GetActiveMessageSessions_Request& CFriendsMessages_GetActiveMessageSessions_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Request.base);
  return *internal_default_instance();
}


void CFriendsMessages_GetActiveMessageSessions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendsMessages_GetActiveMessageSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lastmessage_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendsMessages_GetActiveMessageSessions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendsMessages_GetActiveMessageSessions_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lastmessage_since();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmessage_since_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendsMessages_GetActiveMessageSessions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendsMessages_GetActiveMessageSessions_Request)
  return false;
#undef DO_
}

void CFriendsMessages_GetActiveMessageSessions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendsMessages_GetActiveMessageSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lastmessage_since(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendsMessages_GetActiveMessageSessions_Request)
}

::google::protobuf::uint8* CFriendsMessages_GetActiveMessageSessions_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendsMessages_GetActiveMessageSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lastmessage_since(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendsMessages_GetActiveMessageSessions_Request)
  return target;
}

size_t CFriendsMessages_GetActiveMessageSessions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendsMessages_GetActiveMessageSessions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
  if (has_lastmessage_since()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastmessage_since());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendsMessages_GetActiveMessageSessions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendsMessages_GetActiveMessageSessions_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendsMessages_GetActiveMessageSessions_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendsMessages_GetActiveMessageSessions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendsMessages_GetActiveMessageSessions_Request)
    MergeFrom(*source);
  }
}

void CFriendsMessages_GetActiveMessageSessions_Request::MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lastmessage_since()) {
    set_lastmessage_since(from.lastmessage_since());
  }
}

void CFriendsMessages_GetActiveMessageSessions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendsMessages_GetActiveMessageSessions_Request::CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendsMessages_GetActiveMessageSessions_Request::IsInitialized() const {
  return true;
}

void CFriendsMessages_GetActiveMessageSessions_Request::Swap(CFriendsMessages_GetActiveMessageSessions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendsMessages_GetActiveMessageSessions_Request::InternalSwap(CFriendsMessages_GetActiveMessageSessions_Request* other) {
  using std::swap;
  swap(lastmessage_since_, other->lastmessage_since_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendsMessages_GetActiveMessageSessions_Request::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::kAccountidFriendFieldNumber;
const int CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::kLastMessageFieldNumber;
const int CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::kLastViewFieldNumber;
const int CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::kUnreadMessageCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
}
CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_friend_, &from.accountid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_message_count_) -
    reinterpret_cast<char*>(&accountid_friend_)) + sizeof(unread_message_count_));
  // @@protoc_insertion_point(copy_constructor:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SharedCtor() {
  ::memset(&accountid_friend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_message_count_) -
      reinterpret_cast<char*>(&accountid_friend_)) + sizeof(unread_message_count_));
}

CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::~CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() {
  // @@protoc_insertion_point(destructor:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  SharedDtor();
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SharedDtor() {
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.base);
  return *internal_default_instance();
}


void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&accountid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_message_count_) -
        reinterpret_cast<char*>(&accountid_friend_)) + sizeof(unread_message_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid_friend = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_view = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_view();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unread_message_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unread_message_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_message_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  return false;
#undef DO_
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid_friend(), output);
  }

  // optional uint32 last_message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_message(), output);
  }

  // optional uint32 last_view = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_view(), output);
  }

  // optional uint32 unread_message_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unread_message_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
}

::google::protobuf::uint8* CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid_friend(), target);
  }

  // optional uint32 last_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_message(), target);
  }

  // optional uint32 last_view = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_view(), target);
  }

  // optional uint32 unread_message_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unread_message_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  return target;
}

size_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 accountid_friend = 1;
    if (has_accountid_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid_friend());
    }

    // optional uint32 last_message = 2;
    if (has_last_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_message());
    }

    // optional uint32 last_view = 3;
    if (has_last_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_view());
    }

    // optional uint32 unread_message_count = 4;
    if (has_unread_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unread_message_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
    MergeFrom(*source);
  }
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_friend_ = from.accountid_friend_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_message_ = from.last_message_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_view_ = from.last_view_;
    }
    if (cached_has_bits & 0x00000008u) {
      unread_message_count_ = from.unread_message_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::IsInitialized() const {
  return true;
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::Swap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other) {
  using std::swap;
  swap(accountid_friend_, other->accountid_friend_);
  swap(last_message_, other->last_message_);
  swap(last_view_, other->last_view_);
  swap(unread_message_count_, other->unread_message_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendsMessages_GetActiveMessageSessions_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendsMessages_GetActiveMessageSessions_Response::kMessageSessionsFieldNumber;
const int CFriendsMessages_GetActiveMessageSessions_Response::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendsMessages_GetActiveMessageSessions_Response::CFriendsMessages_GetActiveMessageSessions_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendsMessages_GetActiveMessageSessions_Response)
}
CFriendsMessages_GetActiveMessageSessions_Response::CFriendsMessages_GetActiveMessageSessions_Response(const CFriendsMessages_GetActiveMessageSessions_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      message_sessions_(from.message_sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:CFriendsMessages_GetActiveMessageSessions_Response)
}

void CFriendsMessages_GetActiveMessageSessions_Response::SharedCtor() {
  timestamp_ = 0u;
}

CFriendsMessages_GetActiveMessageSessions_Response::~CFriendsMessages_GetActiveMessageSessions_Response() {
  // @@protoc_insertion_point(destructor:CFriendsMessages_GetActiveMessageSessions_Response)
  SharedDtor();
}

void CFriendsMessages_GetActiveMessageSessions_Response::SharedDtor() {
}

void CFriendsMessages_GetActiveMessageSessions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendsMessages_GetActiveMessageSessions_Response::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendsMessages_GetActiveMessageSessions_Response& CFriendsMessages_GetActiveMessageSessions_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendsMessages_GetActiveMessageSessions_Response.base);
  return *internal_default_instance();
}


void CFriendsMessages_GetActiveMessageSessions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendsMessages_GetActiveMessageSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_sessions_.Clear();
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendsMessages_GetActiveMessageSessions_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendsMessages_GetActiveMessageSessions_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_message_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendsMessages_GetActiveMessageSessions_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendsMessages_GetActiveMessageSessions_Response)
  return false;
#undef DO_
}

void CFriendsMessages_GetActiveMessageSessions_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendsMessages_GetActiveMessageSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->message_sessions(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendsMessages_GetActiveMessageSessions_Response)
}

::google::protobuf::uint8* CFriendsMessages_GetActiveMessageSessions_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendsMessages_GetActiveMessageSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->message_sessions(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendsMessages_GetActiveMessageSessions_Response)
  return target;
}

size_t CFriendsMessages_GetActiveMessageSessions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendsMessages_GetActiveMessageSessions_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->message_sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->message_sessions(static_cast<int>(i)));
    }
  }

  // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendsMessages_GetActiveMessageSessions_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendsMessages_GetActiveMessageSessions_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendsMessages_GetActiveMessageSessions_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendsMessages_GetActiveMessageSessions_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendsMessages_GetActiveMessageSessions_Response)
    MergeFrom(*source);
  }
}

void CFriendsMessages_GetActiveMessageSessions_Response::MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_sessions_.MergeFrom(from.message_sessions_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void CFriendsMessages_GetActiveMessageSessions_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendsMessages_GetActiveMessageSessions_Response::CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendsMessages_GetActiveMessageSessions_Response::IsInitialized() const {
  return true;
}

void CFriendsMessages_GetActiveMessageSessions_Response::Swap(CFriendsMessages_GetActiveMessageSessions_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendsMessages_GetActiveMessageSessions_Response::InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response* other) {
  using std::swap;
  CastToBase(&message_sessions_)->InternalSwap(CastToBase(&other->message_sessions_));
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendsMessages_GetActiveMessageSessions_Response::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_SendMessage_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_SendMessage_Request::kSteamidFieldNumber;
const int CFriendMessages_SendMessage_Request::kChatEntryTypeFieldNumber;
const int CFriendMessages_SendMessage_Request::kMessageFieldNumber;
const int CFriendMessages_SendMessage_Request::kContainsBbcodeFieldNumber;
const int CFriendMessages_SendMessage_Request::kEchoToSenderFieldNumber;
const int CFriendMessages_SendMessage_Request::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_SendMessage_Request::CFriendMessages_SendMessage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_SendMessage_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_SendMessage_Request)
}
CFriendMessages_SendMessage_Request::CFriendMessages_SendMessage_Request(const CFriendMessages_SendMessage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_SendMessage_Request)
}

void CFriendMessages_SendMessage_Request::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(low_priority_));
}

CFriendMessages_SendMessage_Request::~CFriendMessages_SendMessage_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_SendMessage_Request)
  SharedDtor();
}

void CFriendMessages_SendMessage_Request::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_SendMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_SendMessage_Request::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_SendMessage_Request& CFriendMessages_SendMessage_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_SendMessage_Request.base);
  return *internal_default_instance();
}


void CFriendMessages_SendMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_SendMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_SendMessage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_SendMessage_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_entry_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CFriendMessages_SendMessage_Request.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool contains_bbcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_contains_bbcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_bbcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool echo_to_sender = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_echo_to_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &echo_to_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_SendMessage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_SendMessage_Request)
  return false;
#undef DO_
}

void CFriendMessages_SendMessage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_SendMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Request.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional bool contains_bbcode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->contains_bbcode(), output);
  }

  // optional bool echo_to_sender = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->echo_to_sender(), output);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_SendMessage_Request)
}

::google::protobuf::uint8* CFriendMessages_SendMessage_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_SendMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Request.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional bool contains_bbcode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->contains_bbcode(), target);
  }

  // optional bool echo_to_sender = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->echo_to_sender(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_SendMessage_Request)
  return target;
}

size_t CFriendMessages_SendMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_SendMessage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bool contains_bbcode = 4;
    if (has_contains_bbcode()) {
      total_size += 1 + 1;
    }

    // optional bool echo_to_sender = 5;
    if (has_echo_to_sender()) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_SendMessage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_SendMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_SendMessage_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_SendMessage_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_SendMessage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_SendMessage_Request)
    MergeFrom(*source);
  }
}

void CFriendMessages_SendMessage_Request::MergeFrom(const CFriendMessages_SendMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_SendMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      contains_bbcode_ = from.contains_bbcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      echo_to_sender_ = from.echo_to_sender_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFriendMessages_SendMessage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_SendMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_SendMessage_Request::CopyFrom(const CFriendMessages_SendMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_SendMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_SendMessage_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_SendMessage_Request::Swap(CFriendMessages_SendMessage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_SendMessage_Request::InternalSwap(CFriendMessages_SendMessage_Request* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(chat_entry_type_, other->chat_entry_type_);
  swap(contains_bbcode_, other->contains_bbcode_);
  swap(echo_to_sender_, other->echo_to_sender_);
  swap(low_priority_, other->low_priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_SendMessage_Request::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_SendMessage_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_SendMessage_Response::kModifiedMessageFieldNumber;
const int CFriendMessages_SendMessage_Response::kServerTimestampFieldNumber;
const int CFriendMessages_SendMessage_Response::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_SendMessage_Response::CFriendMessages_SendMessage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_SendMessage_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_SendMessage_Response)
}
CFriendMessages_SendMessage_Response::CFriendMessages_SendMessage_Response(const CFriendMessages_SendMessage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modified_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modified_message()) {
    modified_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_message_);
  }
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_SendMessage_Response)
}

void CFriendMessages_SendMessage_Response::SharedCtor() {
  modified_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
}

CFriendMessages_SendMessage_Response::~CFriendMessages_SendMessage_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_SendMessage_Response)
  SharedDtor();
}

void CFriendMessages_SendMessage_Response::SharedDtor() {
  modified_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_SendMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_SendMessage_Response::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_SendMessage_Response& CFriendMessages_SendMessage_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_SendMessage_Response.base);
  return *internal_default_instance();
}


void CFriendMessages_SendMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_SendMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    modified_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_SendMessage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_SendMessage_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string modified_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modified_message().data(), static_cast<int>(this->modified_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CFriendMessages_SendMessage_Response.modified_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_SendMessage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_SendMessage_Response)
  return false;
#undef DO_
}

void CFriendMessages_SendMessage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_SendMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string modified_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modified_message().data(), static_cast<int>(this->modified_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Response.modified_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modified_message(), output);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_timestamp(), output);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_SendMessage_Response)
}

::google::protobuf::uint8* CFriendMessages_SendMessage_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_SendMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string modified_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modified_message().data(), static_cast<int>(this->modified_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Response.modified_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modified_message(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_timestamp(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_SendMessage_Response)
  return target;
}

size_t CFriendMessages_SendMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_SendMessage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string modified_message = 1;
    if (has_modified_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modified_message());
    }

    // optional uint32 server_timestamp = 2;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_timestamp());
    }

    // optional uint32 ordinal = 3;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_SendMessage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_SendMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_SendMessage_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_SendMessage_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_SendMessage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_SendMessage_Response)
    MergeFrom(*source);
  }
}

void CFriendMessages_SendMessage_Response::MergeFrom(const CFriendMessages_SendMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_SendMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_modified_message();
      modified_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFriendMessages_SendMessage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_SendMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_SendMessage_Response::CopyFrom(const CFriendMessages_SendMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_SendMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_SendMessage_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_SendMessage_Response::Swap(CFriendMessages_SendMessage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_SendMessage_Response::InternalSwap(CFriendMessages_SendMessage_Response* other) {
  using std::swap;
  modified_message_.Swap(&other->modified_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_timestamp_, other->server_timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_SendMessage_Response::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_AckMessage_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_AckMessage_Notification::kSteamidPartnerFieldNumber;
const int CFriendMessages_AckMessage_Notification::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_AckMessage_Notification::CFriendMessages_AckMessage_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_AckMessage_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_AckMessage_Notification)
}
CFriendMessages_AckMessage_Notification::CFriendMessages_AckMessage_Notification(const CFriendMessages_AckMessage_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_partner_, &from.steamid_partner_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&steamid_partner_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_AckMessage_Notification)
}

void CFriendMessages_AckMessage_Notification::SharedCtor() {
  ::memset(&steamid_partner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&steamid_partner_)) + sizeof(timestamp_));
}

CFriendMessages_AckMessage_Notification::~CFriendMessages_AckMessage_Notification() {
  // @@protoc_insertion_point(destructor:CFriendMessages_AckMessage_Notification)
  SharedDtor();
}

void CFriendMessages_AckMessage_Notification::SharedDtor() {
}

void CFriendMessages_AckMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_AckMessage_Notification::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_AckMessage_Notification& CFriendMessages_AckMessage_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_AckMessage_Notification.base);
  return *internal_default_instance();
}


void CFriendMessages_AckMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_AckMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steamid_partner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&steamid_partner_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_AckMessage_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_AckMessage_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_partner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid_partner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_partner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_AckMessage_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_AckMessage_Notification)
  return false;
#undef DO_
}

void CFriendMessages_AckMessage_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_AckMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_partner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_partner(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_AckMessage_Notification)
}

::google::protobuf::uint8* CFriendMessages_AckMessage_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_AckMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_partner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_partner(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_AckMessage_Notification)
  return target;
}

size_t CFriendMessages_AckMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_AckMessage_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid_partner = 1;
    if (has_steamid_partner()) {
      total_size += 1 + 8;
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_AckMessage_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_AckMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_AckMessage_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_AckMessage_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_AckMessage_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_AckMessage_Notification)
    MergeFrom(*source);
  }
}

void CFriendMessages_AckMessage_Notification::MergeFrom(const CFriendMessages_AckMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_AckMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_partner_ = from.steamid_partner_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFriendMessages_AckMessage_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_AckMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_AckMessage_Notification::CopyFrom(const CFriendMessages_AckMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_AckMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_AckMessage_Notification::IsInitialized() const {
  return true;
}

void CFriendMessages_AckMessage_Notification::Swap(CFriendMessages_AckMessage_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_AckMessage_Notification::InternalSwap(CFriendMessages_AckMessage_Notification* other) {
  using std::swap;
  swap(steamid_partner_, other->steamid_partner_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_AckMessage_Notification::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_IsInFriendsUIBeta_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_IsInFriendsUIBeta_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_IsInFriendsUIBeta_Request::CFriendMessages_IsInFriendsUIBeta_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_IsInFriendsUIBeta_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_IsInFriendsUIBeta_Request)
}
CFriendMessages_IsInFriendsUIBeta_Request::CFriendMessages_IsInFriendsUIBeta_Request(const CFriendMessages_IsInFriendsUIBeta_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_IsInFriendsUIBeta_Request)
}

void CFriendMessages_IsInFriendsUIBeta_Request::SharedCtor() {
  steamid_ = GOOGLE_ULONGLONG(0);
}

CFriendMessages_IsInFriendsUIBeta_Request::~CFriendMessages_IsInFriendsUIBeta_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_IsInFriendsUIBeta_Request)
  SharedDtor();
}

void CFriendMessages_IsInFriendsUIBeta_Request::SharedDtor() {
}

void CFriendMessages_IsInFriendsUIBeta_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_IsInFriendsUIBeta_Request::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_IsInFriendsUIBeta_Request& CFriendMessages_IsInFriendsUIBeta_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_IsInFriendsUIBeta_Request.base);
  return *internal_default_instance();
}


void CFriendMessages_IsInFriendsUIBeta_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_IsInFriendsUIBeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_IsInFriendsUIBeta_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_IsInFriendsUIBeta_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_IsInFriendsUIBeta_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_IsInFriendsUIBeta_Request)
  return false;
#undef DO_
}

void CFriendMessages_IsInFriendsUIBeta_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_IsInFriendsUIBeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_IsInFriendsUIBeta_Request)
}

::google::protobuf::uint8* CFriendMessages_IsInFriendsUIBeta_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_IsInFriendsUIBeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_IsInFriendsUIBeta_Request)
  return target;
}

size_t CFriendMessages_IsInFriendsUIBeta_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_IsInFriendsUIBeta_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_IsInFriendsUIBeta_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_IsInFriendsUIBeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_IsInFriendsUIBeta_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_IsInFriendsUIBeta_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_IsInFriendsUIBeta_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_IsInFriendsUIBeta_Request)
    MergeFrom(*source);
  }
}

void CFriendMessages_IsInFriendsUIBeta_Request::MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_IsInFriendsUIBeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CFriendMessages_IsInFriendsUIBeta_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_IsInFriendsUIBeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_IsInFriendsUIBeta_Request::CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_IsInFriendsUIBeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_IsInFriendsUIBeta_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_IsInFriendsUIBeta_Request::Swap(CFriendMessages_IsInFriendsUIBeta_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_IsInFriendsUIBeta_Request::InternalSwap(CFriendMessages_IsInFriendsUIBeta_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_IsInFriendsUIBeta_Request::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_IsInFriendsUIBeta_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_IsInFriendsUIBeta_Response::kOnlineInFriendsuiFieldNumber;
const int CFriendMessages_IsInFriendsUIBeta_Response::kHasUsedFriendsuiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_IsInFriendsUIBeta_Response::CFriendMessages_IsInFriendsUIBeta_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_IsInFriendsUIBeta_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_IsInFriendsUIBeta_Response)
}
CFriendMessages_IsInFriendsUIBeta_Response::CFriendMessages_IsInFriendsUIBeta_Response(const CFriendMessages_IsInFriendsUIBeta_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&online_in_friendsui_, &from.online_in_friendsui_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_used_friendsui_) -
    reinterpret_cast<char*>(&online_in_friendsui_)) + sizeof(has_used_friendsui_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_IsInFriendsUIBeta_Response)
}

void CFriendMessages_IsInFriendsUIBeta_Response::SharedCtor() {
  ::memset(&online_in_friendsui_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_used_friendsui_) -
      reinterpret_cast<char*>(&online_in_friendsui_)) + sizeof(has_used_friendsui_));
}

CFriendMessages_IsInFriendsUIBeta_Response::~CFriendMessages_IsInFriendsUIBeta_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_IsInFriendsUIBeta_Response)
  SharedDtor();
}

void CFriendMessages_IsInFriendsUIBeta_Response::SharedDtor() {
}

void CFriendMessages_IsInFriendsUIBeta_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_IsInFriendsUIBeta_Response::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_IsInFriendsUIBeta_Response& CFriendMessages_IsInFriendsUIBeta_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_IsInFriendsUIBeta_Response.base);
  return *internal_default_instance();
}


void CFriendMessages_IsInFriendsUIBeta_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_IsInFriendsUIBeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&online_in_friendsui_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_used_friendsui_) -
      reinterpret_cast<char*>(&online_in_friendsui_)) + sizeof(has_used_friendsui_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_IsInFriendsUIBeta_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_IsInFriendsUIBeta_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool online_in_friendsui = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_online_in_friendsui();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_in_friendsui_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_used_friendsui = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_has_used_friendsui();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_used_friendsui_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_IsInFriendsUIBeta_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_IsInFriendsUIBeta_Response)
  return false;
#undef DO_
}

void CFriendMessages_IsInFriendsUIBeta_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_IsInFriendsUIBeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool online_in_friendsui = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->online_in_friendsui(), output);
  }

  // optional bool has_used_friendsui = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_used_friendsui(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_IsInFriendsUIBeta_Response)
}

::google::protobuf::uint8* CFriendMessages_IsInFriendsUIBeta_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_IsInFriendsUIBeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool online_in_friendsui = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->online_in_friendsui(), target);
  }

  // optional bool has_used_friendsui = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_used_friendsui(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_IsInFriendsUIBeta_Response)
  return target;
}

size_t CFriendMessages_IsInFriendsUIBeta_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_IsInFriendsUIBeta_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool online_in_friendsui = 1;
    if (has_online_in_friendsui()) {
      total_size += 1 + 1;
    }

    // optional bool has_used_friendsui = 2;
    if (has_has_used_friendsui()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_IsInFriendsUIBeta_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_IsInFriendsUIBeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_IsInFriendsUIBeta_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_IsInFriendsUIBeta_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_IsInFriendsUIBeta_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_IsInFriendsUIBeta_Response)
    MergeFrom(*source);
  }
}

void CFriendMessages_IsInFriendsUIBeta_Response::MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_IsInFriendsUIBeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      online_in_friendsui_ = from.online_in_friendsui_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_used_friendsui_ = from.has_used_friendsui_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFriendMessages_IsInFriendsUIBeta_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_IsInFriendsUIBeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_IsInFriendsUIBeta_Response::CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_IsInFriendsUIBeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_IsInFriendsUIBeta_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_IsInFriendsUIBeta_Response::Swap(CFriendMessages_IsInFriendsUIBeta_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_IsInFriendsUIBeta_Response::InternalSwap(CFriendMessages_IsInFriendsUIBeta_Response* other) {
  using std::swap;
  swap(online_in_friendsui_, other->online_in_friendsui_);
  swap(has_used_friendsui_, other->has_used_friendsui_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_IsInFriendsUIBeta_Response::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFriendMessages_IncomingMessage_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFriendMessages_IncomingMessage_Notification::kSteamidFriendFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kChatEntryTypeFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kFromLimitedAccountFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kMessageFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kRtime32ServerTimestampFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kOrdinalFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kLocalEchoFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kMessageNoBbcodeFieldNumber;
const int CFriendMessages_IncomingMessage_Notification::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFriendMessages_IncomingMessage_Notification::CFriendMessages_IncomingMessage_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_IncomingMessage_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFriendMessages_IncomingMessage_Notification)
}
CFriendMessages_IncomingMessage_Notification::CFriendMessages_IncomingMessage_Notification(const CFriendMessages_IncomingMessage_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  message_no_bbcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_no_bbcode()) {
    message_no_bbcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_no_bbcode_);
  }
  ::memcpy(&steamid_friend_, &from.steamid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_IncomingMessage_Notification)
}

void CFriendMessages_IncomingMessage_Notification::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_no_bbcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_friend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&steamid_friend_)) + sizeof(low_priority_));
}

CFriendMessages_IncomingMessage_Notification::~CFriendMessages_IncomingMessage_Notification() {
  // @@protoc_insertion_point(destructor:CFriendMessages_IncomingMessage_Notification)
  SharedDtor();
}

void CFriendMessages_IncomingMessage_Notification::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_no_bbcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_IncomingMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFriendMessages_IncomingMessage_Notification::descriptor() {
  ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFriendMessages_IncomingMessage_Notification& CFriendMessages_IncomingMessage_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::scc_info_CFriendMessages_IncomingMessage_Notification.base);
  return *internal_default_instance();
}


void CFriendMessages_IncomingMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_IncomingMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_no_bbcode_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&steamid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_echo_) -
        reinterpret_cast<char*>(&steamid_friend_)) + sizeof(local_echo_));
  }
  low_priority_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFriendMessages_IncomingMessage_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFriendMessages_IncomingMessage_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_friend = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_entry_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_limited_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_from_limited_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_limited_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CFriendMessages_IncomingMessage_Notification.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rtime32_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool local_echo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_local_echo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_echo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_no_bbcode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_no_bbcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_no_bbcode().data(), static_cast<int>(this->message_no_bbcode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CFriendMessages_IncomingMessage_Notification.message_no_bbcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFriendMessages_IncomingMessage_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFriendMessages_IncomingMessage_Notification)
  return false;
#undef DO_
}

void CFriendMessages_IncomingMessage_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFriendMessages_IncomingMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_friend(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_limited_account(), output);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_IncomingMessage_Notification.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_timestamp(), output);
  }

  // optional uint32 ordinal = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ordinal(), output);
  }

  // optional bool local_echo = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->local_echo(), output);
  }

  // optional string message_no_bbcode = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_no_bbcode().data(), static_cast<int>(this->message_no_bbcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_IncomingMessage_Notification.message_no_bbcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->message_no_bbcode(), output);
  }

  // optional bool low_priority = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFriendMessages_IncomingMessage_Notification)
}

::google::protobuf::uint8* CFriendMessages_IncomingMessage_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_IncomingMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_friend(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_limited_account(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_IncomingMessage_Notification.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_timestamp(), target);
  }

  // optional uint32 ordinal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ordinal(), target);
  }

  // optional bool local_echo = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->local_echo(), target);
  }

  // optional string message_no_bbcode = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_no_bbcode().data(), static_cast<int>(this->message_no_bbcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFriendMessages_IncomingMessage_Notification.message_no_bbcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->message_no_bbcode(), target);
  }

  // optional bool low_priority = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_IncomingMessage_Notification)
  return target;
}

size_t CFriendMessages_IncomingMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_IncomingMessage_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string message_no_bbcode = 8;
    if (has_message_no_bbcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_no_bbcode());
    }

    // optional fixed64 steamid_friend = 1;
    if (has_steamid_friend()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional fixed32 rtime32_server_timestamp = 5;
    if (has_rtime32_server_timestamp()) {
      total_size += 1 + 4;
    }

    // optional uint32 ordinal = 6;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

    // optional bool from_limited_account = 3;
    if (has_from_limited_account()) {
      total_size += 1 + 1;
    }

    // optional bool local_echo = 7;
    if (has_local_echo()) {
      total_size += 1 + 1;
    }

  }
  // optional bool low_priority = 9;
  if (has_low_priority()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFriendMessages_IncomingMessage_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFriendMessages_IncomingMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CFriendMessages_IncomingMessage_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFriendMessages_IncomingMessage_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFriendMessages_IncomingMessage_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFriendMessages_IncomingMessage_Notification)
    MergeFrom(*source);
  }
}

void CFriendMessages_IncomingMessage_Notification::MergeFrom(const CFriendMessages_IncomingMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_IncomingMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_no_bbcode();
      message_no_bbcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_no_bbcode_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_friend_ = from.steamid_friend_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000040u) {
      from_limited_account_ = from.from_limited_account_;
    }
    if (cached_has_bits & 0x00000080u) {
      local_echo_ = from.local_echo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_low_priority(from.low_priority());
  }
}

void CFriendMessages_IncomingMessage_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFriendMessages_IncomingMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFriendMessages_IncomingMessage_Notification::CopyFrom(const CFriendMessages_IncomingMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_IncomingMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_IncomingMessage_Notification::IsInitialized() const {
  return true;
}

void CFriendMessages_IncomingMessage_Notification::Swap(CFriendMessages_IncomingMessage_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFriendMessages_IncomingMessage_Notification::InternalSwap(CFriendMessages_IncomingMessage_Notification* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_no_bbcode_.Swap(&other->message_no_bbcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_friend_, other->steamid_friend_);
  swap(chat_entry_type_, other->chat_entry_type_);
  swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(from_limited_account_, other->from_limited_account_);
  swap(local_echo_, other->local_echo_);
  swap(low_priority_, other->low_priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFriendMessages_IncomingMessage_Notification::GetMetadata() const {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

FriendMessages::~FriendMessages() {}

const ::google::protobuf::ServiceDescriptor* FriendMessages::descriptor() {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* FriendMessages::GetDescriptor() {
  return descriptor();
}

void FriendMessages::GetRecentMessages(::google::protobuf::RpcController* controller,
                         const ::CFriendMessages_GetRecentMessages_Request*,
                         ::CFriendMessages_GetRecentMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRecentMessages() not implemented.");
  done->Run();
}

void FriendMessages::GetActiveMessageSessions(::google::protobuf::RpcController* controller,
                         const ::CFriendsMessages_GetActiveMessageSessions_Request*,
                         ::CFriendsMessages_GetActiveMessageSessions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetActiveMessageSessions() not implemented.");
  done->Run();
}

void FriendMessages::SendMessage(::google::protobuf::RpcController* controller,
                         const ::CFriendMessages_SendMessage_Request*,
                         ::CFriendMessages_SendMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMessage() not implemented.");
  done->Run();
}

void FriendMessages::AckMessage(::google::protobuf::RpcController* controller,
                         const ::CFriendMessages_AckMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AckMessage() not implemented.");
  done->Run();
}

void FriendMessages::IsInFriendsUIBeta(::google::protobuf::RpcController* controller,
                         const ::CFriendMessages_IsInFriendsUIBeta_Request*,
                         ::CFriendMessages_IsInFriendsUIBeta_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsInFriendsUIBeta() not implemented.");
  done->Run();
}

void FriendMessages::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetRecentMessages(controller,
             ::google::protobuf::down_cast<const ::CFriendMessages_GetRecentMessages_Request*>(request),
             ::google::protobuf::down_cast< ::CFriendMessages_GetRecentMessages_Response*>(response),
             done);
      break;
    case 1:
      GetActiveMessageSessions(controller,
             ::google::protobuf::down_cast<const ::CFriendsMessages_GetActiveMessageSessions_Request*>(request),
             ::google::protobuf::down_cast< ::CFriendsMessages_GetActiveMessageSessions_Response*>(response),
             done);
      break;
    case 2:
      SendMessage(controller,
             ::google::protobuf::down_cast<const ::CFriendMessages_SendMessage_Request*>(request),
             ::google::protobuf::down_cast< ::CFriendMessages_SendMessage_Response*>(response),
             done);
      break;
    case 3:
      AckMessage(controller,
             ::google::protobuf::down_cast<const ::CFriendMessages_AckMessage_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 4:
      IsInFriendsUIBeta(controller,
             ::google::protobuf::down_cast<const ::CFriendMessages_IsInFriendsUIBeta_Request*>(request),
             ::google::protobuf::down_cast< ::CFriendMessages_IsInFriendsUIBeta_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendMessages::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFriendMessages_GetRecentMessages_Request::default_instance();
    case 1:
      return ::CFriendsMessages_GetActiveMessageSessions_Request::default_instance();
    case 2:
      return ::CFriendMessages_SendMessage_Request::default_instance();
    case 3:
      return ::CFriendMessages_AckMessage_Notification::default_instance();
    case 4:
      return ::CFriendMessages_IsInFriendsUIBeta_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FriendMessages::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFriendMessages_GetRecentMessages_Response::default_instance();
    case 1:
      return ::CFriendsMessages_GetActiveMessageSessions_Response::default_instance();
    case 2:
      return ::CFriendMessages_SendMessage_Response::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::CFriendMessages_IsInFriendsUIBeta_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendMessages_Stub::FriendMessages_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendMessages_Stub::FriendMessages_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendMessages_Stub::~FriendMessages_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendMessages_Stub::GetRecentMessages(::google::protobuf::RpcController* controller,
                              const ::CFriendMessages_GetRecentMessages_Request* request,
                              ::CFriendMessages_GetRecentMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendMessages_Stub::GetActiveMessageSessions(::google::protobuf::RpcController* controller,
                              const ::CFriendsMessages_GetActiveMessageSessions_Request* request,
                              ::CFriendsMessages_GetActiveMessageSessions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendMessages_Stub::SendMessage(::google::protobuf::RpcController* controller,
                              const ::CFriendMessages_SendMessage_Request* request,
                              ::CFriendMessages_SendMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendMessages_Stub::AckMessage(::google::protobuf::RpcController* controller,
                              const ::CFriendMessages_AckMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendMessages_Stub::IsInFriendsUIBeta(::google::protobuf::RpcController* controller,
                              const ::CFriendMessages_IsInFriendsUIBeta_Request* request,
                              ::CFriendMessages_IsInFriendsUIBeta_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

FriendMessagesClient::~FriendMessagesClient() {}

const ::google::protobuf::ServiceDescriptor* FriendMessagesClient::descriptor() {
  protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* FriendMessagesClient::GetDescriptor() {
  return descriptor();
}

void FriendMessagesClient::IncomingMessage(::google::protobuf::RpcController* controller,
                         const ::CFriendMessages_IncomingMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IncomingMessage() not implemented.");
  done->Run();
}

void FriendMessagesClient::NotifyAckMessageEcho(::google::protobuf::RpcController* controller,
                         const ::CFriendMessages_AckMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAckMessageEcho() not implemented.");
  done->Run();
}

void FriendMessagesClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5ffriendmessages_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      IncomingMessage(controller,
             ::google::protobuf::down_cast<const ::CFriendMessages_IncomingMessage_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 1:
      NotifyAckMessageEcho(controller,
             ::google::protobuf::down_cast<const ::CFriendMessages_AckMessage_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendMessagesClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFriendMessages_IncomingMessage_Notification::default_instance();
    case 1:
      return ::CFriendMessages_AckMessage_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FriendMessagesClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendMessagesClient_Stub::FriendMessagesClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendMessagesClient_Stub::FriendMessagesClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendMessagesClient_Stub::~FriendMessagesClient_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendMessagesClient_Stub::IncomingMessage(::google::protobuf::RpcController* controller,
                              const ::CFriendMessages_IncomingMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendMessagesClient_Stub::NotifyAckMessageEcho(::google::protobuf::RpcController* controller,
                              const ::CFriendMessages_AckMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_GetRecentMessages_Request* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_GetRecentMessages_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_GetRecentMessages_Response_FriendMessage* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_GetRecentMessages_Response* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_GetRecentMessages_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendsMessages_GetActiveMessageSessions_Request* Arena::CreateMaybeMessage< ::CFriendsMessages_GetActiveMessageSessions_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendsMessages_GetActiveMessageSessions_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* Arena::CreateMaybeMessage< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendsMessages_GetActiveMessageSessions_Response* Arena::CreateMaybeMessage< ::CFriendsMessages_GetActiveMessageSessions_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendsMessages_GetActiveMessageSessions_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_SendMessage_Request* Arena::CreateMaybeMessage< ::CFriendMessages_SendMessage_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_SendMessage_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_SendMessage_Response* Arena::CreateMaybeMessage< ::CFriendMessages_SendMessage_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_SendMessage_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_AckMessage_Notification* Arena::CreateMaybeMessage< ::CFriendMessages_AckMessage_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_AckMessage_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_IsInFriendsUIBeta_Request* Arena::CreateMaybeMessage< ::CFriendMessages_IsInFriendsUIBeta_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_IsInFriendsUIBeta_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_IsInFriendsUIBeta_Response* Arena::CreateMaybeMessage< ::CFriendMessages_IsInFriendsUIBeta_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_IsInFriendsUIBeta_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFriendMessages_IncomingMessage_Notification* Arena::CreateMaybeMessage< ::CFriendMessages_IncomingMessage_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CFriendMessages_IncomingMessage_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
