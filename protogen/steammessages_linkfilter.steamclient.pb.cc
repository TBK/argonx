// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_linkfilter.steamclient.proto

#include "steammessages_linkfilter.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetLinkFilterHashPrefixes_Request>
      _instance;
} _CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_;
class CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetLinkFilterHashPrefixes_Response>
      _instance;
} _CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_;
class CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetLinkFilterHashes_Request>
      _instance;
} _CCommunity_GetLinkFilterHashes_Request_default_instance_;
class CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetLinkFilterHashes_Response>
      _instance;
} _CCommunity_GetLinkFilterHashes_Response_default_instance_;
class CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetLinkFilterListVersion_Request>
      _instance;
} _CCommunity_GetLinkFilterListVersion_Request_default_instance_;
class CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetLinkFilterListVersion_Response>
      _instance;
} _CCommunity_GetLinkFilterListVersion_Response_default_instance_;
namespace protobuf_steammessages_5flinkfilter_2esteamclient_2eproto {
static void InitDefaultsCCommunity_GetLinkFilterHashPrefixes_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_;
    new (ptr) ::CCommunity_GetLinkFilterHashPrefixes_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCommunity_GetLinkFilterHashPrefixes_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCommunity_GetLinkFilterHashPrefixes_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCommunity_GetLinkFilterHashPrefixes_Request}, {}};

static void InitDefaultsCCommunity_GetLinkFilterHashPrefixes_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_;
    new (ptr) ::CCommunity_GetLinkFilterHashPrefixes_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCommunity_GetLinkFilterHashPrefixes_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCommunity_GetLinkFilterHashPrefixes_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCommunity_GetLinkFilterHashPrefixes_Response}, {}};

static void InitDefaultsCCommunity_GetLinkFilterHashes_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCommunity_GetLinkFilterHashes_Request_default_instance_;
    new (ptr) ::CCommunity_GetLinkFilterHashes_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCommunity_GetLinkFilterHashes_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCommunity_GetLinkFilterHashes_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCommunity_GetLinkFilterHashes_Request}, {}};

static void InitDefaultsCCommunity_GetLinkFilterHashes_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCommunity_GetLinkFilterHashes_Response_default_instance_;
    new (ptr) ::CCommunity_GetLinkFilterHashes_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCommunity_GetLinkFilterHashes_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCommunity_GetLinkFilterHashes_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCommunity_GetLinkFilterHashes_Response}, {}};

static void InitDefaultsCCommunity_GetLinkFilterListVersion_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCommunity_GetLinkFilterListVersion_Request_default_instance_;
    new (ptr) ::CCommunity_GetLinkFilterListVersion_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCommunity_GetLinkFilterListVersion_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCommunity_GetLinkFilterListVersion_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCommunity_GetLinkFilterListVersion_Request}, {}};

static void InitDefaultsCCommunity_GetLinkFilterListVersion_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCommunity_GetLinkFilterListVersion_Response_default_instance_;
    new (ptr) ::CCommunity_GetLinkFilterListVersion_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCommunity_GetLinkFilterListVersion_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCommunity_GetLinkFilterListVersion_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCommunity_GetLinkFilterListVersion_Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CCommunity_GetLinkFilterHashPrefixes_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCommunity_GetLinkFilterHashPrefixes_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCommunity_GetLinkFilterHashes_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCommunity_GetLinkFilterHashes_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCommunity_GetLinkFilterListVersion_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCommunity_GetLinkFilterListVersion_Response.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, hit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, start_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Response, hash_prefixes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, hit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, start_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Response, hashes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Request, hit_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, count_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CCommunity_GetLinkFilterHashPrefixes_Request)},
  { 11, 17, sizeof(::CCommunity_GetLinkFilterHashPrefixes_Response)},
  { 18, 26, sizeof(::CCommunity_GetLinkFilterHashes_Request)},
  { 29, 35, sizeof(::CCommunity_GetLinkFilterHashes_Response)},
  { 36, 42, sizeof(::CCommunity_GetLinkFilterListVersion_Request)},
  { 43, 50, sizeof(::CCommunity_GetLinkFilterListVersion_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCommunity_GetLinkFilterHashes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCommunity_GetLinkFilterHashes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCommunity_GetLinkFilterListVersion_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCommunity_GetLinkFilterListVersion_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_linkfilter.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*steammessages_linkfilter.steamclient.p"
      "roto\032,steammessages_unified_base.steamcl"
      "ient.proto\"\235\002\n,CCommunity_GetLinkFilterH"
      "ashPrefixes_Request\022G\n\010hit_type\030\001 \001(\rB5\202"
      "\265\0301The retrieved hits will be filtered t"
      "o this type.\022\\\n\005count\030\002 \001(\rBM\202\265\030IThe num"
      "ber of hits to retrieve in a single batc"
      "h. Specify 0 for no limit.\022F\n\005start\030\003 \001("
      "\004B7\202\265\0303The starting count when retrievin"
      "g hits in batches.\"\207\001\n-CCommunity_GetLin"
      "kFilterHashPrefixes_Response\022V\n\rhash_pre"
      "fixes\030\001 \003(\rB\?\202\265\030;The first 32 bits of th"
      "e SHA1 hashes of each hit requested.\"\227\002\n"
      "&CCommunity_GetLinkFilterHashes_Request\022"
      "G\n\010hit_type\030\001 \001(\rB5\202\265\0301The retrieved hit"
      "s will be filtered to this type.\022\\\n\005coun"
      "t\030\002 \001(\rBM\202\265\030IThe number of hits to retri"
      "eve in a single batch. Specify 0 for no "
      "limit.\022F\n\005start\030\003 \001(\004B7\202\265\0303The starting "
      "count when retrieving hits in batches.\"j"
      "\n\'CCommunity_GetLinkFilterHashes_Respons"
      "e\022\?\n\006hashes\030\001 \003(\014B/\202\265\030+A list of hashes "
      "returned from our request.\"\200\001\n+CCommunit"
      "y_GetLinkFilterListVersion_Request\022Q\n\010hi"
      "t_type\030\001 \001(\rB\?\202\265\030;The version hashes for"
      " this type\'s chunks will be returned.\"\252\001"
      "\n,CCommunity_GetLinkFilterListVersion_Re"
      "sponse\022F\n\007version\030\001 \001(\tB5\202\265\0301A hash buil"
      "t using the IDs of the contained hits.\0222"
      "\n\005count\030\002 \001(\004B#\202\265\030\037The number of hits of"
      " this type2\306\005\n\023CommunityLinkFilter\022\322\001\n\031G"
      "etLinkFilterHashPrefixes\022-.CCommunity_Ge"
      "tLinkFilterHashPrefixes_Request\032..CCommu"
      "nity_GetLinkFilterHashPrefixes_Response\""
      "V\202\265\030RGet a list of hash prefixes for the"
      " specified hit type, to use for client c"
      "aching.\022\271\001\n\023GetLinkFilterHashes\022\'.CCommu"
      "nity_GetLinkFilterHashes_Request\032(.CComm"
      "unity_GetLinkFilterHashes_Response\"O\202\265\030K"
      "Get a list of hashes for the specified h"
      "it type, to use for client caching.\022\315\001\n\030"
      "GetLinkFilterListVersion\022,.CCommunity_Ge"
      "tLinkFilterListVersion_Request\032-.CCommun"
      "ity_GetLinkFilterListVersion_Response\"T\202"
      "\265\030PGet a list of hashes describing the v"
      "ersion of each chunk of the requested si"
      "ze.\032N\202\265\030JA service for recording data ab"
      "out Steam Community phishing link filter"
      "ingB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1928);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_linkfilter.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5flinkfilter_2esteamclient_2eproto

// ===================================================================

void CCommunity_GetLinkFilterHashPrefixes_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetLinkFilterHashPrefixes_Request::kHitTypeFieldNumber;
const int CCommunity_GetLinkFilterHashPrefixes_Request::kCountFieldNumber;
const int CCommunity_GetLinkFilterHashPrefixes_Request::kStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetLinkFilterHashPrefixes_Request::CCommunity_GetLinkFilterHashPrefixes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashPrefixes_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetLinkFilterHashPrefixes_Request)
}
CCommunity_GetLinkFilterHashPrefixes_Request::CCommunity_GetLinkFilterHashPrefixes_Request(const CCommunity_GetLinkFilterHashPrefixes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hit_type_, &from.hit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashPrefixes_Request)
}

void CCommunity_GetLinkFilterHashPrefixes_Request::SharedCtor() {
  ::memset(&hit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_) -
      reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
}

CCommunity_GetLinkFilterHashPrefixes_Request::~CCommunity_GetLinkFilterHashPrefixes_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashPrefixes_Request)
  SharedDtor();
}

void CCommunity_GetLinkFilterHashPrefixes_Request::SharedDtor() {
}

void CCommunity_GetLinkFilterHashPrefixes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCommunity_GetLinkFilterHashPrefixes_Request::descriptor() {
  ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCommunity_GetLinkFilterHashPrefixes_Request& CCommunity_GetLinkFilterHashPrefixes_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashPrefixes_Request.base);
  return *internal_default_instance();
}


void CCommunity_GetLinkFilterHashPrefixes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&hit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_) -
        reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetLinkFilterHashPrefixes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetLinkFilterHashPrefixes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetLinkFilterHashPrefixes_Request)
  return false;
#undef DO_
}

void CCommunity_GetLinkFilterHashPrefixes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hit_type(), output);
  }

  // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetLinkFilterHashPrefixes_Request)
}

::google::protobuf::uint8* CCommunity_GetLinkFilterHashPrefixes_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hit_type(), target);
  }

  // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashPrefixes_Request)
  return target;
}

size_t CCommunity_GetLinkFilterHashPrefixes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_type());
    }

    // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashPrefixes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashPrefixes_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetLinkFilterHashPrefixes_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashPrefixes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashPrefixes_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashPrefixes_Request::MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hit_type_ = from.hit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetLinkFilterHashPrefixes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashPrefixes_Request::CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashPrefixes_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashPrefixes_Request::Swap(CCommunity_GetLinkFilterHashPrefixes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetLinkFilterHashPrefixes_Request::InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Request* other) {
  using std::swap;
  swap(hit_type_, other->hit_type_);
  swap(count_, other->count_);
  swap(start_, other->start_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCommunity_GetLinkFilterHashPrefixes_Request::GetMetadata() const {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCommunity_GetLinkFilterHashPrefixes_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetLinkFilterHashPrefixes_Response::kHashPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetLinkFilterHashPrefixes_Response::CCommunity_GetLinkFilterHashPrefixes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashPrefixes_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetLinkFilterHashPrefixes_Response)
}
CCommunity_GetLinkFilterHashPrefixes_Response::CCommunity_GetLinkFilterHashPrefixes_Response(const CCommunity_GetLinkFilterHashPrefixes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hash_prefixes_(from.hash_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashPrefixes_Response)
}

void CCommunity_GetLinkFilterHashPrefixes_Response::SharedCtor() {
}

CCommunity_GetLinkFilterHashPrefixes_Response::~CCommunity_GetLinkFilterHashPrefixes_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashPrefixes_Response)
  SharedDtor();
}

void CCommunity_GetLinkFilterHashPrefixes_Response::SharedDtor() {
}

void CCommunity_GetLinkFilterHashPrefixes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCommunity_GetLinkFilterHashPrefixes_Response::descriptor() {
  ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCommunity_GetLinkFilterHashPrefixes_Response& CCommunity_GetLinkFilterHashPrefixes_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashPrefixes_Response.base);
  return *internal_default_instance();
}


void CCommunity_GetLinkFilterHashPrefixes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_prefixes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetLinkFilterHashPrefixes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hash_prefixes = 1 [(.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_hash_prefixes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hash_prefixes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetLinkFilterHashPrefixes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetLinkFilterHashPrefixes_Response)
  return false;
#undef DO_
}

void CCommunity_GetLinkFilterHashPrefixes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hash_prefixes = 1 [(.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
  for (int i = 0, n = this->hash_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hash_prefixes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetLinkFilterHashPrefixes_Response)
}

::google::protobuf::uint8* CCommunity_GetLinkFilterHashPrefixes_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hash_prefixes = 1 [(.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->hash_prefixes_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashPrefixes_Response)
  return target;
}

size_t CCommunity_GetLinkFilterHashPrefixes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 hash_prefixes = 1 [(.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hash_prefixes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hash_prefixes_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashPrefixes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashPrefixes_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetLinkFilterHashPrefixes_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashPrefixes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashPrefixes_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashPrefixes_Response::MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_prefixes_.MergeFrom(from.hash_prefixes_);
}

void CCommunity_GetLinkFilterHashPrefixes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashPrefixes_Response::CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashPrefixes_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashPrefixes_Response::Swap(CCommunity_GetLinkFilterHashPrefixes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetLinkFilterHashPrefixes_Response::InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Response* other) {
  using std::swap;
  hash_prefixes_.InternalSwap(&other->hash_prefixes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCommunity_GetLinkFilterHashPrefixes_Response::GetMetadata() const {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCommunity_GetLinkFilterHashes_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetLinkFilterHashes_Request::kHitTypeFieldNumber;
const int CCommunity_GetLinkFilterHashes_Request::kCountFieldNumber;
const int CCommunity_GetLinkFilterHashes_Request::kStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetLinkFilterHashes_Request::CCommunity_GetLinkFilterHashes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashes_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetLinkFilterHashes_Request)
}
CCommunity_GetLinkFilterHashes_Request::CCommunity_GetLinkFilterHashes_Request(const CCommunity_GetLinkFilterHashes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hit_type_, &from.hit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashes_Request)
}

void CCommunity_GetLinkFilterHashes_Request::SharedCtor() {
  ::memset(&hit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_) -
      reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
}

CCommunity_GetLinkFilterHashes_Request::~CCommunity_GetLinkFilterHashes_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashes_Request)
  SharedDtor();
}

void CCommunity_GetLinkFilterHashes_Request::SharedDtor() {
}

void CCommunity_GetLinkFilterHashes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCommunity_GetLinkFilterHashes_Request::descriptor() {
  ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCommunity_GetLinkFilterHashes_Request& CCommunity_GetLinkFilterHashes_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashes_Request.base);
  return *internal_default_instance();
}


void CCommunity_GetLinkFilterHashes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&hit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_) -
        reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetLinkFilterHashes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetLinkFilterHashes_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetLinkFilterHashes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetLinkFilterHashes_Request)
  return false;
#undef DO_
}

void CCommunity_GetLinkFilterHashes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetLinkFilterHashes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hit_type(), output);
  }

  // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetLinkFilterHashes_Request)
}

::google::protobuf::uint8* CCommunity_GetLinkFilterHashes_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hit_type(), target);
  }

  // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashes_Request)
  return target;
}

size_t CCommunity_GetLinkFilterHashes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_type());
    }

    // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashes_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetLinkFilterHashes_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashes_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashes_Request::MergeFrom(const CCommunity_GetLinkFilterHashes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hit_type_ = from.hit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetLinkFilterHashes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashes_Request::CopyFrom(const CCommunity_GetLinkFilterHashes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashes_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashes_Request::Swap(CCommunity_GetLinkFilterHashes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetLinkFilterHashes_Request::InternalSwap(CCommunity_GetLinkFilterHashes_Request* other) {
  using std::swap;
  swap(hit_type_, other->hit_type_);
  swap(count_, other->count_);
  swap(start_, other->start_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCommunity_GetLinkFilterHashes_Request::GetMetadata() const {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCommunity_GetLinkFilterHashes_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetLinkFilterHashes_Response::kHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetLinkFilterHashes_Response::CCommunity_GetLinkFilterHashes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashes_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetLinkFilterHashes_Response)
}
CCommunity_GetLinkFilterHashes_Response::CCommunity_GetLinkFilterHashes_Response(const CCommunity_GetLinkFilterHashes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashes_Response)
}

void CCommunity_GetLinkFilterHashes_Response::SharedCtor() {
}

CCommunity_GetLinkFilterHashes_Response::~CCommunity_GetLinkFilterHashes_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashes_Response)
  SharedDtor();
}

void CCommunity_GetLinkFilterHashes_Response::SharedDtor() {
}

void CCommunity_GetLinkFilterHashes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCommunity_GetLinkFilterHashes_Response::descriptor() {
  ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCommunity_GetLinkFilterHashes_Response& CCommunity_GetLinkFilterHashes_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterHashes_Response.base);
  return *internal_default_instance();
}


void CCommunity_GetLinkFilterHashes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetLinkFilterHashes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetLinkFilterHashes_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes hashes = 1 [(.description) = "A list of hashes returned from our request."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetLinkFilterHashes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetLinkFilterHashes_Response)
  return false;
#undef DO_
}

void CCommunity_GetLinkFilterHashes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetLinkFilterHashes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1 [(.description) = "A list of hashes returned from our request."];
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->hashes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetLinkFilterHashes_Response)
}

::google::protobuf::uint8* CCommunity_GetLinkFilterHashes_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1 [(.description) = "A list of hashes returned from our request."];
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->hashes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashes_Response)
  return target;
}

size_t CCommunity_GetLinkFilterHashes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes hashes = 1 [(.description) = "A list of hashes returned from our request."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hashes_size());
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hashes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashes_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetLinkFilterHashes_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashes_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashes_Response::MergeFrom(const CCommunity_GetLinkFilterHashes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
}

void CCommunity_GetLinkFilterHashes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashes_Response::CopyFrom(const CCommunity_GetLinkFilterHashes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashes_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashes_Response::Swap(CCommunity_GetLinkFilterHashes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetLinkFilterHashes_Response::InternalSwap(CCommunity_GetLinkFilterHashes_Response* other) {
  using std::swap;
  hashes_.InternalSwap(CastToBase(&other->hashes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCommunity_GetLinkFilterHashes_Response::GetMetadata() const {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCommunity_GetLinkFilterListVersion_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetLinkFilterListVersion_Request::kHitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetLinkFilterListVersion_Request::CCommunity_GetLinkFilterListVersion_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterListVersion_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetLinkFilterListVersion_Request)
}
CCommunity_GetLinkFilterListVersion_Request::CCommunity_GetLinkFilterListVersion_Request(const CCommunity_GetLinkFilterListVersion_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hit_type_ = from.hit_type_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterListVersion_Request)
}

void CCommunity_GetLinkFilterListVersion_Request::SharedCtor() {
  hit_type_ = 0u;
}

CCommunity_GetLinkFilterListVersion_Request::~CCommunity_GetLinkFilterListVersion_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterListVersion_Request)
  SharedDtor();
}

void CCommunity_GetLinkFilterListVersion_Request::SharedDtor() {
}

void CCommunity_GetLinkFilterListVersion_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCommunity_GetLinkFilterListVersion_Request::descriptor() {
  ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCommunity_GetLinkFilterListVersion_Request& CCommunity_GetLinkFilterListVersion_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterListVersion_Request.base);
  return *internal_default_instance();
}


void CCommunity_GetLinkFilterListVersion_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterListVersion_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetLinkFilterListVersion_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetLinkFilterListVersion_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hit_type = 1 [(.description) = "The version hashes for this type\'s chunks will be returned."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetLinkFilterListVersion_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetLinkFilterListVersion_Request)
  return false;
#undef DO_
}

void CCommunity_GetLinkFilterListVersion_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetLinkFilterListVersion_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1 [(.description) = "The version hashes for this type\'s chunks will be returned."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hit_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetLinkFilterListVersion_Request)
}

::google::protobuf::uint8* CCommunity_GetLinkFilterListVersion_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterListVersion_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1 [(.description) = "The version hashes for this type\'s chunks will be returned."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hit_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterListVersion_Request)
  return target;
}

size_t CCommunity_GetLinkFilterListVersion_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterListVersion_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 hit_type = 1 [(.description) = "The version hashes for this type\'s chunks will be returned."];
  if (has_hit_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hit_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterListVersion_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterListVersion_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterListVersion_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetLinkFilterListVersion_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterListVersion_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterListVersion_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterListVersion_Request::MergeFrom(const CCommunity_GetLinkFilterListVersion_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterListVersion_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hit_type()) {
    set_hit_type(from.hit_type());
  }
}

void CCommunity_GetLinkFilterListVersion_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterListVersion_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterListVersion_Request::CopyFrom(const CCommunity_GetLinkFilterListVersion_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterListVersion_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterListVersion_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterListVersion_Request::Swap(CCommunity_GetLinkFilterListVersion_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetLinkFilterListVersion_Request::InternalSwap(CCommunity_GetLinkFilterListVersion_Request* other) {
  using std::swap;
  swap(hit_type_, other->hit_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCommunity_GetLinkFilterListVersion_Request::GetMetadata() const {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCommunity_GetLinkFilterListVersion_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetLinkFilterListVersion_Response::kVersionFieldNumber;
const int CCommunity_GetLinkFilterListVersion_Response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetLinkFilterListVersion_Response::CCommunity_GetLinkFilterListVersion_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterListVersion_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetLinkFilterListVersion_Response)
}
CCommunity_GetLinkFilterListVersion_Response::CCommunity_GetLinkFilterListVersion_Response(const CCommunity_GetLinkFilterListVersion_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterListVersion_Response)
}

void CCommunity_GetLinkFilterListVersion_Response::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_ULONGLONG(0);
}

CCommunity_GetLinkFilterListVersion_Response::~CCommunity_GetLinkFilterListVersion_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterListVersion_Response)
  SharedDtor();
}

void CCommunity_GetLinkFilterListVersion_Response::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetLinkFilterListVersion_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCommunity_GetLinkFilterListVersion_Response::descriptor() {
  ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCommunity_GetLinkFilterListVersion_Response& CCommunity_GetLinkFilterListVersion_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::scc_info_CCommunity_GetLinkFilterListVersion_Response.base);
  return *internal_default_instance();
}


void CCommunity_GetLinkFilterListVersion_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterListVersion_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmptyNoArena();
  }
  count_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetLinkFilterListVersion_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetLinkFilterListVersion_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1 [(.description) = "A hash built using the IDs of the contained hits."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GetLinkFilterListVersion_Response.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 count = 2 [(.description) = "The number of hits of this type"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetLinkFilterListVersion_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetLinkFilterListVersion_Response)
  return false;
#undef DO_
}

void CCommunity_GetLinkFilterListVersion_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetLinkFilterListVersion_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1 [(.description) = "A hash built using the IDs of the contained hits."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetLinkFilterListVersion_Response.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional uint64 count = 2 [(.description) = "The number of hits of this type"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetLinkFilterListVersion_Response)
}

::google::protobuf::uint8* CCommunity_GetLinkFilterListVersion_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterListVersion_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1 [(.description) = "A hash built using the IDs of the contained hits."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetLinkFilterListVersion_Response.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional uint64 count = 2 [(.description) = "The number of hits of this type"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterListVersion_Response)
  return target;
}

size_t CCommunity_GetLinkFilterListVersion_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterListVersion_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string version = 1 [(.description) = "A hash built using the IDs of the contained hits."];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional uint64 count = 2 [(.description) = "The number of hits of this type"];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterListVersion_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterListVersion_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterListVersion_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetLinkFilterListVersion_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterListVersion_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterListVersion_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterListVersion_Response::MergeFrom(const CCommunity_GetLinkFilterListVersion_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterListVersion_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetLinkFilterListVersion_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterListVersion_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterListVersion_Response::CopyFrom(const CCommunity_GetLinkFilterListVersion_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterListVersion_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterListVersion_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterListVersion_Response::Swap(CCommunity_GetLinkFilterListVersion_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetLinkFilterListVersion_Response::InternalSwap(CCommunity_GetLinkFilterListVersion_Response* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCommunity_GetLinkFilterListVersion_Response::GetMetadata() const {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CommunityLinkFilter::~CommunityLinkFilter() {}

const ::google::protobuf::ServiceDescriptor* CommunityLinkFilter::descriptor() {
  protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* CommunityLinkFilter::GetDescriptor() {
  return descriptor();
}

void CommunityLinkFilter::GetLinkFilterHashPrefixes(::google::protobuf::RpcController* controller,
                         const ::CCommunity_GetLinkFilterHashPrefixes_Request*,
                         ::CCommunity_GetLinkFilterHashPrefixes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkFilterHashPrefixes() not implemented.");
  done->Run();
}

void CommunityLinkFilter::GetLinkFilterHashes(::google::protobuf::RpcController* controller,
                         const ::CCommunity_GetLinkFilterHashes_Request*,
                         ::CCommunity_GetLinkFilterHashes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkFilterHashes() not implemented.");
  done->Run();
}

void CommunityLinkFilter::GetLinkFilterListVersion(::google::protobuf::RpcController* controller,
                         const ::CCommunity_GetLinkFilterListVersion_Request*,
                         ::CCommunity_GetLinkFilterListVersion_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkFilterListVersion() not implemented.");
  done->Run();
}

void CommunityLinkFilter::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetLinkFilterHashPrefixes(controller,
             ::google::protobuf::down_cast<const ::CCommunity_GetLinkFilterHashPrefixes_Request*>(request),
             ::google::protobuf::down_cast< ::CCommunity_GetLinkFilterHashPrefixes_Response*>(response),
             done);
      break;
    case 1:
      GetLinkFilterHashes(controller,
             ::google::protobuf::down_cast<const ::CCommunity_GetLinkFilterHashes_Request*>(request),
             ::google::protobuf::down_cast< ::CCommunity_GetLinkFilterHashes_Response*>(response),
             done);
      break;
    case 2:
      GetLinkFilterListVersion(controller,
             ::google::protobuf::down_cast<const ::CCommunity_GetLinkFilterListVersion_Request*>(request),
             ::google::protobuf::down_cast< ::CCommunity_GetLinkFilterListVersion_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CommunityLinkFilter::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCommunity_GetLinkFilterHashPrefixes_Request::default_instance();
    case 1:
      return ::CCommunity_GetLinkFilterHashes_Request::default_instance();
    case 2:
      return ::CCommunity_GetLinkFilterListVersion_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& CommunityLinkFilter::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCommunity_GetLinkFilterHashPrefixes_Response::default_instance();
    case 1:
      return ::CCommunity_GetLinkFilterHashes_Response::default_instance();
    case 2:
      return ::CCommunity_GetLinkFilterListVersion_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CommunityLinkFilter_Stub::CommunityLinkFilter_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CommunityLinkFilter_Stub::CommunityLinkFilter_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
CommunityLinkFilter_Stub::~CommunityLinkFilter_Stub() {
  if (owns_channel_) delete channel_;
}

void CommunityLinkFilter_Stub::GetLinkFilterHashPrefixes(::google::protobuf::RpcController* controller,
                              const ::CCommunity_GetLinkFilterHashPrefixes_Request* request,
                              ::CCommunity_GetLinkFilterHashPrefixes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CommunityLinkFilter_Stub::GetLinkFilterHashes(::google::protobuf::RpcController* controller,
                              const ::CCommunity_GetLinkFilterHashes_Request* request,
                              ::CCommunity_GetLinkFilterHashes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CommunityLinkFilter_Stub::GetLinkFilterListVersion(::google::protobuf::RpcController* controller,
                              const ::CCommunity_GetLinkFilterListVersion_Request* request,
                              ::CCommunity_GetLinkFilterListVersion_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCommunity_GetLinkFilterHashPrefixes_Request* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashPrefixes_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CCommunity_GetLinkFilterHashPrefixes_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCommunity_GetLinkFilterHashPrefixes_Response* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashPrefixes_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CCommunity_GetLinkFilterHashPrefixes_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCommunity_GetLinkFilterHashes_Request* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashes_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CCommunity_GetLinkFilterHashes_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCommunity_GetLinkFilterHashes_Response* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashes_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CCommunity_GetLinkFilterHashes_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCommunity_GetLinkFilterListVersion_Request* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterListVersion_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CCommunity_GetLinkFilterListVersion_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCommunity_GetLinkFilterListVersion_Response* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterListVersion_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CCommunity_GetLinkFilterListVersion_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
