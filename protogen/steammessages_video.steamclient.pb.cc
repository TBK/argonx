// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_video.steamclient.proto

#include "steammessages_video.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fvideo_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fvideo_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VideoBookmark;
}  // namespace protobuf_steammessages_5fvideo_2esteamclient_2eproto
class CVideo_ClientGetVideoURL_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideo_ClientGetVideoURL_Request>
      _instance;
} _CVideo_ClientGetVideoURL_Request_default_instance_;
class CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideo_ClientGetVideoURL_Response>
      _instance;
} _CVideo_ClientGetVideoURL_Response_default_instance_;
class VideoBookmarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoBookmark>
      _instance;
} _VideoBookmark_default_instance_;
class CVideo_SetVideoBookmark_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideo_SetVideoBookmark_Notification>
      _instance;
} _CVideo_SetVideoBookmark_Notification_default_instance_;
class CVideo_GetVideoBookmarks_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideo_GetVideoBookmarks_Request>
      _instance;
} _CVideo_GetVideoBookmarks_Request_default_instance_;
class CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideo_GetVideoBookmarks_Response>
      _instance;
} _CVideo_GetVideoBookmarks_Response_default_instance_;
class CVideo_UnlockedH264_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CVideo_UnlockedH264_Notification>
      _instance;
} _CVideo_UnlockedH264_Notification_default_instance_;
class CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFovasVideo_ClientGetOPFSettings_Request>
      _instance;
} _CFovasVideo_ClientGetOPFSettings_Request_default_instance_;
class CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CFovasVideo_ClientGetOPFSettings_Response>
      _instance;
} _CFovasVideo_ClientGetOPFSettings_Response_default_instance_;
namespace protobuf_steammessages_5fvideo_2esteamclient_2eproto {
static void InitDefaultsCVideo_ClientGetVideoURL_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideo_ClientGetVideoURL_Request_default_instance_;
    new (ptr) ::CVideo_ClientGetVideoURL_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideo_ClientGetVideoURL_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideo_ClientGetVideoURL_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideo_ClientGetVideoURL_Request}, {}};

static void InitDefaultsCVideo_ClientGetVideoURL_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideo_ClientGetVideoURL_Response_default_instance_;
    new (ptr) ::CVideo_ClientGetVideoURL_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideo_ClientGetVideoURL_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideo_ClientGetVideoURL_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideo_ClientGetVideoURL_Response}, {}};

static void InitDefaultsVideoBookmark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VideoBookmark_default_instance_;
    new (ptr) ::VideoBookmark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VideoBookmark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VideoBookmark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVideoBookmark}, {}};

static void InitDefaultsCVideo_SetVideoBookmark_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideo_SetVideoBookmark_Notification_default_instance_;
    new (ptr) ::CVideo_SetVideoBookmark_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideo_SetVideoBookmark_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CVideo_SetVideoBookmark_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCVideo_SetVideoBookmark_Notification}, {
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_VideoBookmark.base,}};

static void InitDefaultsCVideo_GetVideoBookmarks_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideo_GetVideoBookmarks_Request_default_instance_;
    new (ptr) ::CVideo_GetVideoBookmarks_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideo_GetVideoBookmarks_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideo_GetVideoBookmarks_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideo_GetVideoBookmarks_Request}, {}};

static void InitDefaultsCVideo_GetVideoBookmarks_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideo_GetVideoBookmarks_Response_default_instance_;
    new (ptr) ::CVideo_GetVideoBookmarks_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideo_GetVideoBookmarks_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CVideo_GetVideoBookmarks_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCVideo_GetVideoBookmarks_Response}, {
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_VideoBookmark.base,}};

static void InitDefaultsCVideo_UnlockedH264_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVideo_UnlockedH264_Notification_default_instance_;
    new (ptr) ::CVideo_UnlockedH264_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVideo_UnlockedH264_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CVideo_UnlockedH264_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCVideo_UnlockedH264_Notification}, {}};

static void InitDefaultsCFovasVideo_ClientGetOPFSettings_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFovasVideo_ClientGetOPFSettings_Request_default_instance_;
    new (ptr) ::CFovasVideo_ClientGetOPFSettings_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFovasVideo_ClientGetOPFSettings_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFovasVideo_ClientGetOPFSettings_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFovasVideo_ClientGetOPFSettings_Request}, {}};

static void InitDefaultsCFovasVideo_ClientGetOPFSettings_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CFovasVideo_ClientGetOPFSettings_Response_default_instance_;
    new (ptr) ::CFovasVideo_ClientGetOPFSettings_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CFovasVideo_ClientGetOPFSettings_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CFovasVideo_ClientGetOPFSettings_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCFovasVideo_ClientGetOPFSettings_Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CVideo_ClientGetVideoURL_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideo_ClientGetVideoURL_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoBookmark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideo_SetVideoBookmark_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideo_GetVideoBookmarks_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideo_GetVideoBookmarks_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CVideo_UnlockedH264_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFovasVideo_ClientGetOPFSettings_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CFovasVideo_ClientGetOPFSettings_Response.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, video_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, client_cellid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, video_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, video_url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, playback_position_in_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, video_track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, audio_track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, timedtext_track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, last_modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, hide_from_watch_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::VideoBookmark, hide_from_library_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_SetVideoBookmark_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_SetVideoBookmark_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_SetVideoBookmark_Notification, bookmarks_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, appids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, updated_since_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, bookmarks_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, encryption_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, client_cellid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, opf_settings_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CVideo_ClientGetVideoURL_Request)},
  { 9, 16, sizeof(::CVideo_ClientGetVideoURL_Response)},
  { 18, 31, sizeof(::VideoBookmark)},
  { 39, 45, sizeof(::CVideo_SetVideoBookmark_Notification)},
  { 46, 53, sizeof(::CVideo_GetVideoBookmarks_Request)},
  { 55, 61, sizeof(::CVideo_GetVideoBookmarks_Response)},
  { 62, 68, sizeof(::CVideo_UnlockedH264_Notification)},
  { 69, 76, sizeof(::CFovasVideo_ClientGetOPFSettings_Request)},
  { 78, 85, sizeof(::CFovasVideo_ClientGetOPFSettings_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideo_ClientGetVideoURL_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideo_ClientGetVideoURL_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VideoBookmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideo_SetVideoBookmark_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideo_GetVideoBookmarks_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideo_GetVideoBookmarks_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CVideo_UnlockedH264_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFovasVideo_ClientGetOPFSettings_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CFovasVideo_ClientGetOPFSettings_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_video.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%steammessages_video.steamclient.proto\032"
      ",steammessages_unified_base.steamclient."
      "proto\"\201\001\n CVideo_ClientGetVideoURL_Reque"
      "st\022\036\n\010video_id\030\001 \001(\004B\014\202\265\030\010Video ID\022=\n\rcl"
      "ient_cellid\030\002 \001(\rB&\202\265\030\"Cell ID of client"
      ", zero if unknown\"r\n!CVideo_ClientGetVid"
      "eoURL_Response\022\036\n\010video_id\030\001 \001(\004B\014\202\265\030\010Vi"
      "deo ID\022-\n\tvideo_url\030\002 \001(\tB\032\202\265\030\026URL for v"
      "ideo manifest\"\252\004\n\rVideoBookmark\022\032\n\006app_i"
      "d\030\001 \001(\rB\n\202\265\030\006App ID\022]\n\034playback_position"
      "_in_seconds\030\002 \001(\rB7\202\265\0303How many seconds "
      "into the video the bookmark is for\022/\n\016vi"
      "deo_track_id\030\003 \001(\004B\027\202\265\030\023video track choi"
      "ce.\022/\n\016audio_track_id\030\004 \001(\004B\027\202\265\030\023audio t"
      "rack choice.\022C\n\022timedtext_track_id\030\005 \001(\004"
      "B\'\202\265\030#timedtimed or subtitle track choic"
      "e\022O\n\rlast_modified\030\006 \001(\rB8\202\265\0304when we re"
      "corded it was last modified. Not settabl"
      "e.\022U\n\027hide_from_watch_history\030\007 \001(\010:\005fal"
      "seB-\202\265\030)Whether I want to show this in m"
      "y history\022O\n\021hide_from_library\030\010 \001(\010:\005fa"
      "lseB-\202\265\030)Whether I want to show this in "
      "my library\"r\n$CVideo_SetVideoBookmark_No"
      "tification\022J\n\tbookmarks\030\001 \003(\0132\016.VideoBoo"
      "kmarkB\'\202\265\030#list of bookmarks we want to "
      "store.\"\201\002\n CVideo_GetVideoBookmarks_Requ"
      "est\022_\n\006appids\030\001 \003(\rBO\202\265\030KList of App IDs"
      " to grab bookmarks for. Can be empty if "
      "using updated_since.\022|\n\rupdated_since\030\002 "
      "\001(\rBe\202\265\030aOnly return results after time."
      " Min value is 1. (seconds since epoch Ja"
      "nuary 1st, 1970 Unix Time)\"u\n!CVideo_Get"
      "VideoBookmarks_Response\022P\n\tbookmarks\030\001 \003"
      "(\0132\016.VideoBookmarkB-\202\265\030)List of bookmark"
      "s we found. Can be empty.\":\n CVideo_Unlo"
      "ckedH264_Notification\022\026\n\016encryption_key\030"
      "\001 \001(\014\"\205\001\n(CFovasVideo_ClientGetOPFSettin"
      "gs_Request\022\032\n\006app_id\030\001 \001(\rB\n\202\265\030\006App ID\022="
      "\n\rclient_cellid\030\002 \001(\rB&\202\265\030\"Cell ID of cl"
      "ient, zero if unknown\"|\n)CFovasVideo_Cli"
      "entGetOPFSettings_Response\022\032\n\006app_id\030\001 \001"
      "(\rB\n\202\265\030\006App ID\0223\n\014opf_settings\030\002 \001(\tB\035\202\265"
      "\030\031JSON blob of OPF Settings2\265\004\n\005Video\022\216\001"
      "\n\021ClientGetVideoURL\022!.CVideo_ClientGetVi"
      "deoURL_Request\032\".CVideo_ClientGetVideoUR"
      "L_Response\"2\202\265\030.Get the initial URL to b"
      "egin streaming a video\022\301\001\n\020SetVideoBookm"
      "ark\022%.CVideo_SetVideoBookmark_Notificati"
      "on\032\013.NoResponse\"y\202\265\030uBookmarks the locat"
      "ions in the video the user has reached. "
      "As as record playback settings per video"
      ". Fire and forget.\022\303\001\n\021GetVideoBookmarks"
      "\022!.CVideo_GetVideoBookmarks_Request\032\".CV"
      "ideo_GetVideoBookmarks_Response\"g\202\265\030cRet"
      "urns the video bookmarks locations for t"
      "he specific videos. Includes playback se"
      "ttings per video\032\021\202\265\030\rVideo methods2\236\001\n\013"
      "VideoClient\022\210\001\n\022NotifyUnlockedH264\022!.CVi"
      "deo_UnlockedH264_Notification\032\013.NoRespon"
      "se\"B\202\265\030>Notification from server to clie"
      "nt that h264 has been unlocked\032\004\300\265\030\0022\363\001\n"
      "\nFovasVideo\022\303\001\n\024ClientGetOPFSettings\022).C"
      "FovasVideo_ClientGetOPFSettings_Request\032"
      "*.CFovasVideo_ClientGetOPFSettings_Respo"
      "nse\"T\202\265\030PRetrieve the OPF settings JSON "
      "blob. Available via the Client for 360 P"
      "layer App\032\037\202\265\030\033Fovas Video Service Metho"
      "dsB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_video.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fvideo_2esteamclient_2eproto

// ===================================================================

void CVideo_ClientGetVideoURL_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_ClientGetVideoURL_Request::kVideoIdFieldNumber;
const int CVideo_ClientGetVideoURL_Request::kClientCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_ClientGetVideoURL_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideo_ClientGetVideoURL_Request)
}
CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(const CVideo_ClientGetVideoURL_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&video_id_, &from.video_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:CVideo_ClientGetVideoURL_Request)
}

void CVideo_ClientGetVideoURL_Request::SharedCtor() {
  ::memset(&video_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_cellid_) -
      reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
}

CVideo_ClientGetVideoURL_Request::~CVideo_ClientGetVideoURL_Request() {
  // @@protoc_insertion_point(destructor:CVideo_ClientGetVideoURL_Request)
  SharedDtor();
}

void CVideo_ClientGetVideoURL_Request::SharedDtor() {
}

void CVideo_ClientGetVideoURL_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideo_ClientGetVideoURL_Request::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_ClientGetVideoURL_Request& CVideo_ClientGetVideoURL_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_ClientGetVideoURL_Request.base);
  return *internal_default_instance();
}


void CVideo_ClientGetVideoURL_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_ClientGetVideoURL_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&video_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cellid_) -
        reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_ClientGetVideoURL_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideo_ClientGetVideoURL_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 video_id = 1 [(.description) = "Video ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_video_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_client_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideo_ClientGetVideoURL_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideo_ClientGetVideoURL_Request)
  return false;
#undef DO_
}

void CVideo_ClientGetVideoURL_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideo_ClientGetVideoURL_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->video_id(), output);
  }

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideo_ClientGetVideoURL_Request)
}

::google::protobuf::uint8* CVideo_ClientGetVideoURL_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_ClientGetVideoURL_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->video_id(), target);
  }

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_ClientGetVideoURL_Request)
  return target;
}

size_t CVideo_ClientGetVideoURL_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_ClientGetVideoURL_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 video_id = 1 [(.description) = "Video ID"];
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->video_id());
    }

    // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
    if (has_client_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_ClientGetVideoURL_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_ClientGetVideoURL_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_ClientGetVideoURL_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_ClientGetVideoURL_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_ClientGetVideoURL_Request)
    MergeFrom(*source);
  }
}

void CVideo_ClientGetVideoURL_Request::MergeFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      video_id_ = from.video_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Request::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Request::Swap(CVideo_ClientGetVideoURL_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_ClientGetVideoURL_Request::InternalSwap(CVideo_ClientGetVideoURL_Request* other) {
  using std::swap;
  swap(video_id_, other->video_id_);
  swap(client_cellid_, other->client_cellid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideo_ClientGetVideoURL_Request::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideo_ClientGetVideoURL_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_ClientGetVideoURL_Response::kVideoIdFieldNumber;
const int CVideo_ClientGetVideoURL_Response::kVideoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_ClientGetVideoURL_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideo_ClientGetVideoURL_Response)
}
CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(const CVideo_ClientGetVideoURL_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  video_id_ = from.video_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_ClientGetVideoURL_Response)
}

void CVideo_ClientGetVideoURL_Response::SharedCtor() {
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_id_ = GOOGLE_ULONGLONG(0);
}

CVideo_ClientGetVideoURL_Response::~CVideo_ClientGetVideoURL_Response() {
  // @@protoc_insertion_point(destructor:CVideo_ClientGetVideoURL_Response)
  SharedDtor();
}

void CVideo_ClientGetVideoURL_Response::SharedDtor() {
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVideo_ClientGetVideoURL_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideo_ClientGetVideoURL_Response::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_ClientGetVideoURL_Response& CVideo_ClientGetVideoURL_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_ClientGetVideoURL_Response.base);
  return *internal_default_instance();
}


void CVideo_ClientGetVideoURL_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_ClientGetVideoURL_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    video_url_.ClearNonDefaultToEmptyNoArena();
  }
  video_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_ClientGetVideoURL_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideo_ClientGetVideoURL_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 video_id = 1 [(.description) = "Video ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_video_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_url = 2 [(.description) = "URL for video manifest"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CVideo_ClientGetVideoURL_Response.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideo_ClientGetVideoURL_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideo_ClientGetVideoURL_Response)
  return false;
#undef DO_
}

void CVideo_ClientGetVideoURL_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideo_ClientGetVideoURL_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->video_id(), output);
  }

  // optional string video_url = 2 [(.description) = "URL for video manifest"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVideo_ClientGetVideoURL_Response.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->video_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideo_ClientGetVideoURL_Response)
}

::google::protobuf::uint8* CVideo_ClientGetVideoURL_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_ClientGetVideoURL_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->video_id(), target);
  }

  // optional string video_url = 2 [(.description) = "URL for video manifest"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CVideo_ClientGetVideoURL_Response.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->video_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_ClientGetVideoURL_Response)
  return target;
}

size_t CVideo_ClientGetVideoURL_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_ClientGetVideoURL_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string video_url = 2 [(.description) = "URL for video manifest"];
    if (has_video_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url());
    }

    // optional uint64 video_id = 1 [(.description) = "Video ID"];
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->video_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_ClientGetVideoURL_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_ClientGetVideoURL_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_ClientGetVideoURL_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_ClientGetVideoURL_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_ClientGetVideoURL_Response)
    MergeFrom(*source);
  }
}

void CVideo_ClientGetVideoURL_Response::MergeFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      video_id_ = from.video_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Response::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Response::Swap(CVideo_ClientGetVideoURL_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_ClientGetVideoURL_Response::InternalSwap(CVideo_ClientGetVideoURL_Response* other) {
  using std::swap;
  video_url_.Swap(&other->video_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(video_id_, other->video_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideo_ClientGetVideoURL_Response::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoBookmark::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoBookmark::kAppIdFieldNumber;
const int VideoBookmark::kPlaybackPositionInSecondsFieldNumber;
const int VideoBookmark::kVideoTrackIdFieldNumber;
const int VideoBookmark::kAudioTrackIdFieldNumber;
const int VideoBookmark::kTimedtextTrackIdFieldNumber;
const int VideoBookmark::kLastModifiedFieldNumber;
const int VideoBookmark::kHideFromWatchHistoryFieldNumber;
const int VideoBookmark::kHideFromLibraryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoBookmark::VideoBookmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_VideoBookmark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:VideoBookmark)
}
VideoBookmark::VideoBookmark(const VideoBookmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_from_library_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
  // @@protoc_insertion_point(copy_constructor:VideoBookmark)
}

void VideoBookmark::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_from_library_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
}

VideoBookmark::~VideoBookmark() {
  // @@protoc_insertion_point(destructor:VideoBookmark)
  SharedDtor();
}

void VideoBookmark::SharedDtor() {
}

void VideoBookmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoBookmark::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoBookmark& VideoBookmark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_VideoBookmark.base);
  return *internal_default_instance();
}


void VideoBookmark::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoBookmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_from_library_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoBookmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VideoBookmark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1 [(.description) = "App ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_playback_position_in_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playback_position_in_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_video_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_audio_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &audio_track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timedtext_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timedtext_track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_last_modified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hide_from_watch_history();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_from_watch_history_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hide_from_library();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_from_library_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VideoBookmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VideoBookmark)
  return false;
#undef DO_
}

void VideoBookmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VideoBookmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playback_position_in_seconds(), output);
  }

  // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->video_track_id(), output);
  }

  // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->audio_track_id(), output);
  }

  // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timedtext_track_id(), output);
  }

  // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_modified(), output);
  }

  // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hide_from_watch_history(), output);
  }

  // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hide_from_library(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VideoBookmark)
}

::google::protobuf::uint8* VideoBookmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VideoBookmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playback_position_in_seconds(), target);
  }

  // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->video_track_id(), target);
  }

  // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->audio_track_id(), target);
  }

  // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timedtext_track_id(), target);
  }

  // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_modified(), target);
  }

  // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hide_from_watch_history(), target);
  }

  // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hide_from_library(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoBookmark)
  return target;
}

size_t VideoBookmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoBookmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 app_id = 1 [(.description) = "App ID"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
    if (has_playback_position_in_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playback_position_in_seconds());
    }

    // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
    if (has_video_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->video_track_id());
    }

    // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
    if (has_audio_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->audio_track_id());
    }

    // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
    if (has_timedtext_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timedtext_track_id());
    }

    // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
    if (has_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_modified());
    }

    // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
    if (has_hide_from_watch_history()) {
      total_size += 1 + 1;
    }

    // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
    if (has_hide_from_library()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoBookmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoBookmark)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoBookmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoBookmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoBookmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoBookmark)
    MergeFrom(*source);
  }
}

void VideoBookmark::MergeFrom(const VideoBookmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoBookmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      playback_position_in_seconds_ = from.playback_position_in_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      video_track_id_ = from.video_track_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      audio_track_id_ = from.audio_track_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      timedtext_track_id_ = from.timedtext_track_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000040u) {
      hide_from_watch_history_ = from.hide_from_watch_history_;
    }
    if (cached_has_bits & 0x00000080u) {
      hide_from_library_ = from.hide_from_library_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoBookmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoBookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoBookmark::CopyFrom(const VideoBookmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoBookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoBookmark::IsInitialized() const {
  return true;
}

void VideoBookmark::Swap(VideoBookmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoBookmark::InternalSwap(VideoBookmark* other) {
  using std::swap;
  swap(app_id_, other->app_id_);
  swap(playback_position_in_seconds_, other->playback_position_in_seconds_);
  swap(video_track_id_, other->video_track_id_);
  swap(audio_track_id_, other->audio_track_id_);
  swap(timedtext_track_id_, other->timedtext_track_id_);
  swap(last_modified_, other->last_modified_);
  swap(hide_from_watch_history_, other->hide_from_watch_history_);
  swap(hide_from_library_, other->hide_from_library_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoBookmark::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideo_SetVideoBookmark_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_SetVideoBookmark_Notification::kBookmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_SetVideoBookmark_Notification::CVideo_SetVideoBookmark_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_SetVideoBookmark_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideo_SetVideoBookmark_Notification)
}
CVideo_SetVideoBookmark_Notification::CVideo_SetVideoBookmark_Notification(const CVideo_SetVideoBookmark_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_SetVideoBookmark_Notification)
}

void CVideo_SetVideoBookmark_Notification::SharedCtor() {
}

CVideo_SetVideoBookmark_Notification::~CVideo_SetVideoBookmark_Notification() {
  // @@protoc_insertion_point(destructor:CVideo_SetVideoBookmark_Notification)
  SharedDtor();
}

void CVideo_SetVideoBookmark_Notification::SharedDtor() {
}

void CVideo_SetVideoBookmark_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideo_SetVideoBookmark_Notification::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_SetVideoBookmark_Notification& CVideo_SetVideoBookmark_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_SetVideoBookmark_Notification.base);
  return *internal_default_instance();
}


void CVideo_SetVideoBookmark_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_SetVideoBookmark_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_SetVideoBookmark_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideo_SetVideoBookmark_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bookmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideo_SetVideoBookmark_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideo_SetVideoBookmark_Notification)
  return false;
#undef DO_
}

void CVideo_SetVideoBookmark_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideo_SetVideoBookmark_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookmarks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bookmarks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideo_SetVideoBookmark_Notification)
}

::google::protobuf::uint8* CVideo_SetVideoBookmark_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_SetVideoBookmark_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookmarks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bookmarks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_SetVideoBookmark_Notification)
  return target;
}

size_t CVideo_SetVideoBookmark_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_SetVideoBookmark_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
  {
    unsigned int count = static_cast<unsigned int>(this->bookmarks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bookmarks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_SetVideoBookmark_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_SetVideoBookmark_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_SetVideoBookmark_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_SetVideoBookmark_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_SetVideoBookmark_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_SetVideoBookmark_Notification)
    MergeFrom(*source);
  }
}

void CVideo_SetVideoBookmark_Notification::MergeFrom(const CVideo_SetVideoBookmark_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_SetVideoBookmark_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_.MergeFrom(from.bookmarks_);
}

void CVideo_SetVideoBookmark_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_SetVideoBookmark_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_SetVideoBookmark_Notification::CopyFrom(const CVideo_SetVideoBookmark_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_SetVideoBookmark_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_SetVideoBookmark_Notification::IsInitialized() const {
  return true;
}

void CVideo_SetVideoBookmark_Notification::Swap(CVideo_SetVideoBookmark_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_SetVideoBookmark_Notification::InternalSwap(CVideo_SetVideoBookmark_Notification* other) {
  using std::swap;
  CastToBase(&bookmarks_)->InternalSwap(CastToBase(&other->bookmarks_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideo_SetVideoBookmark_Notification::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideo_GetVideoBookmarks_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_GetVideoBookmarks_Request::kAppidsFieldNumber;
const int CVideo_GetVideoBookmarks_Request::kUpdatedSinceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_GetVideoBookmarks_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideo_GetVideoBookmarks_Request)
}
CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(const CVideo_GetVideoBookmarks_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  updated_since_ = from.updated_since_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GetVideoBookmarks_Request)
}

void CVideo_GetVideoBookmarks_Request::SharedCtor() {
  updated_since_ = 0u;
}

CVideo_GetVideoBookmarks_Request::~CVideo_GetVideoBookmarks_Request() {
  // @@protoc_insertion_point(destructor:CVideo_GetVideoBookmarks_Request)
  SharedDtor();
}

void CVideo_GetVideoBookmarks_Request::SharedDtor() {
}

void CVideo_GetVideoBookmarks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideo_GetVideoBookmarks_Request::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_GetVideoBookmarks_Request& CVideo_GetVideoBookmarks_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_GetVideoBookmarks_Request.base);
  return *internal_default_instance();
}


void CVideo_GetVideoBookmarks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GetVideoBookmarks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  updated_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_GetVideoBookmarks_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideo_GetVideoBookmarks_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_appids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_updated_since();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updated_since_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideo_GetVideoBookmarks_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideo_GetVideoBookmarks_Request)
  return false;
#undef DO_
}

void CVideo_GetVideoBookmarks_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideo_GetVideoBookmarks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
  for (int i = 0, n = this->appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->appids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->updated_since(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideo_GetVideoBookmarks_Request)
}

::google::protobuf::uint8* CVideo_GetVideoBookmarks_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GetVideoBookmarks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->appids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->updated_since(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GetVideoBookmarks_Request)
  return target;
}

size_t CVideo_GetVideoBookmarks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GetVideoBookmarks_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->appids_size());
    total_size += data_size;
  }

  // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
  if (has_updated_since()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updated_since());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GetVideoBookmarks_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GetVideoBookmarks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GetVideoBookmarks_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_GetVideoBookmarks_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GetVideoBookmarks_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GetVideoBookmarks_Request)
    MergeFrom(*source);
  }
}

void CVideo_GetVideoBookmarks_Request::MergeFrom(const CVideo_GetVideoBookmarks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GetVideoBookmarks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  if (from.has_updated_since()) {
    set_updated_since(from.updated_since());
  }
}

void CVideo_GetVideoBookmarks_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GetVideoBookmarks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GetVideoBookmarks_Request::CopyFrom(const CVideo_GetVideoBookmarks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GetVideoBookmarks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GetVideoBookmarks_Request::IsInitialized() const {
  return true;
}

void CVideo_GetVideoBookmarks_Request::Swap(CVideo_GetVideoBookmarks_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_GetVideoBookmarks_Request::InternalSwap(CVideo_GetVideoBookmarks_Request* other) {
  using std::swap;
  appids_.InternalSwap(&other->appids_);
  swap(updated_since_, other->updated_since_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideo_GetVideoBookmarks_Request::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideo_GetVideoBookmarks_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_GetVideoBookmarks_Response::kBookmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_GetVideoBookmarks_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideo_GetVideoBookmarks_Response)
}
CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(const CVideo_GetVideoBookmarks_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_GetVideoBookmarks_Response)
}

void CVideo_GetVideoBookmarks_Response::SharedCtor() {
}

CVideo_GetVideoBookmarks_Response::~CVideo_GetVideoBookmarks_Response() {
  // @@protoc_insertion_point(destructor:CVideo_GetVideoBookmarks_Response)
  SharedDtor();
}

void CVideo_GetVideoBookmarks_Response::SharedDtor() {
}

void CVideo_GetVideoBookmarks_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideo_GetVideoBookmarks_Response::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_GetVideoBookmarks_Response& CVideo_GetVideoBookmarks_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_GetVideoBookmarks_Response.base);
  return *internal_default_instance();
}


void CVideo_GetVideoBookmarks_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GetVideoBookmarks_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_GetVideoBookmarks_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideo_GetVideoBookmarks_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bookmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideo_GetVideoBookmarks_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideo_GetVideoBookmarks_Response)
  return false;
#undef DO_
}

void CVideo_GetVideoBookmarks_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideo_GetVideoBookmarks_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookmarks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bookmarks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideo_GetVideoBookmarks_Response)
}

::google::protobuf::uint8* CVideo_GetVideoBookmarks_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GetVideoBookmarks_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookmarks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bookmarks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GetVideoBookmarks_Response)
  return target;
}

size_t CVideo_GetVideoBookmarks_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GetVideoBookmarks_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
  {
    unsigned int count = static_cast<unsigned int>(this->bookmarks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bookmarks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GetVideoBookmarks_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GetVideoBookmarks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GetVideoBookmarks_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_GetVideoBookmarks_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GetVideoBookmarks_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GetVideoBookmarks_Response)
    MergeFrom(*source);
  }
}

void CVideo_GetVideoBookmarks_Response::MergeFrom(const CVideo_GetVideoBookmarks_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GetVideoBookmarks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_.MergeFrom(from.bookmarks_);
}

void CVideo_GetVideoBookmarks_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GetVideoBookmarks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GetVideoBookmarks_Response::CopyFrom(const CVideo_GetVideoBookmarks_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GetVideoBookmarks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GetVideoBookmarks_Response::IsInitialized() const {
  return true;
}

void CVideo_GetVideoBookmarks_Response::Swap(CVideo_GetVideoBookmarks_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_GetVideoBookmarks_Response::InternalSwap(CVideo_GetVideoBookmarks_Response* other) {
  using std::swap;
  CastToBase(&bookmarks_)->InternalSwap(CastToBase(&other->bookmarks_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideo_GetVideoBookmarks_Response::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CVideo_UnlockedH264_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_UnlockedH264_Notification::kEncryptionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_UnlockedH264_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CVideo_UnlockedH264_Notification)
}
CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(const CVideo_UnlockedH264_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  // @@protoc_insertion_point(copy_constructor:CVideo_UnlockedH264_Notification)
}

void CVideo_UnlockedH264_Notification::SharedCtor() {
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CVideo_UnlockedH264_Notification::~CVideo_UnlockedH264_Notification() {
  // @@protoc_insertion_point(destructor:CVideo_UnlockedH264_Notification)
  SharedDtor();
}

void CVideo_UnlockedH264_Notification::SharedDtor() {
  encryption_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVideo_UnlockedH264_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CVideo_UnlockedH264_Notification::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_UnlockedH264_Notification& CVideo_UnlockedH264_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CVideo_UnlockedH264_Notification.base);
  return *internal_default_instance();
}


void CVideo_UnlockedH264_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_UnlockedH264_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encryption_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_UnlockedH264_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CVideo_UnlockedH264_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encryption_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CVideo_UnlockedH264_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CVideo_UnlockedH264_Notification)
  return false;
#undef DO_
}

void CVideo_UnlockedH264_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CVideo_UnlockedH264_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encryption_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CVideo_UnlockedH264_Notification)
}

::google::protobuf::uint8* CVideo_UnlockedH264_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_UnlockedH264_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encryption_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_UnlockedH264_Notification)
  return target;
}

size_t CVideo_UnlockedH264_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_UnlockedH264_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes encryption_key = 1;
  if (has_encryption_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryption_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_UnlockedH264_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_UnlockedH264_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_UnlockedH264_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_UnlockedH264_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_UnlockedH264_Notification)
    MergeFrom(*source);
  }
}

void CVideo_UnlockedH264_Notification::MergeFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_encryption_key()) {
    set_has_encryption_key();
    encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
}

void CVideo_UnlockedH264_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_UnlockedH264_Notification::CopyFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_UnlockedH264_Notification::IsInitialized() const {
  return true;
}

void CVideo_UnlockedH264_Notification::Swap(CVideo_UnlockedH264_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_UnlockedH264_Notification::InternalSwap(CVideo_UnlockedH264_Notification* other) {
  using std::swap;
  encryption_key_.Swap(&other->encryption_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CVideo_UnlockedH264_Notification::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFovasVideo_ClientGetOPFSettings_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFovasVideo_ClientGetOPFSettings_Request::kAppIdFieldNumber;
const int CFovasVideo_ClientGetOPFSettings_Request::kClientCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CFovasVideo_ClientGetOPFSettings_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFovasVideo_ClientGetOPFSettings_Request)
}
CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(const CFovasVideo_ClientGetOPFSettings_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:CFovasVideo_ClientGetOPFSettings_Request)
}

void CFovasVideo_ClientGetOPFSettings_Request::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_cellid_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
}

CFovasVideo_ClientGetOPFSettings_Request::~CFovasVideo_ClientGetOPFSettings_Request() {
  // @@protoc_insertion_point(destructor:CFovasVideo_ClientGetOPFSettings_Request)
  SharedDtor();
}

void CFovasVideo_ClientGetOPFSettings_Request::SharedDtor() {
}

void CFovasVideo_ClientGetOPFSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFovasVideo_ClientGetOPFSettings_Request::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFovasVideo_ClientGetOPFSettings_Request& CFovasVideo_ClientGetOPFSettings_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CFovasVideo_ClientGetOPFSettings_Request.base);
  return *internal_default_instance();
}


void CFovasVideo_ClientGetOPFSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFovasVideo_ClientGetOPFSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cellid_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFovasVideo_ClientGetOPFSettings_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFovasVideo_ClientGetOPFSettings_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1 [(.description) = "App ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_client_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFovasVideo_ClientGetOPFSettings_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFovasVideo_ClientGetOPFSettings_Request)
  return false;
#undef DO_
}

void CFovasVideo_ClientGetOPFSettings_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFovasVideo_ClientGetOPFSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFovasVideo_ClientGetOPFSettings_Request)
}

::google::protobuf::uint8* CFovasVideo_ClientGetOPFSettings_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFovasVideo_ClientGetOPFSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFovasVideo_ClientGetOPFSettings_Request)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFovasVideo_ClientGetOPFSettings_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1 [(.description) = "App ID"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
    if (has_client_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFovasVideo_ClientGetOPFSettings_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFovasVideo_ClientGetOPFSettings_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFovasVideo_ClientGetOPFSettings_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFovasVideo_ClientGetOPFSettings_Request)
    MergeFrom(*source);
  }
}

void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Request::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Request::Swap(CFovasVideo_ClientGetOPFSettings_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFovasVideo_ClientGetOPFSettings_Request::InternalSwap(CFovasVideo_ClientGetOPFSettings_Request* other) {
  using std::swap;
  swap(app_id_, other->app_id_);
  swap(client_cellid_, other->client_cellid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFovasVideo_ClientGetOPFSettings_Request::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CFovasVideo_ClientGetOPFSettings_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFovasVideo_ClientGetOPFSettings_Response::kAppIdFieldNumber;
const int CFovasVideo_ClientGetOPFSettings_Response::kOpfSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CFovasVideo_ClientGetOPFSettings_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFovasVideo_ClientGetOPFSettings_Response)
}
CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(const CFovasVideo_ClientGetOPFSettings_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opf_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opf_settings()) {
    opf_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opf_settings_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CFovasVideo_ClientGetOPFSettings_Response)
}

void CFovasVideo_ClientGetOPFSettings_Response::SharedCtor() {
  opf_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CFovasVideo_ClientGetOPFSettings_Response::~CFovasVideo_ClientGetOPFSettings_Response() {
  // @@protoc_insertion_point(destructor:CFovasVideo_ClientGetOPFSettings_Response)
  SharedDtor();
}

void CFovasVideo_ClientGetOPFSettings_Response::SharedDtor() {
  opf_settings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CFovasVideo_ClientGetOPFSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CFovasVideo_ClientGetOPFSettings_Response::descriptor() {
  ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFovasVideo_ClientGetOPFSettings_Response& CFovasVideo_ClientGetOPFSettings_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fvideo_2esteamclient_2eproto::scc_info_CFovasVideo_ClientGetOPFSettings_Response.base);
  return *internal_default_instance();
}


void CFovasVideo_ClientGetOPFSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFovasVideo_ClientGetOPFSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opf_settings_.ClearNonDefaultToEmptyNoArena();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFovasVideo_ClientGetOPFSettings_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFovasVideo_ClientGetOPFSettings_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1 [(.description) = "App ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opf_settings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opf_settings().data(), static_cast<int>(this->opf_settings().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFovasVideo_ClientGetOPFSettings_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFovasVideo_ClientGetOPFSettings_Response)
  return false;
#undef DO_
}

void CFovasVideo_ClientGetOPFSettings_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFovasVideo_ClientGetOPFSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opf_settings().data(), static_cast<int>(this->opf_settings().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opf_settings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFovasVideo_ClientGetOPFSettings_Response)
}

::google::protobuf::uint8* CFovasVideo_ClientGetOPFSettings_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CFovasVideo_ClientGetOPFSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opf_settings().data(), static_cast<int>(this->opf_settings().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opf_settings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFovasVideo_ClientGetOPFSettings_Response)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFovasVideo_ClientGetOPFSettings_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
    if (has_opf_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opf_settings());
    }

    // optional uint32 app_id = 1 [(.description) = "App ID"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFovasVideo_ClientGetOPFSettings_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFovasVideo_ClientGetOPFSettings_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFovasVideo_ClientGetOPFSettings_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFovasVideo_ClientGetOPFSettings_Response)
    MergeFrom(*source);
  }
}

void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_opf_settings();
      opf_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opf_settings_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Response::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Response::Swap(CFovasVideo_ClientGetOPFSettings_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFovasVideo_ClientGetOPFSettings_Response::InternalSwap(CFovasVideo_ClientGetOPFSettings_Response* other) {
  using std::swap;
  opf_settings_.Swap(&other->opf_settings_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CFovasVideo_ClientGetOPFSettings_Response::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Video::~Video() {}

const ::google::protobuf::ServiceDescriptor* Video::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Video::GetDescriptor() {
  return descriptor();
}

void Video::ClientGetVideoURL(::google::protobuf::RpcController* controller,
                         const ::CVideo_ClientGetVideoURL_Request*,
                         ::CVideo_ClientGetVideoURL_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetVideoURL() not implemented.");
  done->Run();
}

void Video::SetVideoBookmark(::google::protobuf::RpcController* controller,
                         const ::CVideo_SetVideoBookmark_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetVideoBookmark() not implemented.");
  done->Run();
}

void Video::GetVideoBookmarks(::google::protobuf::RpcController* controller,
                         const ::CVideo_GetVideoBookmarks_Request*,
                         ::CVideo_GetVideoBookmarks_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetVideoBookmarks() not implemented.");
  done->Run();
}

void Video::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ClientGetVideoURL(controller,
             ::google::protobuf::down_cast<const ::CVideo_ClientGetVideoURL_Request*>(request),
             ::google::protobuf::down_cast< ::CVideo_ClientGetVideoURL_Response*>(response),
             done);
      break;
    case 1:
      SetVideoBookmark(controller,
             ::google::protobuf::down_cast<const ::CVideo_SetVideoBookmark_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 2:
      GetVideoBookmarks(controller,
             ::google::protobuf::down_cast<const ::CVideo_GetVideoBookmarks_Request*>(request),
             ::google::protobuf::down_cast< ::CVideo_GetVideoBookmarks_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Video::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_ClientGetVideoURL_Request::default_instance();
    case 1:
      return ::CVideo_SetVideoBookmark_Notification::default_instance();
    case 2:
      return ::CVideo_GetVideoBookmarks_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Video::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_ClientGetVideoURL_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::CVideo_GetVideoBookmarks_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Video_Stub::Video_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Video_Stub::Video_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Video_Stub::~Video_Stub() {
  if (owns_channel_) delete channel_;
}

void Video_Stub::ClientGetVideoURL(::google::protobuf::RpcController* controller,
                              const ::CVideo_ClientGetVideoURL_Request* request,
                              ::CVideo_ClientGetVideoURL_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Video_Stub::SetVideoBookmark(::google::protobuf::RpcController* controller,
                              const ::CVideo_SetVideoBookmark_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Video_Stub::GetVideoBookmarks(::google::protobuf::RpcController* controller,
                              const ::CVideo_GetVideoBookmarks_Request* request,
                              ::CVideo_GetVideoBookmarks_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

VideoClient::~VideoClient() {}

const ::google::protobuf::ServiceDescriptor* VideoClient::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* VideoClient::GetDescriptor() {
  return descriptor();
}

void VideoClient::NotifyUnlockedH264(::google::protobuf::RpcController* controller,
                         const ::CVideo_UnlockedH264_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUnlockedH264() not implemented.");
  done->Run();
}

void VideoClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      NotifyUnlockedH264(controller,
             ::google::protobuf::down_cast<const ::CVideo_UnlockedH264_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& VideoClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_UnlockedH264_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& VideoClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VideoClient_Stub::VideoClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VideoClient_Stub::VideoClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
VideoClient_Stub::~VideoClient_Stub() {
  if (owns_channel_) delete channel_;
}

void VideoClient_Stub::NotifyUnlockedH264(::google::protobuf::RpcController* controller,
                              const ::CVideo_UnlockedH264_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

FovasVideo::~FovasVideo() {}

const ::google::protobuf::ServiceDescriptor* FovasVideo::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[2];
}

const ::google::protobuf::ServiceDescriptor* FovasVideo::GetDescriptor() {
  return descriptor();
}

void FovasVideo::ClientGetOPFSettings(::google::protobuf::RpcController* controller,
                         const ::CFovasVideo_ClientGetOPFSettings_Request*,
                         ::CFovasVideo_ClientGetOPFSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetOPFSettings() not implemented.");
  done->Run();
}

void FovasVideo::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[2]);
  switch(method->index()) {
    case 0:
      ClientGetOPFSettings(controller,
             ::google::protobuf::down_cast<const ::CFovasVideo_ClientGetOPFSettings_Request*>(request),
             ::google::protobuf::down_cast< ::CFovasVideo_ClientGetOPFSettings_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FovasVideo::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFovasVideo_ClientGetOPFSettings_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FovasVideo::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFovasVideo_ClientGetOPFSettings_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FovasVideo_Stub::FovasVideo_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FovasVideo_Stub::FovasVideo_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FovasVideo_Stub::~FovasVideo_Stub() {
  if (owns_channel_) delete channel_;
}

void FovasVideo_Stub::ClientGetOPFSettings(::google::protobuf::RpcController* controller,
                              const ::CFovasVideo_ClientGetOPFSettings_Request* request,
                              ::CFovasVideo_ClientGetOPFSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideo_ClientGetVideoURL_Request* Arena::CreateMaybeMessage< ::CVideo_ClientGetVideoURL_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CVideo_ClientGetVideoURL_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideo_ClientGetVideoURL_Response* Arena::CreateMaybeMessage< ::CVideo_ClientGetVideoURL_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CVideo_ClientGetVideoURL_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::VideoBookmark* Arena::CreateMaybeMessage< ::VideoBookmark >(Arena* arena) {
  return Arena::CreateInternal< ::VideoBookmark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideo_SetVideoBookmark_Notification* Arena::CreateMaybeMessage< ::CVideo_SetVideoBookmark_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CVideo_SetVideoBookmark_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideo_GetVideoBookmarks_Request* Arena::CreateMaybeMessage< ::CVideo_GetVideoBookmarks_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CVideo_GetVideoBookmarks_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideo_GetVideoBookmarks_Response* Arena::CreateMaybeMessage< ::CVideo_GetVideoBookmarks_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CVideo_GetVideoBookmarks_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CVideo_UnlockedH264_Notification* Arena::CreateMaybeMessage< ::CVideo_UnlockedH264_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CVideo_UnlockedH264_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFovasVideo_ClientGetOPFSettings_Request* Arena::CreateMaybeMessage< ::CFovasVideo_ClientGetOPFSettings_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CFovasVideo_ClientGetOPFSettings_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CFovasVideo_ClientGetOPFSettings_Response* Arena::CreateMaybeMessage< ::CFovasVideo_ClientGetOPFSettings_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CFovasVideo_ClientGetOPFSettings_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
