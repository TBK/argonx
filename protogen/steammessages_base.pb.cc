// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#include "steammessages_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CMsgProtoBufHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgProtoBufHeader>
      _instance;
} _CMsgProtoBufHeader_default_instance_;
class CMsgMultiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMulti>
      _instance;
} _CMsgMulti_default_instance_;
class CMsgProtobufWrappedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgProtobufWrapped>
      _instance;
} _CMsgProtobufWrapped_default_instance_;
class CMsgAuthTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAuthTicket>
      _instance;
} _CMsgAuthTicket_default_instance_;
class CCDDBAppDetailCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCDDBAppDetailCommon>
      _instance;
} _CCDDBAppDetailCommon_default_instance_;
class CMsgAppRightsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAppRights>
      _instance;
} _CMsgAppRights_default_instance_;
class CCuratorPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCuratorPreferences>
      _instance;
} _CCuratorPreferences_default_instance_;
class CLocalizationTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLocalizationToken>
      _instance;
} _CLocalizationToken_default_instance_;
namespace protobuf_steammessages_5fbase_2eproto {
static void InitDefaultsCMsgProtoBufHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgProtoBufHeader_default_instance_;
    new (ptr) ::CMsgProtoBufHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgProtoBufHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgProtoBufHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgProtoBufHeader}, {}};

static void InitDefaultsCMsgMulti() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgMulti_default_instance_;
    new (ptr) ::CMsgMulti();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMulti::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMulti =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMulti}, {}};

static void InitDefaultsCMsgProtobufWrapped() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgProtobufWrapped_default_instance_;
    new (ptr) ::CMsgProtobufWrapped();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgProtobufWrapped::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgProtobufWrapped =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgProtobufWrapped}, {}};

static void InitDefaultsCMsgAuthTicket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgAuthTicket_default_instance_;
    new (ptr) ::CMsgAuthTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAuthTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAuthTicket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAuthTicket}, {}};

static void InitDefaultsCCDDBAppDetailCommon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCDDBAppDetailCommon_default_instance_;
    new (ptr) ::CCDDBAppDetailCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCDDBAppDetailCommon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCDDBAppDetailCommon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCDDBAppDetailCommon}, {}};

static void InitDefaultsCMsgAppRights() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgAppRights_default_instance_;
    new (ptr) ::CMsgAppRights();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAppRights::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAppRights =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAppRights}, {}};

static void InitDefaultsCCuratorPreferences() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCuratorPreferences_default_instance_;
    new (ptr) ::CCuratorPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCuratorPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCuratorPreferences =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCuratorPreferences}, {}};

static void InitDefaultsCLocalizationToken() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLocalizationToken_default_instance_;
    new (ptr) ::CLocalizationToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLocalizationToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CLocalizationToken =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCLocalizationToken}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgProtoBufHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMulti.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgProtobufWrapped.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAuthTicket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCDDBAppDetailCommon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAppRights.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCuratorPreferences.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CLocalizationToken.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, client_sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, routing_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, jobid_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, jobid_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, target_job_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, auth_account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, token_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, admin_spoofing_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, transport_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, publisher_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, sysid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, trace_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, webapi_key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, is_from_external_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, forward_to_sysid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtoBufHeader, cm_sysid_),
  2,
  3,
  4,
  16,
  17,
  0,
  11,
  18,
  1,
  5,
  6,
  10,
  13,
  19,
  20,
  7,
  8,
  9,
  15,
  14,
  ~0u,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMulti, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMulti, size_unzipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMulti, message_body_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtobufWrapped, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtobufWrapped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgProtobufWrapped, message_body_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, estate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, h_steam_pipe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, ticket_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAuthTicket, ticket_),
  2,
  6,
  1,
  4,
  3,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, logo_small_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, tool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, demo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, media_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, community_visible_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, friendly_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, propagation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCDDBAppDetailCommon, has_adult_content_),
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  4,
  5,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, edit_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, publish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, view_error_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, download_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, upload_cdkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, generate_cdkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, view_financials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, manage_ceg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, manage_signing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, manage_cdkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, edit_marketing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, economy_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, economy_support_supervisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, manage_pricing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAppRights, broadcast_live_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, supported_languages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, platform_windows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, platform_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, platform_linux_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, vr_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, adult_content_violence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, adult_content_sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, timestamp_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, tagids_curated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, tagids_filtered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, website_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, website_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, discussion_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCuratorPreferences, show_broadcast_),
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  8,
  ~0u,
  ~0u,
  0,
  1,
  2,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLocalizationToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLocalizationToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLocalizationToken, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLocalizationToken, localized_string_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::CMsgProtoBufHeader)},
  { 49, 56, sizeof(::CMsgMulti)},
  { 58, 64, sizeof(::CMsgProtobufWrapped)},
  { 65, 77, sizeof(::CMsgAuthTicket)},
  { 84, 101, sizeof(::CCDDBAppDetailCommon)},
  { 113, 133, sizeof(::CMsgAppRights)},
  { 148, 167, sizeof(::CCuratorPreferences)},
  { 181, 188, sizeof(::CLocalizationToken)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgProtoBufHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMulti_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgProtobufWrapped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCDDBAppDetailCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgAppRights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCuratorPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CLocalizationToken_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_base.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030steammessages_base.proto\032 google/proto"
      "buf/descriptor.proto\"\305\004\n\022CMsgProtoBufHea"
      "der\022\017\n\007steamid\030\001 \001(\006\022\030\n\020client_sessionid"
      "\030\002 \001(\005\022\025\n\rrouting_appid\030\003 \001(\r\022*\n\014jobid_s"
      "ource\030\n \001(\006:\02418446744073709551615\022*\n\014job"
      "id_target\030\013 \001(\006:\02418446744073709551615\022\027\n"
      "\017target_job_name\030\014 \001(\t\022\017\n\007seq_num\030\030 \001(\005\022"
      "\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001"
      "(\t\022\n\n\002ip\030\017 \001(\r\022\032\n\022auth_account_flags\030\020 \001"
      "(\r\022\024\n\014token_source\030\026 \001(\r\022\033\n\023admin_spoofi"
      "ng_user\030\027 \001(\010\022\032\n\017transport_error\030\021 \001(\005:\001"
      "1\022\'\n\tmessageid\030\022 \001(\004:\024184467440737095516"
      "15\022\032\n\022publisher_group_id\030\023 \001(\r\022\r\n\005sysid\030"
      "\024 \001(\r\022\021\n\ttrace_tag\030\025 \001(\004\022\025\n\rwebapi_key_i"
      "d\030\031 \001(\r\022\037\n\027is_from_external_source\030\032 \001(\010"
      "\022\030\n\020forward_to_sysid\030\033 \003(\r\022\020\n\010cm_sysid\030\034"
      " \001(\r\"8\n\tCMsgMulti\022\025\n\rsize_unzipped\030\001 \001(\r"
      "\022\024\n\014message_body\030\002 \001(\014\"+\n\023CMsgProtobufWr"
      "apped\022\024\n\014message_body\030\001 \001(\014\"\217\001\n\016CMsgAuth"
      "Ticket\022\016\n\006estate\030\001 \001(\r\022\022\n\007eresult\030\002 \001(\r:"
      "\0012\022\017\n\007steamid\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\006\022\024\n\014h"
      "_steam_pipe\030\005 \001(\r\022\022\n\nticket_crc\030\006 \001(\r\022\016\n"
      "\006ticket\030\007 \001(\014\"\366\001\n\024CCDDBAppDetailCommon\022\r"
      "\n\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001("
      "\t\022\014\n\004logo\030\004 \001(\t\022\022\n\nlogo_small\030\005 \001(\t\022\014\n\004t"
      "ool\030\006 \001(\010\022\014\n\004demo\030\007 \001(\010\022\r\n\005media\030\010 \001(\010\022\037"
      "\n\027community_visible_stats\030\t \001(\010\022\025\n\rfrien"
      "dly_name\030\n \001(\t\022\023\n\013propagation\030\013 \001(\t\022\031\n\021h"
      "as_adult_content\030\014 \001(\010\"\357\002\n\rCMsgAppRights"
      "\022\021\n\tedit_info\030\001 \001(\010\022\017\n\007publish\030\002 \001(\010\022\027\n\017"
      "view_error_data\030\003 \001(\010\022\020\n\010download\030\004 \001(\010\022"
      "\025\n\rupload_cdkeys\030\005 \001(\010\022\027\n\017generate_cdkey"
      "s\030\006 \001(\010\022\027\n\017view_financials\030\007 \001(\010\022\022\n\nmana"
      "ge_ceg\030\010 \001(\010\022\026\n\016manage_signing\030\t \001(\010\022\025\n\r"
      "manage_cdkeys\030\n \001(\010\022\026\n\016edit_marketing\030\013 "
      "\001(\010\022\027\n\017economy_support\030\014 \001(\010\022\"\n\032economy_"
      "support_supervisor\030\r \001(\010\022\026\n\016manage_prici"
      "ng\030\016 \001(\010\022\026\n\016broadcast_live\030\017 \001(\010\"\361\002\n\023CCu"
      "ratorPreferences\022\033\n\023supported_languages\030"
      "\001 \001(\r\022\030\n\020platform_windows\030\002 \001(\010\022\024\n\014platf"
      "orm_mac\030\003 \001(\010\022\026\n\016platform_linux\030\004 \001(\010\022\022\n"
      "\nvr_content\030\005 \001(\010\022\036\n\026adult_content_viole"
      "nce\030\006 \001(\010\022\031\n\021adult_content_sex\030\007 \001(\010\022\031\n\021"
      "timestamp_updated\030\010 \001(\r\022\026\n\016tagids_curate"
      "d\030\t \003(\r\022\027\n\017tagids_filtered\030\n \003(\r\022\025\n\rwebs"
      "ite_title\030\013 \001(\t\022\023\n\013website_url\030\014 \001(\t\022\026\n\016"
      "discussion_url\030\r \001(\t\022\026\n\016show_broadcast\030\016"
      " \001(\010\"@\n\022CLocalizationToken\022\020\n\010language\030\001"
      " \001(\r\022\030\n\020localized_string\030\002 \001(\t:A\n\022msgpoo"
      "l_soft_limit\022\037.google.protobuf.MessageOp"
      "tions\030\320\206\003 \001(\005:\00232:B\n\022msgpool_hard_limit\022"
      "\037.google.protobuf.MessageOptions\030\321\206\003 \001(\005"
      ":\003384:C\n\024force_php_generation\022\034.google.p"
      "rotobuf.FileOptions\030\320\206\003 \001(\010:\005false:H\n\030ph"
      "p_output_always_number\022\035.google.protobuf"
      ".FieldOptions\030\344\206\003 \001(\010:\005falseB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_base.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fbase_2eproto

// ===================================================================

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgProtoBufHeader::kSteamidFieldNumber;
const int CMsgProtoBufHeader::kClientSessionidFieldNumber;
const int CMsgProtoBufHeader::kRoutingAppidFieldNumber;
const int CMsgProtoBufHeader::kJobidSourceFieldNumber;
const int CMsgProtoBufHeader::kJobidTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kSeqNumFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kIpFieldNumber;
const int CMsgProtoBufHeader::kAuthAccountFlagsFieldNumber;
const int CMsgProtoBufHeader::kTokenSourceFieldNumber;
const int CMsgProtoBufHeader::kAdminSpoofingUserFieldNumber;
const int CMsgProtoBufHeader::kTransportErrorFieldNumber;
const int CMsgProtoBufHeader::kMessageidFieldNumber;
const int CMsgProtoBufHeader::kPublisherGroupIdFieldNumber;
const int CMsgProtoBufHeader::kSysidFieldNumber;
const int CMsgProtoBufHeader::kTraceTagFieldNumber;
const int CMsgProtoBufHeader::kWebapiKeyIdFieldNumber;
const int CMsgProtoBufHeader::kIsFromExternalSourceFieldNumber;
const int CMsgProtoBufHeader::kForwardToSysidFieldNumber;
const int CMsgProtoBufHeader::kCmSysidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CMsgProtoBufHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      forward_to_sysid_(from.forward_to_sysid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_job_name()) {
    target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
  }
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&messageid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(messageid_));
  // @@protoc_insertion_point(copy_constructor:CMsgProtoBufHeader)
}

void CMsgProtoBufHeader::SharedCtor() {
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webapi_key_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(webapi_key_id_));
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  eresult_ = 2;
  transport_error_ = 1;
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoBufHeader)
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  target_job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CMsgProtoBufHeader.base);
  return *internal_default_instance();
}


void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forward_to_sysid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_job_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publisher_group_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(publisher_group_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&sysid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webapi_key_id_) -
        reinterpret_cast<char*>(&sysid_)) + sizeof(webapi_key_id_));
  }
  if (cached_has_bits & 2031616u) {
    jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    eresult_ = 2;
    transport_error_ = 1;
    messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgProtoBufHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_sessionid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_client_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 routing_appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_routing_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_jobid_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_jobid_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_job_name().data(), static_cast<int>(this->target_job_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgProtoBufHeader.target_job_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgProtoBufHeader.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ip = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_account_flags = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_auth_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_error = 17 [default = 1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_transport_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 messageid = 18 [default = 18446744073709551615];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publisher_group_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_publisher_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sysid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_sysid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 trace_tag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_trace_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 token_source = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_token_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool admin_spoofing_user = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_admin_spoofing_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_spoofing_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seq_num = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webapi_key_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_webapi_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webapi_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_from_external_source = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_is_from_external_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_external_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 forward_to_sysid = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 216u, input, this->mutable_forward_to_sysid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forward_to_sysid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cm_sysid = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_cm_sysid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_sysid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgProtoBufHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgProtoBufHeader)
  return false;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 client_sessionid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_sessionid(), output);
  }

  // optional uint32 routing_appid = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routing_appid(), output);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->jobid_source(), output);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->jobid_target(), output);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), static_cast<int>(this->target_job_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.target_job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->error_message(), output);
  }

  // optional uint32 ip = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ip(), output);
  }

  // optional uint32 auth_account_flags = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->auth_account_flags(), output);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->transport_error(), output);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->messageid(), output);
  }

  // optional uint32 publisher_group_id = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->publisher_group_id(), output);
  }

  // optional uint32 sysid = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sysid(), output);
  }

  // optional uint64 trace_tag = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->trace_tag(), output);
  }

  // optional uint32 token_source = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->token_source(), output);
  }

  // optional bool admin_spoofing_user = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->admin_spoofing_user(), output);
  }

  // optional int32 seq_num = 24;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->seq_num(), output);
  }

  // optional uint32 webapi_key_id = 25;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->webapi_key_id(), output);
  }

  // optional bool is_from_external_source = 26;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_from_external_source(), output);
  }

  // repeated uint32 forward_to_sysid = 27;
  for (int i = 0, n = this->forward_to_sysid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      27, this->forward_to_sysid(i), output);
  }

  // optional uint32 cm_sysid = 28;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cm_sysid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgProtoBufHeader)
}

::google::protobuf::uint8* CMsgProtoBufHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 client_sessionid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_sessionid(), target);
  }

  // optional uint32 routing_appid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routing_appid(), target);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->jobid_source(), target);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->jobid_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), static_cast<int>(this->target_job_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.target_job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  // optional uint32 ip = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ip(), target);
  }

  // optional uint32 auth_account_flags = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->auth_account_flags(), target);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->transport_error(), target);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->messageid(), target);
  }

  // optional uint32 publisher_group_id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->publisher_group_id(), target);
  }

  // optional uint32 sysid = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sysid(), target);
  }

  // optional uint64 trace_tag = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->trace_tag(), target);
  }

  // optional uint32 token_source = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->token_source(), target);
  }

  // optional bool admin_spoofing_user = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->admin_spoofing_user(), target);
  }

  // optional int32 seq_num = 24;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->seq_num(), target);
  }

  // optional uint32 webapi_key_id = 25;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->webapi_key_id(), target);
  }

  // optional bool is_from_external_source = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_from_external_source(), target);
  }

  // repeated uint32 forward_to_sysid = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(27, this->forward_to_sysid_, target);

  // optional uint32 cm_sysid = 28;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cm_sysid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoBufHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 forward_to_sysid = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->forward_to_sysid_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->forward_to_sysid_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 client_sessionid = 2;
    if (has_client_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (has_routing_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_appid());
    }

    // optional uint32 ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 auth_account_flags = 16;
    if (has_auth_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_account_flags());
    }

    // optional uint32 publisher_group_id = 19;
    if (has_publisher_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sysid = 20;
    if (has_sysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysid());
    }

    // optional uint64 trace_tag = 21;
    if (has_trace_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_tag());
    }

    // optional uint32 token_source = 22;
    if (has_token_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_source());
    }

    // optional int32 seq_num = 24;
    if (has_seq_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_num());
    }

    // optional uint32 cm_sysid = 28;
    if (has_cm_sysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_sysid());
    }

    // optional bool admin_spoofing_user = 23;
    if (has_admin_spoofing_user()) {
      total_size += 2 + 1;
    }

    // optional bool is_from_external_source = 26;
    if (has_is_from_external_source()) {
      total_size += 2 + 1;
    }

    // optional uint32 webapi_key_id = 25;
    if (has_webapi_key_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webapi_key_id());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (has_jobid_source()) {
      total_size += 1 + 8;
    }

    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (has_jobid_target()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 transport_error = 17 [default = 1];
    if (has_transport_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (has_messageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgProtoBufHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProtoBufHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProtoBufHeader)
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forward_to_sysid_.MergeFrom(from.forward_to_sysid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_target_job_name();
      target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_sessionid_ = from.client_sessionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      routing_appid_ = from.routing_appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      auth_account_flags_ = from.auth_account_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      publisher_group_id_ = from.publisher_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sysid_ = from.sysid_;
    }
    if (cached_has_bits & 0x00000200u) {
      trace_tag_ = from.trace_tag_;
    }
    if (cached_has_bits & 0x00000400u) {
      token_source_ = from.token_source_;
    }
    if (cached_has_bits & 0x00000800u) {
      seq_num_ = from.seq_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      cm_sysid_ = from.cm_sysid_;
    }
    if (cached_has_bits & 0x00002000u) {
      admin_spoofing_user_ = from.admin_spoofing_user_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_from_external_source_ = from.is_from_external_source_;
    }
    if (cached_has_bits & 0x00008000u) {
      webapi_key_id_ = from.webapi_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      jobid_source_ = from.jobid_source_;
    }
    if (cached_has_bits & 0x00020000u) {
      jobid_target_ = from.jobid_target_;
    }
    if (cached_has_bits & 0x00040000u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00080000u) {
      transport_error_ = from.transport_error_;
    }
    if (cached_has_bits & 0x00100000u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  using std::swap;
  forward_to_sysid_.InternalSwap(&other->forward_to_sysid_);
  target_job_name_.Swap(&other->target_job_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(client_sessionid_, other->client_sessionid_);
  swap(routing_appid_, other->routing_appid_);
  swap(ip_, other->ip_);
  swap(auth_account_flags_, other->auth_account_flags_);
  swap(publisher_group_id_, other->publisher_group_id_);
  swap(sysid_, other->sysid_);
  swap(trace_tag_, other->trace_tag_);
  swap(token_source_, other->token_source_);
  swap(seq_num_, other->seq_num_);
  swap(cm_sysid_, other->cm_sysid_);
  swap(admin_spoofing_user_, other->admin_spoofing_user_);
  swap(is_from_external_source_, other->is_from_external_source_);
  swap(webapi_key_id_, other->webapi_key_id_);
  swap(jobid_source_, other->jobid_source_);
  swap(jobid_target_, other->jobid_target_);
  swap(eresult_, other->eresult_);
  swap(transport_error_, other->transport_error_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMulti::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMulti::kSizeUnzippedFieldNumber;
const int CMsgMulti::kMessageBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMulti::CMsgMulti()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CMsgMulti.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMulti)
}
CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_body()) {
    message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
  }
  size_unzipped_ = from.size_unzipped_;
  // @@protoc_insertion_point(copy_constructor:CMsgMulti)
}

void CMsgMulti::SharedCtor() {
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_unzipped_ = 0u;
}

CMsgMulti::~CMsgMulti() {
  // @@protoc_insertion_point(destructor:CMsgMulti)
  SharedDtor();
}

void CMsgMulti::SharedDtor() {
  message_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgMulti::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgMulti::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMulti& CMsgMulti::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CMsgMulti.base);
  return *internal_default_instance();
}


void CMsgMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMulti)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_body_.ClearNonDefaultToEmptyNoArena();
  }
  size_unzipped_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMulti)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_unzipped = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_size_unzipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_unzipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message_body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMulti)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMulti)
  return false;
#undef DO_
}

void CMsgMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMulti)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_unzipped = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_unzipped(), output);
  }

  // optional bytes message_body = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message_body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMulti)
}

::google::protobuf::uint8* CMsgMulti::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMulti)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_unzipped = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size_unzipped(), target);
  }

  // optional bytes message_body = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message_body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMulti)
  return target;
}

size_t CMsgMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMulti)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes message_body = 2;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

    // optional uint32 size_unzipped = 1;
    if (has_size_unzipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_unzipped());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMulti::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMulti* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMulti>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMulti)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMulti)
    MergeFrom(*source);
  }
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message_body();
      message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
    }
    if (cached_has_bits & 0x00000002u) {
      size_unzipped_ = from.size_unzipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMulti::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {
  return true;
}

void CMsgMulti::Swap(CMsgMulti* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMulti::InternalSwap(CMsgMulti* other) {
  using std::swap;
  message_body_.Swap(&other->message_body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_unzipped_, other->size_unzipped_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgMulti::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgProtobufWrapped::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgProtobufWrapped::kMessageBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgProtobufWrapped::CMsgProtobufWrapped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CMsgProtobufWrapped.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgProtobufWrapped)
}
CMsgProtobufWrapped::CMsgProtobufWrapped(const CMsgProtobufWrapped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_body()) {
    message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgProtobufWrapped)
}

void CMsgProtobufWrapped::SharedCtor() {
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgProtobufWrapped::~CMsgProtobufWrapped() {
  // @@protoc_insertion_point(destructor:CMsgProtobufWrapped)
  SharedDtor();
}

void CMsgProtobufWrapped::SharedDtor() {
  message_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtobufWrapped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgProtobufWrapped::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgProtobufWrapped& CMsgProtobufWrapped::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CMsgProtobufWrapped.base);
  return *internal_default_instance();
}


void CMsgProtobufWrapped::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtobufWrapped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_body_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgProtobufWrapped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgProtobufWrapped)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message_body = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgProtobufWrapped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgProtobufWrapped)
  return false;
#undef DO_
}

void CMsgProtobufWrapped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgProtobufWrapped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes message_body = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->message_body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgProtobufWrapped)
}

::google::protobuf::uint8* CMsgProtobufWrapped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtobufWrapped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes message_body = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message_body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtobufWrapped)
  return target;
}

size_t CMsgProtobufWrapped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtobufWrapped)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes message_body = 1;
  if (has_message_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message_body());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtobufWrapped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProtobufWrapped)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtobufWrapped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgProtobufWrapped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProtobufWrapped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProtobufWrapped)
    MergeFrom(*source);
  }
}

void CMsgProtobufWrapped::MergeFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtobufWrapped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_body()) {
    set_has_message_body();
    message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
  }
}

void CMsgProtobufWrapped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtobufWrapped::CopyFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtobufWrapped::IsInitialized() const {
  return true;
}

void CMsgProtobufWrapped::Swap(CMsgProtobufWrapped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgProtobufWrapped::InternalSwap(CMsgProtobufWrapped* other) {
  using std::swap;
  message_body_.Swap(&other->message_body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgProtobufWrapped::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgAuthTicket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAuthTicket::kEstateFieldNumber;
const int CMsgAuthTicket::kEresultFieldNumber;
const int CMsgAuthTicket::kSteamidFieldNumber;
const int CMsgAuthTicket::kGameidFieldNumber;
const int CMsgAuthTicket::kHSteamPipeFieldNumber;
const int CMsgAuthTicket::kTicketCrcFieldNumber;
const int CMsgAuthTicket::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAuthTicket::CMsgAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CMsgAuthTicket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAuthTicket)
}
CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAuthTicket)
}

void CMsgAuthTicket::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_crc_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(ticket_crc_));
  eresult_ = 2u;
}

CMsgAuthTicket::~CMsgAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgAuthTicket)
  SharedDtor();
}

void CMsgAuthTicket::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgAuthTicket::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CMsgAuthTicket.base);
  return *internal_default_instance();
}


void CMsgAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ticket_crc_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(ticket_crc_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAuthTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 estate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_estate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 h_steam_pipe = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_h_steam_pipe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_steam_pipe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ticket_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAuthTicket)
  return false;
#undef DO_
}

void CMsgAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 estate = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->estate(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  // optional fixed64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameid(), output);
  }

  // optional uint32 h_steam_pipe = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h_steam_pipe(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional bytes ticket = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAuthTicket)
}

::google::protobuf::uint8* CMsgAuthTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 estate = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->estate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  // optional fixed64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameid(), target);
  }

  // optional uint32 h_steam_pipe = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->h_steam_pipe(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional bytes ticket = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAuthTicket)
  return target;
}

size_t CMsgAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes ticket = 7;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional fixed64 steamid = 3;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 1;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 h_steam_pipe = 5;
    if (has_h_steam_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_steam_pipe());
    }

    // optional fixed64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAuthTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAuthTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      estate_ = from.estate_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_steam_pipe_ = from.h_steam_pipe_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ticket_crc_ = from.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {
  return true;
}

void CMsgAuthTicket::Swap(CMsgAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAuthTicket::InternalSwap(CMsgAuthTicket* other) {
  using std::swap;
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(estate_, other->estate_);
  swap(h_steam_pipe_, other->h_steam_pipe_);
  swap(gameid_, other->gameid_);
  swap(ticket_crc_, other->ticket_crc_);
  swap(eresult_, other->eresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgAuthTicket::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCDDBAppDetailCommon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCDDBAppDetailCommon::kAppidFieldNumber;
const int CCDDBAppDetailCommon::kNameFieldNumber;
const int CCDDBAppDetailCommon::kIconFieldNumber;
const int CCDDBAppDetailCommon::kLogoFieldNumber;
const int CCDDBAppDetailCommon::kLogoSmallFieldNumber;
const int CCDDBAppDetailCommon::kToolFieldNumber;
const int CCDDBAppDetailCommon::kDemoFieldNumber;
const int CCDDBAppDetailCommon::kMediaFieldNumber;
const int CCDDBAppDetailCommon::kCommunityVisibleStatsFieldNumber;
const int CCDDBAppDetailCommon::kFriendlyNameFieldNumber;
const int CCDDBAppDetailCommon::kPropagationFieldNumber;
const int CCDDBAppDetailCommon::kHasAdultContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCDDBAppDetailCommon::CCDDBAppDetailCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CCDDBAppDetailCommon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCDDBAppDetailCommon)
}
CCDDBAppDetailCommon::CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_logo()) {
    logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_);
  }
  logo_small_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_logo_small()) {
    logo_small_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_small_);
  }
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friendly_name()) {
    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  propagation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_propagation()) {
    propagation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propagation_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_adult_content_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(has_adult_content_));
  // @@protoc_insertion_point(copy_constructor:CCDDBAppDetailCommon)
}

void CCDDBAppDetailCommon::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_small_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propagation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_adult_content_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(has_adult_content_));
}

CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  // @@protoc_insertion_point(destructor:CCDDBAppDetailCommon)
  SharedDtor();
}

void CCDDBAppDetailCommon::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_small_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propagation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCDDBAppDetailCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCDDBAppDetailCommon::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCDDBAppDetailCommon& CCDDBAppDetailCommon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CCDDBAppDetailCommon.base);
  return *internal_default_instance();
}


void CCDDBAppDetailCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:CCDDBAppDetailCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      logo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      logo_small_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      friendly_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      propagation_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tool_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(tool_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&demo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_adult_content_) -
        reinterpret_cast<char*>(&demo_)) + sizeof(has_adult_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCDDBAppDetailCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCDDBAppDetailCommon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCDDBAppDetailCommon.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCDDBAppDetailCommon.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo().data(), static_cast<int>(this->logo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCDDBAppDetailCommon.logo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string logo_small = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_small()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_small().data(), static_cast<int>(this->logo_small().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCDDBAppDetailCommon.logo_small");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tool = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool demo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_demo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &demo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool media = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_media();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool community_visible_stats = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_community_visible_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &community_visible_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string friendly_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCDDBAppDetailCommon.friendly_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string propagation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propagation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->propagation().data(), static_cast<int>(this->propagation().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCDDBAppDetailCommon.propagation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_adult_content = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_has_adult_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_adult_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCDDBAppDetailCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCDDBAppDetailCommon)
  return false;
#undef DO_
}

void CCDDBAppDetailCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCDDBAppDetailCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon(), output);
  }

  // optional string logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo().data(), static_cast<int>(this->logo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.logo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->logo(), output);
  }

  // optional string logo_small = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_small().data(), static_cast<int>(this->logo_small().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.logo_small");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->logo_small(), output);
  }

  // optional bool tool = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tool(), output);
  }

  // optional bool demo = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->demo(), output);
  }

  // optional bool media = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->media(), output);
  }

  // optional bool community_visible_stats = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->community_visible_stats(), output);
  }

  // optional string friendly_name = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->friendly_name(), output);
  }

  // optional string propagation = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propagation().data(), static_cast<int>(this->propagation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.propagation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->propagation(), output);
  }

  // optional bool has_adult_content = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_adult_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCDDBAppDetailCommon)
}

::google::protobuf::uint8* CCDDBAppDetailCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCDDBAppDetailCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // optional string logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo().data(), static_cast<int>(this->logo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.logo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logo(), target);
  }

  // optional string logo_small = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_small().data(), static_cast<int>(this->logo_small().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.logo_small");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->logo_small(), target);
  }

  // optional bool tool = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tool(), target);
  }

  // optional bool demo = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->demo(), target);
  }

  // optional bool media = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->media(), target);
  }

  // optional bool community_visible_stats = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->community_visible_stats(), target);
  }

  // optional string friendly_name = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->friendly_name(), target);
  }

  // optional string propagation = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propagation().data(), static_cast<int>(this->propagation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.propagation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->propagation(), target);
  }

  // optional bool has_adult_content = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->has_adult_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCDDBAppDetailCommon)
  return target;
}

size_t CCDDBAppDetailCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCDDBAppDetailCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo());
    }

    // optional string logo_small = 5;
    if (has_logo_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_small());
    }

    // optional string friendly_name = 10;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional string propagation = 11;
    if (has_propagation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propagation());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool tool = 6;
    if (has_tool()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool demo = 7;
    if (has_demo()) {
      total_size += 1 + 1;
    }

    // optional bool media = 8;
    if (has_media()) {
      total_size += 1 + 1;
    }

    // optional bool community_visible_stats = 9;
    if (has_community_visible_stats()) {
      total_size += 1 + 1;
    }

    // optional bool has_adult_content = 12;
    if (has_has_adult_content()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCDDBAppDetailCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCDDBAppDetailCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const CCDDBAppDetailCommon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCDDBAppDetailCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCDDBAppDetailCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCDDBAppDetailCommon)
    MergeFrom(*source);
  }
}

void CCDDBAppDetailCommon::MergeFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCDDBAppDetailCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_logo();
      logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_logo_small();
      logo_small_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_small_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_friendly_name();
      friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_propagation();
      propagation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propagation_);
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      tool_ = from.tool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      demo_ = from.demo_;
    }
    if (cached_has_bits & 0x00000200u) {
      media_ = from.media_;
    }
    if (cached_has_bits & 0x00000400u) {
      community_visible_stats_ = from.community_visible_stats_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_adult_content_ = from.has_adult_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCDDBAppDetailCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDDBAppDetailCommon::IsInitialized() const {
  return true;
}

void CCDDBAppDetailCommon::Swap(CCDDBAppDetailCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCDDBAppDetailCommon::InternalSwap(CCDDBAppDetailCommon* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logo_.Swap(&other->logo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logo_small_.Swap(&other->logo_small_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  friendly_name_.Swap(&other->friendly_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  propagation_.Swap(&other->propagation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(tool_, other->tool_);
  swap(demo_, other->demo_);
  swap(media_, other->media_);
  swap(community_visible_stats_, other->community_visible_stats_);
  swap(has_adult_content_, other->has_adult_content_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCDDBAppDetailCommon::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgAppRights::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAppRights::kEditInfoFieldNumber;
const int CMsgAppRights::kPublishFieldNumber;
const int CMsgAppRights::kViewErrorDataFieldNumber;
const int CMsgAppRights::kDownloadFieldNumber;
const int CMsgAppRights::kUploadCdkeysFieldNumber;
const int CMsgAppRights::kGenerateCdkeysFieldNumber;
const int CMsgAppRights::kViewFinancialsFieldNumber;
const int CMsgAppRights::kManageCegFieldNumber;
const int CMsgAppRights::kManageSigningFieldNumber;
const int CMsgAppRights::kManageCdkeysFieldNumber;
const int CMsgAppRights::kEditMarketingFieldNumber;
const int CMsgAppRights::kEconomySupportFieldNumber;
const int CMsgAppRights::kEconomySupportSupervisorFieldNumber;
const int CMsgAppRights::kManagePricingFieldNumber;
const int CMsgAppRights::kBroadcastLiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAppRights::CMsgAppRights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CMsgAppRights.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAppRights)
}
CMsgAppRights::CMsgAppRights(const CMsgAppRights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&edit_info_, &from.edit_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_live_) -
    reinterpret_cast<char*>(&edit_info_)) + sizeof(broadcast_live_));
  // @@protoc_insertion_point(copy_constructor:CMsgAppRights)
}

void CMsgAppRights::SharedCtor() {
  ::memset(&edit_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_live_) -
      reinterpret_cast<char*>(&edit_info_)) + sizeof(broadcast_live_));
}

CMsgAppRights::~CMsgAppRights() {
  // @@protoc_insertion_point(destructor:CMsgAppRights)
  SharedDtor();
}

void CMsgAppRights::SharedDtor() {
}

void CMsgAppRights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgAppRights::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAppRights& CMsgAppRights::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CMsgAppRights.base);
  return *internal_default_instance();
}


void CMsgAppRights::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAppRights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&edit_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manage_ceg_) -
        reinterpret_cast<char*>(&edit_info_)) + sizeof(manage_ceg_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&manage_signing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_live_) -
        reinterpret_cast<char*>(&manage_signing_)) + sizeof(broadcast_live_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAppRights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAppRights)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool edit_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_edit_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_publish();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_error_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_view_error_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_error_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool download = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_download();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool upload_cdkeys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_upload_cdkeys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_cdkeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool generate_cdkeys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_generate_cdkeys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_cdkeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_financials = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_view_financials();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_financials_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_ceg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_manage_ceg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_ceg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_signing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_manage_signing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_signing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_cdkeys = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_manage_cdkeys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_cdkeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool edit_marketing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_edit_marketing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_marketing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool economy_support = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_economy_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool economy_support_supervisor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_economy_support_supervisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_supervisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_pricing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_manage_pricing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_pricing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast_live = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_broadcast_live();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAppRights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAppRights)
  return false;
#undef DO_
}

void CMsgAppRights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAppRights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool edit_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->edit_info(), output);
  }

  // optional bool publish = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->publish(), output);
  }

  // optional bool view_error_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_error_data(), output);
  }

  // optional bool download = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->download(), output);
  }

  // optional bool upload_cdkeys = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upload_cdkeys(), output);
  }

  // optional bool generate_cdkeys = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->generate_cdkeys(), output);
  }

  // optional bool view_financials = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->view_financials(), output);
  }

  // optional bool manage_ceg = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->manage_ceg(), output);
  }

  // optional bool manage_signing = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->manage_signing(), output);
  }

  // optional bool manage_cdkeys = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->manage_cdkeys(), output);
  }

  // optional bool edit_marketing = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->edit_marketing(), output);
  }

  // optional bool economy_support = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->economy_support(), output);
  }

  // optional bool economy_support_supervisor = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->economy_support_supervisor(), output);
  }

  // optional bool manage_pricing = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->manage_pricing(), output);
  }

  // optional bool broadcast_live = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->broadcast_live(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAppRights)
}

::google::protobuf::uint8* CMsgAppRights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAppRights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool edit_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->edit_info(), target);
  }

  // optional bool publish = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->publish(), target);
  }

  // optional bool view_error_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_error_data(), target);
  }

  // optional bool download = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->download(), target);
  }

  // optional bool upload_cdkeys = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upload_cdkeys(), target);
  }

  // optional bool generate_cdkeys = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->generate_cdkeys(), target);
  }

  // optional bool view_financials = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->view_financials(), target);
  }

  // optional bool manage_ceg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->manage_ceg(), target);
  }

  // optional bool manage_signing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->manage_signing(), target);
  }

  // optional bool manage_cdkeys = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->manage_cdkeys(), target);
  }

  // optional bool edit_marketing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->edit_marketing(), target);
  }

  // optional bool economy_support = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->economy_support(), target);
  }

  // optional bool economy_support_supervisor = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->economy_support_supervisor(), target);
  }

  // optional bool manage_pricing = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->manage_pricing(), target);
  }

  // optional bool broadcast_live = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->broadcast_live(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAppRights)
  return target;
}

size_t CMsgAppRights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAppRights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool edit_info = 1;
    if (has_edit_info()) {
      total_size += 1 + 1;
    }

    // optional bool publish = 2;
    if (has_publish()) {
      total_size += 1 + 1;
    }

    // optional bool view_error_data = 3;
    if (has_view_error_data()) {
      total_size += 1 + 1;
    }

    // optional bool download = 4;
    if (has_download()) {
      total_size += 1 + 1;
    }

    // optional bool upload_cdkeys = 5;
    if (has_upload_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool generate_cdkeys = 6;
    if (has_generate_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool view_financials = 7;
    if (has_view_financials()) {
      total_size += 1 + 1;
    }

    // optional bool manage_ceg = 8;
    if (has_manage_ceg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool manage_signing = 9;
    if (has_manage_signing()) {
      total_size += 1 + 1;
    }

    // optional bool manage_cdkeys = 10;
    if (has_manage_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool edit_marketing = 11;
    if (has_edit_marketing()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support = 12;
    if (has_economy_support()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support_supervisor = 13;
    if (has_economy_support_supervisor()) {
      total_size += 1 + 1;
    }

    // optional bool manage_pricing = 14;
    if (has_manage_pricing()) {
      total_size += 1 + 1;
    }

    // optional bool broadcast_live = 15;
    if (has_broadcast_live()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAppRights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAppRights)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAppRights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAppRights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAppRights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAppRights)
    MergeFrom(*source);
  }
}

void CMsgAppRights::MergeFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAppRights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      edit_info_ = from.edit_info_;
    }
    if (cached_has_bits & 0x00000002u) {
      publish_ = from.publish_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_error_data_ = from.view_error_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      download_ = from.download_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_cdkeys_ = from.upload_cdkeys_;
    }
    if (cached_has_bits & 0x00000020u) {
      generate_cdkeys_ = from.generate_cdkeys_;
    }
    if (cached_has_bits & 0x00000040u) {
      view_financials_ = from.view_financials_;
    }
    if (cached_has_bits & 0x00000080u) {
      manage_ceg_ = from.manage_ceg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      manage_signing_ = from.manage_signing_;
    }
    if (cached_has_bits & 0x00000200u) {
      manage_cdkeys_ = from.manage_cdkeys_;
    }
    if (cached_has_bits & 0x00000400u) {
      edit_marketing_ = from.edit_marketing_;
    }
    if (cached_has_bits & 0x00000800u) {
      economy_support_ = from.economy_support_;
    }
    if (cached_has_bits & 0x00001000u) {
      economy_support_supervisor_ = from.economy_support_supervisor_;
    }
    if (cached_has_bits & 0x00002000u) {
      manage_pricing_ = from.manage_pricing_;
    }
    if (cached_has_bits & 0x00004000u) {
      broadcast_live_ = from.broadcast_live_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAppRights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAppRights::IsInitialized() const {
  return true;
}

void CMsgAppRights::Swap(CMsgAppRights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAppRights::InternalSwap(CMsgAppRights* other) {
  using std::swap;
  swap(edit_info_, other->edit_info_);
  swap(publish_, other->publish_);
  swap(view_error_data_, other->view_error_data_);
  swap(download_, other->download_);
  swap(upload_cdkeys_, other->upload_cdkeys_);
  swap(generate_cdkeys_, other->generate_cdkeys_);
  swap(view_financials_, other->view_financials_);
  swap(manage_ceg_, other->manage_ceg_);
  swap(manage_signing_, other->manage_signing_);
  swap(manage_cdkeys_, other->manage_cdkeys_);
  swap(edit_marketing_, other->edit_marketing_);
  swap(economy_support_, other->economy_support_);
  swap(economy_support_supervisor_, other->economy_support_supervisor_);
  swap(manage_pricing_, other->manage_pricing_);
  swap(broadcast_live_, other->broadcast_live_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgAppRights::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCuratorPreferences::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCuratorPreferences::kSupportedLanguagesFieldNumber;
const int CCuratorPreferences::kPlatformWindowsFieldNumber;
const int CCuratorPreferences::kPlatformMacFieldNumber;
const int CCuratorPreferences::kPlatformLinuxFieldNumber;
const int CCuratorPreferences::kVrContentFieldNumber;
const int CCuratorPreferences::kAdultContentViolenceFieldNumber;
const int CCuratorPreferences::kAdultContentSexFieldNumber;
const int CCuratorPreferences::kTimestampUpdatedFieldNumber;
const int CCuratorPreferences::kTagidsCuratedFieldNumber;
const int CCuratorPreferences::kTagidsFilteredFieldNumber;
const int CCuratorPreferences::kWebsiteTitleFieldNumber;
const int CCuratorPreferences::kWebsiteUrlFieldNumber;
const int CCuratorPreferences::kDiscussionUrlFieldNumber;
const int CCuratorPreferences::kShowBroadcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCuratorPreferences::CCuratorPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CCuratorPreferences.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCuratorPreferences)
}
CCuratorPreferences::CCuratorPreferences(const CCuratorPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tagids_curated_(from.tagids_curated_),
      tagids_filtered_(from.tagids_filtered_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  website_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_website_title()) {
    website_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_title_);
  }
  website_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_website_url()) {
    website_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_url_);
  }
  discussion_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_discussion_url()) {
    discussion_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discussion_url_);
  }
  ::memcpy(&supported_languages_, &from.supported_languages_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_broadcast_) -
    reinterpret_cast<char*>(&supported_languages_)) + sizeof(show_broadcast_));
  // @@protoc_insertion_point(copy_constructor:CCuratorPreferences)
}

void CCuratorPreferences::SharedCtor() {
  website_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discussion_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&supported_languages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_broadcast_) -
      reinterpret_cast<char*>(&supported_languages_)) + sizeof(show_broadcast_));
}

CCuratorPreferences::~CCuratorPreferences() {
  // @@protoc_insertion_point(destructor:CCuratorPreferences)
  SharedDtor();
}

void CCuratorPreferences::SharedDtor() {
  website_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discussion_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCuratorPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CCuratorPreferences::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCuratorPreferences& CCuratorPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CCuratorPreferences.base);
  return *internal_default_instance();
}


void CCuratorPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CCuratorPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagids_curated_.Clear();
  tagids_filtered_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      website_title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      website_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      discussion_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&supported_languages_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vr_content_) -
        reinterpret_cast<char*>(&supported_languages_)) + sizeof(vr_content_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&timestamp_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_broadcast_) -
        reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(show_broadcast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCuratorPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCuratorPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 supported_languages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_supported_languages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supported_languages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool platform_windows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_platform_windows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_windows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool platform_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_platform_mac();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool platform_linux = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_platform_linux();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_linux_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vr_content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_vr_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vr_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adult_content_violence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_adult_content_violence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_content_violence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adult_content_sex = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_adult_content_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_content_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_updated = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_timestamp_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tagids_curated = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_tagids_curated())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tagids_curated())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tagids_filtered = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_tagids_filtered())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tagids_filtered())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string website_title = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->website_title().data(), static_cast<int>(this->website_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCuratorPreferences.website_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string website_url = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->website_url().data(), static_cast<int>(this->website_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCuratorPreferences.website_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string discussion_url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discussion_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->discussion_url().data(), static_cast<int>(this->discussion_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCuratorPreferences.discussion_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_broadcast = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_show_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCuratorPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCuratorPreferences)
  return false;
#undef DO_
}

void CCuratorPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCuratorPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 supported_languages = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->supported_languages(), output);
  }

  // optional bool platform_windows = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->platform_windows(), output);
  }

  // optional bool platform_mac = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->platform_mac(), output);
  }

  // optional bool platform_linux = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->platform_linux(), output);
  }

  // optional bool vr_content = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->vr_content(), output);
  }

  // optional bool adult_content_violence = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->adult_content_violence(), output);
  }

  // optional bool adult_content_sex = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->adult_content_sex(), output);
  }

  // optional uint32 timestamp_updated = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timestamp_updated(), output);
  }

  // repeated uint32 tagids_curated = 9;
  for (int i = 0, n = this->tagids_curated_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->tagids_curated(i), output);
  }

  // repeated uint32 tagids_filtered = 10;
  for (int i = 0, n = this->tagids_filtered_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->tagids_filtered(i), output);
  }

  // optional string website_title = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website_title().data(), static_cast<int>(this->website_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCuratorPreferences.website_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->website_title(), output);
  }

  // optional string website_url = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website_url().data(), static_cast<int>(this->website_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCuratorPreferences.website_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->website_url(), output);
  }

  // optional string discussion_url = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->discussion_url().data(), static_cast<int>(this->discussion_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCuratorPreferences.discussion_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->discussion_url(), output);
  }

  // optional bool show_broadcast = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->show_broadcast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCuratorPreferences)
}

::google::protobuf::uint8* CCuratorPreferences::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCuratorPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 supported_languages = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->supported_languages(), target);
  }

  // optional bool platform_windows = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->platform_windows(), target);
  }

  // optional bool platform_mac = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->platform_mac(), target);
  }

  // optional bool platform_linux = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->platform_linux(), target);
  }

  // optional bool vr_content = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->vr_content(), target);
  }

  // optional bool adult_content_violence = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->adult_content_violence(), target);
  }

  // optional bool adult_content_sex = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timestamp_updated(), target);
  }

  // repeated uint32 tagids_curated = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->tagids_curated_, target);

  // repeated uint32 tagids_filtered = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->tagids_filtered_, target);

  // optional string website_title = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website_title().data(), static_cast<int>(this->website_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCuratorPreferences.website_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->website_title(), target);
  }

  // optional string website_url = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website_url().data(), static_cast<int>(this->website_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCuratorPreferences.website_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->website_url(), target);
  }

  // optional string discussion_url = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->discussion_url().data(), static_cast<int>(this->discussion_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCuratorPreferences.discussion_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->discussion_url(), target);
  }

  // optional bool show_broadcast = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->show_broadcast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCuratorPreferences)
  return target;
}

size_t CCuratorPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCuratorPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 tagids_curated = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tagids_curated_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tagids_curated_size());
    total_size += data_size;
  }

  // repeated uint32 tagids_filtered = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tagids_filtered_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tagids_filtered_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string website_title = 11;
    if (has_website_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website_title());
    }

    // optional string website_url = 12;
    if (has_website_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website_url());
    }

    // optional string discussion_url = 13;
    if (has_discussion_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discussion_url());
    }

    // optional uint32 supported_languages = 1;
    if (has_supported_languages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supported_languages());
    }

    // optional bool platform_windows = 2;
    if (has_platform_windows()) {
      total_size += 1 + 1;
    }

    // optional bool platform_mac = 3;
    if (has_platform_mac()) {
      total_size += 1 + 1;
    }

    // optional bool platform_linux = 4;
    if (has_platform_linux()) {
      total_size += 1 + 1;
    }

    // optional bool vr_content = 5;
    if (has_vr_content()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 timestamp_updated = 8;
    if (has_timestamp_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_updated());
    }

    // optional bool adult_content_violence = 6;
    if (has_adult_content_violence()) {
      total_size += 1 + 1;
    }

    // optional bool adult_content_sex = 7;
    if (has_adult_content_sex()) {
      total_size += 1 + 1;
    }

    // optional bool show_broadcast = 14;
    if (has_show_broadcast()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCuratorPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCuratorPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CCuratorPreferences* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCuratorPreferences>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCuratorPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCuratorPreferences)
    MergeFrom(*source);
  }
}

void CCuratorPreferences::MergeFrom(const CCuratorPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCuratorPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tagids_curated_.MergeFrom(from.tagids_curated_);
  tagids_filtered_.MergeFrom(from.tagids_filtered_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_website_title();
      website_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_website_url();
      website_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_discussion_url();
      discussion_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discussion_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      supported_languages_ = from.supported_languages_;
    }
    if (cached_has_bits & 0x00000010u) {
      platform_windows_ = from.platform_windows_;
    }
    if (cached_has_bits & 0x00000020u) {
      platform_mac_ = from.platform_mac_;
    }
    if (cached_has_bits & 0x00000040u) {
      platform_linux_ = from.platform_linux_;
    }
    if (cached_has_bits & 0x00000080u) {
      vr_content_ = from.vr_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_updated_ = from.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000200u) {
      adult_content_violence_ = from.adult_content_violence_;
    }
    if (cached_has_bits & 0x00000400u) {
      adult_content_sex_ = from.adult_content_sex_;
    }
    if (cached_has_bits & 0x00000800u) {
      show_broadcast_ = from.show_broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCuratorPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCuratorPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCuratorPreferences::CopyFrom(const CCuratorPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCuratorPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCuratorPreferences::IsInitialized() const {
  return true;
}

void CCuratorPreferences::Swap(CCuratorPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCuratorPreferences::InternalSwap(CCuratorPreferences* other) {
  using std::swap;
  tagids_curated_.InternalSwap(&other->tagids_curated_);
  tagids_filtered_.InternalSwap(&other->tagids_filtered_);
  website_title_.Swap(&other->website_title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  website_url_.Swap(&other->website_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  discussion_url_.Swap(&other->discussion_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(supported_languages_, other->supported_languages_);
  swap(platform_windows_, other->platform_windows_);
  swap(platform_mac_, other->platform_mac_);
  swap(platform_linux_, other->platform_linux_);
  swap(vr_content_, other->vr_content_);
  swap(timestamp_updated_, other->timestamp_updated_);
  swap(adult_content_violence_, other->adult_content_violence_);
  swap(adult_content_sex_, other->adult_content_sex_);
  swap(show_broadcast_, other->show_broadcast_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CCuratorPreferences::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CLocalizationToken::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLocalizationToken::kLanguageFieldNumber;
const int CLocalizationToken::kLocalizedStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLocalizationToken::CLocalizationToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbase_2eproto::scc_info_CLocalizationToken.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLocalizationToken)
}
CLocalizationToken::CLocalizationToken(const CLocalizationToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localized_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localized_string()) {
    localized_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localized_string_);
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:CLocalizationToken)
}

void CLocalizationToken::SharedCtor() {
  localized_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0u;
}

CLocalizationToken::~CLocalizationToken() {
  // @@protoc_insertion_point(destructor:CLocalizationToken)
  SharedDtor();
}

void CLocalizationToken::SharedDtor() {
  localized_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLocalizationToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CLocalizationToken::descriptor() {
  ::protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLocalizationToken& CLocalizationToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbase_2eproto::scc_info_CLocalizationToken.base);
  return *internal_default_instance();
}


void CLocalizationToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CLocalizationToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    localized_string_.ClearNonDefaultToEmptyNoArena();
  }
  language_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLocalizationToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLocalizationToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string localized_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localized_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localized_string().data(), static_cast<int>(this->localized_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLocalizationToken.localized_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLocalizationToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLocalizationToken)
  return false;
#undef DO_
}

void CLocalizationToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLocalizationToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string localized_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localized_string().data(), static_cast<int>(this->localized_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLocalizationToken.localized_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->localized_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLocalizationToken)
}

::google::protobuf::uint8* CLocalizationToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CLocalizationToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string localized_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localized_string().data(), static_cast<int>(this->localized_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLocalizationToken.localized_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localized_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLocalizationToken)
  return target;
}

size_t CLocalizationToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLocalizationToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string localized_string = 2;
    if (has_localized_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localized_string());
    }

    // optional uint32 language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLocalizationToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLocalizationToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CLocalizationToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLocalizationToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLocalizationToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLocalizationToken)
    MergeFrom(*source);
  }
}

void CLocalizationToken::MergeFrom(const CLocalizationToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLocalizationToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_localized_string();
      localized_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localized_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLocalizationToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLocalizationToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLocalizationToken::CopyFrom(const CLocalizationToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLocalizationToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLocalizationToken::IsInitialized() const {
  return true;
}

void CLocalizationToken::Swap(CLocalizationToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLocalizationToken::InternalSwap(CLocalizationToken* other) {
  using std::swap;
  localized_string_.Swap(&other->localized_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CLocalizationToken::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  force_php_generation(kForcePhpGenerationFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  php_output_always_number(kPhpOutputAlwaysNumberFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgProtoBufHeader* Arena::CreateMaybeMessage< ::CMsgProtoBufHeader >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgProtoBufHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgMulti* Arena::CreateMaybeMessage< ::CMsgMulti >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgMulti >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgProtobufWrapped* Arena::CreateMaybeMessage< ::CMsgProtobufWrapped >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgProtobufWrapped >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgAuthTicket* Arena::CreateMaybeMessage< ::CMsgAuthTicket >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgAuthTicket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCDDBAppDetailCommon* Arena::CreateMaybeMessage< ::CCDDBAppDetailCommon >(Arena* arena) {
  return Arena::CreateInternal< ::CCDDBAppDetailCommon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgAppRights* Arena::CreateMaybeMessage< ::CMsgAppRights >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgAppRights >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CCuratorPreferences* Arena::CreateMaybeMessage< ::CCuratorPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::CCuratorPreferences >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CLocalizationToken* Arena::CreateMaybeMessage< ::CLocalizationToken >(Arena* arena) {
  return Arena::CreateInternal< ::CLocalizationToken >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
