// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenotifications.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fgamenotifications_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fgamenotifications_2esteamclient_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto 

namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto
class CGameNotifications_CreateSession_Request;
class CGameNotifications_CreateSession_RequestDefaultTypeInternal;
extern CGameNotifications_CreateSession_RequestDefaultTypeInternal _CGameNotifications_CreateSession_Request_default_instance_;
class CGameNotifications_CreateSession_Response;
class CGameNotifications_CreateSession_ResponseDefaultTypeInternal;
extern CGameNotifications_CreateSession_ResponseDefaultTypeInternal _CGameNotifications_CreateSession_Response_default_instance_;
class CGameNotifications_DeleteSession_Request;
class CGameNotifications_DeleteSession_RequestDefaultTypeInternal;
extern CGameNotifications_DeleteSession_RequestDefaultTypeInternal _CGameNotifications_DeleteSession_Request_default_instance_;
class CGameNotifications_DeleteSession_Response;
class CGameNotifications_DeleteSession_ResponseDefaultTypeInternal;
extern CGameNotifications_DeleteSession_ResponseDefaultTypeInternal _CGameNotifications_DeleteSession_Response_default_instance_;
class CGameNotifications_EnumerateSessions_Request;
class CGameNotifications_EnumerateSessions_RequestDefaultTypeInternal;
extern CGameNotifications_EnumerateSessions_RequestDefaultTypeInternal _CGameNotifications_EnumerateSessions_Request_default_instance_;
class CGameNotifications_EnumerateSessions_Response;
class CGameNotifications_EnumerateSessions_ResponseDefaultTypeInternal;
extern CGameNotifications_EnumerateSessions_ResponseDefaultTypeInternal _CGameNotifications_EnumerateSessions_Response_default_instance_;
class CGameNotifications_GetSessionDetails_Request;
class CGameNotifications_GetSessionDetails_RequestDefaultTypeInternal;
extern CGameNotifications_GetSessionDetails_RequestDefaultTypeInternal _CGameNotifications_GetSessionDetails_Request_default_instance_;
class CGameNotifications_GetSessionDetails_Request_RequestedSession;
class CGameNotifications_GetSessionDetails_Request_RequestedSessionDefaultTypeInternal;
extern CGameNotifications_GetSessionDetails_Request_RequestedSessionDefaultTypeInternal _CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_;
class CGameNotifications_GetSessionDetails_Response;
class CGameNotifications_GetSessionDetails_ResponseDefaultTypeInternal;
extern CGameNotifications_GetSessionDetails_ResponseDefaultTypeInternal _CGameNotifications_GetSessionDetails_Response_default_instance_;
class CGameNotifications_LocalizedText;
class CGameNotifications_LocalizedTextDefaultTypeInternal;
extern CGameNotifications_LocalizedTextDefaultTypeInternal _CGameNotifications_LocalizedText_default_instance_;
class CGameNotifications_OnNotificationsRequested_Notification;
class CGameNotifications_OnNotificationsRequested_NotificationDefaultTypeInternal;
extern CGameNotifications_OnNotificationsRequested_NotificationDefaultTypeInternal _CGameNotifications_OnNotificationsRequested_Notification_default_instance_;
class CGameNotifications_OnUserStatusChanged_Notification;
class CGameNotifications_OnUserStatusChanged_NotificationDefaultTypeInternal;
extern CGameNotifications_OnUserStatusChanged_NotificationDefaultTypeInternal _CGameNotifications_OnUserStatusChanged_Notification_default_instance_;
class CGameNotifications_Session;
class CGameNotifications_SessionDefaultTypeInternal;
extern CGameNotifications_SessionDefaultTypeInternal _CGameNotifications_Session_default_instance_;
class CGameNotifications_UpdateNotificationSettings_Request;
class CGameNotifications_UpdateNotificationSettings_RequestDefaultTypeInternal;
extern CGameNotifications_UpdateNotificationSettings_RequestDefaultTypeInternal _CGameNotifications_UpdateNotificationSettings_Request_default_instance_;
class CGameNotifications_UpdateNotificationSettings_Response;
class CGameNotifications_UpdateNotificationSettings_ResponseDefaultTypeInternal;
extern CGameNotifications_UpdateNotificationSettings_ResponseDefaultTypeInternal _CGameNotifications_UpdateNotificationSettings_Response_default_instance_;
class CGameNotifications_UpdateSession_Request;
class CGameNotifications_UpdateSession_RequestDefaultTypeInternal;
extern CGameNotifications_UpdateSession_RequestDefaultTypeInternal _CGameNotifications_UpdateSession_Request_default_instance_;
class CGameNotifications_UpdateSession_Response;
class CGameNotifications_UpdateSession_ResponseDefaultTypeInternal;
extern CGameNotifications_UpdateSession_ResponseDefaultTypeInternal _CGameNotifications_UpdateSession_Response_default_instance_;
class CGameNotifications_UserStatus;
class CGameNotifications_UserStatusDefaultTypeInternal;
extern CGameNotifications_UserStatusDefaultTypeInternal _CGameNotifications_UserStatus_default_instance_;
class CGameNotifications_Variable;
class CGameNotifications_VariableDefaultTypeInternal;
extern CGameNotifications_VariableDefaultTypeInternal _CGameNotifications_Variable_default_instance_;
class GameNotificationSettings;
class GameNotificationSettingsDefaultTypeInternal;
extern GameNotificationSettingsDefaultTypeInternal _GameNotificationSettings_default_instance_;
namespace google {
namespace protobuf {
template<> ::CGameNotifications_CreateSession_Request* Arena::CreateMaybeMessage<::CGameNotifications_CreateSession_Request>(Arena*);
template<> ::CGameNotifications_CreateSession_Response* Arena::CreateMaybeMessage<::CGameNotifications_CreateSession_Response>(Arena*);
template<> ::CGameNotifications_DeleteSession_Request* Arena::CreateMaybeMessage<::CGameNotifications_DeleteSession_Request>(Arena*);
template<> ::CGameNotifications_DeleteSession_Response* Arena::CreateMaybeMessage<::CGameNotifications_DeleteSession_Response>(Arena*);
template<> ::CGameNotifications_EnumerateSessions_Request* Arena::CreateMaybeMessage<::CGameNotifications_EnumerateSessions_Request>(Arena*);
template<> ::CGameNotifications_EnumerateSessions_Response* Arena::CreateMaybeMessage<::CGameNotifications_EnumerateSessions_Response>(Arena*);
template<> ::CGameNotifications_GetSessionDetails_Request* Arena::CreateMaybeMessage<::CGameNotifications_GetSessionDetails_Request>(Arena*);
template<> ::CGameNotifications_GetSessionDetails_Request_RequestedSession* Arena::CreateMaybeMessage<::CGameNotifications_GetSessionDetails_Request_RequestedSession>(Arena*);
template<> ::CGameNotifications_GetSessionDetails_Response* Arena::CreateMaybeMessage<::CGameNotifications_GetSessionDetails_Response>(Arena*);
template<> ::CGameNotifications_LocalizedText* Arena::CreateMaybeMessage<::CGameNotifications_LocalizedText>(Arena*);
template<> ::CGameNotifications_OnNotificationsRequested_Notification* Arena::CreateMaybeMessage<::CGameNotifications_OnNotificationsRequested_Notification>(Arena*);
template<> ::CGameNotifications_OnUserStatusChanged_Notification* Arena::CreateMaybeMessage<::CGameNotifications_OnUserStatusChanged_Notification>(Arena*);
template<> ::CGameNotifications_Session* Arena::CreateMaybeMessage<::CGameNotifications_Session>(Arena*);
template<> ::CGameNotifications_UpdateNotificationSettings_Request* Arena::CreateMaybeMessage<::CGameNotifications_UpdateNotificationSettings_Request>(Arena*);
template<> ::CGameNotifications_UpdateNotificationSettings_Response* Arena::CreateMaybeMessage<::CGameNotifications_UpdateNotificationSettings_Response>(Arena*);
template<> ::CGameNotifications_UpdateSession_Request* Arena::CreateMaybeMessage<::CGameNotifications_UpdateSession_Request>(Arena*);
template<> ::CGameNotifications_UpdateSession_Response* Arena::CreateMaybeMessage<::CGameNotifications_UpdateSession_Response>(Arena*);
template<> ::CGameNotifications_UserStatus* Arena::CreateMaybeMessage<::CGameNotifications_UserStatus>(Arena*);
template<> ::CGameNotifications_Variable* Arena::CreateMaybeMessage<::CGameNotifications_Variable>(Arena*);
template<> ::GameNotificationSettings* Arena::CreateMaybeMessage<::GameNotificationSettings>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CGameNotifications_Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_Variable) */ {
 public:
  CGameNotifications_Variable();
  virtual ~CGameNotifications_Variable();

  CGameNotifications_Variable(const CGameNotifications_Variable& from);

  inline CGameNotifications_Variable& operator=(const CGameNotifications_Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_Variable(CGameNotifications_Variable&& from) noexcept
    : CGameNotifications_Variable() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_Variable& operator=(CGameNotifications_Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_Variable* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_Variable*>(
               &_CGameNotifications_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CGameNotifications_Variable* other);
  friend void swap(CGameNotifications_Variable& a, CGameNotifications_Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_Variable* New() const final {
    return CreateMaybeMessage<CGameNotifications_Variable>(NULL);
  }

  CGameNotifications_Variable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_Variable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_Variable& from);
  void MergeFrom(const CGameNotifications_Variable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1 [(.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2 [(.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_Variable)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_LocalizedText : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_LocalizedText) */ {
 public:
  CGameNotifications_LocalizedText();
  virtual ~CGameNotifications_LocalizedText();

  CGameNotifications_LocalizedText(const CGameNotifications_LocalizedText& from);

  inline CGameNotifications_LocalizedText& operator=(const CGameNotifications_LocalizedText& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_LocalizedText(CGameNotifications_LocalizedText&& from) noexcept
    : CGameNotifications_LocalizedText() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_LocalizedText& operator=(CGameNotifications_LocalizedText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_LocalizedText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_LocalizedText* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_LocalizedText*>(
               &_CGameNotifications_LocalizedText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CGameNotifications_LocalizedText* other);
  friend void swap(CGameNotifications_LocalizedText& a, CGameNotifications_LocalizedText& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_LocalizedText* New() const final {
    return CreateMaybeMessage<CGameNotifications_LocalizedText>(NULL);
  }

  CGameNotifications_LocalizedText* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_LocalizedText>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_LocalizedText& from);
  void MergeFrom(const CGameNotifications_LocalizedText& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_LocalizedText* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_Variable variables = 2 [(.description) = "A list of variables values to substitute in any variables found in the localized string."];
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 2;
  ::CGameNotifications_Variable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Variable >*
      mutable_variables();
  const ::CGameNotifications_Variable& variables(int index) const;
  ::CGameNotifications_Variable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Variable >&
      variables() const;

  // optional string token = 1 [(.description) = "A localization token that maps to the desired string."];
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional string rendered_text = 3 [(.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
  bool has_rendered_text() const;
  void clear_rendered_text();
  static const int kRenderedTextFieldNumber = 3;
  const ::std::string& rendered_text() const;
  void set_rendered_text(const ::std::string& value);
  #if LANG_CXX11
  void set_rendered_text(::std::string&& value);
  #endif
  void set_rendered_text(const char* value);
  void set_rendered_text(const char* value, size_t size);
  ::std::string* mutable_rendered_text();
  ::std::string* release_rendered_text();
  void set_allocated_rendered_text(::std::string* rendered_text);

  // @@protoc_insertion_point(class_scope:CGameNotifications_LocalizedText)
 private:
  void set_has_token();
  void clear_has_token();
  void set_has_rendered_text();
  void clear_has_rendered_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Variable > variables_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr rendered_text_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_UserStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UserStatus) */ {
 public:
  CGameNotifications_UserStatus();
  virtual ~CGameNotifications_UserStatus();

  CGameNotifications_UserStatus(const CGameNotifications_UserStatus& from);

  inline CGameNotifications_UserStatus& operator=(const CGameNotifications_UserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_UserStatus(CGameNotifications_UserStatus&& from) noexcept
    : CGameNotifications_UserStatus() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UserStatus& operator=(CGameNotifications_UserStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_UserStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_UserStatus* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UserStatus*>(
               &_CGameNotifications_UserStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CGameNotifications_UserStatus* other);
  friend void swap(CGameNotifications_UserStatus& a, CGameNotifications_UserStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UserStatus* New() const final {
    return CreateMaybeMessage<CGameNotifications_UserStatus>(NULL);
  }

  CGameNotifications_UserStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UserStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_UserStatus& from);
  void MergeFrom(const CGameNotifications_UserStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UserStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string state = 2 [(.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "Title of the session to display to this user in their list of active sessions."];
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  public:
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);

  // optional .CGameNotifications_LocalizedText message = 4 [(.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  private:
  const ::CGameNotifications_LocalizedText& _internal_message() const;
  public:
  const ::CGameNotifications_LocalizedText& message() const;
  ::CGameNotifications_LocalizedText* release_message();
  ::CGameNotifications_LocalizedText* mutable_message();
  void set_allocated_message(::CGameNotifications_LocalizedText* message);

  // optional fixed64 steamid = 1 [(.description) = "The specific user\'s steamid."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_UserStatus)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_state();
  void clear_has_state();
  void set_has_title();
  void clear_has_title();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::CGameNotifications_LocalizedText* title_;
  ::CGameNotifications_LocalizedText* message_;
  ::google::protobuf::uint64 steamid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_CreateSession_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_CreateSession_Request) */ {
 public:
  CGameNotifications_CreateSession_Request();
  virtual ~CGameNotifications_CreateSession_Request();

  CGameNotifications_CreateSession_Request(const CGameNotifications_CreateSession_Request& from);

  inline CGameNotifications_CreateSession_Request& operator=(const CGameNotifications_CreateSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_CreateSession_Request(CGameNotifications_CreateSession_Request&& from) noexcept
    : CGameNotifications_CreateSession_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_CreateSession_Request& operator=(CGameNotifications_CreateSession_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_CreateSession_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_CreateSession_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_CreateSession_Request*>(
               &_CGameNotifications_CreateSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CGameNotifications_CreateSession_Request* other);
  friend void swap(CGameNotifications_CreateSession_Request& a, CGameNotifications_CreateSession_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_CreateSession_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Request>(NULL);
  }

  CGameNotifications_CreateSession_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_CreateSession_Request& from);
  void MergeFrom(const CGameNotifications_CreateSession_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_CreateSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "The initial state of all users in the session."];
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 4;
  ::CGameNotifications_UserStatus* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >*
      mutable_users();
  const ::CGameNotifications_UserStatus& users(int index) const;
  ::CGameNotifications_UserStatus* add_users();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >&
      users() const;

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "The title of the session to be displayed within each user\'s list of sessions."];
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  public:
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);

  // optional uint64 context = 2 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 2;
  ::google::protobuf::uint64 context() const;
  void set_context(::google::protobuf::uint64 value);

  // optional fixed64 steamid = 5 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 5;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_CreateSession_Request)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_context();
  void clear_has_context();
  void set_has_title();
  void clear_has_title();
  void set_has_steamid();
  void clear_has_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus > users_;
  ::CGameNotifications_LocalizedText* title_;
  ::google::protobuf::uint64 context_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_CreateSession_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_CreateSession_Response) */ {
 public:
  CGameNotifications_CreateSession_Response();
  virtual ~CGameNotifications_CreateSession_Response();

  CGameNotifications_CreateSession_Response(const CGameNotifications_CreateSession_Response& from);

  inline CGameNotifications_CreateSession_Response& operator=(const CGameNotifications_CreateSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_CreateSession_Response(CGameNotifications_CreateSession_Response&& from) noexcept
    : CGameNotifications_CreateSession_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_CreateSession_Response& operator=(CGameNotifications_CreateSession_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_CreateSession_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_CreateSession_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_CreateSession_Response*>(
               &_CGameNotifications_CreateSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CGameNotifications_CreateSession_Response* other);
  friend void swap(CGameNotifications_CreateSession_Response& a, CGameNotifications_CreateSession_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_CreateSession_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Response>(NULL);
  }

  CGameNotifications_CreateSession_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_CreateSession_Response& from);
  void MergeFrom(const CGameNotifications_CreateSession_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_CreateSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sessionid = 1 [(.description) = "The sessionid of the created session."];
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_CreateSession_Response)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 sessionid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_DeleteSession_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_DeleteSession_Request) */ {
 public:
  CGameNotifications_DeleteSession_Request();
  virtual ~CGameNotifications_DeleteSession_Request();

  CGameNotifications_DeleteSession_Request(const CGameNotifications_DeleteSession_Request& from);

  inline CGameNotifications_DeleteSession_Request& operator=(const CGameNotifications_DeleteSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_DeleteSession_Request(CGameNotifications_DeleteSession_Request&& from) noexcept
    : CGameNotifications_DeleteSession_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_DeleteSession_Request& operator=(CGameNotifications_DeleteSession_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_DeleteSession_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_DeleteSession_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_DeleteSession_Request*>(
               &_CGameNotifications_DeleteSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CGameNotifications_DeleteSession_Request* other);
  friend void swap(CGameNotifications_DeleteSession_Request& a, CGameNotifications_DeleteSession_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_DeleteSession_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Request>(NULL);
  }

  CGameNotifications_DeleteSession_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_DeleteSession_Request& from);
  void MergeFrom(const CGameNotifications_DeleteSession_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_DeleteSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sessionid = 1 [(.description) = "The sessionid to delete."];
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // optional fixed64 steamid = 3 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 3;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 appid = 2 [(.description) = "The appid of the session to delete."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_DeleteSession_Request)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_appid();
  void clear_has_appid();
  void set_has_steamid();
  void clear_has_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_DeleteSession_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_DeleteSession_Response) */ {
 public:
  CGameNotifications_DeleteSession_Response();
  virtual ~CGameNotifications_DeleteSession_Response();

  CGameNotifications_DeleteSession_Response(const CGameNotifications_DeleteSession_Response& from);

  inline CGameNotifications_DeleteSession_Response& operator=(const CGameNotifications_DeleteSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_DeleteSession_Response(CGameNotifications_DeleteSession_Response&& from) noexcept
    : CGameNotifications_DeleteSession_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_DeleteSession_Response& operator=(CGameNotifications_DeleteSession_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_DeleteSession_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_DeleteSession_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_DeleteSession_Response*>(
               &_CGameNotifications_DeleteSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CGameNotifications_DeleteSession_Response* other);
  friend void swap(CGameNotifications_DeleteSession_Response& a, CGameNotifications_DeleteSession_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_DeleteSession_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Response>(NULL);
  }

  CGameNotifications_DeleteSession_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_DeleteSession_Response& from);
  void MergeFrom(const CGameNotifications_DeleteSession_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_DeleteSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNotifications_DeleteSession_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateSession_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateSession_Request) */ {
 public:
  CGameNotifications_UpdateSession_Request();
  virtual ~CGameNotifications_UpdateSession_Request();

  CGameNotifications_UpdateSession_Request(const CGameNotifications_UpdateSession_Request& from);

  inline CGameNotifications_UpdateSession_Request& operator=(const CGameNotifications_UpdateSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_UpdateSession_Request(CGameNotifications_UpdateSession_Request&& from) noexcept
    : CGameNotifications_UpdateSession_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateSession_Request& operator=(CGameNotifications_UpdateSession_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_UpdateSession_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_UpdateSession_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateSession_Request*>(
               &_CGameNotifications_UpdateSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CGameNotifications_UpdateSession_Request* other);
  friend void swap(CGameNotifications_UpdateSession_Request& a, CGameNotifications_UpdateSession_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateSession_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Request>(NULL);
  }

  CGameNotifications_UpdateSession_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateSession_Request& from);
  void MergeFrom(const CGameNotifications_UpdateSession_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 4;
  ::CGameNotifications_UserStatus* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >*
      mutable_users();
  const ::CGameNotifications_UserStatus& users(int index) const;
  ::CGameNotifications_UserStatus* add_users();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >&
      users() const;

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  public:
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);

  // optional uint64 sessionid = 1 [(.description) = "The sessionid to update."];
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // optional fixed64 steamid = 6 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 6;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 appid = 2 [(.description) = "The appid of the session to update."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateSession_Request)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_appid();
  void clear_has_appid();
  void set_has_title();
  void clear_has_title();
  void set_has_steamid();
  void clear_has_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus > users_;
  ::CGameNotifications_LocalizedText* title_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateSession_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateSession_Response) */ {
 public:
  CGameNotifications_UpdateSession_Response();
  virtual ~CGameNotifications_UpdateSession_Response();

  CGameNotifications_UpdateSession_Response(const CGameNotifications_UpdateSession_Response& from);

  inline CGameNotifications_UpdateSession_Response& operator=(const CGameNotifications_UpdateSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_UpdateSession_Response(CGameNotifications_UpdateSession_Response&& from) noexcept
    : CGameNotifications_UpdateSession_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateSession_Response& operator=(CGameNotifications_UpdateSession_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_UpdateSession_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_UpdateSession_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateSession_Response*>(
               &_CGameNotifications_UpdateSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CGameNotifications_UpdateSession_Response* other);
  friend void swap(CGameNotifications_UpdateSession_Response& a, CGameNotifications_UpdateSession_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateSession_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Response>(NULL);
  }

  CGameNotifications_UpdateSession_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateSession_Response& from);
  void MergeFrom(const CGameNotifications_UpdateSession_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateSession_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_EnumerateSessions_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_EnumerateSessions_Request) */ {
 public:
  CGameNotifications_EnumerateSessions_Request();
  virtual ~CGameNotifications_EnumerateSessions_Request();

  CGameNotifications_EnumerateSessions_Request(const CGameNotifications_EnumerateSessions_Request& from);

  inline CGameNotifications_EnumerateSessions_Request& operator=(const CGameNotifications_EnumerateSessions_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_EnumerateSessions_Request(CGameNotifications_EnumerateSessions_Request&& from) noexcept
    : CGameNotifications_EnumerateSessions_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_EnumerateSessions_Request& operator=(CGameNotifications_EnumerateSessions_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_EnumerateSessions_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_EnumerateSessions_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_EnumerateSessions_Request*>(
               &_CGameNotifications_EnumerateSessions_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CGameNotifications_EnumerateSessions_Request* other);
  friend void swap(CGameNotifications_EnumerateSessions_Request& a, CGameNotifications_EnumerateSessions_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_EnumerateSessions_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Request>(NULL);
  }

  CGameNotifications_EnumerateSessions_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_EnumerateSessions_Request& from);
  void MergeFrom(const CGameNotifications_EnumerateSessions_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_EnumerateSessions_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string language = 5 [(.description) = "(Optional) Language to localize the text in."];
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 5;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional uint32 appid = 1 [(.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional bool include_all_user_messages = 3 [(.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
  bool has_include_all_user_messages() const;
  void clear_include_all_user_messages();
  static const int kIncludeAllUserMessagesFieldNumber = 3;
  bool include_all_user_messages() const;
  void set_include_all_user_messages(bool value);

  // optional bool include_auth_user_message = 4 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  bool has_include_auth_user_message() const;
  void clear_include_auth_user_message();
  static const int kIncludeAuthUserMessageFieldNumber = 4;
  bool include_auth_user_message() const;
  void set_include_auth_user_message(bool value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_EnumerateSessions_Request)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_include_all_user_messages();
  void clear_has_include_all_user_messages();
  void set_has_include_auth_user_message();
  void clear_has_include_auth_user_message();
  void set_has_language();
  void clear_has_language();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::uint32 appid_;
  bool include_all_user_messages_;
  bool include_auth_user_message_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_Session) */ {
 public:
  CGameNotifications_Session();
  virtual ~CGameNotifications_Session();

  CGameNotifications_Session(const CGameNotifications_Session& from);

  inline CGameNotifications_Session& operator=(const CGameNotifications_Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_Session(CGameNotifications_Session&& from) noexcept
    : CGameNotifications_Session() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_Session& operator=(CGameNotifications_Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_Session* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_Session*>(
               &_CGameNotifications_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CGameNotifications_Session* other);
  friend void swap(CGameNotifications_Session& a, CGameNotifications_Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_Session* New() const final {
    return CreateMaybeMessage<CGameNotifications_Session>(NULL);
  }

  CGameNotifications_Session* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_Session>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_Session& from);
  void MergeFrom(const CGameNotifications_Session& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_UserStatus user_status = 7 [(.description) = "The status of all the users in the session."];
  int user_status_size() const;
  void clear_user_status();
  static const int kUserStatusFieldNumber = 7;
  ::CGameNotifications_UserStatus* mutable_user_status(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >*
      mutable_user_status();
  const ::CGameNotifications_UserStatus& user_status(int index) const;
  ::CGameNotifications_UserStatus* add_user_status();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >&
      user_status() const;

  // optional .CGameNotifications_LocalizedText title = 4 [(.description) = "The current title for the session."];
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  public:
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);

  // optional uint64 sessionid = 1 [(.description) = "The sessionid for this session."];
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // optional uint64 appid = 2 [(.description) = "The appid for the session."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // optional uint64 context = 3 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 3;
  ::google::protobuf::uint64 context() const;
  void set_context(::google::protobuf::uint64 value);

  // optional uint32 time_created = 5 [(.description) = "The time the session was created."];
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 5;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional uint32 time_updated = 6 [(.description) = "The last time the session was updated."];
  bool has_time_updated() const;
  void clear_time_updated();
  static const int kTimeUpdatedFieldNumber = 6;
  ::google::protobuf::uint32 time_updated() const;
  void set_time_updated(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_Session)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_appid();
  void clear_has_appid();
  void set_has_context();
  void clear_has_context();
  void set_has_title();
  void clear_has_title();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_time_updated();
  void clear_has_time_updated();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus > user_status_;
  ::CGameNotifications_LocalizedText* title_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint64 appid_;
  ::google::protobuf::uint64 context_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint32 time_updated_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_EnumerateSessions_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_EnumerateSessions_Response) */ {
 public:
  CGameNotifications_EnumerateSessions_Response();
  virtual ~CGameNotifications_EnumerateSessions_Response();

  CGameNotifications_EnumerateSessions_Response(const CGameNotifications_EnumerateSessions_Response& from);

  inline CGameNotifications_EnumerateSessions_Response& operator=(const CGameNotifications_EnumerateSessions_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_EnumerateSessions_Response(CGameNotifications_EnumerateSessions_Response&& from) noexcept
    : CGameNotifications_EnumerateSessions_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_EnumerateSessions_Response& operator=(CGameNotifications_EnumerateSessions_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_EnumerateSessions_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_EnumerateSessions_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_EnumerateSessions_Response*>(
               &_CGameNotifications_EnumerateSessions_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CGameNotifications_EnumerateSessions_Response* other);
  friend void swap(CGameNotifications_EnumerateSessions_Response& a, CGameNotifications_EnumerateSessions_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_EnumerateSessions_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Response>(NULL);
  }

  CGameNotifications_EnumerateSessions_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_EnumerateSessions_Response& from);
  void MergeFrom(const CGameNotifications_EnumerateSessions_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_EnumerateSessions_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "A list of the user\'s sessions."];
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::CGameNotifications_Session* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >*
      mutable_sessions();
  const ::CGameNotifications_Session& sessions(int index) const;
  ::CGameNotifications_Session* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:CGameNotifications_EnumerateSessions_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session > sessions_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_GetSessionDetails_Request_RequestedSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_GetSessionDetails_Request.RequestedSession) */ {
 public:
  CGameNotifications_GetSessionDetails_Request_RequestedSession();
  virtual ~CGameNotifications_GetSessionDetails_Request_RequestedSession();

  CGameNotifications_GetSessionDetails_Request_RequestedSession(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from);

  inline CGameNotifications_GetSessionDetails_Request_RequestedSession& operator=(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_GetSessionDetails_Request_RequestedSession(CGameNotifications_GetSessionDetails_Request_RequestedSession&& from) noexcept
    : CGameNotifications_GetSessionDetails_Request_RequestedSession() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_GetSessionDetails_Request_RequestedSession& operator=(CGameNotifications_GetSessionDetails_Request_RequestedSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_GetSessionDetails_Request_RequestedSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_GetSessionDetails_Request_RequestedSession* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_GetSessionDetails_Request_RequestedSession*>(
               &_CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other);
  friend void swap(CGameNotifications_GetSessionDetails_Request_RequestedSession& a, CGameNotifications_GetSessionDetails_Request_RequestedSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_GetSessionDetails_Request_RequestedSession* New() const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request_RequestedSession>(NULL);
  }

  CGameNotifications_GetSessionDetails_Request_RequestedSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request_RequestedSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from);
  void MergeFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sessionid = 1 [(.description) = "The sessionid to get details for."];
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // optional bool include_auth_user_message = 3 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  bool has_include_auth_user_message() const;
  void clear_include_auth_user_message();
  static const int kIncludeAuthUserMessageFieldNumber = 3;
  bool include_auth_user_message() const;
  void set_include_auth_user_message(bool value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_GetSessionDetails_Request.RequestedSession)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_include_auth_user_message();
  void clear_has_include_auth_user_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 sessionid_;
  bool include_auth_user_message_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_GetSessionDetails_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_GetSessionDetails_Request) */ {
 public:
  CGameNotifications_GetSessionDetails_Request();
  virtual ~CGameNotifications_GetSessionDetails_Request();

  CGameNotifications_GetSessionDetails_Request(const CGameNotifications_GetSessionDetails_Request& from);

  inline CGameNotifications_GetSessionDetails_Request& operator=(const CGameNotifications_GetSessionDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_GetSessionDetails_Request(CGameNotifications_GetSessionDetails_Request&& from) noexcept
    : CGameNotifications_GetSessionDetails_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_GetSessionDetails_Request& operator=(CGameNotifications_GetSessionDetails_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_GetSessionDetails_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_GetSessionDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_GetSessionDetails_Request*>(
               &_CGameNotifications_GetSessionDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CGameNotifications_GetSessionDetails_Request* other);
  friend void swap(CGameNotifications_GetSessionDetails_Request& a, CGameNotifications_GetSessionDetails_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_GetSessionDetails_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request>(NULL);
  }

  CGameNotifications_GetSessionDetails_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_GetSessionDetails_Request& from);
  void MergeFrom(const CGameNotifications_GetSessionDetails_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_GetSessionDetails_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameNotifications_GetSessionDetails_Request_RequestedSession RequestedSession;

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::CGameNotifications_GetSessionDetails_Request_RequestedSession* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >*
      mutable_sessions();
  const ::CGameNotifications_GetSessionDetails_Request_RequestedSession& sessions(int index) const;
  ::CGameNotifications_GetSessionDetails_Request_RequestedSession* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >&
      sessions() const;

  // optional string language = 3 [(.description) = "Language to localize the text in."];
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 3;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional uint32 appid = 2 [(.description) = "The appid for the sessions."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_GetSessionDetails_Request)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_language();
  void clear_has_language();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession > sessions_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_GetSessionDetails_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_GetSessionDetails_Response) */ {
 public:
  CGameNotifications_GetSessionDetails_Response();
  virtual ~CGameNotifications_GetSessionDetails_Response();

  CGameNotifications_GetSessionDetails_Response(const CGameNotifications_GetSessionDetails_Response& from);

  inline CGameNotifications_GetSessionDetails_Response& operator=(const CGameNotifications_GetSessionDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_GetSessionDetails_Response(CGameNotifications_GetSessionDetails_Response&& from) noexcept
    : CGameNotifications_GetSessionDetails_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_GetSessionDetails_Response& operator=(CGameNotifications_GetSessionDetails_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_GetSessionDetails_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_GetSessionDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_GetSessionDetails_Response*>(
               &_CGameNotifications_GetSessionDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CGameNotifications_GetSessionDetails_Response* other);
  friend void swap(CGameNotifications_GetSessionDetails_Response& a, CGameNotifications_GetSessionDetails_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_GetSessionDetails_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Response>(NULL);
  }

  CGameNotifications_GetSessionDetails_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_GetSessionDetails_Response& from);
  void MergeFrom(const CGameNotifications_GetSessionDetails_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_GetSessionDetails_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "The details of the session."];
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::CGameNotifications_Session* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >*
      mutable_sessions();
  const ::CGameNotifications_Session& sessions(int index) const;
  ::CGameNotifications_Session* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:CGameNotifications_GetSessionDetails_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session > sessions_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameNotificationSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameNotificationSettings) */ {
 public:
  GameNotificationSettings();
  virtual ~GameNotificationSettings();

  GameNotificationSettings(const GameNotificationSettings& from);

  inline GameNotificationSettings& operator=(const GameNotificationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotificationSettings(GameNotificationSettings&& from) noexcept
    : GameNotificationSettings() {
    *this = ::std::move(from);
  }

  inline GameNotificationSettings& operator=(GameNotificationSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotificationSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotificationSettings* internal_default_instance() {
    return reinterpret_cast<const GameNotificationSettings*>(
               &_GameNotificationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GameNotificationSettings* other);
  friend void swap(GameNotificationSettings& a, GameNotificationSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotificationSettings* New() const final {
    return CreateMaybeMessage<GameNotificationSettings>(NULL);
  }

  GameNotificationSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameNotificationSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameNotificationSettings& from);
  void MergeFrom(const GameNotificationSettings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameNotificationSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional bool allow_notifications = 2 [(.description) = "Whether the user allows notification for this app."];
  bool has_allow_notifications() const;
  void clear_allow_notifications();
  static const int kAllowNotificationsFieldNumber = 2;
  bool allow_notifications() const;
  void set_allow_notifications(bool value);

  // @@protoc_insertion_point(class_scope:GameNotificationSettings)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_allow_notifications();
  void clear_has_allow_notifications();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  bool allow_notifications_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateNotificationSettings_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateNotificationSettings_Request) */ {
 public:
  CGameNotifications_UpdateNotificationSettings_Request();
  virtual ~CGameNotifications_UpdateNotificationSettings_Request();

  CGameNotifications_UpdateNotificationSettings_Request(const CGameNotifications_UpdateNotificationSettings_Request& from);

  inline CGameNotifications_UpdateNotificationSettings_Request& operator=(const CGameNotifications_UpdateNotificationSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_UpdateNotificationSettings_Request(CGameNotifications_UpdateNotificationSettings_Request&& from) noexcept
    : CGameNotifications_UpdateNotificationSettings_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateNotificationSettings_Request& operator=(CGameNotifications_UpdateNotificationSettings_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_UpdateNotificationSettings_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_UpdateNotificationSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateNotificationSettings_Request*>(
               &_CGameNotifications_UpdateNotificationSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CGameNotifications_UpdateNotificationSettings_Request* other);
  friend void swap(CGameNotifications_UpdateNotificationSettings_Request& a, CGameNotifications_UpdateNotificationSettings_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateNotificationSettings_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Request>(NULL);
  }

  CGameNotifications_UpdateNotificationSettings_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateNotificationSettings_Request& from);
  void MergeFrom(const CGameNotifications_UpdateNotificationSettings_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateNotificationSettings_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameNotificationSettings game_notification_settings = 1;
  int game_notification_settings_size() const;
  void clear_game_notification_settings();
  static const int kGameNotificationSettingsFieldNumber = 1;
  ::GameNotificationSettings* mutable_game_notification_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::GameNotificationSettings >*
      mutable_game_notification_settings();
  const ::GameNotificationSettings& game_notification_settings(int index) const;
  ::GameNotificationSettings* add_game_notification_settings();
  const ::google::protobuf::RepeatedPtrField< ::GameNotificationSettings >&
      game_notification_settings() const;

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateNotificationSettings_Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GameNotificationSettings > game_notification_settings_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateNotificationSettings_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateNotificationSettings_Response) */ {
 public:
  CGameNotifications_UpdateNotificationSettings_Response();
  virtual ~CGameNotifications_UpdateNotificationSettings_Response();

  CGameNotifications_UpdateNotificationSettings_Response(const CGameNotifications_UpdateNotificationSettings_Response& from);

  inline CGameNotifications_UpdateNotificationSettings_Response& operator=(const CGameNotifications_UpdateNotificationSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_UpdateNotificationSettings_Response(CGameNotifications_UpdateNotificationSettings_Response&& from) noexcept
    : CGameNotifications_UpdateNotificationSettings_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateNotificationSettings_Response& operator=(CGameNotifications_UpdateNotificationSettings_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_UpdateNotificationSettings_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_UpdateNotificationSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateNotificationSettings_Response*>(
               &_CGameNotifications_UpdateNotificationSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CGameNotifications_UpdateNotificationSettings_Response* other);
  friend void swap(CGameNotifications_UpdateNotificationSettings_Response& a, CGameNotifications_UpdateNotificationSettings_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateNotificationSettings_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Response>(NULL);
  }

  CGameNotifications_UpdateNotificationSettings_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateNotificationSettings_Response& from);
  void MergeFrom(const CGameNotifications_UpdateNotificationSettings_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateNotificationSettings_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateNotificationSettings_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_OnNotificationsRequested_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_OnNotificationsRequested_Notification) */ {
 public:
  CGameNotifications_OnNotificationsRequested_Notification();
  virtual ~CGameNotifications_OnNotificationsRequested_Notification();

  CGameNotifications_OnNotificationsRequested_Notification(const CGameNotifications_OnNotificationsRequested_Notification& from);

  inline CGameNotifications_OnNotificationsRequested_Notification& operator=(const CGameNotifications_OnNotificationsRequested_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_OnNotificationsRequested_Notification(CGameNotifications_OnNotificationsRequested_Notification&& from) noexcept
    : CGameNotifications_OnNotificationsRequested_Notification() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_OnNotificationsRequested_Notification& operator=(CGameNotifications_OnNotificationsRequested_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_OnNotificationsRequested_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_OnNotificationsRequested_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_OnNotificationsRequested_Notification*>(
               &_CGameNotifications_OnNotificationsRequested_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CGameNotifications_OnNotificationsRequested_Notification* other);
  friend void swap(CGameNotifications_OnNotificationsRequested_Notification& a, CGameNotifications_OnNotificationsRequested_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_OnNotificationsRequested_Notification* New() const final {
    return CreateMaybeMessage<CGameNotifications_OnNotificationsRequested_Notification>(NULL);
  }

  CGameNotifications_OnNotificationsRequested_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_OnNotificationsRequested_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_OnNotificationsRequested_Notification& from);
  void MergeFrom(const CGameNotifications_OnNotificationsRequested_Notification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_OnNotificationsRequested_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.description) = "steamid of the user who notifications were requested for."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 appid = 2 [(.description) = "The appid that requested notifications."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 2;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_OnNotificationsRequested_Notification)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CGameNotifications_OnUserStatusChanged_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_OnUserStatusChanged_Notification) */ {
 public:
  CGameNotifications_OnUserStatusChanged_Notification();
  virtual ~CGameNotifications_OnUserStatusChanged_Notification();

  CGameNotifications_OnUserStatusChanged_Notification(const CGameNotifications_OnUserStatusChanged_Notification& from);

  inline CGameNotifications_OnUserStatusChanged_Notification& operator=(const CGameNotifications_OnUserStatusChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameNotifications_OnUserStatusChanged_Notification(CGameNotifications_OnUserStatusChanged_Notification&& from) noexcept
    : CGameNotifications_OnUserStatusChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_OnUserStatusChanged_Notification& operator=(CGameNotifications_OnUserStatusChanged_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameNotifications_OnUserStatusChanged_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameNotifications_OnUserStatusChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_OnUserStatusChanged_Notification*>(
               &_CGameNotifications_OnUserStatusChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CGameNotifications_OnUserStatusChanged_Notification* other);
  friend void swap(CGameNotifications_OnUserStatusChanged_Notification& a, CGameNotifications_OnUserStatusChanged_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_OnUserStatusChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameNotifications_OnUserStatusChanged_Notification>(NULL);
  }

  CGameNotifications_OnUserStatusChanged_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_OnUserStatusChanged_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameNotifications_OnUserStatusChanged_Notification& from);
  void MergeFrom(const CGameNotifications_OnUserStatusChanged_Notification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_OnUserStatusChanged_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CGameNotifications_UserStatus status = 4 [(.description) = "(Optional) New status of the user."];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  private:
  const ::CGameNotifications_UserStatus& _internal_status() const;
  public:
  const ::CGameNotifications_UserStatus& status() const;
  ::CGameNotifications_UserStatus* release_status();
  ::CGameNotifications_UserStatus* mutable_status();
  void set_allocated_status(::CGameNotifications_UserStatus* status);

  // optional fixed64 steamid = 1 [(.description) = "steamid of the user whose status changed."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint64 sessionid = 2 [(.description) = "The sessionid of the session where the user\'s status was changed."];
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // optional uint32 appid = 3 [(.description) = "The appid of the session where the user\'s status changed."];
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional bool removed = 5 [(.description) = "(Optional) User has been removed from the session."];
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 5;
  bool removed() const;
  void set_removed(bool value);

  // @@protoc_insertion_point(class_scope:CGameNotifications_OnUserStatusChanged_Notification)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_appid();
  void clear_has_appid();
  void set_has_status();
  void clear_has_status();
  void set_has_removed();
  void clear_has_removed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CGameNotifications_UserStatus* status_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint32 appid_;
  bool removed_;
  friend struct ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class GameNotifications_Stub;

class GameNotifications : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameNotifications() {};
 public:
  virtual ~GameNotifications();

  typedef GameNotifications_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UserCreateSession(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_CreateSession_Request* request,
                       ::CGameNotifications_CreateSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserDeleteSession(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_DeleteSession_Request* request,
                       ::CGameNotifications_DeleteSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserUpdateSession(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_UpdateSession_Request* request,
                       ::CGameNotifications_UpdateSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EnumerateSessions(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_EnumerateSessions_Request* request,
                       ::CGameNotifications_EnumerateSessions_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSessionDetails(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_GetSessionDetails_Request* request,
                       ::CGameNotifications_GetSessionDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateNotificationSettings(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_UpdateNotificationSettings_Request* request,
                       ::CGameNotifications_UpdateNotificationSettings_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotifications);
};

class GameNotifications_Stub : public GameNotifications {
 public:
  GameNotifications_Stub(::google::protobuf::RpcChannel* channel);
  GameNotifications_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~GameNotifications_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements GameNotifications ------------------------------------------

  void UserCreateSession(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_CreateSession_Request* request,
                       ::CGameNotifications_CreateSession_Response* response,
                       ::google::protobuf::Closure* done);
  void UserDeleteSession(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_DeleteSession_Request* request,
                       ::CGameNotifications_DeleteSession_Response* response,
                       ::google::protobuf::Closure* done);
  void UserUpdateSession(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_UpdateSession_Request* request,
                       ::CGameNotifications_UpdateSession_Response* response,
                       ::google::protobuf::Closure* done);
  void EnumerateSessions(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_EnumerateSessions_Request* request,
                       ::CGameNotifications_EnumerateSessions_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSessionDetails(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_GetSessionDetails_Request* request,
                       ::CGameNotifications_GetSessionDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateNotificationSettings(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_UpdateNotificationSettings_Request* request,
                       ::CGameNotifications_UpdateNotificationSettings_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotifications_Stub);
};


// -------------------------------------------------------------------

class GameNotificationsClient_Stub;

class GameNotificationsClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameNotificationsClient() {};
 public:
  virtual ~GameNotificationsClient();

  typedef GameNotificationsClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void OnNotificationsRequested(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_OnNotificationsRequested_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void OnUserStatusChanged(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_OnUserStatusChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotificationsClient);
};

class GameNotificationsClient_Stub : public GameNotificationsClient {
 public:
  GameNotificationsClient_Stub(::google::protobuf::RpcChannel* channel);
  GameNotificationsClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~GameNotificationsClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements GameNotificationsClient ------------------------------------------

  void OnNotificationsRequested(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_OnNotificationsRequested_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void OnUserStatusChanged(::google::protobuf::RpcController* controller,
                       const ::CGameNotifications_OnUserStatusChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotificationsClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameNotifications_Variable

// optional string key = 1 [(.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
inline bool CGameNotifications_Variable::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_Variable::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_Variable::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_Variable::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& CGameNotifications_Variable::key() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Variable.key)
  return key_.GetNoArena();
}
inline void CGameNotifications_Variable::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Variable.key)
}
#if LANG_CXX11
inline void CGameNotifications_Variable::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_Variable.key)
}
#endif
inline void CGameNotifications_Variable::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_Variable.key)
}
inline void CGameNotifications_Variable::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_Variable.key)
}
inline ::std::string* CGameNotifications_Variable::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Variable.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_Variable::release_key() {
  // @@protoc_insertion_point(field_release:CGameNotifications_Variable.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_Variable::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_Variable.key)
}

// optional string value = 2 [(.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
inline bool CGameNotifications_Variable::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_Variable::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_Variable::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_Variable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CGameNotifications_Variable::value() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Variable.value)
  return value_.GetNoArena();
}
inline void CGameNotifications_Variable::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Variable.value)
}
#if LANG_CXX11
inline void CGameNotifications_Variable::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_Variable.value)
}
#endif
inline void CGameNotifications_Variable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_Variable.value)
}
inline void CGameNotifications_Variable::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_Variable.value)
}
inline ::std::string* CGameNotifications_Variable::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Variable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_Variable::release_value() {
  // @@protoc_insertion_point(field_release:CGameNotifications_Variable.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_Variable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_Variable.value)
}

// -------------------------------------------------------------------

// CGameNotifications_LocalizedText

// optional string token = 1 [(.description) = "A localization token that maps to the desired string."];
inline bool CGameNotifications_LocalizedText::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_LocalizedText::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_LocalizedText::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_LocalizedText::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& CGameNotifications_LocalizedText::token() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_LocalizedText.token)
  return token_.GetNoArena();
}
inline void CGameNotifications_LocalizedText::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_LocalizedText.token)
}
#if LANG_CXX11
inline void CGameNotifications_LocalizedText::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_LocalizedText.token)
}
#endif
inline void CGameNotifications_LocalizedText::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_LocalizedText.token)
}
inline void CGameNotifications_LocalizedText::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_LocalizedText.token)
}
inline ::std::string* CGameNotifications_LocalizedText::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_LocalizedText.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_LocalizedText::release_token() {
  // @@protoc_insertion_point(field_release:CGameNotifications_LocalizedText.token)
  if (!has_token()) {
    return NULL;
  }
  clear_has_token();
  return token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_LocalizedText::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_LocalizedText.token)
}

// repeated .CGameNotifications_Variable variables = 2 [(.description) = "A list of variables values to substitute in any variables found in the localized string."];
inline int CGameNotifications_LocalizedText::variables_size() const {
  return variables_.size();
}
inline void CGameNotifications_LocalizedText::clear_variables() {
  variables_.Clear();
}
inline ::CGameNotifications_Variable* CGameNotifications_LocalizedText::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_LocalizedText.variables)
  return variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Variable >*
CGameNotifications_LocalizedText::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_LocalizedText.variables)
  return &variables_;
}
inline const ::CGameNotifications_Variable& CGameNotifications_LocalizedText::variables(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_LocalizedText.variables)
  return variables_.Get(index);
}
inline ::CGameNotifications_Variable* CGameNotifications_LocalizedText::add_variables() {
  // @@protoc_insertion_point(field_add:CGameNotifications_LocalizedText.variables)
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Variable >&
CGameNotifications_LocalizedText::variables() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_LocalizedText.variables)
  return variables_;
}

// optional string rendered_text = 3 [(.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
inline bool CGameNotifications_LocalizedText::has_rendered_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_LocalizedText::set_has_rendered_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_LocalizedText::clear_has_rendered_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_LocalizedText::clear_rendered_text() {
  rendered_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rendered_text();
}
inline const ::std::string& CGameNotifications_LocalizedText::rendered_text() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_LocalizedText.rendered_text)
  return rendered_text_.GetNoArena();
}
inline void CGameNotifications_LocalizedText::set_rendered_text(const ::std::string& value) {
  set_has_rendered_text();
  rendered_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_LocalizedText.rendered_text)
}
#if LANG_CXX11
inline void CGameNotifications_LocalizedText::set_rendered_text(::std::string&& value) {
  set_has_rendered_text();
  rendered_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_LocalizedText.rendered_text)
}
#endif
inline void CGameNotifications_LocalizedText::set_rendered_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rendered_text();
  rendered_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_LocalizedText.rendered_text)
}
inline void CGameNotifications_LocalizedText::set_rendered_text(const char* value, size_t size) {
  set_has_rendered_text();
  rendered_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_LocalizedText.rendered_text)
}
inline ::std::string* CGameNotifications_LocalizedText::mutable_rendered_text() {
  set_has_rendered_text();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_LocalizedText.rendered_text)
  return rendered_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_LocalizedText::release_rendered_text() {
  // @@protoc_insertion_point(field_release:CGameNotifications_LocalizedText.rendered_text)
  if (!has_rendered_text()) {
    return NULL;
  }
  clear_has_rendered_text();
  return rendered_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_LocalizedText::set_allocated_rendered_text(::std::string* rendered_text) {
  if (rendered_text != NULL) {
    set_has_rendered_text();
  } else {
    clear_has_rendered_text();
  }
  rendered_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rendered_text);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_LocalizedText.rendered_text)
}

// -------------------------------------------------------------------

// CGameNotifications_UserStatus

// optional fixed64 steamid = 1 [(.description) = "The specific user\'s steamid."];
inline bool CGameNotifications_UserStatus::has_steamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameNotifications_UserStatus::set_has_steamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGameNotifications_UserStatus::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGameNotifications_UserStatus::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CGameNotifications_UserStatus::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.steamid)
  return steamid_;
}
inline void CGameNotifications_UserStatus::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_UserStatus.steamid)
}

// optional string state = 2 [(.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
inline bool CGameNotifications_UserStatus::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_UserStatus::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_UserStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_UserStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& CGameNotifications_UserStatus::state() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.state)
  return state_.GetNoArena();
}
inline void CGameNotifications_UserStatus::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_UserStatus.state)
}
#if LANG_CXX11
inline void CGameNotifications_UserStatus::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_UserStatus.state)
}
#endif
inline void CGameNotifications_UserStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_UserStatus.state)
}
inline void CGameNotifications_UserStatus::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_UserStatus.state)
}
inline ::std::string* CGameNotifications_UserStatus::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UserStatus.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_UserStatus::release_state() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UserStatus.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_UserStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UserStatus.state)
}

// optional .CGameNotifications_LocalizedText title = 3 [(.description) = "Title of the session to display to this user in their list of active sessions."];
inline bool CGameNotifications_UserStatus::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_UserStatus::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_UserStatus::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_UserStatus::clear_title() {
  if (title_ != NULL) title_->Clear();
  clear_has_title();
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::_internal_title() const {
  return *title_;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.title)
  return p != NULL ? *p : *reinterpret_cast<const ::CGameNotifications_LocalizedText*>(
      &::_CGameNotifications_LocalizedText_default_instance_);
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UserStatus.title)
  clear_has_title();
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArenaNoVirtual());
    title_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UserStatus.title)
  return title_;
}
inline void CGameNotifications_UserStatus::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete title_;
  }
  if (title) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      title = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    set_has_title();
  } else {
    clear_has_title();
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UserStatus.title)
}

// optional .CGameNotifications_LocalizedText message = 4 [(.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
inline bool CGameNotifications_UserStatus::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_UserStatus::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_UserStatus::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_UserStatus::clear_message() {
  if (message_ != NULL) message_->Clear();
  clear_has_message();
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::_internal_message() const {
  return *message_;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::message() const {
  const ::CGameNotifications_LocalizedText* p = message_;
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.message)
  return p != NULL ? *p : *reinterpret_cast<const ::CGameNotifications_LocalizedText*>(
      &::_CGameNotifications_LocalizedText_default_instance_);
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::release_message() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UserStatus.message)
  clear_has_message();
  ::CGameNotifications_LocalizedText* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UserStatus.message)
  return message_;
}
inline void CGameNotifications_UserStatus::set_allocated_message(::CGameNotifications_LocalizedText* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
  } else {
    clear_has_message();
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UserStatus.message)
}

// -------------------------------------------------------------------

// CGameNotifications_CreateSession_Request

// optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
inline bool CGameNotifications_CreateSession_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameNotifications_CreateSession_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGameNotifications_CreateSession_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGameNotifications_CreateSession_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_CreateSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.appid)
  return appid_;
}
inline void CGameNotifications_CreateSession_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Request.appid)
}

// optional uint64 context = 2 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
inline bool CGameNotifications_CreateSession_Request::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_CreateSession_Request::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_CreateSession_Request::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_CreateSession_Request::clear_context() {
  context_ = GOOGLE_ULONGLONG(0);
  clear_has_context();
}
inline ::google::protobuf::uint64 CGameNotifications_CreateSession_Request::context() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.context)
  return context_;
}
inline void CGameNotifications_CreateSession_Request::set_context(::google::protobuf::uint64 value) {
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Request.context)
}

// optional .CGameNotifications_LocalizedText title = 3 [(.description) = "The title of the session to be displayed within each user\'s list of sessions."];
inline bool CGameNotifications_CreateSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_CreateSession_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_CreateSession_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_CreateSession_Request::clear_title() {
  if (title_ != NULL) title_->Clear();
  clear_has_title();
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_CreateSession_Request::_internal_title() const {
  return *title_;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_CreateSession_Request::title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.title)
  return p != NULL ? *p : *reinterpret_cast<const ::CGameNotifications_LocalizedText*>(
      &::_CGameNotifications_LocalizedText_default_instance_);
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_CreateSession_Request.title)
  clear_has_title();
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArenaNoVirtual());
    title_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CGameNotifications_CreateSession_Request.title)
  return title_;
}
inline void CGameNotifications_CreateSession_Request::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete title_;
  }
  if (title) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      title = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    set_has_title();
  } else {
    clear_has_title();
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_CreateSession_Request.title)
}

// repeated .CGameNotifications_UserStatus users = 4 [(.description) = "The initial state of all users in the session."];
inline int CGameNotifications_CreateSession_Request::users_size() const {
  return users_.size();
}
inline void CGameNotifications_CreateSession_Request::clear_users() {
  users_.Clear();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_CreateSession_Request.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >*
CGameNotifications_CreateSession_Request::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_CreateSession_Request.users)
  return &users_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_CreateSession_Request::users(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.users)
  return users_.Get(index);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::add_users() {
  // @@protoc_insertion_point(field_add:CGameNotifications_CreateSession_Request.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >&
CGameNotifications_CreateSession_Request::users() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_CreateSession_Request.users)
  return users_;
}

// optional fixed64 steamid = 5 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
inline bool CGameNotifications_CreateSession_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_CreateSession_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_CreateSession_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_CreateSession_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CGameNotifications_CreateSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.steamid)
  return steamid_;
}
inline void CGameNotifications_CreateSession_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Request.steamid)
}

// -------------------------------------------------------------------

// CGameNotifications_CreateSession_Response

// optional uint64 sessionid = 1 [(.description) = "The sessionid of the created session."];
inline bool CGameNotifications_CreateSession_Response::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_CreateSession_Response::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_CreateSession_Response::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_CreateSession_Response::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CGameNotifications_CreateSession_Response::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Response.sessionid)
  return sessionid_;
}
inline void CGameNotifications_CreateSession_Response::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Response.sessionid)
}

// -------------------------------------------------------------------

// CGameNotifications_DeleteSession_Request

// optional uint64 sessionid = 1 [(.description) = "The sessionid to delete."];
inline bool CGameNotifications_DeleteSession_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_DeleteSession_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_DeleteSession_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_DeleteSession_Request::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CGameNotifications_DeleteSession_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_DeleteSession_Request.sessionid)
  return sessionid_;
}
inline void CGameNotifications_DeleteSession_Request::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_DeleteSession_Request.sessionid)
}

// optional uint32 appid = 2 [(.description) = "The appid of the session to delete."];
inline bool CGameNotifications_DeleteSession_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_DeleteSession_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_DeleteSession_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_DeleteSession_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_DeleteSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_DeleteSession_Request.appid)
  return appid_;
}
inline void CGameNotifications_DeleteSession_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_DeleteSession_Request.appid)
}

// optional fixed64 steamid = 3 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
inline bool CGameNotifications_DeleteSession_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_DeleteSession_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_DeleteSession_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_DeleteSession_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CGameNotifications_DeleteSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_DeleteSession_Request.steamid)
  return steamid_;
}
inline void CGameNotifications_DeleteSession_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_DeleteSession_Request.steamid)
}

// -------------------------------------------------------------------

// CGameNotifications_DeleteSession_Response

// -------------------------------------------------------------------

// CGameNotifications_UpdateSession_Request

// optional uint64 sessionid = 1 [(.description) = "The sessionid to update."];
inline bool CGameNotifications_UpdateSession_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_UpdateSession_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_UpdateSession_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_UpdateSession_Request::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CGameNotifications_UpdateSession_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.sessionid)
  return sessionid_;
}
inline void CGameNotifications_UpdateSession_Request::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_UpdateSession_Request.sessionid)
}

// optional uint32 appid = 2 [(.description) = "The appid of the session to update."];
inline bool CGameNotifications_UpdateSession_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameNotifications_UpdateSession_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGameNotifications_UpdateSession_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGameNotifications_UpdateSession_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_UpdateSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.appid)
  return appid_;
}
inline void CGameNotifications_UpdateSession_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_UpdateSession_Request.appid)
}

// optional .CGameNotifications_LocalizedText title = 3 [(.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
inline bool CGameNotifications_UpdateSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_UpdateSession_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_UpdateSession_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_UpdateSession_Request::clear_title() {
  if (title_ != NULL) title_->Clear();
  clear_has_title();
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UpdateSession_Request::_internal_title() const {
  return *title_;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UpdateSession_Request::title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.title)
  return p != NULL ? *p : *reinterpret_cast<const ::CGameNotifications_LocalizedText*>(
      &::_CGameNotifications_LocalizedText_default_instance_);
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UpdateSession_Request.title)
  clear_has_title();
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArenaNoVirtual());
    title_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UpdateSession_Request.title)
  return title_;
}
inline void CGameNotifications_UpdateSession_Request::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete title_;
  }
  if (title) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      title = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    set_has_title();
  } else {
    clear_has_title();
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UpdateSession_Request.title)
}

// repeated .CGameNotifications_UserStatus users = 4 [(.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
inline int CGameNotifications_UpdateSession_Request::users_size() const {
  return users_.size();
}
inline void CGameNotifications_UpdateSession_Request::clear_users() {
  users_.Clear();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UpdateSession_Request.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >*
CGameNotifications_UpdateSession_Request::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_UpdateSession_Request.users)
  return &users_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_UpdateSession_Request::users(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.users)
  return users_.Get(index);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::add_users() {
  // @@protoc_insertion_point(field_add:CGameNotifications_UpdateSession_Request.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >&
CGameNotifications_UpdateSession_Request::users() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_UpdateSession_Request.users)
  return users_;
}

// optional fixed64 steamid = 6 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
inline bool CGameNotifications_UpdateSession_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_UpdateSession_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_UpdateSession_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_UpdateSession_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CGameNotifications_UpdateSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.steamid)
  return steamid_;
}
inline void CGameNotifications_UpdateSession_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_UpdateSession_Request.steamid)
}

// -------------------------------------------------------------------

// CGameNotifications_UpdateSession_Response

// -------------------------------------------------------------------

// CGameNotifications_EnumerateSessions_Request

// optional uint32 appid = 1 [(.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
inline bool CGameNotifications_EnumerateSessions_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_EnumerateSessions_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_EnumerateSessions_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.appid)
  return appid_;
}
inline void CGameNotifications_EnumerateSessions_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.appid)
}

// optional bool include_all_user_messages = 3 [(.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
inline bool CGameNotifications_EnumerateSessions_Request::has_include_all_user_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_EnumerateSessions_Request::set_has_include_all_user_messages() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_has_include_all_user_messages() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_include_all_user_messages() {
  include_all_user_messages_ = false;
  clear_has_include_all_user_messages();
}
inline bool CGameNotifications_EnumerateSessions_Request::include_all_user_messages() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
  return include_all_user_messages_;
}
inline void CGameNotifications_EnumerateSessions_Request::set_include_all_user_messages(bool value) {
  set_has_include_all_user_messages();
  include_all_user_messages_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
}

// optional bool include_auth_user_message = 4 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
inline bool CGameNotifications_EnumerateSessions_Request::has_include_auth_user_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameNotifications_EnumerateSessions_Request::set_has_include_auth_user_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_has_include_auth_user_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_include_auth_user_message() {
  include_auth_user_message_ = false;
  clear_has_include_auth_user_message();
}
inline bool CGameNotifications_EnumerateSessions_Request::include_auth_user_message() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
  return include_auth_user_message_;
}
inline void CGameNotifications_EnumerateSessions_Request::set_include_auth_user_message(bool value) {
  set_has_include_auth_user_message();
  include_auth_user_message_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
}

// optional string language = 5 [(.description) = "(Optional) Language to localize the text in."];
inline bool CGameNotifications_EnumerateSessions_Request::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_EnumerateSessions_Request::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_EnumerateSessions_Request::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& CGameNotifications_EnumerateSessions_Request::language() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.language)
  return language_.GetNoArena();
}
inline void CGameNotifications_EnumerateSessions_Request::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.language)
}
#if LANG_CXX11
inline void CGameNotifications_EnumerateSessions_Request::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_EnumerateSessions_Request.language)
}
#endif
inline void CGameNotifications_EnumerateSessions_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_EnumerateSessions_Request.language)
}
inline void CGameNotifications_EnumerateSessions_Request::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_EnumerateSessions_Request.language)
}
inline ::std::string* CGameNotifications_EnumerateSessions_Request::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_EnumerateSessions_Request.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_EnumerateSessions_Request::release_language() {
  // @@protoc_insertion_point(field_release:CGameNotifications_EnumerateSessions_Request.language)
  if (!has_language()) {
    return NULL;
  }
  clear_has_language();
  return language_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_EnumerateSessions_Request::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_EnumerateSessions_Request.language)
}

// -------------------------------------------------------------------

// CGameNotifications_Session

// optional uint64 sessionid = 1 [(.description) = "The sessionid for this session."];
inline bool CGameNotifications_Session::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_Session::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_Session::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_Session::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CGameNotifications_Session::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.sessionid)
  return sessionid_;
}
inline void CGameNotifications_Session::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.sessionid)
}

// optional uint64 appid = 2 [(.description) = "The appid for the session."];
inline bool CGameNotifications_Session::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_Session::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_Session::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_Session::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
  clear_has_appid();
}
inline ::google::protobuf::uint64 CGameNotifications_Session::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.appid)
  return appid_;
}
inline void CGameNotifications_Session::set_appid(::google::protobuf::uint64 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.appid)
}

// optional uint64 context = 3 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
inline bool CGameNotifications_Session::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameNotifications_Session::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGameNotifications_Session::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGameNotifications_Session::clear_context() {
  context_ = GOOGLE_ULONGLONG(0);
  clear_has_context();
}
inline ::google::protobuf::uint64 CGameNotifications_Session::context() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.context)
  return context_;
}
inline void CGameNotifications_Session::set_context(::google::protobuf::uint64 value) {
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.context)
}

// optional .CGameNotifications_LocalizedText title = 4 [(.description) = "The current title for the session."];
inline bool CGameNotifications_Session::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_Session::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_Session::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_Session::clear_title() {
  if (title_ != NULL) title_->Clear();
  clear_has_title();
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_Session::_internal_title() const {
  return *title_;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_Session::title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.title)
  return p != NULL ? *p : *reinterpret_cast<const ::CGameNotifications_LocalizedText*>(
      &::_CGameNotifications_LocalizedText_default_instance_);
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_Session::release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_Session.title)
  clear_has_title();
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_Session::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArenaNoVirtual());
    title_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Session.title)
  return title_;
}
inline void CGameNotifications_Session::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete title_;
  }
  if (title) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      title = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    set_has_title();
  } else {
    clear_has_title();
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_Session.title)
}

// optional uint32 time_created = 5 [(.description) = "The time the session was created."];
inline bool CGameNotifications_Session::has_time_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGameNotifications_Session::set_has_time_created() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CGameNotifications_Session::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CGameNotifications_Session::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CGameNotifications_Session::time_created() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.time_created)
  return time_created_;
}
inline void CGameNotifications_Session::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.time_created)
}

// optional uint32 time_updated = 6 [(.description) = "The last time the session was updated."];
inline bool CGameNotifications_Session::has_time_updated() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CGameNotifications_Session::set_has_time_updated() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CGameNotifications_Session::clear_has_time_updated() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CGameNotifications_Session::clear_time_updated() {
  time_updated_ = 0u;
  clear_has_time_updated();
}
inline ::google::protobuf::uint32 CGameNotifications_Session::time_updated() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.time_updated)
  return time_updated_;
}
inline void CGameNotifications_Session::set_time_updated(::google::protobuf::uint32 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.time_updated)
}

// repeated .CGameNotifications_UserStatus user_status = 7 [(.description) = "The status of all the users in the session."];
inline int CGameNotifications_Session::user_status_size() const {
  return user_status_.size();
}
inline void CGameNotifications_Session::clear_user_status() {
  user_status_.Clear();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_Session::mutable_user_status(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Session.user_status)
  return user_status_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >*
CGameNotifications_Session::mutable_user_status() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_Session.user_status)
  return &user_status_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_Session::user_status(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.user_status)
  return user_status_.Get(index);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_Session::add_user_status() {
  // @@protoc_insertion_point(field_add:CGameNotifications_Session.user_status)
  return user_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_UserStatus >&
CGameNotifications_Session::user_status() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_Session.user_status)
  return user_status_;
}

// -------------------------------------------------------------------

// CGameNotifications_EnumerateSessions_Response

// repeated .CGameNotifications_Session sessions = 1 [(.description) = "A list of the user\'s sessions."];
inline int CGameNotifications_EnumerateSessions_Response::sessions_size() const {
  return sessions_.size();
}
inline void CGameNotifications_EnumerateSessions_Response::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >*
CGameNotifications_EnumerateSessions_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_EnumerateSessions_Response.sessions)
  return &sessions_;
}
inline const ::CGameNotifications_Session& CGameNotifications_EnumerateSessions_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Get(index);
}
inline ::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >&
CGameNotifications_EnumerateSessions_Response::sessions() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// CGameNotifications_GetSessionDetails_Request_RequestedSession

// optional uint64 sessionid = 1 [(.description) = "The sessionid to get details for."];
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CGameNotifications_GetSessionDetails_Request_RequestedSession::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
  return sessionid_;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
}

// optional bool include_auth_user_message = 3 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::has_include_auth_user_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_has_include_auth_user_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_has_include_auth_user_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_include_auth_user_message() {
  include_auth_user_message_ = false;
  clear_has_include_auth_user_message();
}
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::include_auth_user_message() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
  return include_auth_user_message_;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_include_auth_user_message(bool value) {
  set_has_include_auth_user_message();
  include_auth_user_message_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
}

// -------------------------------------------------------------------

// CGameNotifications_GetSessionDetails_Request

// repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
inline int CGameNotifications_GetSessionDetails_Request::sessions_size() const {
  return sessions_.size();
}
inline void CGameNotifications_GetSessionDetails_Request::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >*
CGameNotifications_GetSessionDetails_Request::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_GetSessionDetails_Request.sessions)
  return &sessions_;
}
inline const ::CGameNotifications_GetSessionDetails_Request_RequestedSession& CGameNotifications_GetSessionDetails_Request::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Get(index);
}
inline ::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >&
CGameNotifications_GetSessionDetails_Request::sessions() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_;
}

// optional uint32 appid = 2 [(.description) = "The appid for the sessions."];
inline bool CGameNotifications_GetSessionDetails_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_GetSessionDetails_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_GetSessionDetails_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_GetSessionDetails_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_GetSessionDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.appid)
  return appid_;
}
inline void CGameNotifications_GetSessionDetails_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.appid)
}

// optional string language = 3 [(.description) = "Language to localize the text in."];
inline bool CGameNotifications_GetSessionDetails_Request::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_GetSessionDetails_Request::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_GetSessionDetails_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_GetSessionDetails_Request::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& CGameNotifications_GetSessionDetails_Request::language() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.language)
  return language_.GetNoArena();
}
inline void CGameNotifications_GetSessionDetails_Request::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.language)
}
#if LANG_CXX11
inline void CGameNotifications_GetSessionDetails_Request::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_GetSessionDetails_Request.language)
}
#endif
inline void CGameNotifications_GetSessionDetails_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameNotifications_GetSessionDetails_Request.language)
}
inline void CGameNotifications_GetSessionDetails_Request::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_GetSessionDetails_Request.language)
}
inline ::std::string* CGameNotifications_GetSessionDetails_Request::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:CGameNotifications_GetSessionDetails_Request.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameNotifications_GetSessionDetails_Request::release_language() {
  // @@protoc_insertion_point(field_release:CGameNotifications_GetSessionDetails_Request.language)
  if (!has_language()) {
    return NULL;
  }
  clear_has_language();
  return language_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameNotifications_GetSessionDetails_Request::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_GetSessionDetails_Request.language)
}

// -------------------------------------------------------------------

// CGameNotifications_GetSessionDetails_Response

// repeated .CGameNotifications_Session sessions = 1 [(.description) = "The details of the session."];
inline int CGameNotifications_GetSessionDetails_Response::sessions_size() const {
  return sessions_.size();
}
inline void CGameNotifications_GetSessionDetails_Response::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >*
CGameNotifications_GetSessionDetails_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_GetSessionDetails_Response.sessions)
  return &sessions_;
}
inline const ::CGameNotifications_Session& CGameNotifications_GetSessionDetails_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Get(index);
}
inline ::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameNotifications_Session >&
CGameNotifications_GetSessionDetails_Response::sessions() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// GameNotificationSettings

// optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
inline bool GameNotificationSettings::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameNotificationSettings::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameNotificationSettings::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameNotificationSettings::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 GameNotificationSettings::appid() const {
  // @@protoc_insertion_point(field_get:GameNotificationSettings.appid)
  return appid_;
}
inline void GameNotificationSettings::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:GameNotificationSettings.appid)
}

// optional bool allow_notifications = 2 [(.description) = "Whether the user allows notification for this app."];
inline bool GameNotificationSettings::has_allow_notifications() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameNotificationSettings::set_has_allow_notifications() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameNotificationSettings::clear_has_allow_notifications() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameNotificationSettings::clear_allow_notifications() {
  allow_notifications_ = false;
  clear_has_allow_notifications();
}
inline bool GameNotificationSettings::allow_notifications() const {
  // @@protoc_insertion_point(field_get:GameNotificationSettings.allow_notifications)
  return allow_notifications_;
}
inline void GameNotificationSettings::set_allow_notifications(bool value) {
  set_has_allow_notifications();
  allow_notifications_ = value;
  // @@protoc_insertion_point(field_set:GameNotificationSettings.allow_notifications)
}

// -------------------------------------------------------------------

// CGameNotifications_UpdateNotificationSettings_Request

// repeated .GameNotificationSettings game_notification_settings = 1;
inline int CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings_size() const {
  return game_notification_settings_.size();
}
inline void CGameNotifications_UpdateNotificationSettings_Request::clear_game_notification_settings() {
  game_notification_settings_.Clear();
}
inline ::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::mutable_game_notification_settings(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GameNotificationSettings >*
CGameNotifications_UpdateNotificationSettings_Request::mutable_game_notification_settings() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return &game_notification_settings_;
}
inline const ::GameNotificationSettings& CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Get(index);
}
inline ::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::add_game_notification_settings() {
  // @@protoc_insertion_point(field_add:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameNotificationSettings >&
CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_;
}

// -------------------------------------------------------------------

// CGameNotifications_UpdateNotificationSettings_Response

// -------------------------------------------------------------------

// CGameNotifications_OnNotificationsRequested_Notification

// optional fixed64 steamid = 1 [(.description) = "steamid of the user who notifications were requested for."];
inline bool CGameNotifications_OnNotificationsRequested_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CGameNotifications_OnNotificationsRequested_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnNotificationsRequested_Notification.steamid)
  return steamid_;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_OnNotificationsRequested_Notification.steamid)
}

// optional uint32 appid = 2 [(.description) = "The appid that requested notifications."];
inline bool CGameNotifications_OnNotificationsRequested_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_OnNotificationsRequested_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnNotificationsRequested_Notification.appid)
  return appid_;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_OnNotificationsRequested_Notification.appid)
}

// -------------------------------------------------------------------

// CGameNotifications_OnUserStatusChanged_Notification

// optional fixed64 steamid = 1 [(.description) = "steamid of the user whose status changed."];
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CGameNotifications_OnUserStatusChanged_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.steamid)
  return steamid_;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.steamid)
}

// optional uint64 sessionid = 2 [(.description) = "The sessionid of the session where the user\'s status was changed."];
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CGameNotifications_OnUserStatusChanged_Notification::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
  return sessionid_;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
}

// optional uint32 appid = 3 [(.description) = "The appid of the session where the user\'s status changed."];
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CGameNotifications_OnUserStatusChanged_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.appid)
  return appid_;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.appid)
}

// optional .CGameNotifications_UserStatus status = 4 [(.description) = "(Optional) New status of the user."];
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_OnUserStatusChanged_Notification::_internal_status() const {
  return *status_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_OnUserStatusChanged_Notification::status() const {
  const ::CGameNotifications_UserStatus* p = status_;
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.status)
  return p != NULL ? *p : *reinterpret_cast<const ::CGameNotifications_UserStatus*>(
      &::_CGameNotifications_UserStatus_default_instance_);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::release_status() {
  // @@protoc_insertion_point(field_release:CGameNotifications_OnUserStatusChanged_Notification.status)
  clear_has_status();
  ::CGameNotifications_UserStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::CGameNotifications_UserStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CGameNotifications_OnUserStatusChanged_Notification.status)
  return status_;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_allocated_status(::CGameNotifications_UserStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_OnUserStatusChanged_Notification.status)
}

// optional bool removed = 5 [(.description) = "(Optional) User has been removed from the session."];
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_removed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_has_removed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_has_removed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::removed() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.removed)
  return removed_;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.removed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fgamenotifications_2esteamclient_2eproto
