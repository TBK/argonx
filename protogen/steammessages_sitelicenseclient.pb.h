// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_sitelicenseclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fsitelicenseclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fsitelicenseclient_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fsitelicenseclient_2eproto 

namespace protobuf_steammessages_5fsitelicenseclient_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fsitelicenseclient_2eproto
class CMsgClientSiteInfo;
class CMsgClientSiteInfoDefaultTypeInternal;
extern CMsgClientSiteInfoDefaultTypeInternal _CMsgClientSiteInfo_default_instance_;
class CMsgClientSiteLicenseCheckout;
class CMsgClientSiteLicenseCheckoutDefaultTypeInternal;
extern CMsgClientSiteLicenseCheckoutDefaultTypeInternal _CMsgClientSiteLicenseCheckout_default_instance_;
class CMsgClientSiteLicenseCheckoutResponse;
class CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal;
extern CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal _CMsgClientSiteLicenseCheckoutResponse_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeats;
class CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal;
extern CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal _CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsResponse;
class CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal;
extern CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfo;
class CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal;
extern CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoResponse;
class CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal;
extern CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::CMsgClientSiteInfo* Arena::CreateMaybeMessage<::CMsgClientSiteInfo>(Arena*);
template<> ::CMsgClientSiteLicenseCheckout* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseCheckout>(Arena*);
template<> ::CMsgClientSiteLicenseCheckoutResponse* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseCheckoutResponse>(Arena*);
template<> ::CMsgClientSiteLicenseGetAvailableSeats* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetAvailableSeats>(Arena*);
template<> ::CMsgClientSiteLicenseGetAvailableSeatsResponse* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetAvailableSeatsResponse>(Arena*);
template<> ::CMsgClientSiteLicenseGetContentCacheInfo* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetContentCacheInfo>(Arena*);
template<> ::CMsgClientSiteLicenseGetContentCacheInfoResponse* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetContentCacheInfoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CMsgClientSiteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteInfo) */ {
 public:
  CMsgClientSiteInfo();
  virtual ~CMsgClientSiteInfo();

  CMsgClientSiteInfo(const CMsgClientSiteInfo& from);

  inline CMsgClientSiteInfo& operator=(const CMsgClientSiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteInfo(CMsgClientSiteInfo&& from) noexcept
    : CMsgClientSiteInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteInfo& operator=(CMsgClientSiteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteInfo*>(
               &_CMsgClientSiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgClientSiteInfo* other);
  friend void swap(CMsgClientSiteInfo& a, CMsgClientSiteInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteInfo* New() const final {
    return CreateMaybeMessage<CMsgClientSiteInfo>(NULL);
  }

  CMsgClientSiteInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteInfo& from);
  void MergeFrom(const CMsgClientSiteInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string site_name = 2;
  bool has_site_name() const;
  void clear_site_name();
  static const int kSiteNameFieldNumber = 2;
  const ::std::string& site_name() const;
  void set_site_name(const ::std::string& value);
  #if LANG_CXX11
  void set_site_name(::std::string&& value);
  #endif
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  ::std::string* mutable_site_name();
  ::std::string* release_site_name();
  void set_allocated_site_name(::std::string* site_name);

  // optional uint64 site_id = 1;
  bool has_site_id() const;
  void clear_site_id();
  static const int kSiteIdFieldNumber = 1;
  ::google::protobuf::uint64 site_id() const;
  void set_site_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSiteInfo)
 private:
  void set_has_site_id();
  void clear_has_site_id();
  void set_has_site_name();
  void clear_has_site_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr site_name_;
  ::google::protobuf::uint64 site_id_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseCheckout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseCheckout) */ {
 public:
  CMsgClientSiteLicenseCheckout();
  virtual ~CMsgClientSiteLicenseCheckout();

  CMsgClientSiteLicenseCheckout(const CMsgClientSiteLicenseCheckout& from);

  inline CMsgClientSiteLicenseCheckout& operator=(const CMsgClientSiteLicenseCheckout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteLicenseCheckout(CMsgClientSiteLicenseCheckout&& from) noexcept
    : CMsgClientSiteLicenseCheckout() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseCheckout& operator=(CMsgClientSiteLicenseCheckout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteLicenseCheckout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteLicenseCheckout* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseCheckout*>(
               &_CMsgClientSiteLicenseCheckout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgClientSiteLicenseCheckout* other);
  friend void swap(CMsgClientSiteLicenseCheckout& a, CMsgClientSiteLicenseCheckout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseCheckout* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckout>(NULL);
  }

  CMsgClientSiteLicenseCheckout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseCheckout& from);
  void MergeFrom(const CMsgClientSiteLicenseCheckout& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseCheckout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseCheckout)
 private:
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseCheckoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseCheckoutResponse) */ {
 public:
  CMsgClientSiteLicenseCheckoutResponse();
  virtual ~CMsgClientSiteLicenseCheckoutResponse();

  CMsgClientSiteLicenseCheckoutResponse(const CMsgClientSiteLicenseCheckoutResponse& from);

  inline CMsgClientSiteLicenseCheckoutResponse& operator=(const CMsgClientSiteLicenseCheckoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteLicenseCheckoutResponse(CMsgClientSiteLicenseCheckoutResponse&& from) noexcept
    : CMsgClientSiteLicenseCheckoutResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseCheckoutResponse& operator=(CMsgClientSiteLicenseCheckoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteLicenseCheckoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteLicenseCheckoutResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseCheckoutResponse*>(
               &_CMsgClientSiteLicenseCheckoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgClientSiteLicenseCheckoutResponse* other);
  friend void swap(CMsgClientSiteLicenseCheckoutResponse& a, CMsgClientSiteLicenseCheckoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseCheckoutResponse* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckoutResponse>(NULL);
  }

  CMsgClientSiteLicenseCheckoutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckoutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseCheckoutResponse& from);
  void MergeFrom(const CMsgClientSiteLicenseCheckoutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseCheckoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::int32 eresult() const;
  void set_eresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseCheckoutResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 eresult_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetAvailableSeats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetAvailableSeats) */ {
 public:
  CMsgClientSiteLicenseGetAvailableSeats();
  virtual ~CMsgClientSiteLicenseGetAvailableSeats();

  CMsgClientSiteLicenseGetAvailableSeats(const CMsgClientSiteLicenseGetAvailableSeats& from);

  inline CMsgClientSiteLicenseGetAvailableSeats& operator=(const CMsgClientSiteLicenseGetAvailableSeats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteLicenseGetAvailableSeats(CMsgClientSiteLicenseGetAvailableSeats&& from) noexcept
    : CMsgClientSiteLicenseGetAvailableSeats() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetAvailableSeats& operator=(CMsgClientSiteLicenseGetAvailableSeats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteLicenseGetAvailableSeats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteLicenseGetAvailableSeats* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetAvailableSeats*>(
               &_CMsgClientSiteLicenseGetAvailableSeats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgClientSiteLicenseGetAvailableSeats* other);
  friend void swap(CMsgClientSiteLicenseGetAvailableSeats& a, CMsgClientSiteLicenseGetAvailableSeats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetAvailableSeats* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeats>(NULL);
  }

  CMsgClientSiteLicenseGetAvailableSeats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetAvailableSeats& from);
  void MergeFrom(const CMsgClientSiteLicenseGetAvailableSeats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetAvailableSeats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetAvailableSeats)
 private:
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetAvailableSeatsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetAvailableSeatsResponse) */ {
 public:
  CMsgClientSiteLicenseGetAvailableSeatsResponse();
  virtual ~CMsgClientSiteLicenseGetAvailableSeatsResponse();

  CMsgClientSiteLicenseGetAvailableSeatsResponse(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from);

  inline CMsgClientSiteLicenseGetAvailableSeatsResponse& operator=(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteLicenseGetAvailableSeatsResponse(CMsgClientSiteLicenseGetAvailableSeatsResponse&& from) noexcept
    : CMsgClientSiteLicenseGetAvailableSeatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetAvailableSeatsResponse& operator=(CMsgClientSiteLicenseGetAvailableSeatsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteLicenseGetAvailableSeatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteLicenseGetAvailableSeatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetAvailableSeatsResponse*>(
               &_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other);
  friend void swap(CMsgClientSiteLicenseGetAvailableSeatsResponse& a, CMsgClientSiteLicenseGetAvailableSeatsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetAvailableSeatsResponse* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeatsResponse>(NULL);
  }

  CMsgClientSiteLicenseGetAvailableSeatsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeatsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from);
  void MergeFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seats = 2;
  bool has_seats() const;
  void clear_seats();
  static const int kSeatsFieldNumber = 2;
  ::google::protobuf::uint32 seats() const;
  void set_seats(::google::protobuf::uint32 value);

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::int32 eresult() const;
  void set_eresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetAvailableSeatsResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_seats();
  void clear_has_seats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 seats_;
  ::google::protobuf::int32 eresult_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetContentCacheInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetContentCacheInfo) */ {
 public:
  CMsgClientSiteLicenseGetContentCacheInfo();
  virtual ~CMsgClientSiteLicenseGetContentCacheInfo();

  CMsgClientSiteLicenseGetContentCacheInfo(const CMsgClientSiteLicenseGetContentCacheInfo& from);

  inline CMsgClientSiteLicenseGetContentCacheInfo& operator=(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteLicenseGetContentCacheInfo(CMsgClientSiteLicenseGetContentCacheInfo&& from) noexcept
    : CMsgClientSiteLicenseGetContentCacheInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetContentCacheInfo& operator=(CMsgClientSiteLicenseGetContentCacheInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteLicenseGetContentCacheInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteLicenseGetContentCacheInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetContentCacheInfo*>(
               &_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgClientSiteLicenseGetContentCacheInfo* other);
  friend void swap(CMsgClientSiteLicenseGetContentCacheInfo& a, CMsgClientSiteLicenseGetContentCacheInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetContentCacheInfo* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfo>(NULL);
  }

  CMsgClientSiteLicenseGetContentCacheInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from);
  void MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetContentCacheInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetContentCacheInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetContentCacheInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetContentCacheInfoResponse) */ {
 public:
  CMsgClientSiteLicenseGetContentCacheInfoResponse();
  virtual ~CMsgClientSiteLicenseGetContentCacheInfoResponse();

  CMsgClientSiteLicenseGetContentCacheInfoResponse(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from);

  inline CMsgClientSiteLicenseGetContentCacheInfoResponse& operator=(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientSiteLicenseGetContentCacheInfoResponse(CMsgClientSiteLicenseGetContentCacheInfoResponse&& from) noexcept
    : CMsgClientSiteLicenseGetContentCacheInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetContentCacheInfoResponse& operator=(CMsgClientSiteLicenseGetContentCacheInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSiteLicenseGetContentCacheInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientSiteLicenseGetContentCacheInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetContentCacheInfoResponse*>(
               &_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other);
  friend void swap(CMsgClientSiteLicenseGetContentCacheInfoResponse& a, CMsgClientSiteLicenseGetContentCacheInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetContentCacheInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfoResponse>(NULL);
  }

  CMsgClientSiteLicenseGetContentCacheInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from);
  void MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_cache = 1;
  bool has_use_cache() const;
  void clear_use_cache();
  static const int kUseCacheFieldNumber = 1;
  bool use_cache() const;
  void set_use_cache(bool value);

  // optional uint32 ipv4_address = 2;
  bool has_ipv4_address() const;
  void clear_ipv4_address();
  static const int kIpv4AddressFieldNumber = 2;
  ::google::protobuf::uint32 ipv4_address() const;
  void set_ipv4_address(::google::protobuf::uint32 value);

  // optional uint32 port_number = 3;
  bool has_port_number() const;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 3;
  ::google::protobuf::uint32 port_number() const;
  void set_port_number(::google::protobuf::uint32 value);

  // optional uint32 p2p_group = 4;
  bool has_p2p_group() const;
  void clear_p2p_group();
  static const int kP2PGroupFieldNumber = 4;
  ::google::protobuf::uint32 p2p_group() const;
  void set_p2p_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetContentCacheInfoResponse)
 private:
  void set_has_use_cache();
  void clear_has_use_cache();
  void set_has_ipv4_address();
  void clear_has_ipv4_address();
  void set_has_port_number();
  void clear_has_port_number();
  void set_has_p2p_group();
  void clear_has_p2p_group();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool use_cache_;
  ::google::protobuf::uint32 ipv4_address_;
  ::google::protobuf::uint32 port_number_;
  ::google::protobuf::uint32 p2p_group_;
  friend struct ::protobuf_steammessages_5fsitelicenseclient_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientSiteInfo

// optional uint64 site_id = 1;
inline bool CMsgClientSiteInfo::has_site_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientSiteInfo::set_has_site_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientSiteInfo::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientSiteInfo::clear_site_id() {
  site_id_ = GOOGLE_ULONGLONG(0);
  clear_has_site_id();
}
inline ::google::protobuf::uint64 CMsgClientSiteInfo::site_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteInfo.site_id)
  return site_id_;
}
inline void CMsgClientSiteInfo::set_site_id(::google::protobuf::uint64 value) {
  set_has_site_id();
  site_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteInfo.site_id)
}

// optional string site_name = 2;
inline bool CMsgClientSiteInfo::has_site_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSiteInfo::set_has_site_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSiteInfo::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSiteInfo::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
inline const ::std::string& CMsgClientSiteInfo::site_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteInfo.site_name)
  return site_name_.GetNoArena();
}
inline void CMsgClientSiteInfo::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteInfo.site_name)
}
#if LANG_CXX11
inline void CMsgClientSiteInfo::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSiteInfo.site_name)
}
#endif
inline void CMsgClientSiteInfo::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientSiteInfo.site_name)
}
inline void CMsgClientSiteInfo::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSiteInfo.site_name)
}
inline ::std::string* CMsgClientSiteInfo::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientSiteInfo.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientSiteInfo::release_site_name() {
  // @@protoc_insertion_point(field_release:CMsgClientSiteInfo.site_name)
  if (!has_site_name()) {
    return NULL;
  }
  clear_has_site_name();
  return site_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientSiteInfo::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSiteInfo.site_name)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseCheckout

// optional uint32 appid = 1;
inline bool CMsgClientSiteLicenseCheckout::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSiteLicenseCheckout::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSiteLicenseCheckout::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSiteLicenseCheckout::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgClientSiteLicenseCheckout::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseCheckout.appid)
  return appid_;
}
inline void CMsgClientSiteLicenseCheckout::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseCheckout.appid)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseCheckoutResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientSiteLicenseCheckoutResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSiteLicenseCheckoutResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSiteLicenseCheckoutResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSiteLicenseCheckoutResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientSiteLicenseCheckoutResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseCheckoutResponse.eresult)
  return eresult_;
}
inline void CMsgClientSiteLicenseCheckoutResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseCheckoutResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetAvailableSeats

// optional uint32 appid = 1;
inline bool CMsgClientSiteLicenseGetAvailableSeats::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSiteLicenseGetAvailableSeats::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSiteLicenseGetAvailableSeats::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSiteLicenseGetAvailableSeats::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgClientSiteLicenseGetAvailableSeats::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetAvailableSeats.appid)
  return appid_;
}
inline void CMsgClientSiteLicenseGetAvailableSeats::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetAvailableSeats.appid)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetAvailableSeatsResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientSiteLicenseGetAvailableSeatsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientSiteLicenseGetAvailableSeatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
  return eresult_;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
}

// optional uint32 seats = 2;
inline bool CMsgClientSiteLicenseGetAvailableSeatsResponse::has_seats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_has_seats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_has_seats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_seats() {
  seats_ = 0u;
  clear_has_seats();
}
inline ::google::protobuf::uint32 CMsgClientSiteLicenseGetAvailableSeatsResponse::seats() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
  return seats_;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_seats(::google::protobuf::uint32 value) {
  set_has_seats();
  seats_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetContentCacheInfo

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetContentCacheInfoResponse

// optional bool use_cache = 1;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_use_cache() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_use_cache() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_use_cache() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_use_cache() {
  use_cache_ = false;
  clear_has_use_cache();
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::use_cache() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
  return use_cache_;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_use_cache(bool value) {
  set_has_use_cache();
  use_cache_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
}

// optional uint32 ipv4_address = 2;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_ipv4_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_ipv4_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_ipv4_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_ipv4_address() {
  ipv4_address_ = 0u;
  clear_has_ipv4_address();
}
inline ::google::protobuf::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::ipv4_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
  return ipv4_address_;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ipv4_address(::google::protobuf::uint32 value) {
  set_has_ipv4_address();
  ipv4_address_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
}

// optional uint32 port_number = 3;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_port_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_port_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_port_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_port_number() {
  port_number_ = 0u;
  clear_has_port_number();
}
inline ::google::protobuf::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::port_number() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
  return port_number_;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_port_number(::google::protobuf::uint32 value) {
  set_has_port_number();
  port_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
}

// optional uint32 p2p_group = 4;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_p2p_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_p2p_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_p2p_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_p2p_group() {
  p2p_group_ = 0u;
  clear_has_p2p_group();
}
inline ::google::protobuf::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::p2p_group() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
  return p2p_group_;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_p2p_group(::google::protobuf::uint32 value) {
  set_has_p2p_group();
  p2p_group_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fsitelicenseclient_2eproto
