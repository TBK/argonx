// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_virtualcontroller.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fvirtualcontroller_2eproto 

namespace protobuf_steammessages_5fvirtualcontroller_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fvirtualcontroller_2eproto
class CVirtualControllerConfig;
class CVirtualControllerConfigDefaultTypeInternal;
extern CVirtualControllerConfigDefaultTypeInternal _CVirtualControllerConfig_default_instance_;
class CVirtualControllerConfig_ActionSet;
class CVirtualControllerConfig_ActionSetDefaultTypeInternal;
extern CVirtualControllerConfig_ActionSetDefaultTypeInternal _CVirtualControllerConfig_ActionSet_default_instance_;
class CVirtualControllerConfig_Control;
class CVirtualControllerConfig_ControlDefaultTypeInternal;
extern CVirtualControllerConfig_ControlDefaultTypeInternal _CVirtualControllerConfig_Control_default_instance_;
class CVirtualControllerElement;
class CVirtualControllerElementDefaultTypeInternal;
extern CVirtualControllerElementDefaultTypeInternal _CVirtualControllerElement_default_instance_;
class CVirtualControllerElement_AxisButtonControl;
class CVirtualControllerElement_AxisButtonControlDefaultTypeInternal;
extern CVirtualControllerElement_AxisButtonControlDefaultTypeInternal _CVirtualControllerElement_AxisButtonControl_default_instance_;
class CVirtualControllerElement_JoyButtonControl;
class CVirtualControllerElement_JoyButtonControlDefaultTypeInternal;
extern CVirtualControllerElement_JoyButtonControlDefaultTypeInternal _CVirtualControllerElement_JoyButtonControl_default_instance_;
class CVirtualControllerElement_JoyPadControl;
class CVirtualControllerElement_JoyPadControlDefaultTypeInternal;
extern CVirtualControllerElement_JoyPadControlDefaultTypeInternal _CVirtualControllerElement_JoyPadControl_default_instance_;
class CVirtualControllerElement_JoyStickControl;
class CVirtualControllerElement_JoyStickControlDefaultTypeInternal;
extern CVirtualControllerElement_JoyStickControlDefaultTypeInternal _CVirtualControllerElement_JoyStickControl_default_instance_;
class CVirtualControllerElement_MacroButtonControl;
class CVirtualControllerElement_MacroButtonControlDefaultTypeInternal;
extern CVirtualControllerElement_MacroButtonControlDefaultTypeInternal _CVirtualControllerElement_MacroButtonControl_default_instance_;
class CVirtualControllerElement_TrackpadControl;
class CVirtualControllerElement_TrackpadControlDefaultTypeInternal;
extern CVirtualControllerElement_TrackpadControlDefaultTypeInternal _CVirtualControllerElement_TrackpadControl_default_instance_;
class CVirtualControllerLayout;
class CVirtualControllerLayoutDefaultTypeInternal;
extern CVirtualControllerLayoutDefaultTypeInternal _CVirtualControllerLayout_default_instance_;
class CVirtualControllerLayoutPackage;
class CVirtualControllerLayoutPackageDefaultTypeInternal;
extern CVirtualControllerLayoutPackageDefaultTypeInternal _CVirtualControllerLayoutPackage_default_instance_;
class CVirtualControllerLayouts;
class CVirtualControllerLayoutsDefaultTypeInternal;
extern CVirtualControllerLayoutsDefaultTypeInternal _CVirtualControllerLayouts_default_instance_;
namespace google {
namespace protobuf {
template<> ::CVirtualControllerConfig* Arena::CreateMaybeMessage<::CVirtualControllerConfig>(Arena*);
template<> ::CVirtualControllerConfig_ActionSet* Arena::CreateMaybeMessage<::CVirtualControllerConfig_ActionSet>(Arena*);
template<> ::CVirtualControllerConfig_Control* Arena::CreateMaybeMessage<::CVirtualControllerConfig_Control>(Arena*);
template<> ::CVirtualControllerElement* Arena::CreateMaybeMessage<::CVirtualControllerElement>(Arena*);
template<> ::CVirtualControllerElement_AxisButtonControl* Arena::CreateMaybeMessage<::CVirtualControllerElement_AxisButtonControl>(Arena*);
template<> ::CVirtualControllerElement_JoyButtonControl* Arena::CreateMaybeMessage<::CVirtualControllerElement_JoyButtonControl>(Arena*);
template<> ::CVirtualControllerElement_JoyPadControl* Arena::CreateMaybeMessage<::CVirtualControllerElement_JoyPadControl>(Arena*);
template<> ::CVirtualControllerElement_JoyStickControl* Arena::CreateMaybeMessage<::CVirtualControllerElement_JoyStickControl>(Arena*);
template<> ::CVirtualControllerElement_MacroButtonControl* Arena::CreateMaybeMessage<::CVirtualControllerElement_MacroButtonControl>(Arena*);
template<> ::CVirtualControllerElement_TrackpadControl* Arena::CreateMaybeMessage<::CVirtualControllerElement_TrackpadControl>(Arena*);
template<> ::CVirtualControllerLayout* Arena::CreateMaybeMessage<::CVirtualControllerLayout>(Arena*);
template<> ::CVirtualControllerLayoutPackage* Arena::CreateMaybeMessage<::CVirtualControllerLayoutPackage>(Arena*);
template<> ::CVirtualControllerLayouts* Arena::CreateMaybeMessage<::CVirtualControllerLayouts>(Arena*);
}  // namespace protobuf
}  // namespace google

enum EControllerLayoutType {
  k_EControllerLayoutTypePhone = 0,
  k_EControllerLayoutTypeTablet = 1
};
bool EControllerLayoutType_IsValid(int value);
const EControllerLayoutType EControllerLayoutType_MIN = k_EControllerLayoutTypePhone;
const EControllerLayoutType EControllerLayoutType_MAX = k_EControllerLayoutTypeTablet;
const int EControllerLayoutType_ARRAYSIZE = EControllerLayoutType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EControllerLayoutType_descriptor();
inline const ::std::string& EControllerLayoutType_Name(EControllerLayoutType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EControllerLayoutType_descriptor(), value);
}
inline bool EControllerLayoutType_Parse(
    const ::std::string& name, EControllerLayoutType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EControllerLayoutType>(
    EControllerLayoutType_descriptor(), name, value);
}
// ===================================================================

class CVirtualControllerElement_JoyStickControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement.JoyStickControl) */ {
 public:
  CVirtualControllerElement_JoyStickControl();
  virtual ~CVirtualControllerElement_JoyStickControl();

  CVirtualControllerElement_JoyStickControl(const CVirtualControllerElement_JoyStickControl& from);

  inline CVirtualControllerElement_JoyStickControl& operator=(const CVirtualControllerElement_JoyStickControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement_JoyStickControl(CVirtualControllerElement_JoyStickControl&& from) noexcept
    : CVirtualControllerElement_JoyStickControl() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement_JoyStickControl& operator=(CVirtualControllerElement_JoyStickControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement_JoyStickControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement_JoyStickControl* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement_JoyStickControl*>(
               &_CVirtualControllerElement_JoyStickControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CVirtualControllerElement_JoyStickControl* other);
  friend void swap(CVirtualControllerElement_JoyStickControl& a, CVirtualControllerElement_JoyStickControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement_JoyStickControl* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement_JoyStickControl>(NULL);
  }

  CVirtualControllerElement_JoyStickControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement_JoyStickControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement_JoyStickControl& from);
  void MergeFrom(const CVirtualControllerElement_JoyStickControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement_JoyStickControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional uint32 x_axis_id = 2;
  bool has_x_axis_id() const;
  void clear_x_axis_id();
  static const int kXAxisIdFieldNumber = 2;
  ::google::protobuf::uint32 x_axis_id() const;
  void set_x_axis_id(::google::protobuf::uint32 value);

  // optional uint32 y_axis_id = 3;
  bool has_y_axis_id() const;
  void clear_y_axis_id();
  static const int kYAxisIdFieldNumber = 3;
  ::google::protobuf::uint32 y_axis_id() const;
  void set_y_axis_id(::google::protobuf::uint32 value);

  // optional uint32 x_axis_range = 4;
  bool has_x_axis_range() const;
  void clear_x_axis_range();
  static const int kXAxisRangeFieldNumber = 4;
  ::google::protobuf::uint32 x_axis_range() const;
  void set_x_axis_range(::google::protobuf::uint32 value);

  // optional uint32 y_axis_range = 5;
  bool has_y_axis_range() const;
  void clear_y_axis_range();
  static const int kYAxisRangeFieldNumber = 5;
  ::google::protobuf::uint32 y_axis_range() const;
  void set_y_axis_range(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement.JoyStickControl)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_x_axis_id();
  void clear_has_x_axis_id();
  void set_has_y_axis_id();
  void clear_has_y_axis_id();
  void set_has_x_axis_range();
  void clear_has_x_axis_range();
  void set_has_y_axis_range();
  void clear_has_y_axis_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 x_axis_id_;
  ::google::protobuf::uint32 y_axis_id_;
  ::google::protobuf::uint32 x_axis_range_;
  ::google::protobuf::uint32 y_axis_range_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerElement_JoyButtonControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement.JoyButtonControl) */ {
 public:
  CVirtualControllerElement_JoyButtonControl();
  virtual ~CVirtualControllerElement_JoyButtonControl();

  CVirtualControllerElement_JoyButtonControl(const CVirtualControllerElement_JoyButtonControl& from);

  inline CVirtualControllerElement_JoyButtonControl& operator=(const CVirtualControllerElement_JoyButtonControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement_JoyButtonControl(CVirtualControllerElement_JoyButtonControl&& from) noexcept
    : CVirtualControllerElement_JoyButtonControl() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement_JoyButtonControl& operator=(CVirtualControllerElement_JoyButtonControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement_JoyButtonControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement_JoyButtonControl* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement_JoyButtonControl*>(
               &_CVirtualControllerElement_JoyButtonControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CVirtualControllerElement_JoyButtonControl* other);
  friend void swap(CVirtualControllerElement_JoyButtonControl& a, CVirtualControllerElement_JoyButtonControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement_JoyButtonControl* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement_JoyButtonControl>(NULL);
  }

  CVirtualControllerElement_JoyButtonControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement_JoyButtonControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement_JoyButtonControl& from);
  void MergeFrom(const CVirtualControllerElement_JoyButtonControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement_JoyButtonControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional uint32 button_id = 2;
  bool has_button_id() const;
  void clear_button_id();
  static const int kButtonIdFieldNumber = 2;
  ::google::protobuf::uint32 button_id() const;
  void set_button_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement.JoyButtonControl)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_button_id();
  void clear_has_button_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 button_id_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerElement_JoyPadControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement.JoyPadControl) */ {
 public:
  CVirtualControllerElement_JoyPadControl();
  virtual ~CVirtualControllerElement_JoyPadControl();

  CVirtualControllerElement_JoyPadControl(const CVirtualControllerElement_JoyPadControl& from);

  inline CVirtualControllerElement_JoyPadControl& operator=(const CVirtualControllerElement_JoyPadControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement_JoyPadControl(CVirtualControllerElement_JoyPadControl&& from) noexcept
    : CVirtualControllerElement_JoyPadControl() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement_JoyPadControl& operator=(CVirtualControllerElement_JoyPadControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement_JoyPadControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement_JoyPadControl* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement_JoyPadControl*>(
               &_CVirtualControllerElement_JoyPadControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CVirtualControllerElement_JoyPadControl* other);
  friend void swap(CVirtualControllerElement_JoyPadControl& a, CVirtualControllerElement_JoyPadControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement_JoyPadControl* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement_JoyPadControl>(NULL);
  }

  CVirtualControllerElement_JoyPadControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement_JoyPadControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement_JoyPadControl& from);
  void MergeFrom(const CVirtualControllerElement_JoyPadControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement_JoyPadControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional uint32 up_button_id = 2;
  bool has_up_button_id() const;
  void clear_up_button_id();
  static const int kUpButtonIdFieldNumber = 2;
  ::google::protobuf::uint32 up_button_id() const;
  void set_up_button_id(::google::protobuf::uint32 value);

  // optional uint32 down_button_id = 3;
  bool has_down_button_id() const;
  void clear_down_button_id();
  static const int kDownButtonIdFieldNumber = 3;
  ::google::protobuf::uint32 down_button_id() const;
  void set_down_button_id(::google::protobuf::uint32 value);

  // optional uint32 left_button_id = 4;
  bool has_left_button_id() const;
  void clear_left_button_id();
  static const int kLeftButtonIdFieldNumber = 4;
  ::google::protobuf::uint32 left_button_id() const;
  void set_left_button_id(::google::protobuf::uint32 value);

  // optional uint32 right_button_id = 5;
  bool has_right_button_id() const;
  void clear_right_button_id();
  static const int kRightButtonIdFieldNumber = 5;
  ::google::protobuf::uint32 right_button_id() const;
  void set_right_button_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement.JoyPadControl)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_up_button_id();
  void clear_has_up_button_id();
  void set_has_down_button_id();
  void clear_has_down_button_id();
  void set_has_left_button_id();
  void clear_has_left_button_id();
  void set_has_right_button_id();
  void clear_has_right_button_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 up_button_id_;
  ::google::protobuf::uint32 down_button_id_;
  ::google::protobuf::uint32 left_button_id_;
  ::google::protobuf::uint32 right_button_id_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerElement_MacroButtonControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement.MacroButtonControl) */ {
 public:
  CVirtualControllerElement_MacroButtonControl();
  virtual ~CVirtualControllerElement_MacroButtonControl();

  CVirtualControllerElement_MacroButtonControl(const CVirtualControllerElement_MacroButtonControl& from);

  inline CVirtualControllerElement_MacroButtonControl& operator=(const CVirtualControllerElement_MacroButtonControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement_MacroButtonControl(CVirtualControllerElement_MacroButtonControl&& from) noexcept
    : CVirtualControllerElement_MacroButtonControl() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement_MacroButtonControl& operator=(CVirtualControllerElement_MacroButtonControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement_MacroButtonControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement_MacroButtonControl* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement_MacroButtonControl*>(
               &_CVirtualControllerElement_MacroButtonControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CVirtualControllerElement_MacroButtonControl* other);
  friend void swap(CVirtualControllerElement_MacroButtonControl& a, CVirtualControllerElement_MacroButtonControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement_MacroButtonControl* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement_MacroButtonControl>(NULL);
  }

  CVirtualControllerElement_MacroButtonControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement_MacroButtonControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement_MacroButtonControl& from);
  void MergeFrom(const CVirtualControllerElement_MacroButtonControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement_MacroButtonControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional uint32 button_id = 2;
  bool has_button_id() const;
  void clear_button_id();
  static const int kButtonIdFieldNumber = 2;
  ::google::protobuf::uint32 button_id() const;
  void set_button_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement.MacroButtonControl)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_button_id();
  void clear_has_button_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 button_id_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerElement_TrackpadControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement.TrackpadControl) */ {
 public:
  CVirtualControllerElement_TrackpadControl();
  virtual ~CVirtualControllerElement_TrackpadControl();

  CVirtualControllerElement_TrackpadControl(const CVirtualControllerElement_TrackpadControl& from);

  inline CVirtualControllerElement_TrackpadControl& operator=(const CVirtualControllerElement_TrackpadControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement_TrackpadControl(CVirtualControllerElement_TrackpadControl&& from) noexcept
    : CVirtualControllerElement_TrackpadControl() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement_TrackpadControl& operator=(CVirtualControllerElement_TrackpadControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement_TrackpadControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement_TrackpadControl* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement_TrackpadControl*>(
               &_CVirtualControllerElement_TrackpadControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CVirtualControllerElement_TrackpadControl* other);
  friend void swap(CVirtualControllerElement_TrackpadControl& a, CVirtualControllerElement_TrackpadControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement_TrackpadControl* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement_TrackpadControl>(NULL);
  }

  CVirtualControllerElement_TrackpadControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement_TrackpadControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement_TrackpadControl& from);
  void MergeFrom(const CVirtualControllerElement_TrackpadControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement_TrackpadControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional uint32 x_axis_range = 2;
  bool has_x_axis_range() const;
  void clear_x_axis_range();
  static const int kXAxisRangeFieldNumber = 2;
  ::google::protobuf::uint32 x_axis_range() const;
  void set_x_axis_range(::google::protobuf::uint32 value);

  // optional uint32 y_axis_range = 3;
  bool has_y_axis_range() const;
  void clear_y_axis_range();
  static const int kYAxisRangeFieldNumber = 3;
  ::google::protobuf::uint32 y_axis_range() const;
  void set_y_axis_range(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement.TrackpadControl)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_x_axis_range();
  void clear_has_x_axis_range();
  void set_has_y_axis_range();
  void clear_has_y_axis_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 x_axis_range_;
  ::google::protobuf::uint32 y_axis_range_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerElement_AxisButtonControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement.AxisButtonControl) */ {
 public:
  CVirtualControllerElement_AxisButtonControl();
  virtual ~CVirtualControllerElement_AxisButtonControl();

  CVirtualControllerElement_AxisButtonControl(const CVirtualControllerElement_AxisButtonControl& from);

  inline CVirtualControllerElement_AxisButtonControl& operator=(const CVirtualControllerElement_AxisButtonControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement_AxisButtonControl(CVirtualControllerElement_AxisButtonControl&& from) noexcept
    : CVirtualControllerElement_AxisButtonControl() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement_AxisButtonControl& operator=(CVirtualControllerElement_AxisButtonControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement_AxisButtonControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement_AxisButtonControl* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement_AxisButtonControl*>(
               &_CVirtualControllerElement_AxisButtonControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CVirtualControllerElement_AxisButtonControl* other);
  friend void swap(CVirtualControllerElement_AxisButtonControl& a, CVirtualControllerElement_AxisButtonControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement_AxisButtonControl* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement_AxisButtonControl>(NULL);
  }

  CVirtualControllerElement_AxisButtonControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement_AxisButtonControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement_AxisButtonControl& from);
  void MergeFrom(const CVirtualControllerElement_AxisButtonControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement_AxisButtonControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional uint32 axis_id = 2;
  bool has_axis_id() const;
  void clear_axis_id();
  static const int kAxisIdFieldNumber = 2;
  ::google::protobuf::uint32 axis_id() const;
  void set_axis_id(::google::protobuf::uint32 value);

  // optional uint32 axis_pressed_value = 3;
  bool has_axis_pressed_value() const;
  void clear_axis_pressed_value();
  static const int kAxisPressedValueFieldNumber = 3;
  ::google::protobuf::uint32 axis_pressed_value() const;
  void set_axis_pressed_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement.AxisButtonControl)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_axis_id();
  void clear_has_axis_id();
  void set_has_axis_pressed_value();
  void clear_has_axis_pressed_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 axis_id_;
  ::google::protobuf::uint32 axis_pressed_value_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement) */ {
 public:
  CVirtualControllerElement();
  virtual ~CVirtualControllerElement();

  CVirtualControllerElement(const CVirtualControllerElement& from);

  inline CVirtualControllerElement& operator=(const CVirtualControllerElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement(CVirtualControllerElement&& from) noexcept
    : CVirtualControllerElement() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement& operator=(CVirtualControllerElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerElement& default_instance();

  enum ControlCase {
    kJoyStick = 5,
    kJoyButton = 6,
    kJoyPad = 7,
    kMacroButton = 8,
    kTrackpad = 9,
    kAxisButton = 10,
    CONTROL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement*>(
               &_CVirtualControllerElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CVirtualControllerElement* other);
  friend void swap(CVirtualControllerElement& a, CVirtualControllerElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement>(NULL);
  }

  CVirtualControllerElement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement& from);
  void MergeFrom(const CVirtualControllerElement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CVirtualControllerElement_JoyStickControl JoyStickControl;
  typedef CVirtualControllerElement_JoyButtonControl JoyButtonControl;
  typedef CVirtualControllerElement_JoyPadControl JoyPadControl;
  typedef CVirtualControllerElement_MacroButtonControl MacroButtonControl;
  typedef CVirtualControllerElement_TrackpadControl TrackpadControl;
  typedef CVirtualControllerElement_AxisButtonControl AxisButtonControl;

  // accessors -------------------------------------------------------

  // optional uint32 x_position = 1;
  bool has_x_position() const;
  void clear_x_position();
  static const int kXPositionFieldNumber = 1;
  ::google::protobuf::uint32 x_position() const;
  void set_x_position(::google::protobuf::uint32 value);

  // optional uint32 y_position = 2;
  bool has_y_position() const;
  void clear_y_position();
  static const int kYPositionFieldNumber = 2;
  ::google::protobuf::uint32 y_position() const;
  void set_y_position(::google::protobuf::uint32 value);

  // optional uint32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 4;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional .CVirtualControllerElement.JoyStickControl joy_stick = 5;
  bool has_joy_stick() const;
  void clear_joy_stick();
  static const int kJoyStickFieldNumber = 5;
  private:
  const ::CVirtualControllerElement_JoyStickControl& _internal_joy_stick() const;
  public:
  const ::CVirtualControllerElement_JoyStickControl& joy_stick() const;
  ::CVirtualControllerElement_JoyStickControl* release_joy_stick();
  ::CVirtualControllerElement_JoyStickControl* mutable_joy_stick();
  void set_allocated_joy_stick(::CVirtualControllerElement_JoyStickControl* joy_stick);

  // optional .CVirtualControllerElement.JoyButtonControl joy_button = 6;
  bool has_joy_button() const;
  void clear_joy_button();
  static const int kJoyButtonFieldNumber = 6;
  private:
  const ::CVirtualControllerElement_JoyButtonControl& _internal_joy_button() const;
  public:
  const ::CVirtualControllerElement_JoyButtonControl& joy_button() const;
  ::CVirtualControllerElement_JoyButtonControl* release_joy_button();
  ::CVirtualControllerElement_JoyButtonControl* mutable_joy_button();
  void set_allocated_joy_button(::CVirtualControllerElement_JoyButtonControl* joy_button);

  // optional .CVirtualControllerElement.JoyPadControl joy_pad = 7;
  bool has_joy_pad() const;
  void clear_joy_pad();
  static const int kJoyPadFieldNumber = 7;
  private:
  const ::CVirtualControllerElement_JoyPadControl& _internal_joy_pad() const;
  public:
  const ::CVirtualControllerElement_JoyPadControl& joy_pad() const;
  ::CVirtualControllerElement_JoyPadControl* release_joy_pad();
  ::CVirtualControllerElement_JoyPadControl* mutable_joy_pad();
  void set_allocated_joy_pad(::CVirtualControllerElement_JoyPadControl* joy_pad);

  // optional .CVirtualControllerElement.MacroButtonControl macro_button = 8;
  bool has_macro_button() const;
  void clear_macro_button();
  static const int kMacroButtonFieldNumber = 8;
  private:
  const ::CVirtualControllerElement_MacroButtonControl& _internal_macro_button() const;
  public:
  const ::CVirtualControllerElement_MacroButtonControl& macro_button() const;
  ::CVirtualControllerElement_MacroButtonControl* release_macro_button();
  ::CVirtualControllerElement_MacroButtonControl* mutable_macro_button();
  void set_allocated_macro_button(::CVirtualControllerElement_MacroButtonControl* macro_button);

  // optional .CVirtualControllerElement.TrackpadControl trackpad = 9;
  bool has_trackpad() const;
  void clear_trackpad();
  static const int kTrackpadFieldNumber = 9;
  private:
  const ::CVirtualControllerElement_TrackpadControl& _internal_trackpad() const;
  public:
  const ::CVirtualControllerElement_TrackpadControl& trackpad() const;
  ::CVirtualControllerElement_TrackpadControl* release_trackpad();
  ::CVirtualControllerElement_TrackpadControl* mutable_trackpad();
  void set_allocated_trackpad(::CVirtualControllerElement_TrackpadControl* trackpad);

  // optional .CVirtualControllerElement.AxisButtonControl axis_button = 10;
  bool has_axis_button() const;
  void clear_axis_button();
  static const int kAxisButtonFieldNumber = 10;
  private:
  const ::CVirtualControllerElement_AxisButtonControl& _internal_axis_button() const;
  public:
  const ::CVirtualControllerElement_AxisButtonControl& axis_button() const;
  ::CVirtualControllerElement_AxisButtonControl* release_axis_button();
  ::CVirtualControllerElement_AxisButtonControl* mutable_axis_button();
  void set_allocated_axis_button(::CVirtualControllerElement_AxisButtonControl* axis_button);

  void clear_control();
  ControlCase control_case() const;
  // @@protoc_insertion_point(class_scope:CVirtualControllerElement)
 private:
  void set_has_x_position();
  void clear_has_x_position();
  void set_has_y_position();
  void clear_has_y_position();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_joy_stick();
  void set_has_joy_button();
  void set_has_joy_pad();
  void set_has_macro_button();
  void set_has_trackpad();
  void set_has_axis_button();

  inline bool has_control() const;
  inline void clear_has_control();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 x_position_;
  ::google::protobuf::uint32 y_position_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  union ControlUnion {
    ControlUnion() {}
    ::CVirtualControllerElement_JoyStickControl* joy_stick_;
    ::CVirtualControllerElement_JoyButtonControl* joy_button_;
    ::CVirtualControllerElement_JoyPadControl* joy_pad_;
    ::CVirtualControllerElement_MacroButtonControl* macro_button_;
    ::CVirtualControllerElement_TrackpadControl* trackpad_;
    ::CVirtualControllerElement_AxisButtonControl* axis_button_;
  } control_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerLayout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerLayout) */ {
 public:
  CVirtualControllerLayout();
  virtual ~CVirtualControllerLayout();

  CVirtualControllerLayout(const CVirtualControllerLayout& from);

  inline CVirtualControllerLayout& operator=(const CVirtualControllerLayout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerLayout(CVirtualControllerLayout&& from) noexcept
    : CVirtualControllerLayout() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayout& operator=(CVirtualControllerLayout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerLayout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerLayout* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayout*>(
               &_CVirtualControllerLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CVirtualControllerLayout* other);
  friend void swap(CVirtualControllerLayout& a, CVirtualControllerLayout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayout* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayout>(NULL);
  }

  CVirtualControllerLayout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerLayout& from);
  void MergeFrom(const CVirtualControllerLayout& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CVirtualControllerElement elements = 2;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 2;
  ::CVirtualControllerElement* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerElement >*
      mutable_elements();
  const ::CVirtualControllerElement& elements(int index) const;
  ::CVirtualControllerElement* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerElement >&
      elements() const;

  // optional .EControllerLayoutType layout_type = 1 [default = k_EControllerLayoutTypePhone];
  bool has_layout_type() const;
  void clear_layout_type();
  static const int kLayoutTypeFieldNumber = 1;
  ::EControllerLayoutType layout_type() const;
  void set_layout_type(::EControllerLayoutType value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerLayout)
 private:
  void set_has_layout_type();
  void clear_has_layout_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerElement > elements_;
  int layout_type_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerLayouts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerLayouts) */ {
 public:
  CVirtualControllerLayouts();
  virtual ~CVirtualControllerLayouts();

  CVirtualControllerLayouts(const CVirtualControllerLayouts& from);

  inline CVirtualControllerLayouts& operator=(const CVirtualControllerLayouts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerLayouts(CVirtualControllerLayouts&& from) noexcept
    : CVirtualControllerLayouts() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayouts& operator=(CVirtualControllerLayouts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerLayouts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerLayouts* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayouts*>(
               &_CVirtualControllerLayouts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CVirtualControllerLayouts* other);
  friend void swap(CVirtualControllerLayouts& a, CVirtualControllerLayouts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayouts* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayouts>(NULL);
  }

  CVirtualControllerLayouts* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayouts>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerLayouts& from);
  void MergeFrom(const CVirtualControllerLayouts& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayouts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CVirtualControllerLayout layouts = 1;
  int layouts_size() const;
  void clear_layouts();
  static const int kLayoutsFieldNumber = 1;
  ::CVirtualControllerLayout* mutable_layouts(int index);
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerLayout >*
      mutable_layouts();
  const ::CVirtualControllerLayout& layouts(int index) const;
  ::CVirtualControllerLayout* add_layouts();
  const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerLayout >&
      layouts() const;

  // @@protoc_insertion_point(class_scope:CVirtualControllerLayouts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerLayout > layouts_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig_Control : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerConfig.Control) */ {
 public:
  CVirtualControllerConfig_Control();
  virtual ~CVirtualControllerConfig_Control();

  CVirtualControllerConfig_Control(const CVirtualControllerConfig_Control& from);

  inline CVirtualControllerConfig_Control& operator=(const CVirtualControllerConfig_Control& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerConfig_Control(CVirtualControllerConfig_Control&& from) noexcept
    : CVirtualControllerConfig_Control() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig_Control& operator=(CVirtualControllerConfig_Control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerConfig_Control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerConfig_Control* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig_Control*>(
               &_CVirtualControllerConfig_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CVirtualControllerConfig_Control* other);
  friend void swap(CVirtualControllerConfig_Control& a, CVirtualControllerConfig_Control& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig_Control* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig_Control>(NULL);
  }

  CVirtualControllerConfig_Control* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig_Control>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig_Control& from);
  void MergeFrom(const CVirtualControllerConfig_Control& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig_Control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string icon = 2;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // optional string icon_foreground = 9;
  bool has_icon_foreground() const;
  void clear_icon_foreground();
  static const int kIconForegroundFieldNumber = 9;
  const ::std::string& icon_foreground() const;
  void set_icon_foreground(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_foreground(::std::string&& value);
  #endif
  void set_icon_foreground(const char* value);
  void set_icon_foreground(const char* value, size_t size);
  ::std::string* mutable_icon_foreground();
  ::std::string* release_icon_foreground();
  void set_allocated_icon_foreground(::std::string* icon_foreground);

  // optional string icon_background = 10;
  bool has_icon_background() const;
  void clear_icon_background();
  static const int kIconBackgroundFieldNumber = 10;
  const ::std::string& icon_background() const;
  void set_icon_background(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_background(::std::string&& value);
  #endif
  void set_icon_background(const char* value);
  void set_icon_background(const char* value, size_t size);
  ::std::string* mutable_icon_background();
  ::std::string* release_icon_background();
  void set_allocated_icon_background(::std::string* icon_background);

  // optional int32 input_source = 3;
  bool has_input_source() const;
  void clear_input_source();
  static const int kInputSourceFieldNumber = 3;
  ::google::protobuf::int32 input_source() const;
  void set_input_source(::google::protobuf::int32 value);

  // optional int32 input_mode = 4;
  bool has_input_mode() const;
  void clear_input_mode();
  static const int kInputModeFieldNumber = 4;
  ::google::protobuf::int32 input_mode() const;
  void set_input_mode(::google::protobuf::int32 value);

  // optional int32 input_element = 5;
  bool has_input_element() const;
  void clear_input_element();
  static const int kInputElementFieldNumber = 5;
  ::google::protobuf::int32 input_element() const;
  void set_input_element(::google::protobuf::int32 value);

  // optional int32 output_gamepad = 6;
  bool has_output_gamepad() const;
  void clear_output_gamepad();
  static const int kOutputGamepadFieldNumber = 6;
  ::google::protobuf::int32 output_gamepad() const;
  void set_output_gamepad(::google::protobuf::int32 value);

  // optional int32 output_keyboard = 7;
  bool has_output_keyboard() const;
  void clear_output_keyboard();
  static const int kOutputKeyboardFieldNumber = 7;
  ::google::protobuf::int32 output_keyboard() const;
  void set_output_keyboard(::google::protobuf::int32 value);

  // optional int32 output_mouse = 8;
  bool has_output_mouse() const;
  void clear_output_mouse();
  static const int kOutputMouseFieldNumber = 8;
  ::google::protobuf::int32 output_mouse() const;
  void set_output_mouse(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerConfig.Control)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_icon();
  void clear_has_icon();
  void set_has_input_source();
  void clear_has_input_source();
  void set_has_input_mode();
  void clear_has_input_mode();
  void set_has_input_element();
  void clear_has_input_element();
  void set_has_output_gamepad();
  void clear_has_output_gamepad();
  void set_has_output_keyboard();
  void clear_has_output_keyboard();
  void set_has_output_mouse();
  void clear_has_output_mouse();
  void set_has_icon_foreground();
  void clear_has_icon_foreground();
  void set_has_icon_background();
  void clear_has_icon_background();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr icon_foreground_;
  ::google::protobuf::internal::ArenaStringPtr icon_background_;
  ::google::protobuf::int32 input_source_;
  ::google::protobuf::int32 input_mode_;
  ::google::protobuf::int32 input_element_;
  ::google::protobuf::int32 output_gamepad_;
  ::google::protobuf::int32 output_keyboard_;
  ::google::protobuf::int32 output_mouse_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig_ActionSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerConfig.ActionSet) */ {
 public:
  CVirtualControllerConfig_ActionSet();
  virtual ~CVirtualControllerConfig_ActionSet();

  CVirtualControllerConfig_ActionSet(const CVirtualControllerConfig_ActionSet& from);

  inline CVirtualControllerConfig_ActionSet& operator=(const CVirtualControllerConfig_ActionSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerConfig_ActionSet(CVirtualControllerConfig_ActionSet&& from) noexcept
    : CVirtualControllerConfig_ActionSet() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig_ActionSet& operator=(CVirtualControllerConfig_ActionSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerConfig_ActionSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerConfig_ActionSet* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig_ActionSet*>(
               &_CVirtualControllerConfig_ActionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CVirtualControllerConfig_ActionSet* other);
  friend void swap(CVirtualControllerConfig_ActionSet& a, CVirtualControllerConfig_ActionSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig_ActionSet* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig_ActionSet>(NULL);
  }

  CVirtualControllerConfig_ActionSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig_ActionSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig_ActionSet& from);
  void MergeFrom(const CVirtualControllerConfig_ActionSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig_ActionSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CVirtualControllerConfig.Control controls = 4;
  int controls_size() const;
  void clear_controls();
  static const int kControlsFieldNumber = 4;
  ::CVirtualControllerConfig_Control* mutable_controls(int index);
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_Control >*
      mutable_controls();
  const ::CVirtualControllerConfig_Control& controls(int index) const;
  ::CVirtualControllerConfig_Control* add_controls();
  const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_Control >&
      controls() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 parent_id = 2;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerConfig.ActionSet)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_Control > controls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerConfig) */ {
 public:
  CVirtualControllerConfig();
  virtual ~CVirtualControllerConfig();

  CVirtualControllerConfig(const CVirtualControllerConfig& from);

  inline CVirtualControllerConfig& operator=(const CVirtualControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerConfig(CVirtualControllerConfig&& from) noexcept
    : CVirtualControllerConfig() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig& operator=(CVirtualControllerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig*>(
               &_CVirtualControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CVirtualControllerConfig* other);
  friend void swap(CVirtualControllerConfig& a, CVirtualControllerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig>(NULL);
  }

  CVirtualControllerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig& from);
  void MergeFrom(const CVirtualControllerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CVirtualControllerConfig_Control Control;
  typedef CVirtualControllerConfig_ActionSet ActionSet;

  // accessors -------------------------------------------------------

  // repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
  int actionsets_size() const;
  void clear_actionsets();
  static const int kActionsetsFieldNumber = 2;
  ::CVirtualControllerConfig_ActionSet* mutable_actionsets(int index);
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >*
      mutable_actionsets();
  const ::CVirtualControllerConfig_ActionSet& actionsets(int index) const;
  ::CVirtualControllerConfig_ActionSet* add_actionsets();
  const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >&
      actionsets() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CVirtualControllerConfig)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet > actionsets_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CVirtualControllerLayoutPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerLayoutPackage) */ {
 public:
  CVirtualControllerLayoutPackage();
  virtual ~CVirtualControllerLayoutPackage();

  CVirtualControllerLayoutPackage(const CVirtualControllerLayoutPackage& from);

  inline CVirtualControllerLayoutPackage& operator=(const CVirtualControllerLayoutPackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerLayoutPackage(CVirtualControllerLayoutPackage&& from) noexcept
    : CVirtualControllerLayoutPackage() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayoutPackage& operator=(CVirtualControllerLayoutPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVirtualControllerLayoutPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerLayoutPackage* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayoutPackage*>(
               &_CVirtualControllerLayoutPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CVirtualControllerLayoutPackage* other);
  friend void swap(CVirtualControllerLayoutPackage& a, CVirtualControllerLayoutPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayoutPackage* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayoutPackage>(NULL);
  }

  CVirtualControllerLayoutPackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayoutPackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerLayoutPackage& from);
  void MergeFrom(const CVirtualControllerLayoutPackage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayoutPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CVirtualControllerConfig config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  private:
  const ::CVirtualControllerConfig& _internal_config() const;
  public:
  const ::CVirtualControllerConfig& config() const;
  ::CVirtualControllerConfig* release_config();
  ::CVirtualControllerConfig* mutable_config();
  void set_allocated_config(::CVirtualControllerConfig* config);

  // optional .CVirtualControllerLayouts layouts = 4;
  bool has_layouts() const;
  void clear_layouts();
  static const int kLayoutsFieldNumber = 4;
  private:
  const ::CVirtualControllerLayouts& _internal_layouts() const;
  public:
  const ::CVirtualControllerLayouts& layouts() const;
  ::CVirtualControllerLayouts* release_layouts();
  ::CVirtualControllerLayouts* mutable_layouts();
  void set_allocated_layouts(::CVirtualControllerLayouts* layouts);

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 revision = 2;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 2;
  ::google::protobuf::uint32 revision() const;
  void set_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CVirtualControllerLayoutPackage)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_revision();
  void clear_has_revision();
  void set_has_config();
  void clear_has_config();
  void set_has_layouts();
  void clear_has_layouts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CVirtualControllerConfig* config_;
  ::CVirtualControllerLayouts* layouts_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 revision_;
  friend struct ::protobuf_steammessages_5fvirtualcontroller_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVirtualControllerElement_JoyStickControl

// optional string label = 1;
inline bool CVirtualControllerElement_JoyStickControl::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement_JoyStickControl::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CVirtualControllerElement_JoyStickControl::label() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyStickControl.label)
  return label_.GetNoArena();
}
inline void CVirtualControllerElement_JoyStickControl::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyStickControl.label)
}
#if LANG_CXX11
inline void CVirtualControllerElement_JoyStickControl::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerElement.JoyStickControl.label)
}
#endif
inline void CVirtualControllerElement_JoyStickControl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerElement.JoyStickControl.label)
}
inline void CVirtualControllerElement_JoyStickControl::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerElement.JoyStickControl.label)
}
inline ::std::string* CVirtualControllerElement_JoyStickControl::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.JoyStickControl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerElement_JoyStickControl::release_label() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.JoyStickControl.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerElement_JoyStickControl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerElement.JoyStickControl.label)
}

// optional uint32 x_axis_id = 2;
inline bool CVirtualControllerElement_JoyStickControl::has_x_axis_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement_JoyStickControl::set_has_x_axis_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_has_x_axis_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_x_axis_id() {
  x_axis_id_ = 0u;
  clear_has_x_axis_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyStickControl::x_axis_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyStickControl.x_axis_id)
  return x_axis_id_;
}
inline void CVirtualControllerElement_JoyStickControl::set_x_axis_id(::google::protobuf::uint32 value) {
  set_has_x_axis_id();
  x_axis_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyStickControl.x_axis_id)
}

// optional uint32 y_axis_id = 3;
inline bool CVirtualControllerElement_JoyStickControl::has_y_axis_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerElement_JoyStickControl::set_has_y_axis_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_has_y_axis_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_y_axis_id() {
  y_axis_id_ = 0u;
  clear_has_y_axis_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyStickControl::y_axis_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyStickControl.y_axis_id)
  return y_axis_id_;
}
inline void CVirtualControllerElement_JoyStickControl::set_y_axis_id(::google::protobuf::uint32 value) {
  set_has_y_axis_id();
  y_axis_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyStickControl.y_axis_id)
}

// optional uint32 x_axis_range = 4;
inline bool CVirtualControllerElement_JoyStickControl::has_x_axis_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerElement_JoyStickControl::set_has_x_axis_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_has_x_axis_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_x_axis_range() {
  x_axis_range_ = 0u;
  clear_has_x_axis_range();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyStickControl::x_axis_range() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyStickControl.x_axis_range)
  return x_axis_range_;
}
inline void CVirtualControllerElement_JoyStickControl::set_x_axis_range(::google::protobuf::uint32 value) {
  set_has_x_axis_range();
  x_axis_range_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyStickControl.x_axis_range)
}

// optional uint32 y_axis_range = 5;
inline bool CVirtualControllerElement_JoyStickControl::has_y_axis_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CVirtualControllerElement_JoyStickControl::set_has_y_axis_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_has_y_axis_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CVirtualControllerElement_JoyStickControl::clear_y_axis_range() {
  y_axis_range_ = 0u;
  clear_has_y_axis_range();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyStickControl::y_axis_range() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyStickControl.y_axis_range)
  return y_axis_range_;
}
inline void CVirtualControllerElement_JoyStickControl::set_y_axis_range(::google::protobuf::uint32 value) {
  set_has_y_axis_range();
  y_axis_range_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyStickControl.y_axis_range)
}

// -------------------------------------------------------------------

// CVirtualControllerElement_JoyButtonControl

// optional string label = 1;
inline bool CVirtualControllerElement_JoyButtonControl::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement_JoyButtonControl::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement_JoyButtonControl::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement_JoyButtonControl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CVirtualControllerElement_JoyButtonControl::label() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyButtonControl.label)
  return label_.GetNoArena();
}
inline void CVirtualControllerElement_JoyButtonControl::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyButtonControl.label)
}
#if LANG_CXX11
inline void CVirtualControllerElement_JoyButtonControl::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerElement.JoyButtonControl.label)
}
#endif
inline void CVirtualControllerElement_JoyButtonControl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerElement.JoyButtonControl.label)
}
inline void CVirtualControllerElement_JoyButtonControl::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerElement.JoyButtonControl.label)
}
inline ::std::string* CVirtualControllerElement_JoyButtonControl::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.JoyButtonControl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerElement_JoyButtonControl::release_label() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.JoyButtonControl.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerElement_JoyButtonControl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerElement.JoyButtonControl.label)
}

// optional uint32 button_id = 2;
inline bool CVirtualControllerElement_JoyButtonControl::has_button_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement_JoyButtonControl::set_has_button_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement_JoyButtonControl::clear_has_button_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement_JoyButtonControl::clear_button_id() {
  button_id_ = 0u;
  clear_has_button_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyButtonControl::button_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyButtonControl.button_id)
  return button_id_;
}
inline void CVirtualControllerElement_JoyButtonControl::set_button_id(::google::protobuf::uint32 value) {
  set_has_button_id();
  button_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyButtonControl.button_id)
}

// -------------------------------------------------------------------

// CVirtualControllerElement_JoyPadControl

// optional string label = 1;
inline bool CVirtualControllerElement_JoyPadControl::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement_JoyPadControl::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CVirtualControllerElement_JoyPadControl::label() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyPadControl.label)
  return label_.GetNoArena();
}
inline void CVirtualControllerElement_JoyPadControl::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyPadControl.label)
}
#if LANG_CXX11
inline void CVirtualControllerElement_JoyPadControl::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerElement.JoyPadControl.label)
}
#endif
inline void CVirtualControllerElement_JoyPadControl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerElement.JoyPadControl.label)
}
inline void CVirtualControllerElement_JoyPadControl::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerElement.JoyPadControl.label)
}
inline ::std::string* CVirtualControllerElement_JoyPadControl::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.JoyPadControl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerElement_JoyPadControl::release_label() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.JoyPadControl.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerElement_JoyPadControl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerElement.JoyPadControl.label)
}

// optional uint32 up_button_id = 2;
inline bool CVirtualControllerElement_JoyPadControl::has_up_button_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement_JoyPadControl::set_has_up_button_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_has_up_button_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_up_button_id() {
  up_button_id_ = 0u;
  clear_has_up_button_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyPadControl::up_button_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyPadControl.up_button_id)
  return up_button_id_;
}
inline void CVirtualControllerElement_JoyPadControl::set_up_button_id(::google::protobuf::uint32 value) {
  set_has_up_button_id();
  up_button_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyPadControl.up_button_id)
}

// optional uint32 down_button_id = 3;
inline bool CVirtualControllerElement_JoyPadControl::has_down_button_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerElement_JoyPadControl::set_has_down_button_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_has_down_button_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_down_button_id() {
  down_button_id_ = 0u;
  clear_has_down_button_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyPadControl::down_button_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyPadControl.down_button_id)
  return down_button_id_;
}
inline void CVirtualControllerElement_JoyPadControl::set_down_button_id(::google::protobuf::uint32 value) {
  set_has_down_button_id();
  down_button_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyPadControl.down_button_id)
}

// optional uint32 left_button_id = 4;
inline bool CVirtualControllerElement_JoyPadControl::has_left_button_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerElement_JoyPadControl::set_has_left_button_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_has_left_button_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_left_button_id() {
  left_button_id_ = 0u;
  clear_has_left_button_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyPadControl::left_button_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyPadControl.left_button_id)
  return left_button_id_;
}
inline void CVirtualControllerElement_JoyPadControl::set_left_button_id(::google::protobuf::uint32 value) {
  set_has_left_button_id();
  left_button_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyPadControl.left_button_id)
}

// optional uint32 right_button_id = 5;
inline bool CVirtualControllerElement_JoyPadControl::has_right_button_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CVirtualControllerElement_JoyPadControl::set_has_right_button_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_has_right_button_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CVirtualControllerElement_JoyPadControl::clear_right_button_id() {
  right_button_id_ = 0u;
  clear_has_right_button_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_JoyPadControl::right_button_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.JoyPadControl.right_button_id)
  return right_button_id_;
}
inline void CVirtualControllerElement_JoyPadControl::set_right_button_id(::google::protobuf::uint32 value) {
  set_has_right_button_id();
  right_button_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.JoyPadControl.right_button_id)
}

// -------------------------------------------------------------------

// CVirtualControllerElement_MacroButtonControl

// optional string label = 1;
inline bool CVirtualControllerElement_MacroButtonControl::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement_MacroButtonControl::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement_MacroButtonControl::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement_MacroButtonControl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CVirtualControllerElement_MacroButtonControl::label() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.MacroButtonControl.label)
  return label_.GetNoArena();
}
inline void CVirtualControllerElement_MacroButtonControl::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.MacroButtonControl.label)
}
#if LANG_CXX11
inline void CVirtualControllerElement_MacroButtonControl::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerElement.MacroButtonControl.label)
}
#endif
inline void CVirtualControllerElement_MacroButtonControl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerElement.MacroButtonControl.label)
}
inline void CVirtualControllerElement_MacroButtonControl::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerElement.MacroButtonControl.label)
}
inline ::std::string* CVirtualControllerElement_MacroButtonControl::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.MacroButtonControl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerElement_MacroButtonControl::release_label() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.MacroButtonControl.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerElement_MacroButtonControl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerElement.MacroButtonControl.label)
}

// optional uint32 button_id = 2;
inline bool CVirtualControllerElement_MacroButtonControl::has_button_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement_MacroButtonControl::set_has_button_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement_MacroButtonControl::clear_has_button_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement_MacroButtonControl::clear_button_id() {
  button_id_ = 0u;
  clear_has_button_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_MacroButtonControl::button_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.MacroButtonControl.button_id)
  return button_id_;
}
inline void CVirtualControllerElement_MacroButtonControl::set_button_id(::google::protobuf::uint32 value) {
  set_has_button_id();
  button_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.MacroButtonControl.button_id)
}

// -------------------------------------------------------------------

// CVirtualControllerElement_TrackpadControl

// optional string label = 1;
inline bool CVirtualControllerElement_TrackpadControl::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement_TrackpadControl::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement_TrackpadControl::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement_TrackpadControl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CVirtualControllerElement_TrackpadControl::label() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.TrackpadControl.label)
  return label_.GetNoArena();
}
inline void CVirtualControllerElement_TrackpadControl::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.TrackpadControl.label)
}
#if LANG_CXX11
inline void CVirtualControllerElement_TrackpadControl::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerElement.TrackpadControl.label)
}
#endif
inline void CVirtualControllerElement_TrackpadControl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerElement.TrackpadControl.label)
}
inline void CVirtualControllerElement_TrackpadControl::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerElement.TrackpadControl.label)
}
inline ::std::string* CVirtualControllerElement_TrackpadControl::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.TrackpadControl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerElement_TrackpadControl::release_label() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.TrackpadControl.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerElement_TrackpadControl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerElement.TrackpadControl.label)
}

// optional uint32 x_axis_range = 2;
inline bool CVirtualControllerElement_TrackpadControl::has_x_axis_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement_TrackpadControl::set_has_x_axis_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement_TrackpadControl::clear_has_x_axis_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement_TrackpadControl::clear_x_axis_range() {
  x_axis_range_ = 0u;
  clear_has_x_axis_range();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_TrackpadControl::x_axis_range() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.TrackpadControl.x_axis_range)
  return x_axis_range_;
}
inline void CVirtualControllerElement_TrackpadControl::set_x_axis_range(::google::protobuf::uint32 value) {
  set_has_x_axis_range();
  x_axis_range_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.TrackpadControl.x_axis_range)
}

// optional uint32 y_axis_range = 3;
inline bool CVirtualControllerElement_TrackpadControl::has_y_axis_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerElement_TrackpadControl::set_has_y_axis_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerElement_TrackpadControl::clear_has_y_axis_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerElement_TrackpadControl::clear_y_axis_range() {
  y_axis_range_ = 0u;
  clear_has_y_axis_range();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_TrackpadControl::y_axis_range() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.TrackpadControl.y_axis_range)
  return y_axis_range_;
}
inline void CVirtualControllerElement_TrackpadControl::set_y_axis_range(::google::protobuf::uint32 value) {
  set_has_y_axis_range();
  y_axis_range_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.TrackpadControl.y_axis_range)
}

// -------------------------------------------------------------------

// CVirtualControllerElement_AxisButtonControl

// optional string label = 1;
inline bool CVirtualControllerElement_AxisButtonControl::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement_AxisButtonControl::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement_AxisButtonControl::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement_AxisButtonControl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& CVirtualControllerElement_AxisButtonControl::label() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.AxisButtonControl.label)
  return label_.GetNoArena();
}
inline void CVirtualControllerElement_AxisButtonControl::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.AxisButtonControl.label)
}
#if LANG_CXX11
inline void CVirtualControllerElement_AxisButtonControl::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerElement.AxisButtonControl.label)
}
#endif
inline void CVirtualControllerElement_AxisButtonControl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerElement.AxisButtonControl.label)
}
inline void CVirtualControllerElement_AxisButtonControl::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerElement.AxisButtonControl.label)
}
inline ::std::string* CVirtualControllerElement_AxisButtonControl::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.AxisButtonControl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerElement_AxisButtonControl::release_label() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.AxisButtonControl.label)
  if (!has_label()) {
    return NULL;
  }
  clear_has_label();
  return label_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerElement_AxisButtonControl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerElement.AxisButtonControl.label)
}

// optional uint32 axis_id = 2;
inline bool CVirtualControllerElement_AxisButtonControl::has_axis_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement_AxisButtonControl::set_has_axis_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement_AxisButtonControl::clear_has_axis_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement_AxisButtonControl::clear_axis_id() {
  axis_id_ = 0u;
  clear_has_axis_id();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_AxisButtonControl::axis_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.AxisButtonControl.axis_id)
  return axis_id_;
}
inline void CVirtualControllerElement_AxisButtonControl::set_axis_id(::google::protobuf::uint32 value) {
  set_has_axis_id();
  axis_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.AxisButtonControl.axis_id)
}

// optional uint32 axis_pressed_value = 3;
inline bool CVirtualControllerElement_AxisButtonControl::has_axis_pressed_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerElement_AxisButtonControl::set_has_axis_pressed_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerElement_AxisButtonControl::clear_has_axis_pressed_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerElement_AxisButtonControl::clear_axis_pressed_value() {
  axis_pressed_value_ = 0u;
  clear_has_axis_pressed_value();
}
inline ::google::protobuf::uint32 CVirtualControllerElement_AxisButtonControl::axis_pressed_value() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.AxisButtonControl.axis_pressed_value)
  return axis_pressed_value_;
}
inline void CVirtualControllerElement_AxisButtonControl::set_axis_pressed_value(::google::protobuf::uint32 value) {
  set_has_axis_pressed_value();
  axis_pressed_value_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.AxisButtonControl.axis_pressed_value)
}

// -------------------------------------------------------------------

// CVirtualControllerElement

// optional uint32 x_position = 1;
inline bool CVirtualControllerElement::has_x_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement::set_has_x_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerElement::clear_has_x_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerElement::clear_x_position() {
  x_position_ = 0u;
  clear_has_x_position();
}
inline ::google::protobuf::uint32 CVirtualControllerElement::x_position() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.x_position)
  return x_position_;
}
inline void CVirtualControllerElement::set_x_position(::google::protobuf::uint32 value) {
  set_has_x_position();
  x_position_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.x_position)
}

// optional uint32 y_position = 2;
inline bool CVirtualControllerElement::has_y_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement::set_has_y_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerElement::clear_has_y_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerElement::clear_y_position() {
  y_position_ = 0u;
  clear_has_y_position();
}
inline ::google::protobuf::uint32 CVirtualControllerElement::y_position() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.y_position)
  return y_position_;
}
inline void CVirtualControllerElement::set_y_position(::google::protobuf::uint32 value) {
  set_has_y_position();
  y_position_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.y_position)
}

// optional uint32 width = 3;
inline bool CVirtualControllerElement::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerElement::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerElement::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerElement::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 CVirtualControllerElement::width() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.width)
  return width_;
}
inline void CVirtualControllerElement::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.width)
}

// optional uint32 height = 4;
inline bool CVirtualControllerElement::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerElement::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVirtualControllerElement::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVirtualControllerElement::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 CVirtualControllerElement::height() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.height)
  return height_;
}
inline void CVirtualControllerElement::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.height)
}

// optional .CVirtualControllerElement.JoyStickControl joy_stick = 5;
inline bool CVirtualControllerElement::has_joy_stick() const {
  return control_case() == kJoyStick;
}
inline void CVirtualControllerElement::set_has_joy_stick() {
  _oneof_case_[0] = kJoyStick;
}
inline void CVirtualControllerElement::clear_joy_stick() {
  if (has_joy_stick()) {
    delete control_.joy_stick_;
    clear_has_control();
  }
}
inline const ::CVirtualControllerElement_JoyStickControl& CVirtualControllerElement::_internal_joy_stick() const {
  return *control_.joy_stick_;
}
inline ::CVirtualControllerElement_JoyStickControl* CVirtualControllerElement::release_joy_stick() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.joy_stick)
  if (has_joy_stick()) {
    clear_has_control();
      ::CVirtualControllerElement_JoyStickControl* temp = control_.joy_stick_;
    control_.joy_stick_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CVirtualControllerElement_JoyStickControl& CVirtualControllerElement::joy_stick() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.joy_stick)
  return has_joy_stick()
      ? *control_.joy_stick_
      : *reinterpret_cast< ::CVirtualControllerElement_JoyStickControl*>(&::_CVirtualControllerElement_JoyStickControl_default_instance_);
}
inline ::CVirtualControllerElement_JoyStickControl* CVirtualControllerElement::mutable_joy_stick() {
  if (!has_joy_stick()) {
    clear_control();
    set_has_joy_stick();
    control_.joy_stick_ = CreateMaybeMessage< ::CVirtualControllerElement_JoyStickControl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.joy_stick)
  return control_.joy_stick_;
}

// optional .CVirtualControllerElement.JoyButtonControl joy_button = 6;
inline bool CVirtualControllerElement::has_joy_button() const {
  return control_case() == kJoyButton;
}
inline void CVirtualControllerElement::set_has_joy_button() {
  _oneof_case_[0] = kJoyButton;
}
inline void CVirtualControllerElement::clear_joy_button() {
  if (has_joy_button()) {
    delete control_.joy_button_;
    clear_has_control();
  }
}
inline const ::CVirtualControllerElement_JoyButtonControl& CVirtualControllerElement::_internal_joy_button() const {
  return *control_.joy_button_;
}
inline ::CVirtualControllerElement_JoyButtonControl* CVirtualControllerElement::release_joy_button() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.joy_button)
  if (has_joy_button()) {
    clear_has_control();
      ::CVirtualControllerElement_JoyButtonControl* temp = control_.joy_button_;
    control_.joy_button_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CVirtualControllerElement_JoyButtonControl& CVirtualControllerElement::joy_button() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.joy_button)
  return has_joy_button()
      ? *control_.joy_button_
      : *reinterpret_cast< ::CVirtualControllerElement_JoyButtonControl*>(&::_CVirtualControllerElement_JoyButtonControl_default_instance_);
}
inline ::CVirtualControllerElement_JoyButtonControl* CVirtualControllerElement::mutable_joy_button() {
  if (!has_joy_button()) {
    clear_control();
    set_has_joy_button();
    control_.joy_button_ = CreateMaybeMessage< ::CVirtualControllerElement_JoyButtonControl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.joy_button)
  return control_.joy_button_;
}

// optional .CVirtualControllerElement.JoyPadControl joy_pad = 7;
inline bool CVirtualControllerElement::has_joy_pad() const {
  return control_case() == kJoyPad;
}
inline void CVirtualControllerElement::set_has_joy_pad() {
  _oneof_case_[0] = kJoyPad;
}
inline void CVirtualControllerElement::clear_joy_pad() {
  if (has_joy_pad()) {
    delete control_.joy_pad_;
    clear_has_control();
  }
}
inline const ::CVirtualControllerElement_JoyPadControl& CVirtualControllerElement::_internal_joy_pad() const {
  return *control_.joy_pad_;
}
inline ::CVirtualControllerElement_JoyPadControl* CVirtualControllerElement::release_joy_pad() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.joy_pad)
  if (has_joy_pad()) {
    clear_has_control();
      ::CVirtualControllerElement_JoyPadControl* temp = control_.joy_pad_;
    control_.joy_pad_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CVirtualControllerElement_JoyPadControl& CVirtualControllerElement::joy_pad() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.joy_pad)
  return has_joy_pad()
      ? *control_.joy_pad_
      : *reinterpret_cast< ::CVirtualControllerElement_JoyPadControl*>(&::_CVirtualControllerElement_JoyPadControl_default_instance_);
}
inline ::CVirtualControllerElement_JoyPadControl* CVirtualControllerElement::mutable_joy_pad() {
  if (!has_joy_pad()) {
    clear_control();
    set_has_joy_pad();
    control_.joy_pad_ = CreateMaybeMessage< ::CVirtualControllerElement_JoyPadControl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.joy_pad)
  return control_.joy_pad_;
}

// optional .CVirtualControllerElement.MacroButtonControl macro_button = 8;
inline bool CVirtualControllerElement::has_macro_button() const {
  return control_case() == kMacroButton;
}
inline void CVirtualControllerElement::set_has_macro_button() {
  _oneof_case_[0] = kMacroButton;
}
inline void CVirtualControllerElement::clear_macro_button() {
  if (has_macro_button()) {
    delete control_.macro_button_;
    clear_has_control();
  }
}
inline const ::CVirtualControllerElement_MacroButtonControl& CVirtualControllerElement::_internal_macro_button() const {
  return *control_.macro_button_;
}
inline ::CVirtualControllerElement_MacroButtonControl* CVirtualControllerElement::release_macro_button() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.macro_button)
  if (has_macro_button()) {
    clear_has_control();
      ::CVirtualControllerElement_MacroButtonControl* temp = control_.macro_button_;
    control_.macro_button_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CVirtualControllerElement_MacroButtonControl& CVirtualControllerElement::macro_button() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.macro_button)
  return has_macro_button()
      ? *control_.macro_button_
      : *reinterpret_cast< ::CVirtualControllerElement_MacroButtonControl*>(&::_CVirtualControllerElement_MacroButtonControl_default_instance_);
}
inline ::CVirtualControllerElement_MacroButtonControl* CVirtualControllerElement::mutable_macro_button() {
  if (!has_macro_button()) {
    clear_control();
    set_has_macro_button();
    control_.macro_button_ = CreateMaybeMessage< ::CVirtualControllerElement_MacroButtonControl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.macro_button)
  return control_.macro_button_;
}

// optional .CVirtualControllerElement.TrackpadControl trackpad = 9;
inline bool CVirtualControllerElement::has_trackpad() const {
  return control_case() == kTrackpad;
}
inline void CVirtualControllerElement::set_has_trackpad() {
  _oneof_case_[0] = kTrackpad;
}
inline void CVirtualControllerElement::clear_trackpad() {
  if (has_trackpad()) {
    delete control_.trackpad_;
    clear_has_control();
  }
}
inline const ::CVirtualControllerElement_TrackpadControl& CVirtualControllerElement::_internal_trackpad() const {
  return *control_.trackpad_;
}
inline ::CVirtualControllerElement_TrackpadControl* CVirtualControllerElement::release_trackpad() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.trackpad)
  if (has_trackpad()) {
    clear_has_control();
      ::CVirtualControllerElement_TrackpadControl* temp = control_.trackpad_;
    control_.trackpad_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CVirtualControllerElement_TrackpadControl& CVirtualControllerElement::trackpad() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.trackpad)
  return has_trackpad()
      ? *control_.trackpad_
      : *reinterpret_cast< ::CVirtualControllerElement_TrackpadControl*>(&::_CVirtualControllerElement_TrackpadControl_default_instance_);
}
inline ::CVirtualControllerElement_TrackpadControl* CVirtualControllerElement::mutable_trackpad() {
  if (!has_trackpad()) {
    clear_control();
    set_has_trackpad();
    control_.trackpad_ = CreateMaybeMessage< ::CVirtualControllerElement_TrackpadControl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.trackpad)
  return control_.trackpad_;
}

// optional .CVirtualControllerElement.AxisButtonControl axis_button = 10;
inline bool CVirtualControllerElement::has_axis_button() const {
  return control_case() == kAxisButton;
}
inline void CVirtualControllerElement::set_has_axis_button() {
  _oneof_case_[0] = kAxisButton;
}
inline void CVirtualControllerElement::clear_axis_button() {
  if (has_axis_button()) {
    delete control_.axis_button_;
    clear_has_control();
  }
}
inline const ::CVirtualControllerElement_AxisButtonControl& CVirtualControllerElement::_internal_axis_button() const {
  return *control_.axis_button_;
}
inline ::CVirtualControllerElement_AxisButtonControl* CVirtualControllerElement::release_axis_button() {
  // @@protoc_insertion_point(field_release:CVirtualControllerElement.axis_button)
  if (has_axis_button()) {
    clear_has_control();
      ::CVirtualControllerElement_AxisButtonControl* temp = control_.axis_button_;
    control_.axis_button_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CVirtualControllerElement_AxisButtonControl& CVirtualControllerElement::axis_button() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.axis_button)
  return has_axis_button()
      ? *control_.axis_button_
      : *reinterpret_cast< ::CVirtualControllerElement_AxisButtonControl*>(&::_CVirtualControllerElement_AxisButtonControl_default_instance_);
}
inline ::CVirtualControllerElement_AxisButtonControl* CVirtualControllerElement::mutable_axis_button() {
  if (!has_axis_button()) {
    clear_control();
    set_has_axis_button();
    control_.axis_button_ = CreateMaybeMessage< ::CVirtualControllerElement_AxisButtonControl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerElement.axis_button)
  return control_.axis_button_;
}

inline bool CVirtualControllerElement::has_control() const {
  return control_case() != CONTROL_NOT_SET;
}
inline void CVirtualControllerElement::clear_has_control() {
  _oneof_case_[0] = CONTROL_NOT_SET;
}
inline CVirtualControllerElement::ControlCase CVirtualControllerElement::control_case() const {
  return CVirtualControllerElement::ControlCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CVirtualControllerLayout

// optional .EControllerLayoutType layout_type = 1 [default = k_EControllerLayoutTypePhone];
inline bool CVirtualControllerLayout::has_layout_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerLayout::set_has_layout_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerLayout::clear_has_layout_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerLayout::clear_layout_type() {
  layout_type_ = 0;
  clear_has_layout_type();
}
inline ::EControllerLayoutType CVirtualControllerLayout::layout_type() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayout.layout_type)
  return static_cast< ::EControllerLayoutType >(layout_type_);
}
inline void CVirtualControllerLayout::set_layout_type(::EControllerLayoutType value) {
  assert(::EControllerLayoutType_IsValid(value));
  set_has_layout_type();
  layout_type_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerLayout.layout_type)
}

// repeated .CVirtualControllerElement elements = 2;
inline int CVirtualControllerLayout::elements_size() const {
  return elements_.size();
}
inline void CVirtualControllerLayout::clear_elements() {
  elements_.Clear();
}
inline ::CVirtualControllerElement* CVirtualControllerLayout::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayout.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CVirtualControllerElement >*
CVirtualControllerLayout::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerLayout.elements)
  return &elements_;
}
inline const ::CVirtualControllerElement& CVirtualControllerLayout::elements(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayout.elements)
  return elements_.Get(index);
}
inline ::CVirtualControllerElement* CVirtualControllerLayout::add_elements() {
  // @@protoc_insertion_point(field_add:CVirtualControllerLayout.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerElement >&
CVirtualControllerLayout::elements() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerLayout.elements)
  return elements_;
}

// -------------------------------------------------------------------

// CVirtualControllerLayouts

// repeated .CVirtualControllerLayout layouts = 1;
inline int CVirtualControllerLayouts::layouts_size() const {
  return layouts_.size();
}
inline void CVirtualControllerLayouts::clear_layouts() {
  layouts_.Clear();
}
inline ::CVirtualControllerLayout* CVirtualControllerLayouts::mutable_layouts(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayouts.layouts)
  return layouts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CVirtualControllerLayout >*
CVirtualControllerLayouts::mutable_layouts() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerLayouts.layouts)
  return &layouts_;
}
inline const ::CVirtualControllerLayout& CVirtualControllerLayouts::layouts(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.layouts)
  return layouts_.Get(index);
}
inline ::CVirtualControllerLayout* CVirtualControllerLayouts::add_layouts() {
  // @@protoc_insertion_point(field_add:CVirtualControllerLayouts.layouts)
  return layouts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerLayout >&
CVirtualControllerLayouts::layouts() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerLayouts.layouts)
  return layouts_;
}

// -------------------------------------------------------------------

// CVirtualControllerConfig_Control

// optional string name = 1;
inline bool CVirtualControllerConfig_Control::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerConfig_Control::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerConfig_Control::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CVirtualControllerConfig_Control::name() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.name)
  return name_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.name)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.name)
}
#endif
inline void CVirtualControllerConfig_Control::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.name)
}
inline void CVirtualControllerConfig_Control::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.name)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_name() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.name)
}

// optional string icon = 2;
inline bool CVirtualControllerConfig_Control::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerConfig_Control::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerConfig_Control::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& CVirtualControllerConfig_Control::icon() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.icon)
  return icon_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.icon)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.icon)
}
#endif
inline void CVirtualControllerConfig_Control::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.icon)
}
inline void CVirtualControllerConfig_Control::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.icon)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_icon() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.icon)
  if (!has_icon()) {
    return NULL;
  }
  clear_has_icon();
  return icon_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.icon)
}

// optional int32 input_source = 3;
inline bool CVirtualControllerConfig_Control::has_input_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_input_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CVirtualControllerConfig_Control::clear_has_input_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CVirtualControllerConfig_Control::clear_input_source() {
  input_source_ = 0;
  clear_has_input_source();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::input_source() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_source)
  return input_source_;
}
inline void CVirtualControllerConfig_Control::set_input_source(::google::protobuf::int32 value) {
  set_has_input_source();
  input_source_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_source)
}

// optional int32 input_mode = 4;
inline bool CVirtualControllerConfig_Control::has_input_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_input_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CVirtualControllerConfig_Control::clear_has_input_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CVirtualControllerConfig_Control::clear_input_mode() {
  input_mode_ = 0;
  clear_has_input_mode();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::input_mode() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_mode)
  return input_mode_;
}
inline void CVirtualControllerConfig_Control::set_input_mode(::google::protobuf::int32 value) {
  set_has_input_mode();
  input_mode_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_mode)
}

// optional int32 input_element = 5;
inline bool CVirtualControllerConfig_Control::has_input_element() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_input_element() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CVirtualControllerConfig_Control::clear_has_input_element() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CVirtualControllerConfig_Control::clear_input_element() {
  input_element_ = 0;
  clear_has_input_element();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::input_element() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_element)
  return input_element_;
}
inline void CVirtualControllerConfig_Control::set_input_element(::google::protobuf::int32 value) {
  set_has_input_element();
  input_element_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_element)
}

// optional int32 output_gamepad = 6;
inline bool CVirtualControllerConfig_Control::has_output_gamepad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_output_gamepad() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CVirtualControllerConfig_Control::clear_has_output_gamepad() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CVirtualControllerConfig_Control::clear_output_gamepad() {
  output_gamepad_ = 0;
  clear_has_output_gamepad();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::output_gamepad() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.output_gamepad)
  return output_gamepad_;
}
inline void CVirtualControllerConfig_Control::set_output_gamepad(::google::protobuf::int32 value) {
  set_has_output_gamepad();
  output_gamepad_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.output_gamepad)
}

// optional int32 output_keyboard = 7;
inline bool CVirtualControllerConfig_Control::has_output_keyboard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_output_keyboard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CVirtualControllerConfig_Control::clear_has_output_keyboard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CVirtualControllerConfig_Control::clear_output_keyboard() {
  output_keyboard_ = 0;
  clear_has_output_keyboard();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::output_keyboard() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.output_keyboard)
  return output_keyboard_;
}
inline void CVirtualControllerConfig_Control::set_output_keyboard(::google::protobuf::int32 value) {
  set_has_output_keyboard();
  output_keyboard_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.output_keyboard)
}

// optional int32 output_mouse = 8;
inline bool CVirtualControllerConfig_Control::has_output_mouse() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_output_mouse() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CVirtualControllerConfig_Control::clear_has_output_mouse() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CVirtualControllerConfig_Control::clear_output_mouse() {
  output_mouse_ = 0;
  clear_has_output_mouse();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::output_mouse() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.output_mouse)
  return output_mouse_;
}
inline void CVirtualControllerConfig_Control::set_output_mouse(::google::protobuf::int32 value) {
  set_has_output_mouse();
  output_mouse_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.output_mouse)
}

// optional string icon_foreground = 9;
inline bool CVirtualControllerConfig_Control::has_icon_foreground() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_icon_foreground() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerConfig_Control::clear_has_icon_foreground() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerConfig_Control::clear_icon_foreground() {
  icon_foreground_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_foreground();
}
inline const ::std::string& CVirtualControllerConfig_Control::icon_foreground() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.icon_foreground)
  return icon_foreground_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const ::std::string& value) {
  set_has_icon_foreground();
  icon_foreground_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.icon_foreground)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_icon_foreground(::std::string&& value) {
  set_has_icon_foreground();
  icon_foreground_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.icon_foreground)
}
#endif
inline void CVirtualControllerConfig_Control::set_icon_foreground(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon_foreground();
  icon_foreground_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.icon_foreground)
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const char* value, size_t size) {
  set_has_icon_foreground();
  icon_foreground_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.icon_foreground)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_icon_foreground() {
  set_has_icon_foreground();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.icon_foreground)
  return icon_foreground_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_icon_foreground() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.icon_foreground)
  if (!has_icon_foreground()) {
    return NULL;
  }
  clear_has_icon_foreground();
  return icon_foreground_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon_foreground(::std::string* icon_foreground) {
  if (icon_foreground != NULL) {
    set_has_icon_foreground();
  } else {
    clear_has_icon_foreground();
  }
  icon_foreground_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_foreground);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.icon_foreground)
}

// optional string icon_background = 10;
inline bool CVirtualControllerConfig_Control::has_icon_background() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerConfig_Control::set_has_icon_background() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVirtualControllerConfig_Control::clear_has_icon_background() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVirtualControllerConfig_Control::clear_icon_background() {
  icon_background_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_background();
}
inline const ::std::string& CVirtualControllerConfig_Control::icon_background() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.icon_background)
  return icon_background_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_icon_background(const ::std::string& value) {
  set_has_icon_background();
  icon_background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.icon_background)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_icon_background(::std::string&& value) {
  set_has_icon_background();
  icon_background_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.icon_background)
}
#endif
inline void CVirtualControllerConfig_Control::set_icon_background(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon_background();
  icon_background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.icon_background)
}
inline void CVirtualControllerConfig_Control::set_icon_background(const char* value, size_t size) {
  set_has_icon_background();
  icon_background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.icon_background)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_icon_background() {
  set_has_icon_background();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.icon_background)
  return icon_background_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_icon_background() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.icon_background)
  if (!has_icon_background()) {
    return NULL;
  }
  clear_has_icon_background();
  return icon_background_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon_background(::std::string* icon_background) {
  if (icon_background != NULL) {
    set_has_icon_background();
  } else {
    clear_has_icon_background();
  }
  icon_background_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_background);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.icon_background)
}

// -------------------------------------------------------------------

// CVirtualControllerConfig_ActionSet

// optional int32 id = 1;
inline bool CVirtualControllerConfig_ActionSet::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerConfig_ActionSet::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerConfig_ActionSet::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerConfig_ActionSet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_ActionSet::id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.id)
  return id_;
}
inline void CVirtualControllerConfig_ActionSet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.ActionSet.id)
}

// optional int32 parent_id = 2;
inline bool CVirtualControllerConfig_ActionSet::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerConfig_ActionSet::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerConfig_ActionSet::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerConfig_ActionSet::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 CVirtualControllerConfig_ActionSet::parent_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.parent_id)
  return parent_id_;
}
inline void CVirtualControllerConfig_ActionSet::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.ActionSet.parent_id)
}

// optional string name = 3;
inline bool CVirtualControllerConfig_ActionSet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerConfig_ActionSet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerConfig_ActionSet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerConfig_ActionSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CVirtualControllerConfig_ActionSet::name() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.name)
  return name_.GetNoArena();
}
inline void CVirtualControllerConfig_ActionSet::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.ActionSet.name)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_ActionSet::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.ActionSet.name)
}
#endif
inline void CVirtualControllerConfig_ActionSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.ActionSet.name)
}
inline void CVirtualControllerConfig_ActionSet::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.ActionSet.name)
}
inline ::std::string* CVirtualControllerConfig_ActionSet::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.ActionSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_ActionSet::release_name() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.ActionSet.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_ActionSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.ActionSet.name)
}

// repeated .CVirtualControllerConfig.Control controls = 4;
inline int CVirtualControllerConfig_ActionSet::controls_size() const {
  return controls_.size();
}
inline void CVirtualControllerConfig_ActionSet::clear_controls() {
  controls_.Clear();
}
inline ::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::mutable_controls(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.ActionSet.controls)
  return controls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_Control >*
CVirtualControllerConfig_ActionSet::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerConfig.ActionSet.controls)
  return &controls_;
}
inline const ::CVirtualControllerConfig_Control& CVirtualControllerConfig_ActionSet::controls(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.controls)
  return controls_.Get(index);
}
inline ::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::add_controls() {
  // @@protoc_insertion_point(field_add:CVirtualControllerConfig.ActionSet.controls)
  return controls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_Control >&
CVirtualControllerConfig_ActionSet::controls() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerConfig.ActionSet.controls)
  return controls_;
}

// -------------------------------------------------------------------

// CVirtualControllerConfig

// optional string name = 1;
inline bool CVirtualControllerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CVirtualControllerConfig::name() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.name)
  return name_.GetNoArena();
}
inline void CVirtualControllerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.name)
}
#if LANG_CXX11
inline void CVirtualControllerConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.name)
}
#endif
inline void CVirtualControllerConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.name)
}
inline void CVirtualControllerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.name)
}
inline ::std::string* CVirtualControllerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig::release_name() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.name)
}

// repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
inline int CVirtualControllerConfig::actionsets_size() const {
  return actionsets_.size();
}
inline void CVirtualControllerConfig::clear_actionsets() {
  actionsets_.Clear();
}
inline ::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::mutable_actionsets(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.actionsets)
  return actionsets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >*
CVirtualControllerConfig::mutable_actionsets() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerConfig.actionsets)
  return &actionsets_;
}
inline const ::CVirtualControllerConfig_ActionSet& CVirtualControllerConfig::actionsets(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.actionsets)
  return actionsets_.Get(index);
}
inline ::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::add_actionsets() {
  // @@protoc_insertion_point(field_add:CVirtualControllerConfig.actionsets)
  return actionsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >&
CVirtualControllerConfig::actionsets() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerConfig.actionsets)
  return actionsets_;
}

// -------------------------------------------------------------------

// CVirtualControllerLayoutPackage

// optional uint32 appid = 1;
inline bool CVirtualControllerLayoutPackage::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerLayoutPackage::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVirtualControllerLayoutPackage::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVirtualControllerLayoutPackage::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CVirtualControllerLayoutPackage::appid() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.appid)
  return appid_;
}
inline void CVirtualControllerLayoutPackage::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerLayoutPackage.appid)
}

// optional uint32 revision = 2;
inline bool CVirtualControllerLayoutPackage::has_revision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerLayoutPackage::set_has_revision() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVirtualControllerLayoutPackage::clear_has_revision() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVirtualControllerLayoutPackage::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 CVirtualControllerLayoutPackage::revision() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.revision)
  return revision_;
}
inline void CVirtualControllerLayoutPackage::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
  // @@protoc_insertion_point(field_set:CVirtualControllerLayoutPackage.revision)
}

// optional .CVirtualControllerConfig config = 3;
inline bool CVirtualControllerLayoutPackage::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerLayoutPackage::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVirtualControllerLayoutPackage::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVirtualControllerLayoutPackage::clear_config() {
  if (config_ != NULL) config_->Clear();
  clear_has_config();
}
inline const ::CVirtualControllerConfig& CVirtualControllerLayoutPackage::_internal_config() const {
  return *config_;
}
inline const ::CVirtualControllerConfig& CVirtualControllerLayoutPackage::config() const {
  const ::CVirtualControllerConfig* p = config_;
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.config)
  return p != NULL ? *p : *reinterpret_cast<const ::CVirtualControllerConfig*>(
      &::_CVirtualControllerConfig_default_instance_);
}
inline ::CVirtualControllerConfig* CVirtualControllerLayoutPackage::release_config() {
  // @@protoc_insertion_point(field_release:CVirtualControllerLayoutPackage.config)
  clear_has_config();
  ::CVirtualControllerConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::CVirtualControllerConfig* CVirtualControllerLayoutPackage::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::CVirtualControllerConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayoutPackage.config)
  return config_;
}
inline void CVirtualControllerLayoutPackage::set_allocated_config(::CVirtualControllerConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
  } else {
    clear_has_config();
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerLayoutPackage.config)
}

// optional .CVirtualControllerLayouts layouts = 4;
inline bool CVirtualControllerLayoutPackage::has_layouts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerLayoutPackage::set_has_layouts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVirtualControllerLayoutPackage::clear_has_layouts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVirtualControllerLayoutPackage::clear_layouts() {
  if (layouts_ != NULL) layouts_->Clear();
  clear_has_layouts();
}
inline const ::CVirtualControllerLayouts& CVirtualControllerLayoutPackage::_internal_layouts() const {
  return *layouts_;
}
inline const ::CVirtualControllerLayouts& CVirtualControllerLayoutPackage::layouts() const {
  const ::CVirtualControllerLayouts* p = layouts_;
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.layouts)
  return p != NULL ? *p : *reinterpret_cast<const ::CVirtualControllerLayouts*>(
      &::_CVirtualControllerLayouts_default_instance_);
}
inline ::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::release_layouts() {
  // @@protoc_insertion_point(field_release:CVirtualControllerLayoutPackage.layouts)
  clear_has_layouts();
  ::CVirtualControllerLayouts* temp = layouts_;
  layouts_ = NULL;
  return temp;
}
inline ::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::mutable_layouts() {
  set_has_layouts();
  if (layouts_ == NULL) {
    auto* p = CreateMaybeMessage<::CVirtualControllerLayouts>(GetArenaNoVirtual());
    layouts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayoutPackage.layouts)
  return layouts_;
}
inline void CVirtualControllerLayoutPackage::set_allocated_layouts(::CVirtualControllerLayouts* layouts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete layouts_;
  }
  if (layouts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      layouts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, layouts, submessage_arena);
    }
    set_has_layouts();
  } else {
    clear_has_layouts();
  }
  layouts_ = layouts;
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerLayoutPackage.layouts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EControllerLayoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EControllerLayoutType>() {
  return ::EControllerLayoutType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto
