// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_chat.steamclient.proto

#include "steammessages_chat.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fchat_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatMentions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatPartyBeacon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRole;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoleActions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoomGroupInvite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoomMember;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoomState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ChatMessageModified_Notification_ChatMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteChatMessages_Request_Message;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetBanList_Response_BanInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Metrics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Settings;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserChatRoomState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetMessageHistory_Response_ChatMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserChatRoomGroupState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoomSummaryPair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CChatRoomGroupHeaderState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CChatRoomGroupState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fchat_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CChatRoom_GetChatRoomGroupSummary_Response;
}  // namespace protobuf_steammessages_5fchat_2esteamclient_2eproto
class CChat_RequestFriendPersonaStates_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChat_RequestFriendPersonaStates_Request>
      _instance;
} _CChat_RequestFriendPersonaStates_Request_default_instance_;
class CChat_RequestFriendPersonaStates_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChat_RequestFriendPersonaStates_Response>
      _instance;
} _CChat_RequestFriendPersonaStates_Response_default_instance_;
class CChatRoom_CreateChatRoomGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateChatRoomGroup_Request>
      _instance;
} _CChatRoom_CreateChatRoomGroup_Request_default_instance_;
class CChatRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRole>
      _instance;
} _CChatRole_default_instance_;
class CChatRoleActionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoleActions>
      _instance;
} _CChatRoleActions_default_instance_;
class CChatPartyBeaconDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatPartyBeacon>
      _instance;
} _CChatPartyBeacon_default_instance_;
class CChatRoomGroupHeaderStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoomGroupHeaderState>
      _instance;
} _CChatRoomGroupHeaderState_default_instance_;
class CChatRoomMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoomMember>
      _instance;
} _CChatRoomMember_default_instance_;
class CChatRoomStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoomState>
      _instance;
} _CChatRoomState_default_instance_;
class CChatRoomGroupStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoomGroupState>
      _instance;
} _CChatRoomGroupState_default_instance_;
class CUserChatRoomStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserChatRoomState>
      _instance;
} _CUserChatRoomState_default_instance_;
class CUserChatRoomGroupStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserChatRoomGroupState>
      _instance;
} _CUserChatRoomGroupState_default_instance_;
class CChatRoom_CreateChatRoomGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateChatRoomGroup_Response>
      _instance;
} _CChatRoom_CreateChatRoomGroup_Response_default_instance_;
class CChatRoom_SaveChatRoomGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SaveChatRoomGroup_Request>
      _instance;
} _CChatRoom_SaveChatRoomGroup_Request_default_instance_;
class CChatRoom_SaveChatRoomGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SaveChatRoomGroup_Response>
      _instance;
} _CChatRoom_SaveChatRoomGroup_Response_default_instance_;
class CChatRoom_RenameChatRoomGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RenameChatRoomGroup_Request>
      _instance;
} _CChatRoom_RenameChatRoomGroup_Request_default_instance_;
class CChatRoom_RenameChatRoomGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RenameChatRoomGroup_Response>
      _instance;
} _CChatRoom_RenameChatRoomGroup_Response_default_instance_;
class CChatRoom_SetChatRoomGroupTagline_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetChatRoomGroupTagline_Request>
      _instance;
} _CChatRoom_SetChatRoomGroupTagline_Request_default_instance_;
class CChatRoom_SetChatRoomGroupTagline_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetChatRoomGroupTagline_Response>
      _instance;
} _CChatRoom_SetChatRoomGroupTagline_Response_default_instance_;
class CChatRoom_SetChatRoomGroupAvatar_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetChatRoomGroupAvatar_Request>
      _instance;
} _CChatRoom_SetChatRoomGroupAvatar_Request_default_instance_;
class CChatRoom_SetChatRoomGroupAvatar_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetChatRoomGroupAvatar_Response>
      _instance;
} _CChatRoom_SetChatRoomGroupAvatar_Response_default_instance_;
class CChatRoom_SetChatRoomGroupWatchingBroadcast_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetChatRoomGroupWatchingBroadcast_Request>
      _instance;
} _CChatRoom_SetChatRoomGroupWatchingBroadcast_Request_default_instance_;
class CChatRoom_SetChatRoomGroupWatchingBroadcast_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetChatRoomGroupWatchingBroadcast_Response>
      _instance;
} _CChatRoom_SetChatRoomGroupWatchingBroadcast_Response_default_instance_;
class CChatRoom_MuteUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_MuteUser_Request>
      _instance;
} _CChatRoom_MuteUser_Request_default_instance_;
class CChatRoom_MuteUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_MuteUser_Response>
      _instance;
} _CChatRoom_MuteUser_Response_default_instance_;
class CChatRoom_KickUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_KickUser_Request>
      _instance;
} _CChatRoom_KickUser_Request_default_instance_;
class CChatRoom_KickUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_KickUser_Response>
      _instance;
} _CChatRoom_KickUser_Response_default_instance_;
class CChatRoom_SetUserBanState_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetUserBanState_Request>
      _instance;
} _CChatRoom_SetUserBanState_Request_default_instance_;
class CChatRoom_SetUserBanState_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetUserBanState_Response>
      _instance;
} _CChatRoom_SetUserBanState_Response_default_instance_;
class CChatRoom_RevokeInvite_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RevokeInvite_Request>
      _instance;
} _CChatRoom_RevokeInvite_Request_default_instance_;
class CChatRoom_RevokeInvite_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RevokeInvite_Response>
      _instance;
} _CChatRoom_RevokeInvite_Response_default_instance_;
class CChatRoom_CreateRole_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateRole_Request>
      _instance;
} _CChatRoom_CreateRole_Request_default_instance_;
class CChatRoom_CreateRole_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateRole_Response>
      _instance;
} _CChatRoom_CreateRole_Response_default_instance_;
class CChatRoom_GetRoles_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetRoles_Request>
      _instance;
} _CChatRoom_GetRoles_Request_default_instance_;
class CChatRoom_GetRoles_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetRoles_Response>
      _instance;
} _CChatRoom_GetRoles_Response_default_instance_;
class CChatRoom_RenameRole_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RenameRole_Request>
      _instance;
} _CChatRoom_RenameRole_Request_default_instance_;
class CChatRoom_RenameRole_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RenameRole_Response>
      _instance;
} _CChatRoom_RenameRole_Response_default_instance_;
class CChatRoom_ReorderRole_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ReorderRole_Request>
      _instance;
} _CChatRoom_ReorderRole_Request_default_instance_;
class CChatRoom_ReorderRole_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ReorderRole_Response>
      _instance;
} _CChatRoom_ReorderRole_Response_default_instance_;
class CChatRoom_DeleteRole_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteRole_Request>
      _instance;
} _CChatRoom_DeleteRole_Request_default_instance_;
class CChatRoom_DeleteRole_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteRole_Response>
      _instance;
} _CChatRoom_DeleteRole_Response_default_instance_;
class CChatRoom_GetRoleActions_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetRoleActions_Request>
      _instance;
} _CChatRoom_GetRoleActions_Request_default_instance_;
class CChatRoom_GetRoleActions_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetRoleActions_Response>
      _instance;
} _CChatRoom_GetRoleActions_Response_default_instance_;
class CChatRoom_ReplaceRoleActions_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ReplaceRoleActions_Request>
      _instance;
} _CChatRoom_ReplaceRoleActions_Request_default_instance_;
class CChatRoom_ReplaceRoleActions_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ReplaceRoleActions_Response>
      _instance;
} _CChatRoom_ReplaceRoleActions_Response_default_instance_;
class CChatRoom_AddRoleToUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_AddRoleToUser_Request>
      _instance;
} _CChatRoom_AddRoleToUser_Request_default_instance_;
class CChatRoom_AddRoleToUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_AddRoleToUser_Response>
      _instance;
} _CChatRoom_AddRoleToUser_Response_default_instance_;
class CChatRoom_GetRolesForUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetRolesForUser_Request>
      _instance;
} _CChatRoom_GetRolesForUser_Request_default_instance_;
class CChatRoom_GetRolesForUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetRolesForUser_Response>
      _instance;
} _CChatRoom_GetRolesForUser_Response_default_instance_;
class CChatRoom_DeleteRoleFromUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteRoleFromUser_Request>
      _instance;
} _CChatRoom_DeleteRoleFromUser_Request_default_instance_;
class CChatRoom_DeleteRoleFromUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteRoleFromUser_Response>
      _instance;
} _CChatRoom_DeleteRoleFromUser_Response_default_instance_;
class CChatRoom_JoinChatRoomGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_JoinChatRoomGroup_Request>
      _instance;
} _CChatRoom_JoinChatRoomGroup_Request_default_instance_;
class CChatRoom_JoinChatRoomGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_JoinChatRoomGroup_Response>
      _instance;
} _CChatRoom_JoinChatRoomGroup_Response_default_instance_;
class CChatRoom_InviteFriendToChatRoomGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_InviteFriendToChatRoomGroup_Request>
      _instance;
} _CChatRoom_InviteFriendToChatRoomGroup_Request_default_instance_;
class CChatRoom_InviteFriendToChatRoomGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_InviteFriendToChatRoomGroup_Response>
      _instance;
} _CChatRoom_InviteFriendToChatRoomGroup_Response_default_instance_;
class CChatRoom_LeaveChatRoomGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_LeaveChatRoomGroup_Request>
      _instance;
} _CChatRoom_LeaveChatRoomGroup_Request_default_instance_;
class CChatRoom_LeaveChatRoomGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_LeaveChatRoomGroup_Response>
      _instance;
} _CChatRoom_LeaveChatRoomGroup_Response_default_instance_;
class CChatRoom_CreateChatRoom_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateChatRoom_Request>
      _instance;
} _CChatRoom_CreateChatRoom_Request_default_instance_;
class CChatRoom_CreateChatRoom_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateChatRoom_Response>
      _instance;
} _CChatRoom_CreateChatRoom_Response_default_instance_;
class CChatRoom_DeleteChatRoom_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteChatRoom_Request>
      _instance;
} _CChatRoom_DeleteChatRoom_Request_default_instance_;
class CChatRoom_DeleteChatRoom_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteChatRoom_Response>
      _instance;
} _CChatRoom_DeleteChatRoom_Response_default_instance_;
class CChatRoom_RenameChatRoom_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RenameChatRoom_Request>
      _instance;
} _CChatRoom_RenameChatRoom_Request_default_instance_;
class CChatRoom_RenameChatRoom_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_RenameChatRoom_Response>
      _instance;
} _CChatRoom_RenameChatRoom_Response_default_instance_;
class CChatRoom_ReorderChatRoom_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ReorderChatRoom_Request>
      _instance;
} _CChatRoom_ReorderChatRoom_Request_default_instance_;
class CChatRoom_ReorderChatRoom_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ReorderChatRoom_Response>
      _instance;
} _CChatRoom_ReorderChatRoom_Response_default_instance_;
class CChatRoom_SendChatMessage_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SendChatMessage_Request>
      _instance;
} _CChatRoom_SendChatMessage_Request_default_instance_;
class CChatRoom_SendChatMessage_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SendChatMessage_Response>
      _instance;
} _CChatRoom_SendChatMessage_Response_default_instance_;
class CChatRoom_JoinVoiceChat_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_JoinVoiceChat_Request>
      _instance;
} _CChatRoom_JoinVoiceChat_Request_default_instance_;
class CChatRoom_JoinVoiceChat_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_JoinVoiceChat_Response>
      _instance;
} _CChatRoom_JoinVoiceChat_Response_default_instance_;
class CChatRoom_LeaveVoiceChat_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_LeaveVoiceChat_Request>
      _instance;
} _CChatRoom_LeaveVoiceChat_Request_default_instance_;
class CChatRoom_LeaveVoiceChat_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_LeaveVoiceChat_Response>
      _instance;
} _CChatRoom_LeaveVoiceChat_Response_default_instance_;
class CChatRoom_GetMessageHistory_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetMessageHistory_Request>
      _instance;
} _CChatRoom_GetMessageHistory_Request_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerMessage>
      _instance;
} _ServerMessage_default_instance_;
class CChatRoom_GetMessageHistory_Response_ChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetMessageHistory_Response_ChatMessage>
      _instance;
} _CChatRoom_GetMessageHistory_Response_ChatMessage_default_instance_;
class CChatRoom_GetMessageHistory_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetMessageHistory_Response>
      _instance;
} _CChatRoom_GetMessageHistory_Response_default_instance_;
class CChatRoom_GetMyChatRoomGroups_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetMyChatRoomGroups_Request>
      _instance;
} _CChatRoom_GetMyChatRoomGroups_Request_default_instance_;
class CChatRoom_GetChatRoomGroupSummary_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetChatRoomGroupSummary_Response>
      _instance;
} _CChatRoom_GetChatRoomGroupSummary_Response_default_instance_;
class CChatRoomSummaryPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoomSummaryPair>
      _instance;
} _CChatRoomSummaryPair_default_instance_;
class CChatRoom_GetMyChatRoomGroups_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetMyChatRoomGroups_Response>
      _instance;
} _CChatRoom_GetMyChatRoomGroups_Response_default_instance_;
class CChatRoom_GetChatRoomGroupState_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetChatRoomGroupState_Request>
      _instance;
} _CChatRoom_GetChatRoomGroupState_Request_default_instance_;
class CChatRoom_GetChatRoomGroupState_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetChatRoomGroupState_Response>
      _instance;
} _CChatRoom_GetChatRoomGroupState_Response_default_instance_;
class CChatRoom_GetChatRoomGroupSummary_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetChatRoomGroupSummary_Request>
      _instance;
} _CChatRoom_GetChatRoomGroupSummary_Request_default_instance_;
class CChatRoom_AckChatMessage_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_AckChatMessage_Notification>
      _instance;
} _CChatRoom_AckChatMessage_Notification_default_instance_;
class CChatRoom_CreateInviteLink_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateInviteLink_Request>
      _instance;
} _CChatRoom_CreateInviteLink_Request_default_instance_;
class CChatRoom_CreateInviteLink_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_CreateInviteLink_Response>
      _instance;
} _CChatRoom_CreateInviteLink_Response_default_instance_;
class CChatRoom_GetInviteLinkInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteLinkInfo_Request>
      _instance;
} _CChatRoom_GetInviteLinkInfo_Request_default_instance_;
class CChatRoom_GetInviteLinkInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteLinkInfo_Response>
      _instance;
} _CChatRoom_GetInviteLinkInfo_Response_default_instance_;
class CChatRoom_GetInviteInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteInfo_Request>
      _instance;
} _CChatRoom_GetInviteInfo_Request_default_instance_;
class CChatRoom_GetInviteInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteInfo_Response>
      _instance;
} _CChatRoom_GetInviteInfo_Response_default_instance_;
class CChatRoom_GetInviteLinksForGroup_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteLinksForGroup_Request>
      _instance;
} _CChatRoom_GetInviteLinksForGroup_Request_default_instance_;
class CChatRoom_GetInviteLinksForGroup_Response_LinkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteLinksForGroup_Response_LinkInfo>
      _instance;
} _CChatRoom_GetInviteLinksForGroup_Response_LinkInfo_default_instance_;
class CChatRoom_GetInviteLinksForGroup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteLinksForGroup_Response>
      _instance;
} _CChatRoom_GetInviteLinksForGroup_Response_default_instance_;
class CChatRoom_GetBanList_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetBanList_Request>
      _instance;
} _CChatRoom_GetBanList_Request_default_instance_;
class CChatRoom_GetBanList_Response_BanInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetBanList_Response_BanInfo>
      _instance;
} _CChatRoom_GetBanList_Response_BanInfo_default_instance_;
class CChatRoom_GetBanList_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetBanList_Response>
      _instance;
} _CChatRoom_GetBanList_Response_default_instance_;
class CChatRoom_GetInviteList_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteList_Request>
      _instance;
} _CChatRoom_GetInviteList_Request_default_instance_;
class CChatRoomGroupInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoomGroupInvite>
      _instance;
} _CChatRoomGroupInvite_default_instance_;
class CChatRoom_GetInviteList_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_GetInviteList_Response>
      _instance;
} _CChatRoom_GetInviteList_Response_default_instance_;
class CChatRoom_DeleteInviteLink_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteInviteLink_Request>
      _instance;
} _CChatRoom_DeleteInviteLink_Request_default_instance_;
class CChatRoom_DeleteInviteLink_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteInviteLink_Response>
      _instance;
} _CChatRoom_DeleteInviteLink_Response_default_instance_;
class CChatRoom_SetSessionActiveChatRoomGroups_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetSessionActiveChatRoomGroups_Request>
      _instance;
} _CChatRoom_SetSessionActiveChatRoomGroups_Request_default_instance_;
class CChatRoom_SetSessionActiveChatRoomGroups_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetSessionActiveChatRoomGroups_Response>
      _instance;
} _CChatRoom_SetSessionActiveChatRoomGroups_Response_default_instance_;
class CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences>
      _instance;
} _CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_default_instance_;
class CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences>
      _instance;
} _CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_default_instance_;
class CChatRoom_SetUserChatGroupPreferences_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetUserChatGroupPreferences_Request>
      _instance;
} _CChatRoom_SetUserChatGroupPreferences_Request_default_instance_;
class CChatRoom_SetUserChatGroupPreferences_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_SetUserChatGroupPreferences_Response>
      _instance;
} _CChatRoom_SetUserChatGroupPreferences_Response_default_instance_;
class CChatRoom_DeleteChatMessages_Request_MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteChatMessages_Request_Message>
      _instance;
} _CChatRoom_DeleteChatMessages_Request_Message_default_instance_;
class CChatRoom_DeleteChatMessages_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteChatMessages_Request>
      _instance;
} _CChatRoom_DeleteChatMessages_Request_default_instance_;
class CChatRoom_DeleteChatMessages_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_DeleteChatMessages_Response>
      _instance;
} _CChatRoom_DeleteChatMessages_Response_default_instance_;
class CClanChatRooms_GetClanChatRoomInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClanChatRooms_GetClanChatRoomInfo_Request>
      _instance;
} _CClanChatRooms_GetClanChatRoomInfo_Request_default_instance_;
class CClanChatRooms_GetClanChatRoomInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClanChatRooms_GetClanChatRoomInfo_Response>
      _instance;
} _CClanChatRooms_GetClanChatRoomInfo_Response_default_instance_;
class CClanChatRooms_SetClanChatRoomPrivate_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClanChatRooms_SetClanChatRoomPrivate_Request>
      _instance;
} _CClanChatRooms_SetClanChatRoomPrivate_Request_default_instance_;
class CClanChatRooms_SetClanChatRoomPrivate_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClanChatRooms_SetClanChatRoomPrivate_Response>
      _instance;
} _CClanChatRooms_SetClanChatRoomPrivate_Response_default_instance_;
class CChatMentionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatMentions>
      _instance;
} _CChatMentions_default_instance_;
class CChatRoom_IncomingChatMessage_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_IncomingChatMessage_Notification>
      _instance;
} _CChatRoom_IncomingChatMessage_Notification_default_instance_;
class CChatRoom_ChatMessageModified_Notification_ChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ChatMessageModified_Notification_ChatMessage>
      _instance;
} _CChatRoom_ChatMessageModified_Notification_ChatMessage_default_instance_;
class CChatRoom_ChatMessageModified_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ChatMessageModified_Notification>
      _instance;
} _CChatRoom_ChatMessageModified_Notification_default_instance_;
class CChatRoom_MemberStateChange_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_MemberStateChange_Notification>
      _instance;
} _CChatRoom_MemberStateChange_Notification_default_instance_;
class CChatRoom_ChatRoomHeaderState_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ChatRoomHeaderState_Notification>
      _instance;
} _CChatRoom_ChatRoomHeaderState_Notification_default_instance_;
class CChatRoom_ChatRoomGroupRoomsChange_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_ChatRoomGroupRoomsChange_Notification>
      _instance;
} _CChatRoom_ChatRoomGroupRoomsChange_Notification_default_instance_;
class CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification>
      _instance;
} _CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification_default_instance_;
class ChatRoomClient_NotifyChatGroupUserStateChanged_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomClient_NotifyChatGroupUserStateChanged_Notification>
      _instance;
} _ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_;
class CChatUsability_ClientUsabilityMetrics_Notification_SettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_ClientUsabilityMetrics_Notification_Settings>
      _instance;
} _CChatUsability_ClientUsabilityMetrics_Notification_Settings_default_instance_;
class CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings>
      _instance;
} _CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings_default_instance_;
class CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState>
      _instance;
} _CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState_default_instance_;
class CChatUsability_ClientUsabilityMetrics_Notification_UIStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_ClientUsabilityMetrics_Notification_UIState>
      _instance;
} _CChatUsability_ClientUsabilityMetrics_Notification_UIState_default_instance_;
class CChatUsability_ClientUsabilityMetrics_Notification_MetricsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_ClientUsabilityMetrics_Notification_Metrics>
      _instance;
} _CChatUsability_ClientUsabilityMetrics_Notification_Metrics_default_instance_;
class CChatUsability_ClientUsabilityMetrics_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_ClientUsabilityMetrics_Notification>
      _instance;
} _CChatUsability_ClientUsabilityMetrics_Notification_default_instance_;
class CChatUsability_RequestClientUsabilityMetrics_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CChatUsability_RequestClientUsabilityMetrics_Notification>
      _instance;
} _CChatUsability_RequestClientUsabilityMetrics_Notification_default_instance_;
namespace protobuf_steammessages_5fchat_2esteamclient_2eproto {
static void InitDefaultsCChat_RequestFriendPersonaStates_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChat_RequestFriendPersonaStates_Request_default_instance_;
    new (ptr) ::CChat_RequestFriendPersonaStates_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChat_RequestFriendPersonaStates_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChat_RequestFriendPersonaStates_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChat_RequestFriendPersonaStates_Request}, {}};

static void InitDefaultsCChat_RequestFriendPersonaStates_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChat_RequestFriendPersonaStates_Response_default_instance_;
    new (ptr) ::CChat_RequestFriendPersonaStates_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChat_RequestFriendPersonaStates_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChat_RequestFriendPersonaStates_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChat_RequestFriendPersonaStates_Response}, {}};

static void InitDefaultsCChatRoom_CreateChatRoomGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateChatRoomGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_CreateChatRoomGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateChatRoomGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_CreateChatRoomGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_CreateChatRoomGroup_Request}, {}};

static void InitDefaultsCChatRole() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRole_default_instance_;
    new (ptr) ::CChatRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRole::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRole =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRole}, {}};

static void InitDefaultsCChatRoleActions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoleActions_default_instance_;
    new (ptr) ::CChatRoleActions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoleActions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoleActions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoleActions}, {}};

static void InitDefaultsCChatPartyBeacon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatPartyBeacon_default_instance_;
    new (ptr) ::CChatPartyBeacon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatPartyBeacon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatPartyBeacon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatPartyBeacon}, {}};

static void InitDefaultsCChatRoomGroupHeaderState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoomGroupHeaderState_default_instance_;
    new (ptr) ::CChatRoomGroupHeaderState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoomGroupHeaderState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CChatRoomGroupHeaderState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCChatRoomGroupHeaderState}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRole.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatPartyBeacon.base,}};

static void InitDefaultsCChatRoomMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoomMember_default_instance_;
    new (ptr) ::CChatRoomMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoomMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoomMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoomMember}, {}};

static void InitDefaultsCChatRoomState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoomState_default_instance_;
    new (ptr) ::CChatRoomState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoomState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoomState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoomState}, {}};

static void InitDefaultsCChatRoomGroupState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoomGroupState_default_instance_;
    new (ptr) ::CChatRoomGroupState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoomGroupState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CChatRoomGroupState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCChatRoomGroupState}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupHeaderState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomMember.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomState.base,}};

static void InitDefaultsCUserChatRoomState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CUserChatRoomState_default_instance_;
    new (ptr) ::CUserChatRoomState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CUserChatRoomState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserChatRoomState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserChatRoomState}, {}};

static void InitDefaultsCUserChatRoomGroupState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CUserChatRoomGroupState_default_instance_;
    new (ptr) ::CUserChatRoomGroupState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CUserChatRoomGroupState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserChatRoomGroupState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserChatRoomGroupState}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomState.base,}};

static void InitDefaultsCChatRoom_CreateChatRoomGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateChatRoomGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_CreateChatRoomGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateChatRoomGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoom_CreateChatRoomGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCChatRoom_CreateChatRoomGroup_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base,}};

static void InitDefaultsCChatRoom_SaveChatRoomGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SaveChatRoomGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_SaveChatRoomGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SaveChatRoomGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SaveChatRoomGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SaveChatRoomGroup_Request}, {}};

static void InitDefaultsCChatRoom_SaveChatRoomGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SaveChatRoomGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_SaveChatRoomGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SaveChatRoomGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SaveChatRoomGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SaveChatRoomGroup_Response}, {}};

static void InitDefaultsCChatRoom_RenameChatRoomGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RenameChatRoomGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_RenameChatRoomGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RenameChatRoomGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RenameChatRoomGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RenameChatRoomGroup_Request}, {}};

static void InitDefaultsCChatRoom_RenameChatRoomGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RenameChatRoomGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_RenameChatRoomGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RenameChatRoomGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RenameChatRoomGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RenameChatRoomGroup_Response}, {}};

static void InitDefaultsCChatRoom_SetChatRoomGroupTagline_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetChatRoomGroupTagline_Request_default_instance_;
    new (ptr) ::CChatRoom_SetChatRoomGroupTagline_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetChatRoomGroupTagline_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetChatRoomGroupTagline_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetChatRoomGroupTagline_Request}, {}};

static void InitDefaultsCChatRoom_SetChatRoomGroupTagline_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetChatRoomGroupTagline_Response_default_instance_;
    new (ptr) ::CChatRoom_SetChatRoomGroupTagline_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetChatRoomGroupTagline_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetChatRoomGroupTagline_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetChatRoomGroupTagline_Response}, {}};

static void InitDefaultsCChatRoom_SetChatRoomGroupAvatar_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetChatRoomGroupAvatar_Request_default_instance_;
    new (ptr) ::CChatRoom_SetChatRoomGroupAvatar_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetChatRoomGroupAvatar_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetChatRoomGroupAvatar_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetChatRoomGroupAvatar_Request}, {}};

static void InitDefaultsCChatRoom_SetChatRoomGroupAvatar_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetChatRoomGroupAvatar_Response_default_instance_;
    new (ptr) ::CChatRoom_SetChatRoomGroupAvatar_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetChatRoomGroupAvatar_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetChatRoomGroupAvatar_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetChatRoomGroupAvatar_Response}, {}};

static void InitDefaultsCChatRoom_SetChatRoomGroupWatchingBroadcast_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request_default_instance_;
    new (ptr) ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetChatRoomGroupWatchingBroadcast_Request}, {}};

static void InitDefaultsCChatRoom_SetChatRoomGroupWatchingBroadcast_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response_default_instance_;
    new (ptr) ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetChatRoomGroupWatchingBroadcast_Response}, {}};

static void InitDefaultsCChatRoom_MuteUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_MuteUser_Request_default_instance_;
    new (ptr) ::CChatRoom_MuteUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_MuteUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_MuteUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_MuteUser_Request}, {}};

static void InitDefaultsCChatRoom_MuteUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_MuteUser_Response_default_instance_;
    new (ptr) ::CChatRoom_MuteUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_MuteUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_MuteUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_MuteUser_Response}, {}};

static void InitDefaultsCChatRoom_KickUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_KickUser_Request_default_instance_;
    new (ptr) ::CChatRoom_KickUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_KickUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_KickUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_KickUser_Request}, {}};

static void InitDefaultsCChatRoom_KickUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_KickUser_Response_default_instance_;
    new (ptr) ::CChatRoom_KickUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_KickUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_KickUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_KickUser_Response}, {}};

static void InitDefaultsCChatRoom_SetUserBanState_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetUserBanState_Request_default_instance_;
    new (ptr) ::CChatRoom_SetUserBanState_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetUserBanState_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserBanState_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetUserBanState_Request}, {}};

static void InitDefaultsCChatRoom_SetUserBanState_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetUserBanState_Response_default_instance_;
    new (ptr) ::CChatRoom_SetUserBanState_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetUserBanState_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserBanState_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetUserBanState_Response}, {}};

static void InitDefaultsCChatRoom_RevokeInvite_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RevokeInvite_Request_default_instance_;
    new (ptr) ::CChatRoom_RevokeInvite_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RevokeInvite_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RevokeInvite_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RevokeInvite_Request}, {}};

static void InitDefaultsCChatRoom_RevokeInvite_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RevokeInvite_Response_default_instance_;
    new (ptr) ::CChatRoom_RevokeInvite_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RevokeInvite_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RevokeInvite_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RevokeInvite_Response}, {}};

static void InitDefaultsCChatRoom_CreateRole_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateRole_Request_default_instance_;
    new (ptr) ::CChatRoom_CreateRole_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateRole_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_CreateRole_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_CreateRole_Request}, {}};

static void InitDefaultsCChatRoom_CreateRole_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateRole_Response_default_instance_;
    new (ptr) ::CChatRoom_CreateRole_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateRole_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_CreateRole_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_CreateRole_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base,}};

static void InitDefaultsCChatRoom_GetRoles_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetRoles_Request_default_instance_;
    new (ptr) ::CChatRoom_GetRoles_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetRoles_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetRoles_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetRoles_Request}, {}};

static void InitDefaultsCChatRoom_GetRoles_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetRoles_Response_default_instance_;
    new (ptr) ::CChatRoom_GetRoles_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetRoles_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetRoles_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetRoles_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRole.base,}};

static void InitDefaultsCChatRoom_RenameRole_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RenameRole_Request_default_instance_;
    new (ptr) ::CChatRoom_RenameRole_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RenameRole_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RenameRole_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RenameRole_Request}, {}};

static void InitDefaultsCChatRoom_RenameRole_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RenameRole_Response_default_instance_;
    new (ptr) ::CChatRoom_RenameRole_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RenameRole_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RenameRole_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RenameRole_Response}, {}};

static void InitDefaultsCChatRoom_ReorderRole_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ReorderRole_Request_default_instance_;
    new (ptr) ::CChatRoom_ReorderRole_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ReorderRole_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ReorderRole_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_ReorderRole_Request}, {}};

static void InitDefaultsCChatRoom_ReorderRole_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ReorderRole_Response_default_instance_;
    new (ptr) ::CChatRoom_ReorderRole_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ReorderRole_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ReorderRole_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_ReorderRole_Response}, {}};

static void InitDefaultsCChatRoom_DeleteRole_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteRole_Request_default_instance_;
    new (ptr) ::CChatRoom_DeleteRole_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteRole_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteRole_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteRole_Request}, {}};

static void InitDefaultsCChatRoom_DeleteRole_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteRole_Response_default_instance_;
    new (ptr) ::CChatRoom_DeleteRole_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteRole_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteRole_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteRole_Response}, {}};

static void InitDefaultsCChatRoom_GetRoleActions_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetRoleActions_Request_default_instance_;
    new (ptr) ::CChatRoom_GetRoleActions_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetRoleActions_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetRoleActions_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetRoleActions_Request}, {}};

static void InitDefaultsCChatRoom_GetRoleActions_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetRoleActions_Response_default_instance_;
    new (ptr) ::CChatRoom_GetRoleActions_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetRoleActions_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetRoleActions_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetRoleActions_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base,}};

static void InitDefaultsCChatRoom_ReplaceRoleActions_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ReplaceRoleActions_Request_default_instance_;
    new (ptr) ::CChatRoom_ReplaceRoleActions_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ReplaceRoleActions_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_ReplaceRoleActions_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_ReplaceRoleActions_Request}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base,}};

static void InitDefaultsCChatRoom_ReplaceRoleActions_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ReplaceRoleActions_Response_default_instance_;
    new (ptr) ::CChatRoom_ReplaceRoleActions_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ReplaceRoleActions_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ReplaceRoleActions_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_ReplaceRoleActions_Response}, {}};

static void InitDefaultsCChatRoom_AddRoleToUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_AddRoleToUser_Request_default_instance_;
    new (ptr) ::CChatRoom_AddRoleToUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_AddRoleToUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_AddRoleToUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_AddRoleToUser_Request}, {}};

static void InitDefaultsCChatRoom_AddRoleToUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_AddRoleToUser_Response_default_instance_;
    new (ptr) ::CChatRoom_AddRoleToUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_AddRoleToUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_AddRoleToUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_AddRoleToUser_Response}, {}};

static void InitDefaultsCChatRoom_GetRolesForUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetRolesForUser_Request_default_instance_;
    new (ptr) ::CChatRoom_GetRolesForUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetRolesForUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetRolesForUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetRolesForUser_Request}, {}};

static void InitDefaultsCChatRoom_GetRolesForUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetRolesForUser_Response_default_instance_;
    new (ptr) ::CChatRoom_GetRolesForUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetRolesForUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetRolesForUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetRolesForUser_Response}, {}};

static void InitDefaultsCChatRoom_DeleteRoleFromUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteRoleFromUser_Request_default_instance_;
    new (ptr) ::CChatRoom_DeleteRoleFromUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteRoleFromUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteRoleFromUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteRoleFromUser_Request}, {}};

static void InitDefaultsCChatRoom_DeleteRoleFromUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteRoleFromUser_Response_default_instance_;
    new (ptr) ::CChatRoom_DeleteRoleFromUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteRoleFromUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteRoleFromUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteRoleFromUser_Response}, {}};

static void InitDefaultsCChatRoom_JoinChatRoomGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_JoinChatRoomGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_JoinChatRoomGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_JoinChatRoomGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_JoinChatRoomGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_JoinChatRoomGroup_Request}, {}};

static void InitDefaultsCChatRoom_JoinChatRoomGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_JoinChatRoomGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_JoinChatRoomGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_JoinChatRoomGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoom_JoinChatRoomGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCChatRoom_JoinChatRoomGroup_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base,}};

static void InitDefaultsCChatRoom_InviteFriendToChatRoomGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_InviteFriendToChatRoomGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_InviteFriendToChatRoomGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_InviteFriendToChatRoomGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_InviteFriendToChatRoomGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_InviteFriendToChatRoomGroup_Request}, {}};

static void InitDefaultsCChatRoom_InviteFriendToChatRoomGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_InviteFriendToChatRoomGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_InviteFriendToChatRoomGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_InviteFriendToChatRoomGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_InviteFriendToChatRoomGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_InviteFriendToChatRoomGroup_Response}, {}};

static void InitDefaultsCChatRoom_LeaveChatRoomGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_LeaveChatRoomGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_LeaveChatRoomGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_LeaveChatRoomGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_LeaveChatRoomGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_LeaveChatRoomGroup_Request}, {}};

static void InitDefaultsCChatRoom_LeaveChatRoomGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_LeaveChatRoomGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_LeaveChatRoomGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_LeaveChatRoomGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_LeaveChatRoomGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_LeaveChatRoomGroup_Response}, {}};

static void InitDefaultsCChatRoom_CreateChatRoom_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateChatRoom_Request_default_instance_;
    new (ptr) ::CChatRoom_CreateChatRoom_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateChatRoom_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_CreateChatRoom_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_CreateChatRoom_Request}, {}};

static void InitDefaultsCChatRoom_CreateChatRoom_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateChatRoom_Response_default_instance_;
    new (ptr) ::CChatRoom_CreateChatRoom_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateChatRoom_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_CreateChatRoom_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_CreateChatRoom_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomState.base,}};

static void InitDefaultsCChatRoom_DeleteChatRoom_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteChatRoom_Request_default_instance_;
    new (ptr) ::CChatRoom_DeleteChatRoom_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteChatRoom_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteChatRoom_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteChatRoom_Request}, {}};

static void InitDefaultsCChatRoom_DeleteChatRoom_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteChatRoom_Response_default_instance_;
    new (ptr) ::CChatRoom_DeleteChatRoom_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteChatRoom_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteChatRoom_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteChatRoom_Response}, {}};

static void InitDefaultsCChatRoom_RenameChatRoom_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RenameChatRoom_Request_default_instance_;
    new (ptr) ::CChatRoom_RenameChatRoom_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RenameChatRoom_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RenameChatRoom_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RenameChatRoom_Request}, {}};

static void InitDefaultsCChatRoom_RenameChatRoom_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_RenameChatRoom_Response_default_instance_;
    new (ptr) ::CChatRoom_RenameChatRoom_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_RenameChatRoom_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_RenameChatRoom_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_RenameChatRoom_Response}, {}};

static void InitDefaultsCChatRoom_ReorderChatRoom_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ReorderChatRoom_Request_default_instance_;
    new (ptr) ::CChatRoom_ReorderChatRoom_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ReorderChatRoom_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ReorderChatRoom_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_ReorderChatRoom_Request}, {}};

static void InitDefaultsCChatRoom_ReorderChatRoom_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ReorderChatRoom_Response_default_instance_;
    new (ptr) ::CChatRoom_ReorderChatRoom_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ReorderChatRoom_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ReorderChatRoom_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_ReorderChatRoom_Response}, {}};

static void InitDefaultsCChatRoom_SendChatMessage_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SendChatMessage_Request_default_instance_;
    new (ptr) ::CChatRoom_SendChatMessage_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SendChatMessage_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SendChatMessage_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SendChatMessage_Request}, {}};

static void InitDefaultsCChatRoom_SendChatMessage_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SendChatMessage_Response_default_instance_;
    new (ptr) ::CChatRoom_SendChatMessage_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SendChatMessage_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SendChatMessage_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SendChatMessage_Response}, {}};

static void InitDefaultsCChatRoom_JoinVoiceChat_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_JoinVoiceChat_Request_default_instance_;
    new (ptr) ::CChatRoom_JoinVoiceChat_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_JoinVoiceChat_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_JoinVoiceChat_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_JoinVoiceChat_Request}, {}};

static void InitDefaultsCChatRoom_JoinVoiceChat_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_JoinVoiceChat_Response_default_instance_;
    new (ptr) ::CChatRoom_JoinVoiceChat_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_JoinVoiceChat_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_JoinVoiceChat_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_JoinVoiceChat_Response}, {}};

static void InitDefaultsCChatRoom_LeaveVoiceChat_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_LeaveVoiceChat_Request_default_instance_;
    new (ptr) ::CChatRoom_LeaveVoiceChat_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_LeaveVoiceChat_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_LeaveVoiceChat_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_LeaveVoiceChat_Request}, {}};

static void InitDefaultsCChatRoom_LeaveVoiceChat_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_LeaveVoiceChat_Response_default_instance_;
    new (ptr) ::CChatRoom_LeaveVoiceChat_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_LeaveVoiceChat_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_LeaveVoiceChat_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_LeaveVoiceChat_Response}, {}};

static void InitDefaultsCChatRoom_GetMessageHistory_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetMessageHistory_Request_default_instance_;
    new (ptr) ::CChatRoom_GetMessageHistory_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetMessageHistory_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetMessageHistory_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetMessageHistory_Request}, {}};

static void InitDefaultsServerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerMessage_default_instance_;
    new (ptr) ::ServerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerMessage}, {}};

static void InitDefaultsCChatRoom_GetMessageHistory_Response_ChatMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetMessageHistory_Response_ChatMessage_default_instance_;
    new (ptr) ::CChatRoom_GetMessageHistory_Response_ChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetMessageHistory_Response_ChatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetMessageHistory_Response_ChatMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetMessageHistory_Response_ChatMessage}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_ServerMessage.base,}};

static void InitDefaultsCChatRoom_GetMessageHistory_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetMessageHistory_Response_default_instance_;
    new (ptr) ::CChatRoom_GetMessageHistory_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetMessageHistory_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetMessageHistory_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetMessageHistory_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Response_ChatMessage.base,}};

static void InitDefaultsCChatRoom_GetMyChatRoomGroups_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetMyChatRoomGroups_Request_default_instance_;
    new (ptr) ::CChatRoom_GetMyChatRoomGroups_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetMyChatRoomGroups_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetMyChatRoomGroups_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetMyChatRoomGroups_Request}, {}};

static void InitDefaultsCChatRoom_GetChatRoomGroupSummary_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetChatRoomGroupSummary_Response_default_instance_;
    new (ptr) ::CChatRoom_GetChatRoomGroupSummary_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetChatRoomGroupSummary_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CChatRoom_GetChatRoomGroupSummary_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCChatRoom_GetChatRoomGroupSummary_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatPartyBeacon.base,}};

static void InitDefaultsCChatRoomSummaryPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoomSummaryPair_default_instance_;
    new (ptr) ::CChatRoomSummaryPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoomSummaryPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoomSummaryPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCChatRoomSummaryPair}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base,}};

static void InitDefaultsCChatRoom_GetMyChatRoomGroups_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetMyChatRoomGroups_Response_default_instance_;
    new (ptr) ::CChatRoom_GetMyChatRoomGroups_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetMyChatRoomGroups_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetMyChatRoomGroups_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetMyChatRoomGroups_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomSummaryPair.base,}};

static void InitDefaultsCChatRoom_GetChatRoomGroupState_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetChatRoomGroupState_Request_default_instance_;
    new (ptr) ::CChatRoom_GetChatRoomGroupState_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetChatRoomGroupState_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetChatRoomGroupState_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetChatRoomGroupState_Request}, {}};

static void InitDefaultsCChatRoom_GetChatRoomGroupState_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetChatRoomGroupState_Response_default_instance_;
    new (ptr) ::CChatRoom_GetChatRoomGroupState_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetChatRoomGroupState_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetChatRoomGroupState_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetChatRoomGroupState_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupState.base,}};

static void InitDefaultsCChatRoom_GetChatRoomGroupSummary_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetChatRoomGroupSummary_Request_default_instance_;
    new (ptr) ::CChatRoom_GetChatRoomGroupSummary_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetChatRoomGroupSummary_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetChatRoomGroupSummary_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetChatRoomGroupSummary_Request}, {}};

static void InitDefaultsCChatRoom_AckChatMessage_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_AckChatMessage_Notification_default_instance_;
    new (ptr) ::CChatRoom_AckChatMessage_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_AckChatMessage_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_AckChatMessage_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_AckChatMessage_Notification}, {}};

static void InitDefaultsCChatRoom_CreateInviteLink_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateInviteLink_Request_default_instance_;
    new (ptr) ::CChatRoom_CreateInviteLink_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateInviteLink_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_CreateInviteLink_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_CreateInviteLink_Request}, {}};

static void InitDefaultsCChatRoom_CreateInviteLink_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_CreateInviteLink_Response_default_instance_;
    new (ptr) ::CChatRoom_CreateInviteLink_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_CreateInviteLink_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_CreateInviteLink_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_CreateInviteLink_Response}, {}};

static void InitDefaultsCChatRoom_GetInviteLinkInfo_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteLinkInfo_Request_default_instance_;
    new (ptr) ::CChatRoom_GetInviteLinkInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteLinkInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetInviteLinkInfo_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetInviteLinkInfo_Request}, {}};

static void InitDefaultsCChatRoom_GetInviteLinkInfo_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteLinkInfo_Response_default_instance_;
    new (ptr) ::CChatRoom_GetInviteLinkInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteLinkInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoom_GetInviteLinkInfo_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCChatRoom_GetInviteLinkInfo_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base,}};

static void InitDefaultsCChatRoom_GetInviteInfo_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteInfo_Request_default_instance_;
    new (ptr) ::CChatRoom_GetInviteInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetInviteInfo_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetInviteInfo_Request}, {}};

static void InitDefaultsCChatRoom_GetInviteInfo_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteInfo_Response_default_instance_;
    new (ptr) ::CChatRoom_GetInviteInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetInviteInfo_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetInviteInfo_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base,}};

static void InitDefaultsCChatRoom_GetInviteLinksForGroup_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteLinksForGroup_Request_default_instance_;
    new (ptr) ::CChatRoom_GetInviteLinksForGroup_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteLinksForGroup_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetInviteLinksForGroup_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetInviteLinksForGroup_Request}, {}};

static void InitDefaultsCChatRoom_GetInviteLinksForGroup_Response_LinkInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo_default_instance_;
    new (ptr) ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetInviteLinksForGroup_Response_LinkInfo}, {}};

static void InitDefaultsCChatRoom_GetInviteLinksForGroup_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteLinksForGroup_Response_default_instance_;
    new (ptr) ::CChatRoom_GetInviteLinksForGroup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteLinksForGroup_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetInviteLinksForGroup_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetInviteLinksForGroup_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo.base,}};

static void InitDefaultsCChatRoom_GetBanList_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetBanList_Request_default_instance_;
    new (ptr) ::CChatRoom_GetBanList_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetBanList_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetBanList_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetBanList_Request}, {}};

static void InitDefaultsCChatRoom_GetBanList_Response_BanInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetBanList_Response_BanInfo_default_instance_;
    new (ptr) ::CChatRoom_GetBanList_Response_BanInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetBanList_Response_BanInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetBanList_Response_BanInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetBanList_Response_BanInfo}, {}};

static void InitDefaultsCChatRoom_GetBanList_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetBanList_Response_default_instance_;
    new (ptr) ::CChatRoom_GetBanList_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetBanList_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetBanList_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetBanList_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Response_BanInfo.base,}};

static void InitDefaultsCChatRoom_GetInviteList_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteList_Request_default_instance_;
    new (ptr) ::CChatRoom_GetInviteList_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteList_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_GetInviteList_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_GetInviteList_Request}, {}};

static void InitDefaultsCChatRoomGroupInvite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoomGroupInvite_default_instance_;
    new (ptr) ::CChatRoomGroupInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoomGroupInvite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoomGroupInvite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoomGroupInvite}, {}};

static void InitDefaultsCChatRoom_GetInviteList_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_GetInviteList_Response_default_instance_;
    new (ptr) ::CChatRoom_GetInviteList_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_GetInviteList_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_GetInviteList_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_GetInviteList_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupInvite.base,}};

static void InitDefaultsCChatRoom_DeleteInviteLink_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteInviteLink_Request_default_instance_;
    new (ptr) ::CChatRoom_DeleteInviteLink_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteInviteLink_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteInviteLink_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteInviteLink_Request}, {}};

static void InitDefaultsCChatRoom_DeleteInviteLink_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteInviteLink_Response_default_instance_;
    new (ptr) ::CChatRoom_DeleteInviteLink_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteInviteLink_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteInviteLink_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteInviteLink_Response}, {}};

static void InitDefaultsCChatRoom_SetSessionActiveChatRoomGroups_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetSessionActiveChatRoomGroups_Request_default_instance_;
    new (ptr) ::CChatRoom_SetSessionActiveChatRoomGroups_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetSessionActiveChatRoomGroups_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetSessionActiveChatRoomGroups_Request}, {}};

static void InitDefaultsCChatRoom_SetSessionActiveChatRoomGroups_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetSessionActiveChatRoomGroups_Response_default_instance_;
    new (ptr) ::CChatRoom_SetSessionActiveChatRoomGroups_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetSessionActiveChatRoomGroups_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_SetSessionActiveChatRoomGroups_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupState.base,}};

static void InitDefaultsCChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_default_instance_;
    new (ptr) ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences}, {}};

static void InitDefaultsCChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_default_instance_;
    new (ptr) ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences}, {}};

static void InitDefaultsCChatRoom_SetUserChatGroupPreferences_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetUserChatGroupPreferences_Request_default_instance_;
    new (ptr) ::CChatRoom_SetUserChatGroupPreferences_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetUserChatGroupPreferences_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoom_SetUserChatGroupPreferences_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCChatRoom_SetUserChatGroupPreferences_Request}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences.base,}};

static void InitDefaultsCChatRoom_SetUserChatGroupPreferences_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_SetUserChatGroupPreferences_Response_default_instance_;
    new (ptr) ::CChatRoom_SetUserChatGroupPreferences_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_SetUserChatGroupPreferences_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_SetUserChatGroupPreferences_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_SetUserChatGroupPreferences_Response}, {}};

static void InitDefaultsCChatRoom_DeleteChatMessages_Request_Message() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteChatMessages_Request_Message_default_instance_;
    new (ptr) ::CChatRoom_DeleteChatMessages_Request_Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteChatMessages_Request_Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteChatMessages_Request_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteChatMessages_Request_Message}, {}};

static void InitDefaultsCChatRoom_DeleteChatMessages_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteChatMessages_Request_default_instance_;
    new (ptr) ::CChatRoom_DeleteChatMessages_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteChatMessages_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_DeleteChatMessages_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_DeleteChatMessages_Request}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Request_Message.base,}};

static void InitDefaultsCChatRoom_DeleteChatMessages_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_DeleteChatMessages_Response_default_instance_;
    new (ptr) ::CChatRoom_DeleteChatMessages_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_DeleteChatMessages_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_DeleteChatMessages_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_DeleteChatMessages_Response}, {}};

static void InitDefaultsCClanChatRooms_GetClanChatRoomInfo_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClanChatRooms_GetClanChatRoomInfo_Request_default_instance_;
    new (ptr) ::CClanChatRooms_GetClanChatRoomInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClanChatRooms_GetClanChatRoomInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClanChatRooms_GetClanChatRoomInfo_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClanChatRooms_GetClanChatRoomInfo_Request}, {}};

static void InitDefaultsCClanChatRooms_GetClanChatRoomInfo_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClanChatRooms_GetClanChatRoomInfo_Response_default_instance_;
    new (ptr) ::CClanChatRooms_GetClanChatRoomInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClanChatRooms_GetClanChatRoomInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CClanChatRooms_GetClanChatRoomInfo_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCClanChatRooms_GetClanChatRoomInfo_Response}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base,}};

static void InitDefaultsCClanChatRooms_SetClanChatRoomPrivate_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClanChatRooms_SetClanChatRoomPrivate_Request_default_instance_;
    new (ptr) ::CClanChatRooms_SetClanChatRoomPrivate_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClanChatRooms_SetClanChatRoomPrivate_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClanChatRooms_SetClanChatRoomPrivate_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClanChatRooms_SetClanChatRoomPrivate_Request}, {}};

static void InitDefaultsCClanChatRooms_SetClanChatRoomPrivate_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClanChatRooms_SetClanChatRoomPrivate_Response_default_instance_;
    new (ptr) ::CClanChatRooms_SetClanChatRoomPrivate_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClanChatRooms_SetClanChatRoomPrivate_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClanChatRooms_SetClanChatRoomPrivate_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClanChatRooms_SetClanChatRoomPrivate_Response}, {}};

static void InitDefaultsCChatMentions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatMentions_default_instance_;
    new (ptr) ::CChatMentions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatMentions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatMentions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatMentions}, {}};

static void InitDefaultsCChatRoom_IncomingChatMessage_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_IncomingChatMessage_Notification_default_instance_;
    new (ptr) ::CChatRoom_IncomingChatMessage_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_IncomingChatMessage_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CChatRoom_IncomingChatMessage_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCChatRoom_IncomingChatMessage_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatMentions.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_ServerMessage.base,}};

static void InitDefaultsCChatRoom_ChatMessageModified_Notification_ChatMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ChatMessageModified_Notification_ChatMessage_default_instance_;
    new (ptr) ::CChatRoom_ChatMessageModified_Notification_ChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ChatMessageModified_Notification_ChatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_ChatMessageModified_Notification_ChatMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_ChatMessageModified_Notification_ChatMessage}, {}};

static void InitDefaultsCChatRoom_ChatMessageModified_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ChatMessageModified_Notification_default_instance_;
    new (ptr) ::CChatRoom_ChatMessageModified_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ChatMessageModified_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_ChatMessageModified_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_ChatMessageModified_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatMessageModified_Notification_ChatMessage.base,}};

static void InitDefaultsCChatRoom_MemberStateChange_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_MemberStateChange_Notification_default_instance_;
    new (ptr) ::CChatRoom_MemberStateChange_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_MemberStateChange_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_MemberStateChange_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_MemberStateChange_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomMember.base,}};

static void InitDefaultsCChatRoom_ChatRoomHeaderState_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ChatRoomHeaderState_Notification_default_instance_;
    new (ptr) ::CChatRoom_ChatRoomHeaderState_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ChatRoomHeaderState_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_ChatRoomHeaderState_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_ChatRoomHeaderState_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupHeaderState.base,}};

static void InitDefaultsCChatRoom_ChatRoomGroupRoomsChange_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_ChatRoomGroupRoomsChange_Notification_default_instance_;
    new (ptr) ::CChatRoom_ChatRoomGroupRoomsChange_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_ChatRoomGroupRoomsChange_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatRoom_ChatRoomGroupRoomsChange_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatRoom_ChatRoomGroupRoomsChange_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomState.base,}};

static void InitDefaultsCChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification_default_instance_;
    new (ptr) ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification}, {}};

static void InitDefaultsChatRoomClient_NotifyChatGroupUserStateChanged_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_;
    new (ptr) ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChatRoomClient_NotifyChatGroupUserStateChanged_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base,}};

static void InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_Settings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_ClientUsabilityMetrics_Notification_Settings_default_instance_;
    new (ptr) ::CChatUsability_ClientUsabilityMetrics_Notification_Settings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_ClientUsabilityMetrics_Notification_Settings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Settings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_Settings}, {}};

static void InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings_default_instance_;
    new (ptr) ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings}, {}};

static void InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState_default_instance_;
    new (ptr) ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState}, {}};

static void InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_UIState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_default_instance_;
    new (ptr) ::CChatUsability_ClientUsabilityMetrics_Notification_UIState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_ClientUsabilityMetrics_Notification_UIState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_UIState}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState.base,}};

static void InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_Metrics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_ClientUsabilityMetrics_Notification_Metrics_default_instance_;
    new (ptr) ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Metrics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification_Metrics}, {}};

static void InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_;
    new (ptr) ::CChatUsability_ClientUsabilityMetrics_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_ClientUsabilityMetrics_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CChatUsability_ClientUsabilityMetrics_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCChatUsability_ClientUsabilityMetrics_Notification}, {
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Settings.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState.base,
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Metrics.base,}};

static void InitDefaultsCChatUsability_RequestClientUsabilityMetrics_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CChatUsability_RequestClientUsabilityMetrics_Notification_default_instance_;
    new (ptr) ::CChatUsability_RequestClientUsabilityMetrics_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CChatUsability_RequestClientUsabilityMetrics_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CChatUsability_RequestClientUsabilityMetrics_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCChatUsability_RequestClientUsabilityMetrics_Notification}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CChat_RequestFriendPersonaStates_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChat_RequestFriendPersonaStates_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateChatRoomGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRole.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoleActions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatPartyBeacon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoomGroupHeaderState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoomMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoomState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoomGroupState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserChatRoomState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserChatRoomGroupState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateChatRoomGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SaveChatRoomGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SaveChatRoomGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RenameChatRoomGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RenameChatRoomGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetChatRoomGroupTagline_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetChatRoomGroupTagline_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetChatRoomGroupAvatar_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetChatRoomGroupAvatar_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_MuteUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_MuteUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_KickUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_KickUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetUserBanState_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetUserBanState_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RevokeInvite_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RevokeInvite_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateRole_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateRole_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetRoles_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetRoles_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RenameRole_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RenameRole_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ReorderRole_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ReorderRole_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteRole_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteRole_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetRoleActions_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetRoleActions_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ReplaceRoleActions_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ReplaceRoleActions_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_AddRoleToUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_AddRoleToUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetRolesForUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetRolesForUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteRoleFromUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteRoleFromUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_JoinChatRoomGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_JoinChatRoomGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_InviteFriendToChatRoomGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_InviteFriendToChatRoomGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_LeaveChatRoomGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_LeaveChatRoomGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateChatRoom_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateChatRoom_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteChatRoom_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteChatRoom_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RenameChatRoom_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_RenameChatRoom_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ReorderChatRoom_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ReorderChatRoom_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SendChatMessage_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SendChatMessage_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_JoinVoiceChat_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_JoinVoiceChat_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_LeaveVoiceChat_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_LeaveVoiceChat_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetMessageHistory_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetMessageHistory_Response_ChatMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetMessageHistory_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetMyChatRoomGroups_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoomSummaryPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetMyChatRoomGroups_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetChatRoomGroupState_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetChatRoomGroupState_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetChatRoomGroupSummary_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_AckChatMessage_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateInviteLink_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_CreateInviteLink_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteLinkInfo_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteLinkInfo_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteInfo_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteInfo_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteLinksForGroup_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteLinksForGroup_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetBanList_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetBanList_Response_BanInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetBanList_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteList_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoomGroupInvite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_GetInviteList_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteInviteLink_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteInviteLink_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetUserChatGroupPreferences_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_SetUserChatGroupPreferences_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteChatMessages_Request_Message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteChatMessages_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_DeleteChatMessages_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClanChatRooms_GetClanChatRoomInfo_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClanChatRooms_GetClanChatRoomInfo_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClanChatRooms_SetClanChatRoomPrivate_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClanChatRooms_SetClanChatRoomPrivate_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatMentions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_IncomingChatMessage_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ChatMessageModified_Notification_ChatMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ChatMessageModified_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_MemberStateChange_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ChatRoomHeaderState_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_ChatRoomGroupRoomsChange_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Settings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Metrics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_ClientUsabilityMetrics_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CChatUsability_RequestClientUsabilityMetrics_Notification.base);
}

::google::protobuf::Metadata file_level_metadata[129];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChat_RequestFriendPersonaStates_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChat_RequestFriendPersonaStates_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChat_RequestFriendPersonaStates_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChat_RequestFriendPersonaStates_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, steamid_partner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, steamid_invited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, steamid_invitees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, watching_broadcast_accountid_),
  1,
  2,
  0,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRole, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRole, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRole, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRole, ordinal_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_create_rename_delete_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_kick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_ban_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_invite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_change_tagline_avatar_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_view_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_change_group_roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_change_user_roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_mention_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoleActions, can_set_watching_broadcast_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatPartyBeacon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatPartyBeacon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatPartyBeacon, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatPartyBeacon, steamid_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatPartyBeacon, beacon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatPartyBeacon, game_metadata_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, chat_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, clanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, accountid_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, tagline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, avatar_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, default_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, role_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, watching_broadcast_accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupHeaderState, party_beacons_),
  3,
  0,
  4,
  5,
  8,
  1,
  2,
  6,
  ~0u,
  ~0u,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, time_kick_expire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomMember, role_ids_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, chat_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, voice_allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, members_in_voice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, time_last_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomState, sort_order_),
  1,
  0,
  2,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, header_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, default_chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, chat_rooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupState, kicked_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, time_joined_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, time_last_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, desktop_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, mobile_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, time_last_mention_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomState, unread_indicator_muted_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, time_joined_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, user_chat_room_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, desktop_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, mobile_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, time_last_group_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CUserChatRoomGroupState, unread_indicator_muted_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, user_chat_state_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Response, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, tagline_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, avatar_sha_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, watching_broadcast_accountid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Request, expiration_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MuteUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Request, expiration_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_KickUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, ban_state_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserBanState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, steamid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RevokeInvite_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RevokeInvite_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Request, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateRole_Response, actions_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoles_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoles_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoles_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoles_Response, roles_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Request, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Request, name_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, ordinal_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, role_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRole_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, role_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRoleActions_Response, actions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, actions_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, steamid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, steamid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Response, role_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, steamid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, invite_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, chat_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, user_chat_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, join_chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, time_expire_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, skip_friendsui_check_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, allow_voice_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Response, chat_room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, chat_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, name_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, move_after_chat_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, message_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, modified_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, server_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, ordinal_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, chat_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Response, voice_chatid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, chat_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, last_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, last_ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, start_ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, max_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, string_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, accountid_param_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, server_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, server_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, deleted_),
  2,
  3,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, more_available_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, active_member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, active_voice_member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, default_chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_rooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, clanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_tagline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, accountid_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, top_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_avatar_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, default_role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, role_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, role_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, watching_broadcast_accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, party_beacons_),
  3,
  0,
  4,
  5,
  6,
  ~0u,
  7,
  1,
  8,
  ~0u,
  2,
  10,
  9,
  ~0u,
  ~0u,
  11,
  12,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomSummaryPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomSummaryPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomSummaryPair, user_chat_group_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomSummaryPair, group_summary_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Response, chat_room_groups_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Response, state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, seconds_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, chat_id_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, invite_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, seconds_valid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Request, invite_code_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, steamid_sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, time_expires_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, group_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, user_chat_group_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, time_kick_expire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, banned_),
  2,
  4,
  3,
  0,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, steamid_invitee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, invite_code_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, group_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, time_kick_expire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, banned_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, invite_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, steamid_creator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, time_expires_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, chat_id_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response, invite_links_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, accountid_actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, time_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, ban_reason_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetBanList_Response, bans_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteList_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteList_Request, chat_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupInvite, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupInvite, accountid_actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoomGroupInvite, time_invited_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteList_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_GetInviteList_Response, invites_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, invite_code_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, chat_group_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, chat_groups_data_requested_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Response, chat_states_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, desktop_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, mobile_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, unread_indicator_muted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, desktop_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, mobile_notification_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, unread_indicator_muted_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, chat_group_preferences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, chat_room_preferences_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, server_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, ordinal_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, messages_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, autocreate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Response, chat_group_summary_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, chat_room_private_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Response, chat_room_private_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatMentions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatMentions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatMentions, mention_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatMentions, mention_here_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatMentions, mention_accountids_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, steamid_sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, mentions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, server_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, message_no_bbcode_),
  4,
  5,
  6,
  0,
  7,
  2,
  8,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, server_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, deleted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, messages_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, change_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomHeaderState_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomHeaderState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomHeaderState_Notification, header_state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, default_chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, chat_rooms_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, chat_group_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, chat_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, user_chat_group_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, group_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, user_action_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_ingame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_events_and_announcements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_ingame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_events_and_announcements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, always_new_chat_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, force_alphabetic_friend_sorting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, chat_flash_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, remember_open_chats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, compact_quick_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, compact_friends_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_chat_room_notification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_chat_room_notification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, hide_offline_friends_in_tag_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, hide_categorized_friends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, categorize_in_game_friends_by_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, chat_font_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, use24hour_clock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, do_not_disturb_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, disable_embed_inlining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sign_into_friends_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  8,
  11,
  12,
  13,
  14,
  15,
  16,
  18,
  19,
  17,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_input_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_output_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, noise_gate_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_use_echo_cancellation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_use_noise_cancellation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_use_auto_gain_control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, selected_non_default_mic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, selected_non_default_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, push_to_talk_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, push_to_mute_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, play_ptt_sounds_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, in_game_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, online_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, offline_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, game_groups_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, categories_collapsed_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_docked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_group_chats_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, chat_popups_opened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, group_chat_tabs_opened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friend_chat_tabs_opened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, chat_window_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, chat_window_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, category_collapse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, group_chat_left_col_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, group_chat_right_col_collapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, in_one_on_one_voice_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, in_group_voice_chat_),
  1,
  2,
  5,
  6,
  3,
  7,
  4,
  9,
  10,
  11,
  12,
  0,
  13,
  14,
  8,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_category_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_categorized_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_online_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_in_game_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_in_game_singleton_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, game_group_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_favorite_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, group_chat_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, group_chat_favorite_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, metrics_run_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, client_build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, metrics_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, in_web_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, voice_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, ui_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, metrics_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_RequestClientUsabilityMetrics_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_RequestClientUsabilityMetrics_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CChatUsability_RequestClientUsabilityMetrics_Notification, metrics_run_id_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::CChat_RequestFriendPersonaStates_Request)},
  { 5, 10, sizeof(::CChat_RequestFriendPersonaStates_Response)},
  { 10, 20, sizeof(::CChatRoom_CreateChatRoomGroup_Request)},
  { 25, 33, sizeof(::CChatRole)},
  { 36, 53, sizeof(::CChatRoleActions)},
  { 65, 74, sizeof(::CChatPartyBeacon)},
  { 78, 95, sizeof(::CChatRoomGroupHeaderState)},
  { 107, 117, sizeof(::CChatRoomMember)},
  { 122, 133, sizeof(::CChatRoomState)},
  { 139, 149, sizeof(::CChatRoomGroupState)},
  { 154, 166, sizeof(::CUserChatRoomState)},
  { 173, 185, sizeof(::CUserChatRoomGroupState)},
  { 192, 200, sizeof(::CChatRoom_CreateChatRoomGroup_Response)},
  { 203, 210, sizeof(::CChatRoom_SaveChatRoomGroup_Request)},
  { 212, 217, sizeof(::CChatRoom_SaveChatRoomGroup_Response)},
  { 217, 224, sizeof(::CChatRoom_RenameChatRoomGroup_Request)},
  { 226, 232, sizeof(::CChatRoom_RenameChatRoomGroup_Response)},
  { 233, 240, sizeof(::CChatRoom_SetChatRoomGroupTagline_Request)},
  { 242, 247, sizeof(::CChatRoom_SetChatRoomGroupTagline_Response)},
  { 247, 254, sizeof(::CChatRoom_SetChatRoomGroupAvatar_Request)},
  { 256, 261, sizeof(::CChatRoom_SetChatRoomGroupAvatar_Response)},
  { 261, 268, sizeof(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)},
  { 270, 275, sizeof(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)},
  { 275, 283, sizeof(::CChatRoom_MuteUser_Request)},
  { 286, 291, sizeof(::CChatRoom_MuteUser_Response)},
  { 291, 299, sizeof(::CChatRoom_KickUser_Request)},
  { 302, 307, sizeof(::CChatRoom_KickUser_Response)},
  { 307, 315, sizeof(::CChatRoom_SetUserBanState_Request)},
  { 318, 323, sizeof(::CChatRoom_SetUserBanState_Response)},
  { 323, 330, sizeof(::CChatRoom_RevokeInvite_Request)},
  { 332, 337, sizeof(::CChatRoom_RevokeInvite_Response)},
  { 337, 344, sizeof(::CChatRoom_CreateRole_Request)},
  { 346, 352, sizeof(::CChatRoom_CreateRole_Response)},
  { 353, 359, sizeof(::CChatRoom_GetRoles_Request)},
  { 360, 366, sizeof(::CChatRoom_GetRoles_Response)},
  { 367, 375, sizeof(::CChatRoom_RenameRole_Request)},
  { 378, 383, sizeof(::CChatRoom_RenameRole_Response)},
  { 383, 391, sizeof(::CChatRoom_ReorderRole_Request)},
  { 394, 399, sizeof(::CChatRoom_ReorderRole_Response)},
  { 399, 406, sizeof(::CChatRoom_DeleteRole_Request)},
  { 408, 413, sizeof(::CChatRoom_DeleteRole_Response)},
  { 413, 420, sizeof(::CChatRoom_GetRoleActions_Request)},
  { 422, 428, sizeof(::CChatRoom_GetRoleActions_Response)},
  { 429, 437, sizeof(::CChatRoom_ReplaceRoleActions_Request)},
  { 440, 445, sizeof(::CChatRoom_ReplaceRoleActions_Response)},
  { 445, 453, sizeof(::CChatRoom_AddRoleToUser_Request)},
  { 456, 461, sizeof(::CChatRoom_AddRoleToUser_Response)},
  { 461, 468, sizeof(::CChatRoom_GetRolesForUser_Request)},
  { 470, 476, sizeof(::CChatRoom_GetRolesForUser_Response)},
  { 477, 485, sizeof(::CChatRoom_DeleteRoleFromUser_Request)},
  { 488, 493, sizeof(::CChatRoom_DeleteRoleFromUser_Response)},
  { 493, 501, sizeof(::CChatRoom_JoinChatRoomGroup_Request)},
  { 504, 513, sizeof(::CChatRoom_JoinChatRoomGroup_Response)},
  { 517, 526, sizeof(::CChatRoom_InviteFriendToChatRoomGroup_Request)},
  { 530, 535, sizeof(::CChatRoom_InviteFriendToChatRoomGroup_Response)},
  { 535, 541, sizeof(::CChatRoom_LeaveChatRoomGroup_Request)},
  { 542, 547, sizeof(::CChatRoom_LeaveChatRoomGroup_Response)},
  { 547, 555, sizeof(::CChatRoom_CreateChatRoom_Request)},
  { 558, 564, sizeof(::CChatRoom_CreateChatRoom_Response)},
  { 565, 572, sizeof(::CChatRoom_DeleteChatRoom_Request)},
  { 574, 579, sizeof(::CChatRoom_DeleteChatRoom_Response)},
  { 579, 587, sizeof(::CChatRoom_RenameChatRoom_Request)},
  { 590, 595, sizeof(::CChatRoom_RenameChatRoom_Response)},
  { 595, 603, sizeof(::CChatRoom_ReorderChatRoom_Request)},
  { 606, 611, sizeof(::CChatRoom_ReorderChatRoom_Response)},
  { 611, 619, sizeof(::CChatRoom_SendChatMessage_Request)},
  { 622, 630, sizeof(::CChatRoom_SendChatMessage_Response)},
  { 633, 640, sizeof(::CChatRoom_JoinVoiceChat_Request)},
  { 642, 648, sizeof(::CChatRoom_JoinVoiceChat_Response)},
  { 649, 656, sizeof(::CChatRoom_LeaveVoiceChat_Request)},
  { 658, 663, sizeof(::CChatRoom_LeaveVoiceChat_Response)},
  { 663, 675, sizeof(::CChatRoom_GetMessageHistory_Request)},
  { 682, 690, sizeof(::ServerMessage)},
  { 693, 704, sizeof(::CChatRoom_GetMessageHistory_Response_ChatMessage)},
  { 710, 717, sizeof(::CChatRoom_GetMessageHistory_Response)},
  { 719, 724, sizeof(::CChatRoom_GetMyChatRoomGroups_Request)},
  { 724, 747, sizeof(::CChatRoom_GetChatRoomGroupSummary_Response)},
  { 765, 772, sizeof(::CChatRoomSummaryPair)},
  { 774, 780, sizeof(::CChatRoom_GetMyChatRoomGroups_Response)},
  { 781, 787, sizeof(::CChatRoom_GetChatRoomGroupState_Request)},
  { 788, 794, sizeof(::CChatRoom_GetChatRoomGroupState_Response)},
  { 795, 801, sizeof(::CChatRoom_GetChatRoomGroupSummary_Request)},
  { 802, 810, sizeof(::CChatRoom_AckChatMessage_Notification)},
  { 813, 821, sizeof(::CChatRoom_CreateInviteLink_Request)},
  { 824, 831, sizeof(::CChatRoom_CreateInviteLink_Response)},
  { 833, 839, sizeof(::CChatRoom_GetInviteLinkInfo_Request)},
  { 840, 852, sizeof(::CChatRoom_GetInviteLinkInfo_Response)},
  { 859, 868, sizeof(::CChatRoom_GetInviteInfo_Request)},
  { 872, 880, sizeof(::CChatRoom_GetInviteInfo_Response)},
  { 883, 889, sizeof(::CChatRoom_GetInviteLinksForGroup_Request)},
  { 890, 899, sizeof(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo)},
  { 903, 909, sizeof(::CChatRoom_GetInviteLinksForGroup_Response)},
  { 910, 916, sizeof(::CChatRoom_GetBanList_Request)},
  { 917, 926, sizeof(::CChatRoom_GetBanList_Response_BanInfo)},
  { 930, 936, sizeof(::CChatRoom_GetBanList_Response)},
  { 937, 943, sizeof(::CChatRoom_GetInviteList_Request)},
  { 944, 952, sizeof(::CChatRoomGroupInvite)},
  { 955, 961, sizeof(::CChatRoom_GetInviteList_Response)},
  { 962, 969, sizeof(::CChatRoom_DeleteInviteLink_Request)},
  { 971, 976, sizeof(::CChatRoom_DeleteInviteLink_Response)},
  { 976, 983, sizeof(::CChatRoom_SetSessionActiveChatRoomGroups_Request)},
  { 985, 991, sizeof(::CChatRoom_SetSessionActiveChatRoomGroups_Response)},
  { 992, 1000, sizeof(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences)},
  { 1003, 1012, sizeof(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences)},
  { 1016, 1024, sizeof(::CChatRoom_SetUserChatGroupPreferences_Request)},
  { 1027, 1032, sizeof(::CChatRoom_SetUserChatGroupPreferences_Response)},
  { 1032, 1039, sizeof(::CChatRoom_DeleteChatMessages_Request_Message)},
  { 1041, 1049, sizeof(::CChatRoom_DeleteChatMessages_Request)},
  { 1052, 1057, sizeof(::CChatRoom_DeleteChatMessages_Response)},
  { 1057, 1064, sizeof(::CClanChatRooms_GetClanChatRoomInfo_Request)},
  { 1066, 1072, sizeof(::CClanChatRooms_GetClanChatRoomInfo_Response)},
  { 1073, 1080, sizeof(::CClanChatRooms_SetClanChatRoomPrivate_Request)},
  { 1082, 1088, sizeof(::CClanChatRooms_SetClanChatRoomPrivate_Response)},
  { 1089, 1097, sizeof(::CChatMentions)},
  { 1100, 1114, sizeof(::CChatRoom_IncomingChatMessage_Notification)},
  { 1123, 1131, sizeof(::CChatRoom_ChatMessageModified_Notification_ChatMessage)},
  { 1134, 1142, sizeof(::CChatRoom_ChatMessageModified_Notification)},
  { 1145, 1153, sizeof(::CChatRoom_MemberStateChange_Notification)},
  { 1156, 1162, sizeof(::CChatRoom_ChatRoomHeaderState_Notification)},
  { 1163, 1171, sizeof(::CChatRoom_ChatRoomGroupRoomsChange_Notification)},
  { 1174, 1181, sizeof(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)},
  { 1183, 1192, sizeof(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)},
  { 1196, 1225, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_Settings)},
  { 1249, 1265, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings)},
  { 1276, 1286, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState)},
  { 1291, 1312, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_UIState)},
  { 1328, 1343, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics)},
  { 1353, 1366, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification)},
  { 1374, 1380, sizeof(::CChatUsability_RequestClientUsabilityMetrics_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChat_RequestFriendPersonaStates_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChat_RequestFriendPersonaStates_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoleActions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatPartyBeacon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoomGroupHeaderState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoomMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoomState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoomGroupState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CUserChatRoomState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CUserChatRoomGroupState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SaveChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SaveChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RenameChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RenameChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetChatRoomGroupTagline_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetChatRoomGroupTagline_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetChatRoomGroupAvatar_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetChatRoomGroupAvatar_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_MuteUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_MuteUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_KickUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_KickUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetUserBanState_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetUserBanState_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RevokeInvite_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RevokeInvite_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateRole_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateRole_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetRoles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetRoles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RenameRole_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RenameRole_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ReorderRole_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ReorderRole_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteRole_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteRole_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetRoleActions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetRoleActions_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ReplaceRoleActions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ReplaceRoleActions_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_AddRoleToUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_AddRoleToUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetRolesForUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetRolesForUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteRoleFromUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteRoleFromUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_JoinChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_JoinChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_InviteFriendToChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_InviteFriendToChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_LeaveChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_LeaveChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateChatRoom_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateChatRoom_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteChatRoom_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteChatRoom_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RenameChatRoom_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_RenameChatRoom_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ReorderChatRoom_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ReorderChatRoom_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SendChatMessage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SendChatMessage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_JoinVoiceChat_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_JoinVoiceChat_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_LeaveVoiceChat_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_LeaveVoiceChat_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetMessageHistory_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ServerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetMessageHistory_Response_ChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetMessageHistory_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetMyChatRoomGroups_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetChatRoomGroupSummary_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoomSummaryPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetMyChatRoomGroups_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetChatRoomGroupState_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetChatRoomGroupState_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetChatRoomGroupSummary_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_AckChatMessage_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateInviteLink_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_CreateInviteLink_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteLinkInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteLinkInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteLinksForGroup_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteLinksForGroup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetBanList_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetBanList_Response_BanInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetBanList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteList_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoomGroupInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_GetInviteList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteInviteLink_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteInviteLink_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetSessionActiveChatRoomGroups_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetSessionActiveChatRoomGroups_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteChatMessages_Request_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteChatMessages_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_DeleteChatMessages_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CClanChatRooms_GetClanChatRoomInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CClanChatRooms_GetClanChatRoomInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CClanChatRooms_SetClanChatRoomPrivate_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CClanChatRooms_SetClanChatRoomPrivate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatMentions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_IncomingChatMessage_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ChatMessageModified_Notification_ChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ChatMessageModified_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_MemberStateChange_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ChatRoomHeaderState_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_ChatRoomGroupRoomsChange_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_Settings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_Metrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CChatUsability_RequestClientUsabilityMetrics_Notification_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_chat.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 129);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$steammessages_chat.steamclient.proto\032,"
      "steammessages_unified_base.steamclient.p"
      "roto\"*\n(CChat_RequestFriendPersonaStates"
      "_Request\"+\n)CChat_RequestFriendPersonaSt"
      "ates_Response\"\247\001\n%CChatRoom_CreateChatRo"
      "omGroup_Request\022\027\n\017steamid_partner\030\001 \001(\006"
      "\022\027\n\017steamid_invited\030\002 \001(\006\022\014\n\004name\030\003 \001(\t\022"
      "\030\n\020steamid_invitees\030\004 \003(\006\022$\n\034watching_br"
      "oadcast_accountid\030\006 \001(\r\";\n\tCChatRole\022\017\n\007"
      "role_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\017\n\007ordinal\030\003"
      " \001(\r\"\324\002\n\020CChatRoleActions\022\017\n\007role_id\030\001 \001"
      "(\004\022(\n can_create_rename_delete_channel\030\002"
      " \001(\010\022\020\n\010can_kick\030\003 \001(\010\022\017\n\007can_ban\030\004 \001(\010\022"
      "\022\n\ncan_invite\030\005 \001(\010\022&\n\036can_change_taglin"
      "e_avatar_name\030\006 \001(\010\022\020\n\010can_chat\030\007 \001(\010\022\030\n"
      "\020can_view_history\030\010 \001(\010\022\036\n\026can_change_gr"
      "oup_roles\030\t \001(\010\022\035\n\025can_change_user_roles"
      "\030\n \001(\010\022\027\n\017can_mention_all\030\013 \001(\010\022\"\n\032can_s"
      "et_watching_broadcast\030\014 \001(\010\"c\n\020CChatPart"
      "yBeacon\022\016\n\006app_id\030\001 \001(\r\022\025\n\rsteamid_owner"
      "\030\002 \001(\006\022\021\n\tbeacon_id\030\003 \001(\006\022\025\n\rgame_metada"
      "ta\030\004 \001(\t\"\317\002\n\031CChatRoomGroupHeaderState\022\025"
      "\n\rchat_group_id\030\001 \001(\004\022\021\n\tchat_name\030\002 \001(\t"
      "\022\016\n\006clanid\030\r \001(\r\022\027\n\017accountid_owner\030\016 \001("
      "\r\022\r\n\005appid\030\025 \001(\r\022\017\n\007tagline\030\017 \001(\t\022\022\n\nava"
      "tar_sha\030\020 \001(\014\022\027\n\017default_role_id\030\021 \001(\004\022\031"
      "\n\005roles\030\022 \003(\0132\n.CChatRole\022\'\n\014role_action"
      "s\030\023 \003(\0132\021.CChatRoleActions\022$\n\034watching_b"
      "roadcast_accountid\030\024 \001(\r\022(\n\rparty_beacon"
      "s\030\026 \003(\0132\021.CChatPartyBeacon\"\323\001\n\017CChatRoom"
      "Member\022\021\n\taccountid\030\001 \001(\r\022@\n\005state\030\003 \001(\016"
      "2\023.EChatRoomJoinState:\034k_EChatRoomJoinSt"
      "ate_Default\022\?\n\004rank\030\004 \001(\0162\023.EChatRoomGro"
      "upRank:\034k_EChatRoomGroupRank_Default\022\030\n\020"
      "time_kick_expire\030\006 \001(\r\022\020\n\010role_ids\030\007 \003(\004"
      "\"\224\001\n\016CChatRoomState\022\017\n\007chat_id\030\001 \001(\004\022\021\n\t"
      "chat_name\030\002 \001(\t\022\025\n\rvoice_allowed\030\003 \001(\010\022\030"
      "\n\020members_in_voice\030\004 \003(\r\022\031\n\021time_last_me"
      "ssage\030\005 \001(\r\022\022\n\nsort_order\030\006 \001(\r\"\312\001\n\023CCha"
      "tRoomGroupState\0220\n\014header_state\030\001 \001(\0132\032."
      "CChatRoomGroupHeaderState\022!\n\007members\030\002 \003"
      "(\0132\020.CChatRoomMember\022\027\n\017default_chat_id\030"
      "\004 \001(\004\022#\n\nchat_rooms\030\005 \003(\0132\017.CChatRoomSta"
      "te\022 \n\006kicked\030\007 \003(\0132\020.CChatRoomMember\"\340\002\n"
      "\022CUserChatRoomState\022\017\n\007chat_id\030\001 \001(\004\022\023\n\013"
      "time_joined\030\002 \001(\r\022\025\n\rtime_last_ack\030\003 \001(\r"
      "\022e\n\032desktop_notification_level\030\004 \001(\0162\033.E"
      "ChatRoomNotificationLevel:$k_EChatroomNo"
      "tificationLevel_Invalid\022d\n\031mobile_notifi"
      "cation_level\030\005 \001(\0162\033.EChatRoomNotificati"
      "onLevel:$k_EChatroomNotificationLevel_In"
      "valid\022\031\n\021time_last_mention\030\006 \001(\r\022%\n\026unre"
      "ad_indicator_muted\030\007 \001(\010:\005false\"\211\003\n\027CUse"
      "rChatRoomGroupState\022\025\n\rchat_group_id\030\001 \001"
      "(\004\022\023\n\013time_joined\030\002 \001(\r\0221\n\024user_chat_roo"
      "m_state\030\003 \003(\0132\023.CUserChatRoomState\022e\n\032de"
      "sktop_notification_level\030\004 \001(\0162\033.EChatRo"
      "omNotificationLevel:$k_EChatroomNotifica"
      "tionLevel_Invalid\022d\n\031mobile_notification"
      "_level\030\005 \001(\0162\033.EChatRoomNotificationLeve"
      "l:$k_EChatroomNotificationLevel_Invalid\022"
      "\033\n\023time_last_group_ack\030\006 \001(\r\022%\n\026unread_i"
      "ndicator_muted\030\007 \001(\010:\005false\"\227\001\n&CChatRoo"
      "m_CreateChatRoomGroup_Response\022\025\n\rchat_g"
      "roup_id\030\001 \001(\004\022#\n\005state\030\002 \001(\0132\024.CChatRoom"
      "GroupState\0221\n\017user_chat_state\030\003 \001(\0132\030.CU"
      "serChatRoomGroupState\"J\n#CChatRoom_SaveC"
      "hatRoomGroup_Request\022\025\n\rchat_group_id\030\001 "
      "\001(\004\022\014\n\004name\030\002 \001(\t\"&\n$CChatRoom_SaveChatR"
      "oomGroup_Response\"L\n%CChatRoom_RenameCha"
      "tRoomGroup_Request\022\025\n\rchat_group_id\030\001 \001("
      "\004\022\014\n\004name\030\002 \001(\t\"6\n&CChatRoom_RenameChatR"
      "oomGroup_Response\022\014\n\004name\030\001 \001(\t\"S\n)CChat"
      "Room_SetChatRoomGroupTagline_Request\022\025\n\r"
      "chat_group_id\030\001 \001(\004\022\017\n\007tagline\030\002 \001(\t\",\n*"
      "CChatRoom_SetChatRoomGroupTagline_Respon"
      "se\"U\n(CChatRoom_SetChatRoomGroupAvatar_R"
      "equest\022\025\n\rchat_group_id\030\001 \001(\004\022\022\n\navatar_"
      "sha\030\002 \001(\014\"+\n)CChatRoom_SetChatRoomGroupA"
      "vatar_Response\"r\n3CChatRoom_SetChatRoomG"
      "roupWatchingBroadcast_Request\022\025\n\rchat_gr"
      "oup_id\030\001 \001(\004\022$\n\034watching_broadcast_accou"
      "ntid\030\002 \001(\r\"6\n4CChatRoom_SetChatRoomGroup"
      "WatchingBroadcast_Response\"X\n\032CChatRoom_"
      "MuteUser_Request\022\025\n\rchat_group_id\030\001 \001(\004\022"
      "\017\n\007steamid\030\002 \001(\006\022\022\n\nexpiration\030\003 \001(\005\"\035\n\033"
      "CChatRoom_MuteUser_Response\"X\n\032CChatRoom"
      "_KickUser_Request\022\025\n\rchat_group_id\030\001 \001(\004"
      "\022\017\n\007steamid\030\002 \001(\006\022\022\n\nexpiration\030\003 \001(\005\"\035\n"
      "\033CChatRoom_KickUser_Response\"^\n!CChatRoo"
      "m_SetUserBanState_Request\022\025\n\rchat_group_"
      "id\030\001 \001(\004\022\017\n\007steamid\030\002 \001(\006\022\021\n\tban_state\030\003"
      " \001(\010\"$\n\"CChatRoom_SetUserBanState_Respon"
      "se\"H\n\036CChatRoom_RevokeInvite_Request\022\025\n\r"
      "chat_group_id\030\001 \001(\004\022\017\n\007steamid\030\002 \001(\006\"!\n\037"
      "CChatRoom_RevokeInvite_Response\"C\n\034CChat"
      "Room_CreateRole_Request\022\025\n\rchat_group_id"
      "\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"C\n\035CChatRoom_Create"
      "Role_Response\022\"\n\007actions\030\002 \001(\0132\021.CChatRo"
      "leActions\"3\n\032CChatRoom_GetRoles_Request\022"
      "\025\n\rchat_group_id\030\001 \001(\004\"8\n\033CChatRoom_GetR"
      "oles_Response\022\031\n\005roles\030\001 \003(\0132\n.CChatRole"
      "\"T\n\034CChatRoom_RenameRole_Request\022\025\n\rchat"
      "_group_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\014\n\004name"
      "\030\003 \001(\t\"\037\n\035CChatRoom_RenameRole_Response\""
      "X\n\035CChatRoom_ReorderRole_Request\022\025\n\rchat"
      "_group_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\017\n\007ordi"
      "nal\030\003 \001(\r\" \n\036CChatRoom_ReorderRole_Respo"
      "nse\"F\n\034CChatRoom_DeleteRole_Request\022\025\n\rc"
      "hat_group_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\"\037\n\035C"
      "ChatRoom_DeleteRole_Response\"J\n CChatRoo"
      "m_GetRoleActions_Request\022\025\n\rchat_group_i"
      "d\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\"G\n!CChatRoom_Ge"
      "tRoleActions_Response\022\"\n\007actions\030\001 \003(\0132\021"
      ".CChatRoleActions\"r\n$CChatRoom_ReplaceRo"
      "leActions_Request\022\025\n\rchat_group_id\030\001 \001(\004"
      "\022\017\n\007role_id\030\002 \001(\004\022\"\n\007actions\030\004 \001(\0132\021.CCh"
      "atRoleActions\"\'\n%CChatRoom_ReplaceRoleAc"
      "tions_Response\"Z\n\037CChatRoom_AddRoleToUse"
      "r_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007role"
      "_id\030\003 \001(\004\022\017\n\007steamid\030\004 \001(\006\"\"\n CChatRoom_"
      "AddRoleToUser_Response\"K\n!CChatRoom_GetR"
      "olesForUser_Request\022\025\n\rchat_group_id\030\001 \001"
      "(\004\022\017\n\007steamid\030\003 \001(\006\"6\n\"CChatRoom_GetRole"
      "sForUser_Response\022\020\n\010role_ids\030\001 \003(\004\"_\n$C"
      "ChatRoom_DeleteRoleFromUser_Request\022\025\n\rc"
      "hat_group_id\030\001 \001(\004\022\017\n\007role_id\030\003 \001(\004\022\017\n\007s"
      "teamid\030\004 \001(\006\"\'\n%CChatRoom_DeleteRoleFrom"
      "User_Response\"b\n#CChatRoom_JoinChatRoomG"
      "roup_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\023\n\013i"
      "nvite_code\030\002 \001(\t\022\017\n\007chat_id\030\003 \001(\004\"\251\001\n$CC"
      "hatRoom_JoinChatRoomGroup_Response\022#\n\005st"
      "ate\030\001 \001(\0132\024.CChatRoomGroupState\0221\n\017user_"
      "chat_state\030\003 \001(\0132\030.CUserChatRoomGroupSta"
      "te\022\024\n\014join_chat_id\030\004 \001(\004\022\023\n\013time_expire\030"
      "\005 \001(\r\"\206\001\n-CChatRoom_InviteFriendToChatRo"
      "omGroup_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017"
      "\n\007steamid\030\002 \001(\006\022\017\n\007chat_id\030\003 \001(\004\022\034\n\024skip"
      "_friendsui_check\030\004 \001(\010\"0\n.CChatRoom_Invi"
      "teFriendToChatRoomGroup_Response\"=\n$CCha"
      "tRoom_LeaveChatRoomGroup_Request\022\025\n\rchat"
      "_group_id\030\001 \001(\004\"\'\n%CChatRoom_LeaveChatRo"
      "omGroup_Response\"\\\n CChatRoom_CreateChat"
      "Room_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\014\n\004n"
      "ame\030\002 \001(\t\022\023\n\013allow_voice\030\003 \001(\010\"G\n!CChatR"
      "oom_CreateChatRoom_Response\022\"\n\tchat_room"
      "\030\001 \001(\0132\017.CChatRoomState\"J\n CChatRoom_Del"
      "eteChatRoom_Request\022\025\n\rchat_group_id\030\001 \001"
      "(\004\022\017\n\007chat_id\030\002 \001(\004\"#\n!CChatRoom_DeleteC"
      "hatRoom_Response\"X\n CChatRoom_RenameChat"
      "Room_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007c"
      "hat_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\"#\n!CChatRoom_"
      "RenameChatRoom_Response\"g\n!CChatRoom_Reo"
      "rderChatRoom_Request\022\025\n\rchat_group_id\030\001 "
      "\001(\004\022\017\n\007chat_id\030\002 \001(\004\022\032\n\022move_after_chat_"
      "id\030\003 \001(\004\"$\n\"CChatRoom_ReorderChatRoom_Re"
      "sponse\"\\\n!CChatRoom_SendChatMessage_Requ"
      "est\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 "
      "\001(\004\022\017\n\007message\030\003 \001(\t\"i\n\"CChatRoom_SendCh"
      "atMessage_Response\022\030\n\020modified_message\030\001"
      " \001(\t\022\030\n\020server_timestamp\030\002 \001(\r\022\017\n\007ordina"
      "l\030\003 \001(\r\"I\n\037CChatRoom_JoinVoiceChat_Reque"
      "st\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001"
      "(\004\"8\n CChatRoom_JoinVoiceChat_Response\022\024"
      "\n\014voice_chatid\030\001 \001(\004\"J\n CChatRoom_LeaveV"
      "oiceChat_Request\022\025\n\rchat_group_id\030\001 \001(\004\022"
      "\017\n\007chat_id\030\002 \001(\004\"#\n!CChatRoom_LeaveVoice"
      "Chat_Response\"\264\001\n#CChatRoom_GetMessageHi"
      "story_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007"
      "chat_id\030\002 \001(\004\022\021\n\tlast_time\030\003 \001(\r\022\024\n\014last"
      "_ordinal\030\004 \001(\r\022\022\n\nstart_time\030\005 \001(\r\022\025\n\rst"
      "art_ordinal\030\006 \001(\r\022\021\n\tmax_count\030\007 \001(\r\"\206\001\n"
      "\rServerMessage\022F\n\007message\030\001 \001(\0162\027.EChatR"
      "oomServerMessage:\034k_EChatRoomServerMsg_I"
      "nvalid\022\024\n\014string_param\030\002 \001(\t\022\027\n\017accounti"
      "d_param\030\003 \001(\r\"\230\002\n$CChatRoom_GetMessageHi"
      "story_Response\022C\n\010messages\030\001 \003(\01321.CChat"
      "Room_GetMessageHistory_Response.ChatMess"
      "age\022\026\n\016more_available\030\004 \001(\010\032\222\001\n\013ChatMess"
      "age\022\016\n\006sender\030\001 \001(\r\022\030\n\020server_timestamp\030"
      "\002 \001(\r\022\017\n\007message\030\003 \001(\t\022\017\n\007ordinal\030\004 \001(\r\022"
      "&\n\016server_message\030\005 \001(\0132\016.ServerMessage\022"
      "\017\n\007deleted\030\006 \001(\010\"\'\n%CChatRoom_GetMyChatR"
      "oomGroups_Request\"\307\004\n*CChatRoom_GetChatR"
      "oomGroupSummary_Response\022\025\n\rchat_group_i"
      "d\030\001 \001(\004\022\027\n\017chat_group_name\030\002 \001(\t\022\033\n\023acti"
      "ve_member_count\030\003 \001(\r\022!\n\031active_voice_me"
      "mber_count\030\004 \001(\r\022\027\n\017default_chat_id\030\005 \001("
      "\004\022#\n\nchat_rooms\030\006 \003(\0132\017.CChatRoomState\022\016"
      "\n\006clanid\030\007 \001(\r\022\032\n\022chat_group_tagline\030\010 \001"
      "(\t\022\027\n\017accountid_owner\030\t \001(\r\022\023\n\013top_membe"
      "rs\030\n \003(\r\022\035\n\025chat_group_avatar_sha\030\013 \001(\014\022"
      "\?\n\004rank\030\014 \001(\0162\023.EChatRoomGroupRank:\034k_EC"
      "hatRoomGroupRank_Default\022\027\n\017default_role"
      "_id\030\r \001(\004\022\020\n\010role_ids\030\016 \003(\004\022\'\n\014role_acti"
      "ons\030\017 \003(\0132\021.CChatRoleActions\022$\n\034watching"
      "_broadcast_accountid\030\020 \001(\r\022\r\n\005appid\030\021 \001("
      "\r\022(\n\rparty_beacons\030\022 \003(\0132\021.CChatPartyBea"
      "con\"\223\001\n\024CChatRoomSummaryPair\0227\n\025user_cha"
      "t_group_state\030\001 \001(\0132\030.CUserChatRoomGroup"
      "State\022B\n\rgroup_summary\030\002 \001(\0132+.CChatRoom"
      "_GetChatRoomGroupSummary_Response\"Y\n&CCh"
      "atRoom_GetMyChatRoomGroups_Response\022/\n\020c"
      "hat_room_groups\030\001 \003(\0132\025.CChatRoomSummary"
      "Pair\"@\n\'CChatRoom_GetChatRoomGroupState_"
      "Request\022\025\n\rchat_group_id\030\001 \001(\004\"O\n(CChatR"
      "oom_GetChatRoomGroupState_Response\022#\n\005st"
      "ate\030\001 \001(\0132\024.CChatRoomGroupState\"B\n)CChat"
      "Room_GetChatRoomGroupSummary_Request\022\025\n\r"
      "chat_group_id\030\001 \001(\004\"b\n%CChatRoom_AckChat"
      "Message_Notification\022\025\n\rchat_group_id\030\001 "
      "\001(\004\022\017\n\007chat_id\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\r\""
      "c\n\"CChatRoom_CreateInviteLink_Request\022\025\n"
      "\rchat_group_id\030\001 \001(\004\022\025\n\rseconds_valid\030\002 "
      "\001(\r\022\017\n\007chat_id\030\003 \001(\004\"Q\n#CChatRoom_Create"
      "InviteLink_Response\022\023\n\013invite_code\030\001 \001(\t"
      "\022\025\n\rseconds_valid\030\002 \001(\r\":\n#CChatRoom_Get"
      "InviteLinkInfo_Request\022\023\n\013invite_code\030\001 "
      "\001(\t\"\214\002\n$CChatRoom_GetInviteLinkInfo_Resp"
      "onse\022\026\n\016steamid_sender\030\003 \001(\006\022\024\n\014time_exp"
      "ires\030\004 \001(\r\022\017\n\007chat_id\030\006 \001(\004\022B\n\rgroup_sum"
      "mary\030\010 \001(\0132+.CChatRoom_GetChatRoomGroupS"
      "ummary_Response\0227\n\025user_chat_group_state"
      "\030\t \001(\0132\030.CUserChatRoomGroupState\022\030\n\020time"
      "_kick_expire\030\n \001(\r\022\016\n\006banned\030\013 \001(\010\"w\n\037CC"
      "hatRoom_GetInviteInfo_Request\022\027\n\017steamid"
      "_invitee\030\001 \001(\006\022\025\n\rchat_group_id\030\002 \001(\004\022\017\n"
      "\007chat_id\030\003 \001(\004\022\023\n\013invite_code\030\004 \001(\t\"\220\001\n "
      "CChatRoom_GetInviteInfo_Response\022B\n\rgrou"
      "p_summary\030\001 \001(\0132+.CChatRoom_GetChatRoomG"
      "roupSummary_Response\022\030\n\020time_kick_expire"
      "\030\002 \001(\r\022\016\n\006banned\030\003 \001(\010\"A\n(CChatRoom_GetI"
      "nviteLinksForGroup_Request\022\025\n\rchat_group"
      "_id\030\001 \001(\004\"\327\001\n)CChatRoom_GetInviteLinksFo"
      "rGroup_Response\022I\n\014invite_links\030\001 \003(\01323."
      "CChatRoom_GetInviteLinksForGroup_Respons"
      "e.LinkInfo\032_\n\010LinkInfo\022\023\n\013invite_code\030\001 "
      "\001(\t\022\027\n\017steamid_creator\030\002 \001(\006\022\024\n\014time_exp"
      "ires\030\003 \001(\r\022\017\n\007chat_id\030\004 \001(\004\"5\n\034CChatRoom"
      "_GetBanList_Request\022\025\n\rchat_group_id\030\001 \001"
      "(\004\"\265\001\n\035CChatRoom_GetBanList_Response\0224\n\004"
      "bans\030\001 \003(\0132&.CChatRoom_GetBanList_Respon"
      "se.BanInfo\032^\n\007BanInfo\022\021\n\taccountid\030\001 \001(\r"
      "\022\027\n\017accountid_actor\030\002 \001(\r\022\023\n\013time_banned"
      "\030\003 \001(\r\022\022\n\nban_reason\030\004 \001(\t\"8\n\037CChatRoom_"
      "GetInviteList_Request\022\025\n\rchat_group_id\030\001"
      " \001(\004\"X\n\024CChatRoomGroupInvite\022\021\n\taccounti"
      "d\030\001 \001(\r\022\027\n\017accountid_actor\030\002 \001(\r\022\024\n\014time"
      "_invited\030\003 \001(\r\"J\n CChatRoom_GetInviteLis"
      "t_Response\022&\n\007invites\030\001 \003(\0132\025.CChatRoomG"
      "roupInvite\"P\n\"CChatRoom_DeleteInviteLink"
      "_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\023\n\013invit"
      "e_code\030\002 \001(\t\"%\n#CChatRoom_DeleteInviteLi"
      "nk_Response\"n\n0CChatRoom_SetSessionActiv"
      "eChatRoomGroups_Request\022\026\n\016chat_group_id"
      "s\030\001 \003(\004\022\"\n\032chat_groups_data_requested\030\002 "
      "\003(\004\"^\n1CChatRoom_SetSessionActiveChatRoo"
      "mGroups_Response\022)\n\013chat_states\030\001 \003(\0132\024."
      "CChatRoomGroupState\"\252\006\n-CChatRoom_SetUse"
      "rChatGroupPreferences_Request\022\025\n\rchat_gr"
      "oup_id\030\001 \001(\004\022c\n\026chat_group_preferences\030\002"
      " \001(\0132C.CChatRoom_SetUserChatGroupPrefere"
      "nces_Request.ChatGroupPreferences\022a\n\025cha"
      "t_room_preferences\030\003 \003(\0132B.CChatRoom_Set"
      "UserChatGroupPreferences_Request.ChatRoo"
      "mPreferences\032\203\002\n\024ChatGroupPreferences\022e\n"
      "\032desktop_notification_level\030\001 \001(\0162\033.ECha"
      "tRoomNotificationLevel:$k_EChatroomNotif"
      "icationLevel_Invalid\022d\n\031mobile_notificat"
      "ion_level\030\002 \001(\0162\033.EChatRoomNotificationL"
      "evel:$k_EChatroomNotificationLevel_Inval"
      "id\022\036\n\026unread_indicator_muted\030\003 \001(\010\032\223\002\n\023C"
      "hatRoomPreferences\022\017\n\007chat_id\030\001 \001(\004\022e\n\032d"
      "esktop_notification_level\030\002 \001(\0162\033.EChatR"
      "oomNotificationLevel:$k_EChatroomNotific"
      "ationLevel_Invalid\022d\n\031mobile_notificatio"
      "n_level\030\003 \001(\0162\033.EChatRoomNotificationLev"
      "el:$k_EChatroomNotificationLevel_Invalid"
      "\022\036\n\026unread_indicator_muted\030\004 \001(\010\"0\n.CCha"
      "tRoom_SetUserChatGroupPreferences_Respon"
      "se\"\305\001\n$CChatRoom_DeleteChatMessages_Requ"
      "est\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 "
      "\001(\004\022\?\n\010messages\030\003 \003(\0132-.CChatRoom_Delete"
      "ChatMessages_Request.Message\0324\n\007Message\022"
      "\030\n\020server_timestamp\030\001 \001(\r\022\017\n\007ordinal\030\002 \001"
      "(\r\"\'\n%CChatRoom_DeleteChatMessages_Respo"
      "nse\"\230\001\n*CClanChatRooms_GetClanChatRoomIn"
      "fo_Request\022\017\n\007steamid\030\001 \001(\006\022Y\n\nautocreat"
      "e\030\002 \001(\010:\004trueB\?\202\265\030;Create a default chat"
      " room if none has been created before.\"v"
      "\n+CClanChatRooms_GetClanChatRoomInfo_Res"
      "ponse\022G\n\022chat_group_summary\030\001 \001(\0132+.CCha"
      "tRoom_GetChatRoomGroupSummary_Response\"["
      "\n-CClanChatRooms_SetClanChatRoomPrivate_"
      "Request\022\017\n\007steamid\030\001 \001(\006\022\031\n\021chat_room_pr"
      "ivate\030\002 \001(\010\"K\n.CClanChatRooms_SetClanCha"
      "tRoomPrivate_Response\022\031\n\021chat_room_priva"
      "te\030\001 \001(\010\"V\n\rCChatMentions\022\023\n\013mention_all"
      "\030\001 \001(\010\022\024\n\014mention_here\030\002 \001(\010\022\032\n\022mention_"
      "accountids\030\003 \003(\r\"\206\002\n*CChatRoom_IncomingC"
      "hatMessage_Notification\022\025\n\rchat_group_id"
      "\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022\026\n\016steamid_sende"
      "r\030\003 \001(\006\022\017\n\007message\030\004 \001(\t\022\021\n\ttimestamp\030\005 "
      "\001(\r\022 \n\010mentions\030\006 \001(\0132\016.CChatMentions\022\017\n"
      "\007ordinal\030\007 \001(\r\022&\n\016server_message\030\010 \001(\0132\016"
      ".ServerMessage\022\031\n\021message_no_bbcode\030\t \001("
      "\t\"\352\001\n*CChatRoom_ChatMessageModified_Noti"
      "fication\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_"
      "id\030\002 \001(\004\022I\n\010messages\030\003 \003(\01327.CChatRoom_C"
      "hatMessageModified_Notification.ChatMess"
      "age\032I\n\013ChatMessage\022\030\n\020server_timestamp\030\001"
      " \001(\r\022\017\n\007ordinal\030\002 \001(\r\022\017\n\007deleted\030\003 \001(\010\"\266"
      "\001\n(CChatRoom_MemberStateChange_Notificat"
      "ion\022\025\n\rchat_group_id\030\001 \001(\004\022 \n\006member\030\002 \001"
      "(\0132\020.CChatRoomMember\022Q\n\006change\030\003 \001(\0162\033.E"
      "ChatRoomMemberStateChange:$k_EChatRoomMe"
      "mberStateChange_Invalid\"^\n*CChatRoom_Cha"
      "tRoomHeaderState_Notification\0220\n\014header_"
      "state\030\001 \001(\0132\032.CChatRoomGroupHeaderState\""
      "\206\001\n/CChatRoom_ChatRoomGroupRoomsChange_N"
      "otification\022\025\n\rchat_group_id\030\001 \001(\004\022\027\n\017de"
      "fault_chat_id\030\002 \001(\004\022#\n\nchat_rooms\030\003 \003(\0132"
      "\017.CChatRoomState\"d\n:CChatRoom_NotifyShou"
      "ldRejoinChatRoomVoiceChat_Notification\022\017"
      "\n\007chat_id\030\001 \001(\004\022\025\n\rchat_group_id\030\002 \001(\004\"\251"
      "\002\n;ChatRoomClient_NotifyChatGroupUserSta"
      "teChanged_Notification\022\025\n\rchat_group_id\030"
      "\001 \001(\004\0227\n\025user_chat_group_state\030\002 \001(\0132\030.C"
      "UserChatRoomGroupState\022B\n\rgroup_summary\030"
      "\003 \001(\0132+.CChatRoom_GetChatRoomGroupSummar"
      "y_Response\022V\n\013user_action\030\004 \001(\0162\033.EChatR"
      "oomMemberStateChange:$k_EChatRoomMemberS"
      "tateChange_Invalid\"\305\025\n2CChatUsability_Cl"
      "ientUsabilityMetrics_Notification\022\026\n\016met"
      "rics_run_id\030\001 \001(\r\022\024\n\014client_build\030\002 \001(\r\022"
      "\027\n\017metrics_version\030\003 \001(\r\022\016\n\006in_web\030\004 \001(\010"
      "\022N\n\010settings\030\n \001(\0132<.CChatUsability_Clie"
      "ntUsabilityMetrics_Notification.Settings"
      "\022Y\n\016voice_settings\030\013 \001(\0132A.CChatUsabilit"
      "y_ClientUsabilityMetrics_Notification.Vo"
      "iceSettings\022M\n\010ui_state\030\014 \001(\0132;.CChatUsa"
      "bility_ClientUsabilityMetrics_Notificati"
      "on.UIState\022L\n\007metrics\030\r \001(\0132;.CChatUsabi"
      "lity_ClientUsabilityMetrics_Notification"
      ".Metrics\032\277\006\n\010Settings\022!\n\031notifications_s"
      "how_ingame\030\001 \001(\010\022!\n\031notifications_show_o"
      "nline\030\002 \001(\010\022\"\n\032notifications_show_messag"
      "e\030\003 \001(\010\022.\n&notifications_events_and_anno"
      "uncements\030\004 \001(\010\022\032\n\022sounds_play_ingame\030\005 "
      "\001(\010\022\032\n\022sounds_play_online\030\006 \001(\010\022\033\n\023sound"
      "s_play_message\030\007 \001(\010\022\'\n\037sounds_events_an"
      "d_announcements\030\010 \001(\010\022\036\n\026always_new_chat"
      "_window\030\t \001(\010\022\'\n\037force_alphabetic_friend"
      "_sorting\030\n \001(\010\022\027\n\017chat_flash_mode\030\013 \001(\005\022"
      "\033\n\023remember_open_chats\030\014 \001(\010\022\034\n\024compact_"
      "quick_access\030\r \001(\010\022\034\n\024compact_friends_li"
      "st\030\016 \001(\010\0221\n)notifications_show_chat_room"
      "_notification\030\017 \001(\010\022*\n\"sounds_play_chat_"
      "room_notification\030\020 \001(\010\022*\n\"hide_offline_"
      "friends_in_tag_groups\030\021 \001(\010\022 \n\030hide_cate"
      "gorized_friends\030\022 \001(\010\022*\n\"categorize_in_g"
      "ame_friends_by_game\030\023 \001(\010\022\026\n\016chat_font_s"
      "ize\030\024 \001(\005\022\027\n\017use24hour_clock\030\025 \001(\010\022\033\n\023do"
      "_not_disturb_mode\030\026 \001(\010\022\036\n\026disable_embed"
      "_inlining\030\027 \001(\010\022\031\n\021sign_into_friends\030\030 \001"
      "(\010\032\352\002\n\rVoiceSettings\022\030\n\020voice_input_gain"
      "\030\001 \001(\002\022\031\n\021voice_output_gain\030\002 \001(\002\022\030\n\020noi"
      "se_gate_level\030\003 \001(\005\022#\n\033voice_use_echo_ca"
      "ncellation\030\004 \001(\010\022$\n\034voice_use_noise_canc"
      "ellation\030\005 \001(\010\022#\n\033voice_use_auto_gain_co"
      "ntrol\030\006 \001(\010\022 \n\030selected_non_default_mic\030"
      "\007 \001(\010\022#\n\033selected_non_default_output\030\010 \001"
      "(\010\022\034\n\024push_to_talk_enabled\030\t \001(\010\022\034\n\024push"
      "_to_mute_enabled\030\n \001(\010\022\027\n\017play_ptt_sound"
      "s\030\013 \001(\010\032\375\005\n\007UIState\022\033\n\023friends_list_heig"
      "ht\030\001 \001(\005\022\032\n\022friends_list_width\030\002 \001(\005\022\033\n\023"
      "friends_list_docked\030\003 \001(\010\022\036\n\026friends_lis"
      "t_collapsed\030\004 \001(\010\022\'\n\037friends_list_group_"
      "chats_height\030\005 \001(\005\022\034\n\024friends_list_visib"
      "le\030\006 \001(\010\022\032\n\022chat_popups_opened\030\007 \001(\005\022\036\n\026"
      "group_chat_tabs_opened\030\010 \001(\005\022\037\n\027friend_c"
      "hat_tabs_opened\030\t \001(\005\022\031\n\021chat_window_wid"
      "th\030\n \001(\005\022\032\n\022chat_window_height\030\013 \001(\005\022l\n\021"
      "category_collapse\030\014 \001(\0132Q.CChatUsability"
      "_ClientUsabilityMetrics_Notification.UIS"
      "tate.CategoryCollapseState\022%\n\035group_chat"
      "_left_col_collapsed\030\r \001(\005\022&\n\036group_chat_"
      "right_col_collapsed\030\016 \001(\005\022 \n\030in_one_on_o"
      "ne_voice_chat\030\017 \001(\010\022\033\n\023in_group_voice_ch"
      "at\030\020 \001(\010\032\244\001\n\025CategoryCollapseState\022\031\n\021in"
      "_game_collapsed\030\001 \001(\010\022\030\n\020online_collapse"
      "d\030\002 \001(\010\022\031\n\021offline_collapsed\030\003 \001(\010\022\035\n\025ga"
      "me_groups_collapsed\030\004 \001(\005\022\034\n\024categories_"
      "collapsed\030\005 \001(\005\032\300\002\n\007Metrics\022\025\n\rfriends_c"
      "ount\030\001 \001(\005\022\036\n\026friends_category_count\030\002 \001"
      "(\005\022!\n\031friends_categorized_count\030\003 \001(\005\022\034\n"
      "\024friends_online_count\030\004 \001(\005\022\035\n\025friends_i"
      "n_game_count\030\005 \001(\005\022\'\n\037friends_in_game_si"
      "ngleton_count\030\006 \001(\005\022\030\n\020game_group_count\030"
      "\007 \001(\005\022\036\n\026friends_favorite_count\030\010 \001(\005\022\030\n"
      "\020group_chat_count\030\t \001(\005\022!\n\031group_chat_fa"
      "vorite_count\030\n \001(\005\"S\n9CChatUsability_Req"
      "uestClientUsabilityMetrics_Notification\022"
      "\026\n\016metrics_run_id\030\001 \001(\r*\234\001\n\022EChatRoomJoi"
      "nState\022 \n\034k_EChatRoomJoinState_Default\020\000"
      "\022\035\n\031k_EChatRoomJoinState_None\020\001\022\037\n\033k_ECh"
      "atRoomJoinState_Joined\020\002\022$\n k_EChatRoomJ"
      "oinState_TestInvalid\020c*\244\002\n\022EChatRoomGrou"
      "pRank\022 \n\034k_EChatRoomGroupRank_Default\020\000\022"
      "\037\n\033k_EChatRoomGroupRank_Viewer\020\n\022\036\n\032k_EC"
      "hatRoomGroupRank_Guest\020\017\022\037\n\033k_EChatRoomG"
      "roupRank_Member\020\024\022\"\n\036k_EChatRoomGroupRan"
      "k_Moderator\020\036\022 \n\034k_EChatRoomGroupRank_Of"
      "ficer\020(\022\036\n\032k_EChatRoomGroupRank_Owner\0202\022"
      "$\n k_EChatRoomGroupRank_TestInvalid\020c*\364\001"
      "\n\032EChatRoomNotificationLevel\022(\n$k_EChatr"
      "oomNotificationLevel_Invalid\020\000\022%\n!k_ECha"
      "troomNotificationLevel_None\020\001\022*\n&k_EChat"
      "roomNotificationLevel_MentionMe\020\002\022+\n\'k_E"
      "ChatroomNotificationLevel_MentionAll\020\003\022,"
      "\n(k_EChatroomNotificationLevel_AllMessag"
      "es\020\004*\227\003\n\026EChatRoomServerMessage\022 \n\034k_ECh"
      "atRoomServerMsg_Invalid\020\000\022\'\n#k_EChatRoom"
      "ServerMsg_RenameChatRoom\020\001\022\037\n\033k_EChatRoo"
      "mServerMsg_Joined\020\002\022\037\n\033k_EChatRoomServer"
      "Msg_Parted\020\003\022\037\n\033k_EChatRoomServerMsg_Kic"
      "ked\020\004\022 \n\034k_EChatRoomServerMsg_Invited\020\005\022"
      "(\n$k_EChatRoomServerMsg_InviteDismissed\020"
      "\010\022/\n+k_EChatRoomServerMsg_ChatRoomTaglin"
      "eChanged\020\t\022.\n*k_EChatRoomServerMsg_ChatR"
      "oomAvatarChanged\020\n\022\"\n\036k_EChatRoomServerM"
      "sg_AppCustom\020\013*\313\003\n\032EChatRoomMemberStateC"
      "hange\022(\n$k_EChatRoomMemberStateChange_In"
      "valid\020\000\022\'\n#k_EChatRoomMemberStateChange_"
      "Joined\020\001\022\'\n#k_EChatRoomMemberStateChange"
      "_Parted\020\002\022\'\n#k_EChatRoomMemberStateChang"
      "e_Kicked\020\003\022(\n$k_EChatRoomMemberStateChan"
      "ge_Invited\020\004\022,\n(k_EChatRoomMemberStateCh"
      "ange_RankChanged\020\007\0220\n,k_EChatRoomMemberS"
      "tateChange_InviteDismissed\020\010\022&\n\"k_EChatR"
      "oomMemberStateChange_Muted\020\t\022\'\n#k_EChatR"
      "oomMemberStateChange_Banned\020\n\022-\n)k_EChat"
      "RoomMemberStateChange_RolesChanged\020\0142\213\002\n"
      "\004Chat\022\347\001\n\032RequestFriendPersonaStates\022).C"
      "Chat_RequestFriendPersonaStates_Request\032"
      "*.CChat_RequestFriendPersonaStates_Respo"
      "nse\"r\202\265\030nRequest to be notified of onlin"
      "e friend persona state information.  Res"
      "ponses sent via CMsgClientPersonaState.\032"
      "\031\202\265\030\025Chat-related services2\3772\n\010ChatRoom\022"
      "\243\001\n\023CreateChatRoomGroup\022&.CChatRoom_Crea"
      "teChatRoomGroup_Request\032\'.CChatRoom_Crea"
      "teChatRoomGroup_Response\";\202\265\0307Create\'s a"
      " chat group that can contain other chat "
      "rooms\022z\n\021SaveChatRoomGroup\022$.CChatRoom_S"
      "aveChatRoomGroup_Request\032%.CChatRoom_Sav"
      "eChatRoomGroup_Response\"\030\202\265\030\024Saves\'s a c"
      "hat group\022\204\001\n\023RenameChatRoomGroup\022&.CCha"
      "tRoom_RenameChatRoomGroup_Request\032\'.CCha"
      "tRoom_RenameChatRoomGroup_Response\"\034\202\265\030\030"
      "Rename a chat room group\022\231\001\n\027SetChatRoom"
      "GroupTagline\022*.CChatRoom_SetChatRoomGrou"
      "pTagline_Request\032+.CChatRoom_SetChatRoom"
      "GroupTagline_Response\"%\202\265\030!Set tagline f"
      "or a chat room group\022\231\001\n\026SetChatRoomGrou"
      "pAvatar\022).CChatRoom_SetChatRoomGroupAvat"
      "ar_Request\032*.CChatRoom_SetChatRoomGroupA"
      "vatar_Response\"(\202\265\030$Set avatar SHA for a"
      " chat room group\022\313\001\n!SetChatRoomGroupWat"
      "chingBroadcast\0224.CChatRoom_SetChatRoomGr"
      "oupWatchingBroadcast_Request\0325.CChatRoom"
      "_SetChatRoomGroupWatchingBroadcast_Respo"
      "nse\"9\202\265\0305Sets a broadcast that the chat "
      "room group is watching\022d\n\017MuteUserInGrou"
      "p\022\033.CChatRoom_MuteUser_Request\032\034.CChatRo"
      "om_MuteUser_Response\"\026\202\265\030\022Mute user in g"
      "roup\022h\n\021KickUserFromGroup\022\033.CChatRoom_Ki"
      "ckUser_Request\032\034.CChatRoom_KickUser_Resp"
      "onse\"\030\202\265\030\024Kick user from group\022y\n\017SetUse"
      "rBanState\022\".CChatRoom_SetUserBanState_Re"
      "quest\032#.CChatRoom_SetUserBanState_Respon"
      "se\"\035\202\265\030\031Ban/unban user from group\022\202\001\n\023Re"
      "vokeInviteToGroup\022\037.CChatRoom_RevokeInvi"
      "te_Request\032 .CChatRoom_RevokeInvite_Resp"
      "onse\"(\202\265\030$Revoke a direct invitation of "
      "a user\022e\n\nCreateRole\022\035.CChatRoom_CreateR"
      "ole_Request\032\036.CChatRoom_CreateRole_Respo"
      "nse\"\030\202\265\030\024Create role for goup\022a\n\010GetRole"
      "s\022\033.CChatRoom_GetRoles_Request\032\034.CChatRo"
      "om_GetRoles_Response\"\032\202\265\030\026Get all roles "
      "in group\022e\n\nRenameRole\022\035.CChatRoom_Renam"
      "eRole_Request\032\036.CChatRoom_RenameRole_Res"
      "ponse\"\030\202\265\030\024Rename role for goup\022l\n\013Reord"
      "erRole\022\036.CChatRoom_ReorderRole_Request\032\037"
      ".CChatRoom_ReorderRole_Response\"\034\202\265\030\030Reo"
      "rder role with a goup\022g\n\nDeleteRole\022\035.CC"
      "hatRoom_DeleteRole_Request\032\036.CChatRoom_D"
      "eleteRole_Response\"\032\202\265\030\026Delete role from"
      " group\022\207\001\n\016GetRoleActions\022!.CChatRoom_Ge"
      "tRoleActions_Request\032\".CChatRoom_GetRole"
      "Actions_Response\".\202\265\030*Get all defined ro"
      "les and actions in group\022\206\001\n\022ReplaceRole"
      "Actions\022%.CChatRoom_ReplaceRoleActions_R"
      "equest\032&.CChatRoom_ReplaceRoleActions_Re"
      "sponse\"!\202\265\030\035Replace role actions in grou"
      "p\022s\n\rAddRoleToUser\022 .CChatRoom_AddRoleTo"
      "User_Request\032!.CChatRoom_AddRoleToUser_R"
      "esponse\"\035\202\265\030\031Add role to user in group\022\207"
      "\001\n\017GetRolesForUser\022\".CChatRoom_GetRolesF"
      "orUser_Request\032#.CChatRoom_GetRolesForUs"
      "er_Response\"+\202\265\030\'Get all roles assigned "
      "to user in group\022\207\001\n\022DeleteRoleFromUser\022"
      "%.CChatRoom_DeleteRoleFromUser_Request\032&"
      ".CChatRoom_DeleteRoleFromUser_Response\"\""
      "\202\265\030\036Delete role from user in group\022\201\001\n\021J"
      "oinChatRoomGroup\022$.CChatRoom_JoinChatRoo"
      "mGroup_Request\032%.CChatRoom_JoinChatRoomG"
      "roup_Response\"\037\202\265\030\033Join a multi-user cha"
      "t room\022\255\001\n\033InviteFriendToChatRoomGroup\022."
      ".CChatRoom_InviteFriendToChatRoomGroup_R"
      "equest\032/.CChatRoom_InviteFriendToChatRoo"
      "mGroup_Response\"-\202\265\030)Invite a friend to "
      "a multi-user chat room\022\227\001\n\022LeaveChatRoom"
      "Group\022%.CChatRoom_LeaveChatRoomGroup_Req"
      "uest\032&.CChatRoom_LeaveChatRoomGroup_Resp"
      "onse\"2\202\265\030.Leaves a chat room group and a"
      "ll related chats\022\211\001\n\016CreateChatRoom\022!.CC"
      "hatRoom_CreateChatRoom_Request\032\".CChatRo"
      "om_CreateChatRoom_Response\"0\202\265\030,Creates "
      "a chat room inside a chat room group\022\211\001\n"
      "\016DeleteChatRoom\022!.CChatRoom_DeleteChatRo"
      "om_Request\032\".CChatRoom_DeleteChatRoom_Re"
      "sponse\"0\202\265\030,Deletes a chat room inside a"
      " chat room group\022\211\001\n\016RenameChatRoom\022!.CC"
      "hatRoom_RenameChatRoom_Request\032\".CChatRo"
      "om_RenameChatRoom_Response\"0\202\265\030,Renames "
      "a chat room inside a chat room group\022\215\001\n"
      "\017ReorderChatRoom\022\".CChatRoom_ReorderChat"
      "Room_Request\032#.CChatRoom_ReorderChatRoom"
      "_Response\"1\202\265\030-Reorders a chat room insi"
      "de a chat room group\022\215\001\n\017SendChatMessage"
      "\022\".CChatRoom_SendChatMessage_Request\032#.C"
      "ChatRoom_SendChatMessage_Response\"1\202\265\030-S"
      "end a chat message to a multi-user chat "
      "room\022\247\001\n\rJoinVoiceChat\022 .CChatRoom_JoinV"
      "oiceChat_Request\032!.CChatRoom_JoinVoiceCh"
      "at_Response\"Q\202\265\030MJoin the voice chat in "
      "a multi-room chat (should already be in "
      "the chat room)\022\206\001\n\016LeaveVoiceChat\022!.CCha"
      "tRoom_LeaveVoiceChat_Request\032\".CChatRoom"
      "_LeaveVoiceChat_Response\"-\202\265\030)Leave the "
      "voice chat in a multi-room chat\022\303\001\n\021GetM"
      "essageHistory\022$.CChatRoom_GetMessageHist"
      "ory_Request\032%.CChatRoom_GetMessageHistor"
      "y_Response\"a\202\265\030]Get the history of messa"
      "ges in a chat room.  You must currently "
      "be a member of the chat room.\022\210\001\n\023GetMyC"
      "hatRoomGroups\022&.CChatRoom_GetMyChatRoomG"
      "roups_Request\032\'.CChatRoom_GetMyChatRoomG"
      "roups_Response\" \202\265\030\034Get a list of our ch"
      "at rooms\022\232\001\n\025GetChatRoomGroupState\022(.CCh"
      "atRoom_GetChatRoomGroupState_Request\032).C"
      "ChatRoom_GetChatRoomGroupState_Response\""
      ",\202\265\030(Get information about a single chat"
      " room\022\245\001\n\027GetChatRoomGroupSummary\022*.CCha"
      "tRoom_GetChatRoomGroupSummary_Request\032+."
      "CChatRoom_GetChatRoomGroupSummary_Respon"
      "se\"1\202\265\030-Get basic information about a ch"
      "at room group\022\217\001\n\016AckChatMessage\022&.CChat"
      "Room_AckChatMessage_Notification\032\013.NoRes"
      "ponse\"H\202\265\030DAcknowledge that we have seen"
      " the most recent chat message in a chat\022"
      "\201\001\n\020CreateInviteLink\022#.CChatRoom_CreateI"
      "nviteLink_Request\032$.CChatRoom_CreateInvi"
      "teLink_Response\"\"\202\265\030\036Creates a chatroom "
      "invite link\022\220\001\n\021GetInviteLinkInfo\022$.CCha"
      "tRoom_GetInviteLinkInfo_Request\032%.CChatR"
      "oom_GetInviteLinkInfo_Response\".\202\265\030*Retu"
      "rns chat room info about provided link\022\252"
      "\001\n\rGetInviteInfo\022 .CChatRoom_GetInviteIn"
      "fo_Request\032!.CChatRoom_GetInviteInfo_Res"
      "ponse\"T\202\265\030PReturns chat room info about "
      "any invite involving the sender and pass"
      "ed group id\022\245\001\n\026GetInviteLinksForGroup\022)"
      ".CChatRoom_GetInviteLinksForGroup_Reques"
      "t\032*.CChatRoom_GetInviteLinksForGroup_Res"
      "ponse\"4\202\265\0300Returns all invite links for "
      "the specified group\022\213\001\n\nGetBanList\022\035.CCh"
      "atRoom_GetBanList_Request\032\036.CChatRoom_Ge"
      "tBanList_Response\">\202\265\030:Gets a list of us"
      "ers who have been banned from a chat roo"
      "m\022\223\001\n\rGetInviteList\022 .CChatRoom_GetInvit"
      "eList_Request\032!.CChatRoom_GetInviteList_"
      "Response\"=\202\265\0309Gets a list of users who h"
      "ave been invited to a chat room\022\200\001\n\020Dele"
      "teInviteLink\022#.CChatRoom_DeleteInviteLin"
      "k_Request\032$.CChatRoom_DeleteInviteLink_R"
      "esponse\"!\202\265\030\035Deletes specified invite li"
      "nk\022\304\001\n\036SetSessionActiveChatRoomGroups\0221."
      "CChatRoom_SetSessionActiveChatRoomGroups"
      "_Request\0322.CChatRoom_SetSessionActiveCha"
      "tRoomGroups_Response\";\202\265\0307Set which chat"
      " rooms we are using in the active sessio"
      "n\022\271\001\n\033SetUserChatGroupPreferences\022..CCha"
      "tRoom_SetUserChatGroupPreferences_Reques"
      "t\032/.CChatRoom_SetUserChatGroupPreference"
      "s_Response\"9\202\265\0305Set preferences around c"
      "hat notifications for a group\022\210\001\n\022Delete"
      "ChatMessages\022%.CChatRoom_DeleteChatMessa"
      "ges_Request\032&.CChatRoom_DeleteChatMessag"
      "es_Response\"#\202\265\030\037Deletes specified chat "
      "messages\032B\202\265\030>Service for joining, manag"
      "ing, and using multi-user chat rooms2\256\003\n"
      "\rClanChatRooms\022\270\001\n\023GetClanChatRoomInfo\022+"
      ".CClanChatRooms_GetClanChatRoomInfo_Requ"
      "est\032,.CClanChatRooms_GetClanChatRoomInfo"
      "_Response\"F\202\265\030BGet a list of chat rooms "
      "for a clan, optionally creating a new on"
      "e\022\262\001\n\026SetClanChatRoomPrivate\022..CClanChat"
      "Rooms_SetClanChatRoomPrivate_Request\032/.C"
      "ClanChatRooms_SetClanChatRoomPrivate_Res"
      "ponse\"7\202\265\0303Set a clan chat room to be me"
      "mbers only (or public)\032-\202\265\030)Methods for "
      "getting clan chat information2\276\n\n\016ChatRo"
      "omClient\022{\n\031NotifyIncomingChatMessage\022+."
      "CChatRoom_IncomingChatMessage_Notificati"
      "on\032\013.NoResponse\"$\202\265\030 New chat message fo"
      "r a chat room\022\224\001\n\031NotifyChatMessageModif"
      "ied\022+.CChatRoom_ChatMessageModified_Noti"
      "fication\032\013.NoResponse\"=\202\265\0309An existing c"
      "hat message has been modified on the bac"
      "kend\022\225\001\n\027NotifyMemberStateChange\022).CChat"
      "Room_MemberStateChange_Notification\032\013.No"
      "Response\"B\202\265\030>A chat room member\'s state"
      " has changed (join/part/permissions)\022\210\001\n"
      "\037NotifyChatRoomHeaderStateChange\022+.CChat"
      "Room_ChatRoomHeaderState_Notification\032\013."
      "NoResponse\"+\202\265\030\'Chat Room header / metad"
      "ata has changed\022\246\001\n\036NotifyChatRoomGroupR"
      "oomsChange\0220.CChatRoom_ChatRoomGroupRoom"
      "sChange_Notification\032\013.NoResponse\"E\202\265\030AS"
      "omething about a chatroom group changed "
      "(created, deleted, etc.)\022\325\001\n#NotifyShoul"
      "dRejoinChatRoomVoiceChat\022;.CChatRoom_Not"
      "ifyShouldRejoinChatRoomVoiceChat_Notific"
      "ation\032\013.NoResponse\"d\202\265\030`Voice chat was r"
      "ecreated or dropped on the backend and c"
      "lient needs to rejoin to remain in chat."
      "\022\263\001\n\037NotifyChatGroupUserStateChanged\022<.C"
      "hatRoomClient_NotifyChatGroupUserStateCh"
      "anged_Notification\032\013.NoResponse\"E\202\265\030AUse"
      "r chat group state (preferences, ack sta"
      "te, etc) have changed.\022\217\001\n\030NotifyAckChat"
      "MessageEcho\022&.CChatRoom_AckChatMessage_N"
      "otification\032\013.NoResponse\">\202\265\030:A session "
      "acked an unread message, echo to other s"
      "essions.\032,\202\265\030$Client notifications for c"
      "hat events\300\265\030\0022\302\001\n\rChatUsability\022\206\001\n\034Not"
      "ifyClientUsabilityMetrics\0223.CChatUsabili"
      "ty_ClientUsabilityMetrics_Notification\032\013"
      ".NoResponse\"$\202\265\030 Incoming metrics from t"
      "he client\032(\202\265\030$Client notifications for "
      "chat events2\342\001\n\023ChatUsabilityClient\022\231\001\n#"
      "NotifyRequestClientUsabilityMetrics\022:.CC"
      "hatUsability_RequestClientUsabilityMetri"
      "cs_Notification\032\013.NoResponse\")\202\265\030%Reques"
      "t client send usability metrics\032/\202\265\030\'Cli"
      "ent notifications for chat usability\300\265\030\002"
      "B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 26725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_chat.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fchat_2esteamclient_2eproto
const ::google::protobuf::EnumDescriptor* EChatRoomJoinState_descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_enum_descriptors[0];
}
bool EChatRoomJoinState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomGroupRank_descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_enum_descriptors[1];
}
bool EChatRoomGroupRank_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 15:
    case 20:
    case 30:
    case 40:
    case 50:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomNotificationLevel_descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_enum_descriptors[2];
}
bool EChatRoomNotificationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomServerMessage_descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_enum_descriptors[3];
}
bool EChatRoomServerMessage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomMemberStateChange_descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_enum_descriptors[4];
}
bool EChatRoomMemberStateChange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CChat_RequestFriendPersonaStates_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChat_RequestFriendPersonaStates_Request::CChat_RequestFriendPersonaStates_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChat_RequestFriendPersonaStates_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChat_RequestFriendPersonaStates_Request)
}
CChat_RequestFriendPersonaStates_Request::CChat_RequestFriendPersonaStates_Request(const CChat_RequestFriendPersonaStates_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChat_RequestFriendPersonaStates_Request)
}

void CChat_RequestFriendPersonaStates_Request::SharedCtor() {
}

CChat_RequestFriendPersonaStates_Request::~CChat_RequestFriendPersonaStates_Request() {
  // @@protoc_insertion_point(destructor:CChat_RequestFriendPersonaStates_Request)
  SharedDtor();
}

void CChat_RequestFriendPersonaStates_Request::SharedDtor() {
}

void CChat_RequestFriendPersonaStates_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChat_RequestFriendPersonaStates_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChat_RequestFriendPersonaStates_Request& CChat_RequestFriendPersonaStates_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChat_RequestFriendPersonaStates_Request.base);
  return *internal_default_instance();
}


void CChat_RequestFriendPersonaStates_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChat_RequestFriendPersonaStates_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChat_RequestFriendPersonaStates_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChat_RequestFriendPersonaStates_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChat_RequestFriendPersonaStates_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChat_RequestFriendPersonaStates_Request)
  return false;
#undef DO_
}

void CChat_RequestFriendPersonaStates_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChat_RequestFriendPersonaStates_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChat_RequestFriendPersonaStates_Request)
}

::google::protobuf::uint8* CChat_RequestFriendPersonaStates_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChat_RequestFriendPersonaStates_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChat_RequestFriendPersonaStates_Request)
  return target;
}

size_t CChat_RequestFriendPersonaStates_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChat_RequestFriendPersonaStates_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChat_RequestFriendPersonaStates_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChat_RequestFriendPersonaStates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChat_RequestFriendPersonaStates_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChat_RequestFriendPersonaStates_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChat_RequestFriendPersonaStates_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChat_RequestFriendPersonaStates_Request)
    MergeFrom(*source);
  }
}

void CChat_RequestFriendPersonaStates_Request::MergeFrom(const CChat_RequestFriendPersonaStates_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChat_RequestFriendPersonaStates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChat_RequestFriendPersonaStates_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChat_RequestFriendPersonaStates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChat_RequestFriendPersonaStates_Request::CopyFrom(const CChat_RequestFriendPersonaStates_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChat_RequestFriendPersonaStates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChat_RequestFriendPersonaStates_Request::IsInitialized() const {
  return true;
}

void CChat_RequestFriendPersonaStates_Request::Swap(CChat_RequestFriendPersonaStates_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChat_RequestFriendPersonaStates_Request::InternalSwap(CChat_RequestFriendPersonaStates_Request* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChat_RequestFriendPersonaStates_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChat_RequestFriendPersonaStates_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChat_RequestFriendPersonaStates_Response::CChat_RequestFriendPersonaStates_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChat_RequestFriendPersonaStates_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChat_RequestFriendPersonaStates_Response)
}
CChat_RequestFriendPersonaStates_Response::CChat_RequestFriendPersonaStates_Response(const CChat_RequestFriendPersonaStates_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChat_RequestFriendPersonaStates_Response)
}

void CChat_RequestFriendPersonaStates_Response::SharedCtor() {
}

CChat_RequestFriendPersonaStates_Response::~CChat_RequestFriendPersonaStates_Response() {
  // @@protoc_insertion_point(destructor:CChat_RequestFriendPersonaStates_Response)
  SharedDtor();
}

void CChat_RequestFriendPersonaStates_Response::SharedDtor() {
}

void CChat_RequestFriendPersonaStates_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChat_RequestFriendPersonaStates_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChat_RequestFriendPersonaStates_Response& CChat_RequestFriendPersonaStates_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChat_RequestFriendPersonaStates_Response.base);
  return *internal_default_instance();
}


void CChat_RequestFriendPersonaStates_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChat_RequestFriendPersonaStates_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChat_RequestFriendPersonaStates_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChat_RequestFriendPersonaStates_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChat_RequestFriendPersonaStates_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChat_RequestFriendPersonaStates_Response)
  return false;
#undef DO_
}

void CChat_RequestFriendPersonaStates_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChat_RequestFriendPersonaStates_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChat_RequestFriendPersonaStates_Response)
}

::google::protobuf::uint8* CChat_RequestFriendPersonaStates_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChat_RequestFriendPersonaStates_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChat_RequestFriendPersonaStates_Response)
  return target;
}

size_t CChat_RequestFriendPersonaStates_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChat_RequestFriendPersonaStates_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChat_RequestFriendPersonaStates_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChat_RequestFriendPersonaStates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChat_RequestFriendPersonaStates_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChat_RequestFriendPersonaStates_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChat_RequestFriendPersonaStates_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChat_RequestFriendPersonaStates_Response)
    MergeFrom(*source);
  }
}

void CChat_RequestFriendPersonaStates_Response::MergeFrom(const CChat_RequestFriendPersonaStates_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChat_RequestFriendPersonaStates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChat_RequestFriendPersonaStates_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChat_RequestFriendPersonaStates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChat_RequestFriendPersonaStates_Response::CopyFrom(const CChat_RequestFriendPersonaStates_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChat_RequestFriendPersonaStates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChat_RequestFriendPersonaStates_Response::IsInitialized() const {
  return true;
}

void CChat_RequestFriendPersonaStates_Response::Swap(CChat_RequestFriendPersonaStates_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChat_RequestFriendPersonaStates_Response::InternalSwap(CChat_RequestFriendPersonaStates_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChat_RequestFriendPersonaStates_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateChatRoomGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateChatRoomGroup_Request::kSteamidPartnerFieldNumber;
const int CChatRoom_CreateChatRoomGroup_Request::kSteamidInvitedFieldNumber;
const int CChatRoom_CreateChatRoomGroup_Request::kNameFieldNumber;
const int CChatRoom_CreateChatRoomGroup_Request::kSteamidInviteesFieldNumber;
const int CChatRoom_CreateChatRoomGroup_Request::kWatchingBroadcastAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateChatRoomGroup_Request::CChatRoom_CreateChatRoomGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoomGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateChatRoomGroup_Request)
}
CChatRoom_CreateChatRoomGroup_Request::CChatRoom_CreateChatRoomGroup_Request(const CChatRoom_CreateChatRoomGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      steamid_invitees_(from.steamid_invitees_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&steamid_partner_, &from.steamid_partner_,
    static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_accountid_) -
    reinterpret_cast<char*>(&steamid_partner_)) + sizeof(watching_broadcast_accountid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoomGroup_Request)
}

void CChatRoom_CreateChatRoomGroup_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_partner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watching_broadcast_accountid_) -
      reinterpret_cast<char*>(&steamid_partner_)) + sizeof(watching_broadcast_accountid_));
}

CChatRoom_CreateChatRoomGroup_Request::~CChatRoom_CreateChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoomGroup_Request)
  SharedDtor();
}

void CChatRoom_CreateChatRoomGroup_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateChatRoomGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateChatRoomGroup_Request& CChatRoom_CreateChatRoomGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoomGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_CreateChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_invitees_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&steamid_partner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_accountid_) -
        reinterpret_cast<char*>(&steamid_partner_)) + sizeof(watching_broadcast_accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateChatRoomGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateChatRoomGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_partner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid_partner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_partner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_invited = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid_invited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_CreateChatRoomGroup_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_invitees = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33u, input, this->mutable_steamid_invitees())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_invitees())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_accountid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_watching_broadcast_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateChatRoomGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateChatRoomGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_CreateChatRoomGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_partner = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_partner(), output);
  }

  // optional fixed64 steamid_invited = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_invited(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateChatRoomGroup_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated fixed64 steamid_invitees = 4;
  for (int i = 0, n = this->steamid_invitees_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->steamid_invitees(i), output);
  }

  // optional uint32 watching_broadcast_accountid = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->watching_broadcast_accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateChatRoomGroup_Request)
}

::google::protobuf::uint8* CChatRoom_CreateChatRoomGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_partner = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_partner(), target);
  }

  // optional fixed64 steamid_invited = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_invited(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateChatRoomGroup_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated fixed64 steamid_invitees = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(4, this->steamid_invitees_, target);

  // optional uint32 watching_broadcast_accountid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->watching_broadcast_accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_CreateChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoomGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed64 steamid_invitees = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->steamid_invitees_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_invitees_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steamid_partner = 1;
    if (has_steamid_partner()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_invited = 2;
    if (has_steamid_invited()) {
      total_size += 1 + 8;
    }

    // optional uint32 watching_broadcast_accountid = 6;
    if (has_watching_broadcast_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateChatRoomGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateChatRoomGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateChatRoomGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateChatRoomGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateChatRoomGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateChatRoomGroup_Request::MergeFrom(const CChatRoom_CreateChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_invitees_.MergeFrom(from.steamid_invitees_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_partner_ = from.steamid_partner_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_invited_ = from.steamid_invited_;
    }
    if (cached_has_bits & 0x00000008u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_CreateChatRoomGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateChatRoomGroup_Request::CopyFrom(const CChatRoom_CreateChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoomGroup_Request::Swap(CChatRoom_CreateChatRoomGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateChatRoomGroup_Request::InternalSwap(CChatRoom_CreateChatRoomGroup_Request* other) {
  using std::swap;
  steamid_invitees_.InternalSwap(&other->steamid_invitees_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_partner_, other->steamid_partner_);
  swap(steamid_invited_, other->steamid_invited_);
  swap(watching_broadcast_accountid_, other->watching_broadcast_accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateChatRoomGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRole::kRoleIdFieldNumber;
const int CChatRole::kNameFieldNumber;
const int CChatRole::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRole::CChatRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRole.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRole)
}
CChatRole::CChatRole(const CChatRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRole)
}

void CChatRole::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ordinal_));
}

CChatRole::~CChatRole() {
  // @@protoc_insertion_point(destructor:CChatRole)
  SharedDtor();
}

void CChatRole::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRole::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRole& CChatRole::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRole.base);
  return *internal_default_instance();
}


void CChatRole::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&role_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&role_id_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRole)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRole.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRole)
  return false;
#undef DO_
}

void CChatRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 role_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRole.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRole)
}

::google::protobuf::uint8* CChatRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 role_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRole.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRole)
  return target;
}

size_t CChatRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRole)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ordinal = 3;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRole)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRole)
    MergeFrom(*source);
  }
}

void CChatRole::MergeFrom(const CChatRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRole::CopyFrom(const CChatRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRole::IsInitialized() const {
  return true;
}

void CChatRole::Swap(CChatRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRole::InternalSwap(CChatRole* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRole::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoleActions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoleActions::kRoleIdFieldNumber;
const int CChatRoleActions::kCanCreateRenameDeleteChannelFieldNumber;
const int CChatRoleActions::kCanKickFieldNumber;
const int CChatRoleActions::kCanBanFieldNumber;
const int CChatRoleActions::kCanInviteFieldNumber;
const int CChatRoleActions::kCanChangeTaglineAvatarNameFieldNumber;
const int CChatRoleActions::kCanChatFieldNumber;
const int CChatRoleActions::kCanViewHistoryFieldNumber;
const int CChatRoleActions::kCanChangeGroupRolesFieldNumber;
const int CChatRoleActions::kCanChangeUserRolesFieldNumber;
const int CChatRoleActions::kCanMentionAllFieldNumber;
const int CChatRoleActions::kCanSetWatchingBroadcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoleActions::CChatRoleActions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoleActions)
}
CChatRoleActions::CChatRoleActions(const CChatRoleActions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_set_watching_broadcast_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(can_set_watching_broadcast_));
  // @@protoc_insertion_point(copy_constructor:CChatRoleActions)
}

void CChatRoleActions::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_set_watching_broadcast_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(can_set_watching_broadcast_));
}

CChatRoleActions::~CChatRoleActions() {
  // @@protoc_insertion_point(destructor:CChatRoleActions)
  SharedDtor();
}

void CChatRoleActions::SharedDtor() {
}

void CChatRoleActions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoleActions::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoleActions& CChatRoleActions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoleActions.base);
  return *internal_default_instance();
}


void CChatRoleActions::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoleActions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&role_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_view_history_) -
        reinterpret_cast<char*>(&role_id_)) + sizeof(can_view_history_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&can_change_group_roles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_set_watching_broadcast_) -
        reinterpret_cast<char*>(&can_change_group_roles_)) + sizeof(can_set_watching_broadcast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoleActions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoleActions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_create_rename_delete_channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_can_create_rename_delete_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_create_rename_delete_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_kick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_can_kick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_kick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_ban = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_can_ban();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_ban_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_invite = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_can_invite();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_invite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_change_tagline_avatar_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_can_change_tagline_avatar_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_change_tagline_avatar_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_chat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_can_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_view_history = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_can_view_history();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_view_history_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_change_group_roles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_can_change_group_roles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_change_group_roles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_change_user_roles = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_can_change_user_roles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_change_user_roles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_mention_all = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_can_mention_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_mention_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_set_watching_broadcast = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_can_set_watching_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_watching_broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoleActions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoleActions)
  return false;
#undef DO_
}

void CChatRoleActions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoleActions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 role_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional bool can_create_rename_delete_channel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_create_rename_delete_channel(), output);
  }

  // optional bool can_kick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_kick(), output);
  }

  // optional bool can_ban = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_ban(), output);
  }

  // optional bool can_invite = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->can_invite(), output);
  }

  // optional bool can_change_tagline_avatar_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_change_tagline_avatar_name(), output);
  }

  // optional bool can_chat = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_chat(), output);
  }

  // optional bool can_view_history = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->can_view_history(), output);
  }

  // optional bool can_change_group_roles = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->can_change_group_roles(), output);
  }

  // optional bool can_change_user_roles = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_change_user_roles(), output);
  }

  // optional bool can_mention_all = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->can_mention_all(), output);
  }

  // optional bool can_set_watching_broadcast = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_set_watching_broadcast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoleActions)
}

::google::protobuf::uint8* CChatRoleActions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoleActions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 role_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional bool can_create_rename_delete_channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_create_rename_delete_channel(), target);
  }

  // optional bool can_kick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_kick(), target);
  }

  // optional bool can_ban = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_ban(), target);
  }

  // optional bool can_invite = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->can_invite(), target);
  }

  // optional bool can_change_tagline_avatar_name = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_change_tagline_avatar_name(), target);
  }

  // optional bool can_chat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->can_chat(), target);
  }

  // optional bool can_view_history = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->can_view_history(), target);
  }

  // optional bool can_change_group_roles = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->can_change_group_roles(), target);
  }

  // optional bool can_change_user_roles = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_change_user_roles(), target);
  }

  // optional bool can_mention_all = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->can_mention_all(), target);
  }

  // optional bool can_set_watching_broadcast = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_set_watching_broadcast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoleActions)
  return target;
}

size_t CChatRoleActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoleActions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional bool can_create_rename_delete_channel = 2;
    if (has_can_create_rename_delete_channel()) {
      total_size += 1 + 1;
    }

    // optional bool can_kick = 3;
    if (has_can_kick()) {
      total_size += 1 + 1;
    }

    // optional bool can_ban = 4;
    if (has_can_ban()) {
      total_size += 1 + 1;
    }

    // optional bool can_invite = 5;
    if (has_can_invite()) {
      total_size += 1 + 1;
    }

    // optional bool can_change_tagline_avatar_name = 6;
    if (has_can_change_tagline_avatar_name()) {
      total_size += 1 + 1;
    }

    // optional bool can_chat = 7;
    if (has_can_chat()) {
      total_size += 1 + 1;
    }

    // optional bool can_view_history = 8;
    if (has_can_view_history()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool can_change_group_roles = 9;
    if (has_can_change_group_roles()) {
      total_size += 1 + 1;
    }

    // optional bool can_change_user_roles = 10;
    if (has_can_change_user_roles()) {
      total_size += 1 + 1;
    }

    // optional bool can_mention_all = 11;
    if (has_can_mention_all()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_watching_broadcast = 12;
    if (has_can_set_watching_broadcast()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoleActions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoleActions)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoleActions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoleActions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoleActions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoleActions)
    MergeFrom(*source);
  }
}

void CChatRoleActions::MergeFrom(const CChatRoleActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoleActions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_create_rename_delete_channel_ = from.can_create_rename_delete_channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_kick_ = from.can_kick_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_ban_ = from.can_ban_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_invite_ = from.can_invite_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_change_tagline_avatar_name_ = from.can_change_tagline_avatar_name_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_chat_ = from.can_chat_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_view_history_ = from.can_view_history_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      can_change_group_roles_ = from.can_change_group_roles_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_change_user_roles_ = from.can_change_user_roles_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_mention_all_ = from.can_mention_all_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_set_watching_broadcast_ = from.can_set_watching_broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoleActions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoleActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoleActions::CopyFrom(const CChatRoleActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoleActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoleActions::IsInitialized() const {
  return true;
}

void CChatRoleActions::Swap(CChatRoleActions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoleActions::InternalSwap(CChatRoleActions* other) {
  using std::swap;
  swap(role_id_, other->role_id_);
  swap(can_create_rename_delete_channel_, other->can_create_rename_delete_channel_);
  swap(can_kick_, other->can_kick_);
  swap(can_ban_, other->can_ban_);
  swap(can_invite_, other->can_invite_);
  swap(can_change_tagline_avatar_name_, other->can_change_tagline_avatar_name_);
  swap(can_chat_, other->can_chat_);
  swap(can_view_history_, other->can_view_history_);
  swap(can_change_group_roles_, other->can_change_group_roles_);
  swap(can_change_user_roles_, other->can_change_user_roles_);
  swap(can_mention_all_, other->can_mention_all_);
  swap(can_set_watching_broadcast_, other->can_set_watching_broadcast_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoleActions::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatPartyBeacon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatPartyBeacon::kAppIdFieldNumber;
const int CChatPartyBeacon::kSteamidOwnerFieldNumber;
const int CChatPartyBeacon::kBeaconIdFieldNumber;
const int CChatPartyBeacon::kGameMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatPartyBeacon::CChatPartyBeacon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatPartyBeacon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatPartyBeacon)
}
CChatPartyBeacon::CChatPartyBeacon(const CChatPartyBeacon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_metadata()) {
    game_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_metadata_);
  }
  ::memcpy(&steamid_owner_, &from.steamid_owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steamid_owner_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CChatPartyBeacon)
}

void CChatPartyBeacon::SharedCtor() {
  game_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steamid_owner_)) + sizeof(app_id_));
}

CChatPartyBeacon::~CChatPartyBeacon() {
  // @@protoc_insertion_point(destructor:CChatPartyBeacon)
  SharedDtor();
}

void CChatPartyBeacon::SharedDtor() {
  game_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatPartyBeacon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatPartyBeacon::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatPartyBeacon& CChatPartyBeacon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatPartyBeacon.base);
  return *internal_default_instance();
}


void CChatPartyBeacon::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatPartyBeacon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_metadata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&steamid_owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steamid_owner_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatPartyBeacon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatPartyBeacon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 beacon_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_beacon_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &beacon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_metadata().data(), static_cast<int>(this->game_metadata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatPartyBeacon.game_metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatPartyBeacon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatPartyBeacon)
  return false;
#undef DO_
}

void CChatPartyBeacon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatPartyBeacon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steamid_owner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_owner(), output);
  }

  // optional fixed64 beacon_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->beacon_id(), output);
  }

  // optional string game_metadata = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_metadata().data(), static_cast<int>(this->game_metadata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatPartyBeacon.game_metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatPartyBeacon)
}

::google::protobuf::uint8* CChatPartyBeacon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatPartyBeacon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steamid_owner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_owner(), target);
  }

  // optional fixed64 beacon_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->beacon_id(), target);
  }

  // optional string game_metadata = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_metadata().data(), static_cast<int>(this->game_metadata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatPartyBeacon.game_metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatPartyBeacon)
  return target;
}

size_t CChatPartyBeacon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatPartyBeacon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_metadata = 4;
    if (has_game_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_metadata());
    }

    // optional fixed64 steamid_owner = 2;
    if (has_steamid_owner()) {
      total_size += 1 + 8;
    }

    // optional fixed64 beacon_id = 3;
    if (has_beacon_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatPartyBeacon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatPartyBeacon)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatPartyBeacon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatPartyBeacon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatPartyBeacon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatPartyBeacon)
    MergeFrom(*source);
  }
}

void CChatPartyBeacon::MergeFrom(const CChatPartyBeacon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatPartyBeacon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_metadata();
      game_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_owner_ = from.steamid_owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatPartyBeacon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatPartyBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatPartyBeacon::CopyFrom(const CChatPartyBeacon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatPartyBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatPartyBeacon::IsInitialized() const {
  return true;
}

void CChatPartyBeacon::Swap(CChatPartyBeacon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatPartyBeacon::InternalSwap(CChatPartyBeacon* other) {
  using std::swap;
  game_metadata_.Swap(&other->game_metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_owner_, other->steamid_owner_);
  swap(beacon_id_, other->beacon_id_);
  swap(app_id_, other->app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatPartyBeacon::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoomGroupHeaderState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoomGroupHeaderState::kChatGroupIdFieldNumber;
const int CChatRoomGroupHeaderState::kChatNameFieldNumber;
const int CChatRoomGroupHeaderState::kClanidFieldNumber;
const int CChatRoomGroupHeaderState::kAccountidOwnerFieldNumber;
const int CChatRoomGroupHeaderState::kAppidFieldNumber;
const int CChatRoomGroupHeaderState::kTaglineFieldNumber;
const int CChatRoomGroupHeaderState::kAvatarShaFieldNumber;
const int CChatRoomGroupHeaderState::kDefaultRoleIdFieldNumber;
const int CChatRoomGroupHeaderState::kRolesFieldNumber;
const int CChatRoomGroupHeaderState::kRoleActionsFieldNumber;
const int CChatRoomGroupHeaderState::kWatchingBroadcastAccountidFieldNumber;
const int CChatRoomGroupHeaderState::kPartyBeaconsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoomGroupHeaderState::CChatRoomGroupHeaderState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupHeaderState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoomGroupHeaderState)
}
CChatRoomGroupHeaderState::CChatRoomGroupHeaderState(const CChatRoomGroupHeaderState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      roles_(from.roles_),
      role_actions_(from.role_actions_),
      party_beacons_(from.party_beacons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_name()) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  tagline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tagline()) {
    tagline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagline_);
  }
  avatar_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_sha()) {
    avatar_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_sha_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomGroupHeaderState)
}

void CChatRoomGroupHeaderState::SharedCtor() {
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(appid_));
}

CChatRoomGroupHeaderState::~CChatRoomGroupHeaderState() {
  // @@protoc_insertion_point(destructor:CChatRoomGroupHeaderState)
  SharedDtor();
}

void CChatRoomGroupHeaderState::SharedDtor() {
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoomGroupHeaderState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoomGroupHeaderState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoomGroupHeaderState& CChatRoomGroupHeaderState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupHeaderState.base);
  return *internal_default_instance();
}


void CChatRoomGroupHeaderState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomGroupHeaderState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  role_actions_.Clear();
  party_beacons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tagline_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      avatar_sha_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_accountid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoomGroupHeaderState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoomGroupHeaderState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chat_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_name().data(), static_cast<int>(this->chat_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoomGroupHeaderState.chat_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clanid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_clanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid_owner = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_accountid_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tagline = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagline().data(), static_cast<int>(this->tagline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoomGroupHeaderState.tagline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avatar_sha = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 default_role_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_default_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRole roles = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoleActions role_actions = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_role_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_accountid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_watching_broadcast_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatPartyBeacon party_beacons = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_party_beacons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoomGroupHeaderState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoomGroupHeaderState)
  return false;
#undef DO_
}

void CChatRoomGroupHeaderState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoomGroupHeaderState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string chat_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.chat_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_name(), output);
  }

  // optional uint32 clanid = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->clanid(), output);
  }

  // optional uint32 accountid_owner = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->accountid_owner(), output);
  }

  // optional string tagline = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagline().data(), static_cast<int>(this->tagline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.tagline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tagline(), output);
  }

  // optional bytes avatar_sha = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->avatar_sha(), output);
  }

  // optional uint64 default_role_id = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->default_role_id(), output);
  }

  // repeated .CChatRole roles = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->roles(static_cast<int>(i)),
      output);
  }

  // repeated .CChatRoleActions role_actions = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->role_actions(static_cast<int>(i)),
      output);
  }

  // optional uint32 watching_broadcast_accountid = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->watching_broadcast_accountid(), output);
  }

  // optional uint32 appid = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->appid(), output);
  }

  // repeated .CChatPartyBeacon party_beacons = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->party_beacons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->party_beacons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoomGroupHeaderState)
}

::google::protobuf::uint8* CChatRoomGroupHeaderState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomGroupHeaderState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string chat_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.chat_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_name(), target);
  }

  // optional uint32 clanid = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->clanid(), target);
  }

  // optional uint32 accountid_owner = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->accountid_owner(), target);
  }

  // optional string tagline = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagline().data(), static_cast<int>(this->tagline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.tagline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tagline(), target);
  }

  // optional bytes avatar_sha = 16;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->avatar_sha(), target);
  }

  // optional uint64 default_role_id = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->default_role_id(), target);
  }

  // repeated .CChatRole roles = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->roles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CChatRoleActions role_actions = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->role_actions(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 watching_broadcast_accountid = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->watching_broadcast_accountid(), target);
  }

  // optional uint32 appid = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->appid(), target);
  }

  // repeated .CChatPartyBeacon party_beacons = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->party_beacons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->party_beacons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomGroupHeaderState)
  return target;
}

size_t CChatRoomGroupHeaderState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomGroupHeaderState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRole roles = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // repeated .CChatRoleActions role_actions = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->role_actions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_actions(static_cast<int>(i)));
    }
  }

  // repeated .CChatPartyBeacon party_beacons = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->party_beacons_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->party_beacons(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string chat_name = 2;
    if (has_chat_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_name());
    }

    // optional string tagline = 15;
    if (has_tagline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagline());
    }

    // optional bytes avatar_sha = 16;
    if (has_avatar_sha()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_sha());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint32 clanid = 13;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clanid());
    }

    // optional uint32 accountid_owner = 14;
    if (has_accountid_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid_owner());
    }

    // optional uint64 default_role_id = 17;
    if (has_default_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_role_id());
    }

    // optional uint32 watching_broadcast_accountid = 20;
    if (has_watching_broadcast_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_accountid());
    }

  }
  // optional uint32 appid = 21;
  if (has_appid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoomGroupHeaderState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoomGroupHeaderState)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoomGroupHeaderState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoomGroupHeaderState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoomGroupHeaderState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoomGroupHeaderState)
    MergeFrom(*source);
  }
}

void CChatRoomGroupHeaderState::MergeFrom(const CChatRoomGroupHeaderState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomGroupHeaderState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  role_actions_.MergeFrom(from.role_actions_);
  party_beacons_.MergeFrom(from.party_beacons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chat_name();
      chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tagline();
      tagline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagline_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_avatar_sha();
      avatar_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_sha_);
    }
    if (cached_has_bits & 0x00000008u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      clanid_ = from.clanid_;
    }
    if (cached_has_bits & 0x00000020u) {
      accountid_owner_ = from.accountid_owner_;
    }
    if (cached_has_bits & 0x00000040u) {
      default_role_id_ = from.default_role_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_appid(from.appid());
  }
}

void CChatRoomGroupHeaderState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoomGroupHeaderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoomGroupHeaderState::CopyFrom(const CChatRoomGroupHeaderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomGroupHeaderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomGroupHeaderState::IsInitialized() const {
  return true;
}

void CChatRoomGroupHeaderState::Swap(CChatRoomGroupHeaderState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoomGroupHeaderState::InternalSwap(CChatRoomGroupHeaderState* other) {
  using std::swap;
  CastToBase(&roles_)->InternalSwap(CastToBase(&other->roles_));
  CastToBase(&role_actions_)->InternalSwap(CastToBase(&other->role_actions_));
  CastToBase(&party_beacons_)->InternalSwap(CastToBase(&other->party_beacons_));
  chat_name_.Swap(&other->chat_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tagline_.Swap(&other->tagline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_sha_.Swap(&other->avatar_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(clanid_, other->clanid_);
  swap(accountid_owner_, other->accountid_owner_);
  swap(default_role_id_, other->default_role_id_);
  swap(watching_broadcast_accountid_, other->watching_broadcast_accountid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoomGroupHeaderState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoomMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoomMember::kAccountidFieldNumber;
const int CChatRoomMember::kStateFieldNumber;
const int CChatRoomMember::kRankFieldNumber;
const int CChatRoomMember::kTimeKickExpireFieldNumber;
const int CChatRoomMember::kRoleIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoomMember::CChatRoomMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoomMember)
}
CChatRoomMember::CChatRoomMember(const CChatRoomMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      role_ids_(from.role_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_kick_expire_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_kick_expire_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomMember)
}

void CChatRoomMember::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_kick_expire_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(time_kick_expire_));
}

CChatRoomMember::~CChatRoomMember() {
  // @@protoc_insertion_point(destructor:CChatRoomMember)
  SharedDtor();
}

void CChatRoomMember::SharedDtor() {
}

void CChatRoomMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoomMember::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoomMember& CChatRoomMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomMember.base);
  return *internal_default_instance();
}


void CChatRoomMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_kick_expire_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(time_kick_expire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoomMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoomMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomJoinState_IsValid(value)) {
            set_state(static_cast< ::EChatRoomJoinState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomGroupRank_IsValid(value)) {
            set_rank(static_cast< ::EChatRoomGroupRank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_kick_expire = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_time_kick_expire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_kick_expire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 role_ids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56u, input, this->mutable_role_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoomMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoomMember)
  return false;
#undef DO_
}

void CChatRoomMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rank(), output);
  }

  // optional uint32 time_kick_expire = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_kick_expire(), output);
  }

  // repeated uint64 role_ids = 7;
  for (int i = 0, n = this->role_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->role_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoomMember)
}

::google::protobuf::uint8* CChatRoomMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rank(), target);
  }

  // optional uint32 time_kick_expire = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_kick_expire(), target);
  }

  // repeated uint64 role_ids = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(7, this->role_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomMember)
  return target;
}

size_t CChatRoomMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 role_ids = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->role_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank());
    }

    // optional uint32 time_kick_expire = 6;
    if (has_time_kick_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_kick_expire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoomMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoomMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoomMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoomMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoomMember)
    MergeFrom(*source);
  }
}

void CChatRoomMember::MergeFrom(const CChatRoomMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_ids_.MergeFrom(from.role_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_kick_expire_ = from.time_kick_expire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoomMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoomMember::CopyFrom(const CChatRoomMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomMember::IsInitialized() const {
  return true;
}

void CChatRoomMember::Swap(CChatRoomMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoomMember::InternalSwap(CChatRoomMember* other) {
  using std::swap;
  role_ids_.InternalSwap(&other->role_ids_);
  swap(accountid_, other->accountid_);
  swap(state_, other->state_);
  swap(rank_, other->rank_);
  swap(time_kick_expire_, other->time_kick_expire_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoomMember::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoomState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoomState::kChatIdFieldNumber;
const int CChatRoomState::kChatNameFieldNumber;
const int CChatRoomState::kVoiceAllowedFieldNumber;
const int CChatRoomState::kMembersInVoiceFieldNumber;
const int CChatRoomState::kTimeLastMessageFieldNumber;
const int CChatRoomState::kSortOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoomState::CChatRoomState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoomState)
}
CChatRoomState::CChatRoomState(const CChatRoomState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      members_in_voice_(from.members_in_voice_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_name()) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_order_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(sort_order_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomState)
}

void CChatRoomState::SharedCtor() {
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_order_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(sort_order_));
}

CChatRoomState::~CChatRoomState() {
  // @@protoc_insertion_point(destructor:CChatRoomState)
  SharedDtor();
}

void CChatRoomState::SharedDtor() {
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoomState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoomState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoomState& CChatRoomState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomState.base);
  return *internal_default_instance();
}


void CChatRoomState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_in_voice_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chat_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_order_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(sort_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoomState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoomState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chat_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_name().data(), static_cast<int>(this->chat_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoomState.chat_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_allowed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_voice_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 members_in_voice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_members_in_voice())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_members_in_voice())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_time_last_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sort_order = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sort_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoomState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoomState)
  return false;
#undef DO_
}

void CChatRoomState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoomState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
  }

  // optional string chat_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoomState.chat_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_name(), output);
  }

  // optional bool voice_allowed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->voice_allowed(), output);
  }

  // repeated uint32 members_in_voice = 4;
  for (int i = 0, n = this->members_in_voice_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->members_in_voice(i), output);
  }

  // optional uint32 time_last_message = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_last_message(), output);
  }

  // optional uint32 sort_order = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sort_order(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoomState)
}

::google::protobuf::uint8* CChatRoomState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_id(), target);
  }

  // optional string chat_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoomState.chat_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_name(), target);
  }

  // optional bool voice_allowed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->voice_allowed(), target);
  }

  // repeated uint32 members_in_voice = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->members_in_voice_, target);

  // optional uint32 time_last_message = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_last_message(), target);
  }

  // optional uint32 sort_order = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sort_order(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomState)
  return target;
}

size_t CChatRoomState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 members_in_voice = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->members_in_voice_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->members_in_voice_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string chat_name = 2;
    if (has_chat_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_name());
    }

    // optional uint64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional bool voice_allowed = 3;
    if (has_voice_allowed()) {
      total_size += 1 + 1;
    }

    // optional uint32 time_last_message = 5;
    if (has_time_last_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_message());
    }

    // optional uint32 sort_order = 6;
    if (has_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_order());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoomState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoomState)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoomState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoomState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoomState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoomState)
    MergeFrom(*source);
  }
}

void CChatRoomState::MergeFrom(const CChatRoomState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_in_voice_.MergeFrom(from.members_in_voice_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chat_name();
      chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      voice_allowed_ = from.voice_allowed_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_last_message_ = from.time_last_message_;
    }
    if (cached_has_bits & 0x00000010u) {
      sort_order_ = from.sort_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoomState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoomState::CopyFrom(const CChatRoomState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomState::IsInitialized() const {
  return true;
}

void CChatRoomState::Swap(CChatRoomState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoomState::InternalSwap(CChatRoomState* other) {
  using std::swap;
  members_in_voice_.InternalSwap(&other->members_in_voice_);
  chat_name_.Swap(&other->chat_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(voice_allowed_, other->voice_allowed_);
  swap(time_last_message_, other->time_last_message_);
  swap(sort_order_, other->sort_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoomState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoomGroupState::InitAsDefaultInstance() {
  ::_CChatRoomGroupState_default_instance_._instance.get_mutable()->header_state_ = const_cast< ::CChatRoomGroupHeaderState*>(
      ::CChatRoomGroupHeaderState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoomGroupState::kHeaderStateFieldNumber;
const int CChatRoomGroupState::kMembersFieldNumber;
const int CChatRoomGroupState::kDefaultChatIdFieldNumber;
const int CChatRoomGroupState::kChatRoomsFieldNumber;
const int CChatRoomGroupState::kKickedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoomGroupState::CChatRoomGroupState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoomGroupState)
}
CChatRoomGroupState::CChatRoomGroupState(const CChatRoomGroupState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      chat_rooms_(from.chat_rooms_),
      kicked_(from.kicked_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_state()) {
    header_state_ = new ::CChatRoomGroupHeaderState(*from.header_state_);
  } else {
    header_state_ = NULL;
  }
  default_chat_id_ = from.default_chat_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoomGroupState)
}

void CChatRoomGroupState::SharedCtor() {
  ::memset(&header_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_chat_id_) -
      reinterpret_cast<char*>(&header_state_)) + sizeof(default_chat_id_));
}

CChatRoomGroupState::~CChatRoomGroupState() {
  // @@protoc_insertion_point(destructor:CChatRoomGroupState)
  SharedDtor();
}

void CChatRoomGroupState::SharedDtor() {
  if (this != internal_default_instance()) delete header_state_;
}

void CChatRoomGroupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoomGroupState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoomGroupState& CChatRoomGroupState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupState.base);
  return *internal_default_instance();
}


void CChatRoomGroupState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomGroupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  chat_rooms_.Clear();
  kicked_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_state_ != NULL);
    header_state_->Clear();
  }
  default_chat_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoomGroupState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoomGroupState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoomGroupHeaderState header_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoomMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 default_chat_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_default_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoomState chat_rooms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoomMember kicked = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_kicked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoomGroupState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoomGroupState)
  return false;
#undef DO_
}

void CChatRoomGroupState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoomGroupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header_state(), output);
  }

  // repeated .CChatRoomMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint64 default_chat_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->default_chat_id(), output);
  }

  // repeated .CChatRoomState chat_rooms = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_rooms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->chat_rooms(static_cast<int>(i)),
      output);
  }

  // repeated .CChatRoomMember kicked = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kicked_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->kicked(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoomGroupState)
}

::google::protobuf::uint8* CChatRoomGroupState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomGroupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header_state(), deterministic, target);
  }

  // repeated .CChatRoomMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 default_chat_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->default_chat_id(), target);
  }

  // repeated .CChatRoomState chat_rooms = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_rooms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->chat_rooms(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CChatRoomMember kicked = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kicked_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->kicked(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomGroupState)
  return target;
}

size_t CChatRoomGroupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomGroupState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoomMember members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated .CChatRoomState chat_rooms = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_rooms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_rooms(static_cast<int>(i)));
    }
  }

  // repeated .CChatRoomMember kicked = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->kicked_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->kicked(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CChatRoomGroupHeaderState header_state = 1;
    if (has_header_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_state_);
    }

    // optional uint64 default_chat_id = 4;
    if (has_default_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoomGroupState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoomGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoomGroupState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoomGroupState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoomGroupState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoomGroupState)
    MergeFrom(*source);
  }
}

void CChatRoomGroupState::MergeFrom(const CChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  chat_rooms_.MergeFrom(from.chat_rooms_);
  kicked_.MergeFrom(from.kicked_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_state()->::CChatRoomGroupHeaderState::MergeFrom(from.header_state());
    }
    if (cached_has_bits & 0x00000002u) {
      default_chat_id_ = from.default_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoomGroupState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoomGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoomGroupState::CopyFrom(const CChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomGroupState::IsInitialized() const {
  return true;
}

void CChatRoomGroupState::Swap(CChatRoomGroupState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoomGroupState::InternalSwap(CChatRoomGroupState* other) {
  using std::swap;
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  CastToBase(&chat_rooms_)->InternalSwap(CastToBase(&other->chat_rooms_));
  CastToBase(&kicked_)->InternalSwap(CastToBase(&other->kicked_));
  swap(header_state_, other->header_state_);
  swap(default_chat_id_, other->default_chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoomGroupState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CUserChatRoomState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserChatRoomState::kChatIdFieldNumber;
const int CUserChatRoomState::kTimeJoinedFieldNumber;
const int CUserChatRoomState::kTimeLastAckFieldNumber;
const int CUserChatRoomState::kDesktopNotificationLevelFieldNumber;
const int CUserChatRoomState::kMobileNotificationLevelFieldNumber;
const int CUserChatRoomState::kTimeLastMentionFieldNumber;
const int CUserChatRoomState::kUnreadIndicatorMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserChatRoomState::CUserChatRoomState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserChatRoomState)
}
CUserChatRoomState::CUserChatRoomState(const CUserChatRoomState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CUserChatRoomState)
}

void CUserChatRoomState::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_indicator_muted_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
}

CUserChatRoomState::~CUserChatRoomState() {
  // @@protoc_insertion_point(destructor:CUserChatRoomState)
  SharedDtor();
}

void CUserChatRoomState::SharedDtor() {
}

void CUserChatRoomState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CUserChatRoomState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserChatRoomState& CUserChatRoomState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomState.base);
  return *internal_default_instance();
}


void CUserChatRoomState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserChatRoomState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserChatRoomState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserChatRoomState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_joined();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_ack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_last_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_desktop_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_mobile_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_mention = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_time_last_mention();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_mention_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unread_indicator_muted = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_unread_indicator_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unread_indicator_muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserChatRoomState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserChatRoomState)
  return false;
#undef DO_
}

void CUserChatRoomState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserChatRoomState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // optional uint32 time_last_ack = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_last_ack(), output);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->desktop_notification_level(), output);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mobile_notification_level(), output);
  }

  // optional uint32 time_last_mention = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_last_mention(), output);
  }

  // optional bool unread_indicator_muted = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->unread_indicator_muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserChatRoomState)
}

::google::protobuf::uint8* CUserChatRoomState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CUserChatRoomState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // optional uint32 time_last_ack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_last_ack(), target);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mobile_notification_level(), target);
  }

  // optional uint32 time_last_mention = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_last_mention(), target);
  }

  // optional bool unread_indicator_muted = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->unread_indicator_muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserChatRoomState)
  return target;
}

size_t CUserChatRoomState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserChatRoomState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint32 time_joined = 2;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional uint32 time_last_ack = 3;
    if (has_time_last_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_ack());
    }

    // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_desktop_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_mobile_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mobile_notification_level());
    }

    // optional uint32 time_last_mention = 6;
    if (has_time_last_mention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_mention());
    }

    // optional bool unread_indicator_muted = 7 [default = false];
    if (has_unread_indicator_muted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserChatRoomState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserChatRoomState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserChatRoomState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserChatRoomState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserChatRoomState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserChatRoomState)
    MergeFrom(*source);
  }
}

void CUserChatRoomState::MergeFrom(const CUserChatRoomState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserChatRoomState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_last_ack_ = from.time_last_ack_;
    }
    if (cached_has_bits & 0x00000008u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_last_mention_ = from.time_last_mention_;
    }
    if (cached_has_bits & 0x00000040u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserChatRoomState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserChatRoomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserChatRoomState::CopyFrom(const CUserChatRoomState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserChatRoomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserChatRoomState::IsInitialized() const {
  return true;
}

void CUserChatRoomState::Swap(CUserChatRoomState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserChatRoomState::InternalSwap(CUserChatRoomState* other) {
  using std::swap;
  swap(chat_id_, other->chat_id_);
  swap(time_joined_, other->time_joined_);
  swap(time_last_ack_, other->time_last_ack_);
  swap(desktop_notification_level_, other->desktop_notification_level_);
  swap(mobile_notification_level_, other->mobile_notification_level_);
  swap(time_last_mention_, other->time_last_mention_);
  swap(unread_indicator_muted_, other->unread_indicator_muted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CUserChatRoomState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CUserChatRoomGroupState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserChatRoomGroupState::kChatGroupIdFieldNumber;
const int CUserChatRoomGroupState::kTimeJoinedFieldNumber;
const int CUserChatRoomGroupState::kUserChatRoomStateFieldNumber;
const int CUserChatRoomGroupState::kDesktopNotificationLevelFieldNumber;
const int CUserChatRoomGroupState::kMobileNotificationLevelFieldNumber;
const int CUserChatRoomGroupState::kTimeLastGroupAckFieldNumber;
const int CUserChatRoomGroupState::kUnreadIndicatorMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserChatRoomGroupState::CUserChatRoomGroupState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserChatRoomGroupState)
}
CUserChatRoomGroupState::CUserChatRoomGroupState(const CUserChatRoomGroupState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      user_chat_room_state_(from.user_chat_room_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CUserChatRoomGroupState)
}

void CUserChatRoomGroupState::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_indicator_muted_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(unread_indicator_muted_));
}

CUserChatRoomGroupState::~CUserChatRoomGroupState() {
  // @@protoc_insertion_point(destructor:CUserChatRoomGroupState)
  SharedDtor();
}

void CUserChatRoomGroupState::SharedDtor() {
}

void CUserChatRoomGroupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CUserChatRoomGroupState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserChatRoomGroupState& CUserChatRoomGroupState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CUserChatRoomGroupState.base);
  return *internal_default_instance();
}


void CUserChatRoomGroupState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserChatRoomGroupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_chat_room_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserChatRoomGroupState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserChatRoomGroupState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_joined();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CUserChatRoomState user_chat_room_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_chat_room_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_desktop_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_mobile_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_group_ack = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_time_last_group_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_group_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unread_indicator_muted = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_unread_indicator_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unread_indicator_muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserChatRoomGroupState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserChatRoomGroupState)
  return false;
#undef DO_
}

void CUserChatRoomGroupState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserChatRoomGroupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // repeated .CUserChatRoomState user_chat_room_state = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_chat_room_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->user_chat_room_state(static_cast<int>(i)),
      output);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->desktop_notification_level(), output);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mobile_notification_level(), output);
  }

  // optional uint32 time_last_group_ack = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_last_group_ack(), output);
  }

  // optional bool unread_indicator_muted = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->unread_indicator_muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserChatRoomGroupState)
}

::google::protobuf::uint8* CUserChatRoomGroupState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CUserChatRoomGroupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // repeated .CUserChatRoomState user_chat_room_state = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_chat_room_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->user_chat_room_state(static_cast<int>(i)), deterministic, target);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mobile_notification_level(), target);
  }

  // optional uint32 time_last_group_ack = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_last_group_ack(), target);
  }

  // optional bool unread_indicator_muted = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->unread_indicator_muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserChatRoomGroupState)
  return target;
}

size_t CUserChatRoomGroupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserChatRoomGroupState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CUserChatRoomState user_chat_room_state = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->user_chat_room_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_chat_room_state(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint32 time_joined = 2;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_desktop_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_mobile_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mobile_notification_level());
    }

    // optional uint32 time_last_group_ack = 6;
    if (has_time_last_group_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_group_ack());
    }

    // optional bool unread_indicator_muted = 7 [default = false];
    if (has_unread_indicator_muted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserChatRoomGroupState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserChatRoomGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserChatRoomGroupState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserChatRoomGroupState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserChatRoomGroupState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserChatRoomGroupState)
    MergeFrom(*source);
  }
}

void CUserChatRoomGroupState::MergeFrom(const CUserChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserChatRoomGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_chat_room_state_.MergeFrom(from.user_chat_room_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_last_group_ack_ = from.time_last_group_ack_;
    }
    if (cached_has_bits & 0x00000020u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserChatRoomGroupState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserChatRoomGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserChatRoomGroupState::CopyFrom(const CUserChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserChatRoomGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserChatRoomGroupState::IsInitialized() const {
  return true;
}

void CUserChatRoomGroupState::Swap(CUserChatRoomGroupState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserChatRoomGroupState::InternalSwap(CUserChatRoomGroupState* other) {
  using std::swap;
  CastToBase(&user_chat_room_state_)->InternalSwap(CastToBase(&other->user_chat_room_state_));
  swap(chat_group_id_, other->chat_group_id_);
  swap(time_joined_, other->time_joined_);
  swap(desktop_notification_level_, other->desktop_notification_level_);
  swap(mobile_notification_level_, other->mobile_notification_level_);
  swap(time_last_group_ack_, other->time_last_group_ack_);
  swap(unread_indicator_muted_, other->unread_indicator_muted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CUserChatRoomGroupState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateChatRoomGroup_Response::InitAsDefaultInstance() {
  ::_CChatRoom_CreateChatRoomGroup_Response_default_instance_._instance.get_mutable()->state_ = const_cast< ::CChatRoomGroupState*>(
      ::CChatRoomGroupState::internal_default_instance());
  ::_CChatRoom_CreateChatRoomGroup_Response_default_instance_._instance.get_mutable()->user_chat_state_ = const_cast< ::CUserChatRoomGroupState*>(
      ::CUserChatRoomGroupState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateChatRoomGroup_Response::kChatGroupIdFieldNumber;
const int CChatRoom_CreateChatRoomGroup_Response::kStateFieldNumber;
const int CChatRoom_CreateChatRoomGroup_Response::kUserChatStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateChatRoomGroup_Response::CChatRoom_CreateChatRoomGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoomGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateChatRoomGroup_Response)
}
CChatRoom_CreateChatRoomGroup_Response::CChatRoom_CreateChatRoomGroup_Response(const CChatRoom_CreateChatRoomGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::CChatRoomGroupState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_user_chat_state()) {
    user_chat_state_ = new ::CUserChatRoomGroupState(*from.user_chat_state_);
  } else {
    user_chat_state_ = NULL;
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoomGroup_Response)
}

void CChatRoom_CreateChatRoomGroup_Response::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_group_id_) -
      reinterpret_cast<char*>(&state_)) + sizeof(chat_group_id_));
}

CChatRoom_CreateChatRoomGroup_Response::~CChatRoom_CreateChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoomGroup_Response)
  SharedDtor();
}

void CChatRoom_CreateChatRoomGroup_Response::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete user_chat_state_;
}

void CChatRoom_CreateChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateChatRoomGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateChatRoomGroup_Response& CChatRoom_CreateChatRoomGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoomGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_CreateChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_chat_state_ != NULL);
      user_chat_state_->Clear();
    }
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateChatRoomGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateChatRoomGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoomGroupState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CUserChatRoomGroupState user_chat_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_chat_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateChatRoomGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateChatRoomGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_CreateChatRoomGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional .CChatRoomGroupState state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  // optional .CUserChatRoomGroupState user_chat_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_chat_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateChatRoomGroup_Response)
}

::google::protobuf::uint8* CChatRoom_CreateChatRoomGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional .CChatRoomGroupState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  // optional .CUserChatRoomGroupState user_chat_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_chat_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_CreateChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoomGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .CChatRoomGroupState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .CUserChatRoomGroupState user_chat_state = 3;
    if (has_user_chat_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_chat_state_);
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateChatRoomGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateChatRoomGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateChatRoomGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateChatRoomGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateChatRoomGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateChatRoomGroup_Response::MergeFrom(const CChatRoom_CreateChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::CChatRoomGroupState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_chat_state()->::CUserChatRoomGroupState::MergeFrom(from.user_chat_state());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_CreateChatRoomGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateChatRoomGroup_Response::CopyFrom(const CChatRoom_CreateChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoomGroup_Response::Swap(CChatRoom_CreateChatRoomGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateChatRoomGroup_Response::InternalSwap(CChatRoom_CreateChatRoomGroup_Response* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(user_chat_state_, other->user_chat_state_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateChatRoomGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SaveChatRoomGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SaveChatRoomGroup_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SaveChatRoomGroup_Request::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SaveChatRoomGroup_Request::CChatRoom_SaveChatRoomGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SaveChatRoomGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SaveChatRoomGroup_Request)
}
CChatRoom_SaveChatRoomGroup_Request::CChatRoom_SaveChatRoomGroup_Request(const CChatRoom_SaveChatRoomGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SaveChatRoomGroup_Request)
}

void CChatRoom_SaveChatRoomGroup_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_SaveChatRoomGroup_Request::~CChatRoom_SaveChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SaveChatRoomGroup_Request)
  SharedDtor();
}

void CChatRoom_SaveChatRoomGroup_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SaveChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SaveChatRoomGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SaveChatRoomGroup_Request& CChatRoom_SaveChatRoomGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SaveChatRoomGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SaveChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SaveChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SaveChatRoomGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SaveChatRoomGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_SaveChatRoomGroup_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SaveChatRoomGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SaveChatRoomGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_SaveChatRoomGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SaveChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SaveChatRoomGroup_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SaveChatRoomGroup_Request)
}

::google::protobuf::uint8* CChatRoom_SaveChatRoomGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SaveChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SaveChatRoomGroup_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SaveChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_SaveChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SaveChatRoomGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SaveChatRoomGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SaveChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SaveChatRoomGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SaveChatRoomGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SaveChatRoomGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SaveChatRoomGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SaveChatRoomGroup_Request::MergeFrom(const CChatRoom_SaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SaveChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SaveChatRoomGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SaveChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SaveChatRoomGroup_Request::CopyFrom(const CChatRoom_SaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SaveChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SaveChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SaveChatRoomGroup_Request::Swap(CChatRoom_SaveChatRoomGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SaveChatRoomGroup_Request::InternalSwap(CChatRoom_SaveChatRoomGroup_Request* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SaveChatRoomGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SaveChatRoomGroup_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SaveChatRoomGroup_Response::CChatRoom_SaveChatRoomGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SaveChatRoomGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SaveChatRoomGroup_Response)
}
CChatRoom_SaveChatRoomGroup_Response::CChatRoom_SaveChatRoomGroup_Response(const CChatRoom_SaveChatRoomGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SaveChatRoomGroup_Response)
}

void CChatRoom_SaveChatRoomGroup_Response::SharedCtor() {
}

CChatRoom_SaveChatRoomGroup_Response::~CChatRoom_SaveChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SaveChatRoomGroup_Response)
  SharedDtor();
}

void CChatRoom_SaveChatRoomGroup_Response::SharedDtor() {
}

void CChatRoom_SaveChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SaveChatRoomGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SaveChatRoomGroup_Response& CChatRoom_SaveChatRoomGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SaveChatRoomGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SaveChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SaveChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SaveChatRoomGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SaveChatRoomGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SaveChatRoomGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SaveChatRoomGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_SaveChatRoomGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SaveChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SaveChatRoomGroup_Response)
}

::google::protobuf::uint8* CChatRoom_SaveChatRoomGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SaveChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SaveChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_SaveChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SaveChatRoomGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SaveChatRoomGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SaveChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SaveChatRoomGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SaveChatRoomGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SaveChatRoomGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SaveChatRoomGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SaveChatRoomGroup_Response::MergeFrom(const CChatRoom_SaveChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SaveChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_SaveChatRoomGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SaveChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SaveChatRoomGroup_Response::CopyFrom(const CChatRoom_SaveChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SaveChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SaveChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SaveChatRoomGroup_Response::Swap(CChatRoom_SaveChatRoomGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SaveChatRoomGroup_Response::InternalSwap(CChatRoom_SaveChatRoomGroup_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SaveChatRoomGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RenameChatRoomGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_RenameChatRoomGroup_Request::kChatGroupIdFieldNumber;
const int CChatRoom_RenameChatRoomGroup_Request::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RenameChatRoomGroup_Request::CChatRoom_RenameChatRoomGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoomGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RenameChatRoomGroup_Request)
}
CChatRoom_RenameChatRoomGroup_Request::CChatRoom_RenameChatRoomGroup_Request(const CChatRoom_RenameChatRoomGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoomGroup_Request)
}

void CChatRoom_RenameChatRoomGroup_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_RenameChatRoomGroup_Request::~CChatRoom_RenameChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoomGroup_Request)
  SharedDtor();
}

void CChatRoom_RenameChatRoomGroup_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RenameChatRoomGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RenameChatRoomGroup_Request& CChatRoom_RenameChatRoomGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoomGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_RenameChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RenameChatRoomGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RenameChatRoomGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_RenameChatRoomGroup_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RenameChatRoomGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RenameChatRoomGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_RenameChatRoomGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RenameChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoomGroup_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RenameChatRoomGroup_Request)
}

::google::protobuf::uint8* CChatRoom_RenameChatRoomGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoomGroup_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_RenameChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoomGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RenameChatRoomGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RenameChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RenameChatRoomGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RenameChatRoomGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RenameChatRoomGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RenameChatRoomGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_RenameChatRoomGroup_Request::MergeFrom(const CChatRoom_RenameChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_RenameChatRoomGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RenameChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RenameChatRoomGroup_Request::CopyFrom(const CChatRoom_RenameChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoomGroup_Request::Swap(CChatRoom_RenameChatRoomGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RenameChatRoomGroup_Request::InternalSwap(CChatRoom_RenameChatRoomGroup_Request* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RenameChatRoomGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RenameChatRoomGroup_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_RenameChatRoomGroup_Response::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RenameChatRoomGroup_Response::CChatRoom_RenameChatRoomGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoomGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RenameChatRoomGroup_Response)
}
CChatRoom_RenameChatRoomGroup_Response::CChatRoom_RenameChatRoomGroup_Response(const CChatRoom_RenameChatRoomGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoomGroup_Response)
}

void CChatRoom_RenameChatRoomGroup_Response::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CChatRoom_RenameChatRoomGroup_Response::~CChatRoom_RenameChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoomGroup_Response)
  SharedDtor();
}

void CChatRoom_RenameChatRoomGroup_Response::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RenameChatRoomGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RenameChatRoomGroup_Response& CChatRoom_RenameChatRoomGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoomGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_RenameChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RenameChatRoomGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RenameChatRoomGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_RenameChatRoomGroup_Response.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RenameChatRoomGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RenameChatRoomGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_RenameChatRoomGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RenameChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoomGroup_Response.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RenameChatRoomGroup_Response)
}

::google::protobuf::uint8* CChatRoom_RenameChatRoomGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoomGroup_Response.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_RenameChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoomGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RenameChatRoomGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RenameChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RenameChatRoomGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RenameChatRoomGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RenameChatRoomGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RenameChatRoomGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_RenameChatRoomGroup_Response::MergeFrom(const CChatRoom_RenameChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CChatRoom_RenameChatRoomGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RenameChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RenameChatRoomGroup_Response::CopyFrom(const CChatRoom_RenameChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoomGroup_Response::Swap(CChatRoom_RenameChatRoomGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RenameChatRoomGroup_Response::InternalSwap(CChatRoom_RenameChatRoomGroup_Response* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RenameChatRoomGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetChatRoomGroupTagline_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetChatRoomGroupTagline_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SetChatRoomGroupTagline_Request::kTaglineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetChatRoomGroupTagline_Request::CChatRoom_SetChatRoomGroupTagline_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupTagline_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetChatRoomGroupTagline_Request)
}
CChatRoom_SetChatRoomGroupTagline_Request::CChatRoom_SetChatRoomGroupTagline_Request(const CChatRoom_SetChatRoomGroupTagline_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tagline()) {
    tagline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagline_);
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupTagline_Request)
}

void CChatRoom_SetChatRoomGroupTagline_Request::SharedCtor() {
  tagline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_SetChatRoomGroupTagline_Request::~CChatRoom_SetChatRoomGroupTagline_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupTagline_Request)
  SharedDtor();
}

void CChatRoom_SetChatRoomGroupTagline_Request::SharedDtor() {
  tagline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SetChatRoomGroupTagline_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetChatRoomGroupTagline_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetChatRoomGroupTagline_Request& CChatRoom_SetChatRoomGroupTagline_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupTagline_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SetChatRoomGroupTagline_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupTagline_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tagline_.ClearNonDefaultToEmptyNoArena();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetChatRoomGroupTagline_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetChatRoomGroupTagline_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tagline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagline().data(), static_cast<int>(this->tagline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_SetChatRoomGroupTagline_Request.tagline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetChatRoomGroupTagline_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetChatRoomGroupTagline_Request)
  return false;
#undef DO_
}

void CChatRoom_SetChatRoomGroupTagline_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetChatRoomGroupTagline_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string tagline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagline().data(), static_cast<int>(this->tagline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SetChatRoomGroupTagline_Request.tagline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tagline(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetChatRoomGroupTagline_Request)
}

::google::protobuf::uint8* CChatRoom_SetChatRoomGroupTagline_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupTagline_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string tagline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagline().data(), static_cast<int>(this->tagline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SetChatRoomGroupTagline_Request.tagline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tagline(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupTagline_Request)
  return target;
}

size_t CChatRoom_SetChatRoomGroupTagline_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupTagline_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string tagline = 2;
    if (has_tagline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagline());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetChatRoomGroupTagline_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetChatRoomGroupTagline_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetChatRoomGroupTagline_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetChatRoomGroupTagline_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetChatRoomGroupTagline_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetChatRoomGroupTagline_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SetChatRoomGroupTagline_Request::MergeFrom(const CChatRoom_SetChatRoomGroupTagline_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupTagline_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tagline();
      tagline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagline_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetChatRoomGroupTagline_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetChatRoomGroupTagline_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetChatRoomGroupTagline_Request::CopyFrom(const CChatRoom_SetChatRoomGroupTagline_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupTagline_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupTagline_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupTagline_Request::Swap(CChatRoom_SetChatRoomGroupTagline_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetChatRoomGroupTagline_Request::InternalSwap(CChatRoom_SetChatRoomGroupTagline_Request* other) {
  using std::swap;
  tagline_.Swap(&other->tagline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetChatRoomGroupTagline_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetChatRoomGroupTagline_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetChatRoomGroupTagline_Response::CChatRoom_SetChatRoomGroupTagline_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupTagline_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetChatRoomGroupTagline_Response)
}
CChatRoom_SetChatRoomGroupTagline_Response::CChatRoom_SetChatRoomGroupTagline_Response(const CChatRoom_SetChatRoomGroupTagline_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupTagline_Response)
}

void CChatRoom_SetChatRoomGroupTagline_Response::SharedCtor() {
}

CChatRoom_SetChatRoomGroupTagline_Response::~CChatRoom_SetChatRoomGroupTagline_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupTagline_Response)
  SharedDtor();
}

void CChatRoom_SetChatRoomGroupTagline_Response::SharedDtor() {
}

void CChatRoom_SetChatRoomGroupTagline_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetChatRoomGroupTagline_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetChatRoomGroupTagline_Response& CChatRoom_SetChatRoomGroupTagline_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupTagline_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SetChatRoomGroupTagline_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupTagline_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetChatRoomGroupTagline_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetChatRoomGroupTagline_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetChatRoomGroupTagline_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetChatRoomGroupTagline_Response)
  return false;
#undef DO_
}

void CChatRoom_SetChatRoomGroupTagline_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetChatRoomGroupTagline_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetChatRoomGroupTagline_Response)
}

::google::protobuf::uint8* CChatRoom_SetChatRoomGroupTagline_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupTagline_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupTagline_Response)
  return target;
}

size_t CChatRoom_SetChatRoomGroupTagline_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupTagline_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetChatRoomGroupTagline_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetChatRoomGroupTagline_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetChatRoomGroupTagline_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetChatRoomGroupTagline_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetChatRoomGroupTagline_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetChatRoomGroupTagline_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SetChatRoomGroupTagline_Response::MergeFrom(const CChatRoom_SetChatRoomGroupTagline_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupTagline_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_SetChatRoomGroupTagline_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetChatRoomGroupTagline_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetChatRoomGroupTagline_Response::CopyFrom(const CChatRoom_SetChatRoomGroupTagline_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupTagline_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupTagline_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupTagline_Response::Swap(CChatRoom_SetChatRoomGroupTagline_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetChatRoomGroupTagline_Response::InternalSwap(CChatRoom_SetChatRoomGroupTagline_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetChatRoomGroupTagline_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetChatRoomGroupAvatar_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetChatRoomGroupAvatar_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SetChatRoomGroupAvatar_Request::kAvatarShaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetChatRoomGroupAvatar_Request::CChatRoom_SetChatRoomGroupAvatar_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupAvatar_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetChatRoomGroupAvatar_Request)
}
CChatRoom_SetChatRoomGroupAvatar_Request::CChatRoom_SetChatRoomGroupAvatar_Request(const CChatRoom_SetChatRoomGroupAvatar_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_sha()) {
    avatar_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_sha_);
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupAvatar_Request)
}

void CChatRoom_SetChatRoomGroupAvatar_Request::SharedCtor() {
  avatar_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_SetChatRoomGroupAvatar_Request::~CChatRoom_SetChatRoomGroupAvatar_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupAvatar_Request)
  SharedDtor();
}

void CChatRoom_SetChatRoomGroupAvatar_Request::SharedDtor() {
  avatar_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SetChatRoomGroupAvatar_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetChatRoomGroupAvatar_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetChatRoomGroupAvatar_Request& CChatRoom_SetChatRoomGroupAvatar_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupAvatar_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SetChatRoomGroupAvatar_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatar_sha_.ClearNonDefaultToEmptyNoArena();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetChatRoomGroupAvatar_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avatar_sha = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetChatRoomGroupAvatar_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetChatRoomGroupAvatar_Request)
  return false;
#undef DO_
}

void CChatRoom_SetChatRoomGroupAvatar_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional bytes avatar_sha = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatar_sha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetChatRoomGroupAvatar_Request)
}

::google::protobuf::uint8* CChatRoom_SetChatRoomGroupAvatar_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional bytes avatar_sha = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->avatar_sha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupAvatar_Request)
  return target;
}

size_t CChatRoom_SetChatRoomGroupAvatar_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes avatar_sha = 2;
    if (has_avatar_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_sha());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetChatRoomGroupAvatar_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetChatRoomGroupAvatar_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetChatRoomGroupAvatar_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetChatRoomGroupAvatar_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetChatRoomGroupAvatar_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SetChatRoomGroupAvatar_Request::MergeFrom(const CChatRoom_SetChatRoomGroupAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_avatar_sha();
      avatar_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetChatRoomGroupAvatar_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetChatRoomGroupAvatar_Request::CopyFrom(const CChatRoom_SetChatRoomGroupAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupAvatar_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupAvatar_Request::Swap(CChatRoom_SetChatRoomGroupAvatar_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetChatRoomGroupAvatar_Request::InternalSwap(CChatRoom_SetChatRoomGroupAvatar_Request* other) {
  using std::swap;
  avatar_sha_.Swap(&other->avatar_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetChatRoomGroupAvatar_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetChatRoomGroupAvatar_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetChatRoomGroupAvatar_Response::CChatRoom_SetChatRoomGroupAvatar_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupAvatar_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetChatRoomGroupAvatar_Response)
}
CChatRoom_SetChatRoomGroupAvatar_Response::CChatRoom_SetChatRoomGroupAvatar_Response(const CChatRoom_SetChatRoomGroupAvatar_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupAvatar_Response)
}

void CChatRoom_SetChatRoomGroupAvatar_Response::SharedCtor() {
}

CChatRoom_SetChatRoomGroupAvatar_Response::~CChatRoom_SetChatRoomGroupAvatar_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupAvatar_Response)
  SharedDtor();
}

void CChatRoom_SetChatRoomGroupAvatar_Response::SharedDtor() {
}

void CChatRoom_SetChatRoomGroupAvatar_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetChatRoomGroupAvatar_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetChatRoomGroupAvatar_Response& CChatRoom_SetChatRoomGroupAvatar_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupAvatar_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SetChatRoomGroupAvatar_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetChatRoomGroupAvatar_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetChatRoomGroupAvatar_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetChatRoomGroupAvatar_Response)
  return false;
#undef DO_
}

void CChatRoom_SetChatRoomGroupAvatar_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetChatRoomGroupAvatar_Response)
}

::google::protobuf::uint8* CChatRoom_SetChatRoomGroupAvatar_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupAvatar_Response)
  return target;
}

size_t CChatRoom_SetChatRoomGroupAvatar_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetChatRoomGroupAvatar_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetChatRoomGroupAvatar_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetChatRoomGroupAvatar_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetChatRoomGroupAvatar_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetChatRoomGroupAvatar_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SetChatRoomGroupAvatar_Response::MergeFrom(const CChatRoom_SetChatRoomGroupAvatar_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_SetChatRoomGroupAvatar_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetChatRoomGroupAvatar_Response::CopyFrom(const CChatRoom_SetChatRoomGroupAvatar_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupAvatar_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupAvatar_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupAvatar_Response::Swap(CChatRoom_SetChatRoomGroupAvatar_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetChatRoomGroupAvatar_Response::InternalSwap(CChatRoom_SetChatRoomGroupAvatar_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetChatRoomGroupAvatar_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::kWatchingBroadcastAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
}
CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_accountid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watching_broadcast_accountid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
}

CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::~CChatRoom_SetChatRoomGroupWatchingBroadcast_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  SharedDtor();
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SharedDtor() {
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_accountid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_accountid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_watching_broadcast_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  return false;
#undef DO_
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint32 watching_broadcast_accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->watching_broadcast_accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
}

::google::protobuf::uint8* CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint32 watching_broadcast_accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->watching_broadcast_accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  return target;
}

size_t CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint32 watching_broadcast_accountid = 2;
    if (has_watching_broadcast_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::MergeFrom(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CopyFrom(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::Swap(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::InternalSwap(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(watching_broadcast_accountid_, other->watching_broadcast_accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
}
CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::SharedCtor() {
}

CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::~CChatRoom_SetChatRoomGroupWatchingBroadcast_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  SharedDtor();
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::SharedDtor() {
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response& CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  return false;
#undef DO_
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
}

::google::protobuf::uint8* CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  return target;
}

size_t CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::MergeFrom(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CopyFrom(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::Swap(CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::InternalSwap(CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_MuteUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_MuteUser_Request::kChatGroupIdFieldNumber;
const int CChatRoom_MuteUser_Request::kSteamidFieldNumber;
const int CChatRoom_MuteUser_Request::kExpirationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_MuteUser_Request::CChatRoom_MuteUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_MuteUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_MuteUser_Request)
}
CChatRoom_MuteUser_Request::CChatRoom_MuteUser_Request(const CChatRoom_MuteUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MuteUser_Request)
}

void CChatRoom_MuteUser_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
}

CChatRoom_MuteUser_Request::~CChatRoom_MuteUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_MuteUser_Request)
  SharedDtor();
}

void CChatRoom_MuteUser_Request::SharedDtor() {
}

void CChatRoom_MuteUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_MuteUser_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_MuteUser_Request& CChatRoom_MuteUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_MuteUser_Request.base);
  return *internal_default_instance();
}


void CChatRoom_MuteUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_MuteUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_MuteUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_MuteUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 expiration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_MuteUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_MuteUser_Request)
  return false;
#undef DO_
}

void CChatRoom_MuteUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_MuteUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional int32 expiration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expiration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_MuteUser_Request)
}

::google::protobuf::uint8* CChatRoom_MuteUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_MuteUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional int32 expiration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expiration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_MuteUser_Request)
  return target;
}

size_t CChatRoom_MuteUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_MuteUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 expiration = 3;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expiration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_MuteUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_MuteUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_MuteUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_MuteUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_MuteUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_MuteUser_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_MuteUser_Request::MergeFrom(const CChatRoom_MuteUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_MuteUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiration_ = from.expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_MuteUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_MuteUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_MuteUser_Request::CopyFrom(const CChatRoom_MuteUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_MuteUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_MuteUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_MuteUser_Request::Swap(CChatRoom_MuteUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_MuteUser_Request::InternalSwap(CChatRoom_MuteUser_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(steamid_, other->steamid_);
  swap(expiration_, other->expiration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_MuteUser_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_MuteUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_MuteUser_Response::CChatRoom_MuteUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_MuteUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_MuteUser_Response)
}
CChatRoom_MuteUser_Response::CChatRoom_MuteUser_Response(const CChatRoom_MuteUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MuteUser_Response)
}

void CChatRoom_MuteUser_Response::SharedCtor() {
}

CChatRoom_MuteUser_Response::~CChatRoom_MuteUser_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_MuteUser_Response)
  SharedDtor();
}

void CChatRoom_MuteUser_Response::SharedDtor() {
}

void CChatRoom_MuteUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_MuteUser_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_MuteUser_Response& CChatRoom_MuteUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_MuteUser_Response.base);
  return *internal_default_instance();
}


void CChatRoom_MuteUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_MuteUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_MuteUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_MuteUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_MuteUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_MuteUser_Response)
  return false;
#undef DO_
}

void CChatRoom_MuteUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_MuteUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_MuteUser_Response)
}

::google::protobuf::uint8* CChatRoom_MuteUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_MuteUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_MuteUser_Response)
  return target;
}

size_t CChatRoom_MuteUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_MuteUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_MuteUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_MuteUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_MuteUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_MuteUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_MuteUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_MuteUser_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_MuteUser_Response::MergeFrom(const CChatRoom_MuteUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_MuteUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_MuteUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_MuteUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_MuteUser_Response::CopyFrom(const CChatRoom_MuteUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_MuteUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_MuteUser_Response::IsInitialized() const {
  return true;
}

void CChatRoom_MuteUser_Response::Swap(CChatRoom_MuteUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_MuteUser_Response::InternalSwap(CChatRoom_MuteUser_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_MuteUser_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_KickUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_KickUser_Request::kChatGroupIdFieldNumber;
const int CChatRoom_KickUser_Request::kSteamidFieldNumber;
const int CChatRoom_KickUser_Request::kExpirationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_KickUser_Request::CChatRoom_KickUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_KickUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_KickUser_Request)
}
CChatRoom_KickUser_Request::CChatRoom_KickUser_Request(const CChatRoom_KickUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_KickUser_Request)
}

void CChatRoom_KickUser_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
}

CChatRoom_KickUser_Request::~CChatRoom_KickUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_KickUser_Request)
  SharedDtor();
}

void CChatRoom_KickUser_Request::SharedDtor() {
}

void CChatRoom_KickUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_KickUser_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_KickUser_Request& CChatRoom_KickUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_KickUser_Request.base);
  return *internal_default_instance();
}


void CChatRoom_KickUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_KickUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_KickUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_KickUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 expiration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_KickUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_KickUser_Request)
  return false;
#undef DO_
}

void CChatRoom_KickUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_KickUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional int32 expiration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expiration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_KickUser_Request)
}

::google::protobuf::uint8* CChatRoom_KickUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_KickUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional int32 expiration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expiration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_KickUser_Request)
  return target;
}

size_t CChatRoom_KickUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_KickUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 expiration = 3;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expiration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_KickUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_KickUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_KickUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_KickUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_KickUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_KickUser_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_KickUser_Request::MergeFrom(const CChatRoom_KickUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_KickUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiration_ = from.expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_KickUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_KickUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_KickUser_Request::CopyFrom(const CChatRoom_KickUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_KickUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_KickUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_KickUser_Request::Swap(CChatRoom_KickUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_KickUser_Request::InternalSwap(CChatRoom_KickUser_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(steamid_, other->steamid_);
  swap(expiration_, other->expiration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_KickUser_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_KickUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_KickUser_Response::CChatRoom_KickUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_KickUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_KickUser_Response)
}
CChatRoom_KickUser_Response::CChatRoom_KickUser_Response(const CChatRoom_KickUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_KickUser_Response)
}

void CChatRoom_KickUser_Response::SharedCtor() {
}

CChatRoom_KickUser_Response::~CChatRoom_KickUser_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_KickUser_Response)
  SharedDtor();
}

void CChatRoom_KickUser_Response::SharedDtor() {
}

void CChatRoom_KickUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_KickUser_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_KickUser_Response& CChatRoom_KickUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_KickUser_Response.base);
  return *internal_default_instance();
}


void CChatRoom_KickUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_KickUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_KickUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_KickUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_KickUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_KickUser_Response)
  return false;
#undef DO_
}

void CChatRoom_KickUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_KickUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_KickUser_Response)
}

::google::protobuf::uint8* CChatRoom_KickUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_KickUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_KickUser_Response)
  return target;
}

size_t CChatRoom_KickUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_KickUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_KickUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_KickUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_KickUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_KickUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_KickUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_KickUser_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_KickUser_Response::MergeFrom(const CChatRoom_KickUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_KickUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_KickUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_KickUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_KickUser_Response::CopyFrom(const CChatRoom_KickUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_KickUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_KickUser_Response::IsInitialized() const {
  return true;
}

void CChatRoom_KickUser_Response::Swap(CChatRoom_KickUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_KickUser_Response::InternalSwap(CChatRoom_KickUser_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_KickUser_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetUserBanState_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetUserBanState_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SetUserBanState_Request::kSteamidFieldNumber;
const int CChatRoom_SetUserBanState_Request::kBanStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetUserBanState_Request::CChatRoom_SetUserBanState_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserBanState_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetUserBanState_Request)
}
CChatRoom_SetUserBanState_Request::CChatRoom_SetUserBanState_Request(const CChatRoom_SetUserBanState_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_state_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ban_state_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserBanState_Request)
}

void CChatRoom_SetUserBanState_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_state_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ban_state_));
}

CChatRoom_SetUserBanState_Request::~CChatRoom_SetUserBanState_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserBanState_Request)
  SharedDtor();
}

void CChatRoom_SetUserBanState_Request::SharedDtor() {
}

void CChatRoom_SetUserBanState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetUserBanState_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetUserBanState_Request& CChatRoom_SetUserBanState_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserBanState_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SetUserBanState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserBanState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ban_state_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ban_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetUserBanState_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetUserBanState_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ban_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ban_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetUserBanState_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetUserBanState_Request)
  return false;
#undef DO_
}

void CChatRoom_SetUserBanState_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetUserBanState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional bool ban_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ban_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetUserBanState_Request)
}

::google::protobuf::uint8* CChatRoom_SetUserBanState_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserBanState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional bool ban_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ban_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserBanState_Request)
  return target;
}

size_t CChatRoom_SetUserBanState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserBanState_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool ban_state = 3;
    if (has_ban_state()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetUserBanState_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetUserBanState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetUserBanState_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetUserBanState_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetUserBanState_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetUserBanState_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SetUserBanState_Request::MergeFrom(const CChatRoom_SetUserBanState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserBanState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ban_state_ = from.ban_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetUserBanState_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetUserBanState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetUserBanState_Request::CopyFrom(const CChatRoom_SetUserBanState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserBanState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserBanState_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserBanState_Request::Swap(CChatRoom_SetUserBanState_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetUserBanState_Request::InternalSwap(CChatRoom_SetUserBanState_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(steamid_, other->steamid_);
  swap(ban_state_, other->ban_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetUserBanState_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetUserBanState_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetUserBanState_Response::CChatRoom_SetUserBanState_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserBanState_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetUserBanState_Response)
}
CChatRoom_SetUserBanState_Response::CChatRoom_SetUserBanState_Response(const CChatRoom_SetUserBanState_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserBanState_Response)
}

void CChatRoom_SetUserBanState_Response::SharedCtor() {
}

CChatRoom_SetUserBanState_Response::~CChatRoom_SetUserBanState_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserBanState_Response)
  SharedDtor();
}

void CChatRoom_SetUserBanState_Response::SharedDtor() {
}

void CChatRoom_SetUserBanState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetUserBanState_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetUserBanState_Response& CChatRoom_SetUserBanState_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserBanState_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SetUserBanState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserBanState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetUserBanState_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetUserBanState_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetUserBanState_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetUserBanState_Response)
  return false;
#undef DO_
}

void CChatRoom_SetUserBanState_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetUserBanState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetUserBanState_Response)
}

::google::protobuf::uint8* CChatRoom_SetUserBanState_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserBanState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserBanState_Response)
  return target;
}

size_t CChatRoom_SetUserBanState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserBanState_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetUserBanState_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetUserBanState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetUserBanState_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetUserBanState_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetUserBanState_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetUserBanState_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SetUserBanState_Response::MergeFrom(const CChatRoom_SetUserBanState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserBanState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_SetUserBanState_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetUserBanState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetUserBanState_Response::CopyFrom(const CChatRoom_SetUserBanState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserBanState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserBanState_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserBanState_Response::Swap(CChatRoom_SetUserBanState_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetUserBanState_Response::InternalSwap(CChatRoom_SetUserBanState_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetUserBanState_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RevokeInvite_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_RevokeInvite_Request::kChatGroupIdFieldNumber;
const int CChatRoom_RevokeInvite_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RevokeInvite_Request::CChatRoom_RevokeInvite_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RevokeInvite_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RevokeInvite_Request)
}
CChatRoom_RevokeInvite_Request::CChatRoom_RevokeInvite_Request(const CChatRoom_RevokeInvite_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RevokeInvite_Request)
}

void CChatRoom_RevokeInvite_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_RevokeInvite_Request::~CChatRoom_RevokeInvite_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RevokeInvite_Request)
  SharedDtor();
}

void CChatRoom_RevokeInvite_Request::SharedDtor() {
}

void CChatRoom_RevokeInvite_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RevokeInvite_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RevokeInvite_Request& CChatRoom_RevokeInvite_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RevokeInvite_Request.base);
  return *internal_default_instance();
}


void CChatRoom_RevokeInvite_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RevokeInvite_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RevokeInvite_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RevokeInvite_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RevokeInvite_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RevokeInvite_Request)
  return false;
#undef DO_
}

void CChatRoom_RevokeInvite_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RevokeInvite_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RevokeInvite_Request)
}

::google::protobuf::uint8* CChatRoom_RevokeInvite_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RevokeInvite_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RevokeInvite_Request)
  return target;
}

size_t CChatRoom_RevokeInvite_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RevokeInvite_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RevokeInvite_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RevokeInvite_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RevokeInvite_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RevokeInvite_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RevokeInvite_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RevokeInvite_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_RevokeInvite_Request::MergeFrom(const CChatRoom_RevokeInvite_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RevokeInvite_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_RevokeInvite_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RevokeInvite_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RevokeInvite_Request::CopyFrom(const CChatRoom_RevokeInvite_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RevokeInvite_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RevokeInvite_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RevokeInvite_Request::Swap(CChatRoom_RevokeInvite_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RevokeInvite_Request::InternalSwap(CChatRoom_RevokeInvite_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RevokeInvite_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RevokeInvite_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RevokeInvite_Response::CChatRoom_RevokeInvite_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RevokeInvite_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RevokeInvite_Response)
}
CChatRoom_RevokeInvite_Response::CChatRoom_RevokeInvite_Response(const CChatRoom_RevokeInvite_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RevokeInvite_Response)
}

void CChatRoom_RevokeInvite_Response::SharedCtor() {
}

CChatRoom_RevokeInvite_Response::~CChatRoom_RevokeInvite_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_RevokeInvite_Response)
  SharedDtor();
}

void CChatRoom_RevokeInvite_Response::SharedDtor() {
}

void CChatRoom_RevokeInvite_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RevokeInvite_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RevokeInvite_Response& CChatRoom_RevokeInvite_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RevokeInvite_Response.base);
  return *internal_default_instance();
}


void CChatRoom_RevokeInvite_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RevokeInvite_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RevokeInvite_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RevokeInvite_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RevokeInvite_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RevokeInvite_Response)
  return false;
#undef DO_
}

void CChatRoom_RevokeInvite_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RevokeInvite_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RevokeInvite_Response)
}

::google::protobuf::uint8* CChatRoom_RevokeInvite_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RevokeInvite_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RevokeInvite_Response)
  return target;
}

size_t CChatRoom_RevokeInvite_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RevokeInvite_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RevokeInvite_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RevokeInvite_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RevokeInvite_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RevokeInvite_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RevokeInvite_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RevokeInvite_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_RevokeInvite_Response::MergeFrom(const CChatRoom_RevokeInvite_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RevokeInvite_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_RevokeInvite_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RevokeInvite_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RevokeInvite_Response::CopyFrom(const CChatRoom_RevokeInvite_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RevokeInvite_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RevokeInvite_Response::IsInitialized() const {
  return true;
}

void CChatRoom_RevokeInvite_Response::Swap(CChatRoom_RevokeInvite_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RevokeInvite_Response::InternalSwap(CChatRoom_RevokeInvite_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RevokeInvite_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateRole_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateRole_Request::kChatGroupIdFieldNumber;
const int CChatRoom_CreateRole_Request::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateRole_Request::CChatRoom_CreateRole_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateRole_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateRole_Request)
}
CChatRoom_CreateRole_Request::CChatRoom_CreateRole_Request(const CChatRoom_CreateRole_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateRole_Request)
}

void CChatRoom_CreateRole_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_CreateRole_Request::~CChatRoom_CreateRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateRole_Request)
  SharedDtor();
}

void CChatRoom_CreateRole_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateRole_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateRole_Request& CChatRoom_CreateRole_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateRole_Request.base);
  return *internal_default_instance();
}


void CChatRoom_CreateRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateRole_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_CreateRole_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateRole_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateRole_Request)
  return false;
#undef DO_
}

void CChatRoom_CreateRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateRole_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateRole_Request)
}

::google::protobuf::uint8* CChatRoom_CreateRole_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateRole_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateRole_Request)
  return target;
}

size_t CChatRoom_CreateRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateRole_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateRole_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateRole_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateRole_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateRole_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateRole_Request::MergeFrom(const CChatRoom_CreateRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_CreateRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateRole_Request::CopyFrom(const CChatRoom_CreateRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateRole_Request::Swap(CChatRoom_CreateRole_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateRole_Request::InternalSwap(CChatRoom_CreateRole_Request* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateRole_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateRole_Response::InitAsDefaultInstance() {
  ::_CChatRoom_CreateRole_Response_default_instance_._instance.get_mutable()->actions_ = const_cast< ::CChatRoleActions*>(
      ::CChatRoleActions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateRole_Response::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateRole_Response::CChatRoom_CreateRole_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateRole_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateRole_Response)
}
CChatRoom_CreateRole_Response::CChatRoom_CreateRole_Response(const CChatRoom_CreateRole_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_actions()) {
    actions_ = new ::CChatRoleActions(*from.actions_);
  } else {
    actions_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateRole_Response)
}

void CChatRoom_CreateRole_Response::SharedCtor() {
  actions_ = NULL;
}

CChatRoom_CreateRole_Response::~CChatRoom_CreateRole_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateRole_Response)
  SharedDtor();
}

void CChatRoom_CreateRole_Response::SharedDtor() {
  if (this != internal_default_instance()) delete actions_;
}

void CChatRoom_CreateRole_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateRole_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateRole_Response& CChatRoom_CreateRole_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateRole_Response.base);
  return *internal_default_instance();
}


void CChatRoom_CreateRole_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(actions_ != NULL);
    actions_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateRole_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoleActions actions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateRole_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateRole_Response)
  return false;
#undef DO_
}

void CChatRoom_CreateRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoleActions actions = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_actions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateRole_Response)
}

::google::protobuf::uint8* CChatRoom_CreateRole_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoleActions actions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_actions(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateRole_Response)
  return target;
}

size_t CChatRoom_CreateRole_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateRole_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CChatRoleActions actions = 2;
  if (has_actions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateRole_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateRole_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateRole_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateRole_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateRole_Response::MergeFrom(const CChatRoom_CreateRole_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actions()) {
    mutable_actions()->::CChatRoleActions::MergeFrom(from.actions());
  }
}

void CChatRoom_CreateRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateRole_Response::CopyFrom(const CChatRoom_CreateRole_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateRole_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateRole_Response::Swap(CChatRoom_CreateRole_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateRole_Response::InternalSwap(CChatRoom_CreateRole_Response* other) {
  using std::swap;
  swap(actions_, other->actions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateRole_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetRoles_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetRoles_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetRoles_Request::CChatRoom_GetRoles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoles_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetRoles_Request)
}
CChatRoom_GetRoles_Request::CChatRoom_GetRoles_Request(const CChatRoom_GetRoles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoles_Request)
}

void CChatRoom_GetRoles_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_GetRoles_Request::~CChatRoom_GetRoles_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoles_Request)
  SharedDtor();
}

void CChatRoom_GetRoles_Request::SharedDtor() {
}

void CChatRoom_GetRoles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetRoles_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetRoles_Request& CChatRoom_GetRoles_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoles_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetRoles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetRoles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetRoles_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetRoles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetRoles_Request)
  return false;
#undef DO_
}

void CChatRoom_GetRoles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetRoles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetRoles_Request)
}

::google::protobuf::uint8* CChatRoom_GetRoles_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoles_Request)
  return target;
}

size_t CChatRoom_GetRoles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetRoles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetRoles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetRoles_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetRoles_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetRoles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetRoles_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetRoles_Request::MergeFrom(const CChatRoom_GetRoles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_GetRoles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetRoles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetRoles_Request::CopyFrom(const CChatRoom_GetRoles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoles_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoles_Request::Swap(CChatRoom_GetRoles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetRoles_Request::InternalSwap(CChatRoom_GetRoles_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetRoles_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetRoles_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetRoles_Response::kRolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetRoles_Response::CChatRoom_GetRoles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoles_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetRoles_Response)
}
CChatRoom_GetRoles_Response::CChatRoom_GetRoles_Response(const CChatRoom_GetRoles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoles_Response)
}

void CChatRoom_GetRoles_Response::SharedCtor() {
}

CChatRoom_GetRoles_Response::~CChatRoom_GetRoles_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoles_Response)
  SharedDtor();
}

void CChatRoom_GetRoles_Response::SharedDtor() {
}

void CChatRoom_GetRoles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetRoles_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetRoles_Response& CChatRoom_GetRoles_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoles_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetRoles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetRoles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetRoles_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRole roles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetRoles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetRoles_Response)
  return false;
#undef DO_
}

void CChatRoom_GetRoles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetRoles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRole roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->roles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetRoles_Response)
}

::google::protobuf::uint8* CChatRoom_GetRoles_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRole roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->roles(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoles_Response)
  return target;
}

size_t CChatRoom_GetRoles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRole roles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetRoles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetRoles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetRoles_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetRoles_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetRoles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetRoles_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetRoles_Response::MergeFrom(const CChatRoom_GetRoles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
}

void CChatRoom_GetRoles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetRoles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetRoles_Response::CopyFrom(const CChatRoom_GetRoles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoles_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoles_Response::Swap(CChatRoom_GetRoles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetRoles_Response::InternalSwap(CChatRoom_GetRoles_Response* other) {
  using std::swap;
  CastToBase(&roles_)->InternalSwap(CastToBase(&other->roles_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetRoles_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RenameRole_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_RenameRole_Request::kChatGroupIdFieldNumber;
const int CChatRoom_RenameRole_Request::kRoleIdFieldNumber;
const int CChatRoom_RenameRole_Request::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RenameRole_Request::CChatRoom_RenameRole_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameRole_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RenameRole_Request)
}
CChatRoom_RenameRole_Request::CChatRoom_RenameRole_Request(const CChatRoom_RenameRole_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameRole_Request)
}

void CChatRoom_RenameRole_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
}

CChatRoom_RenameRole_Request::~CChatRoom_RenameRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameRole_Request)
  SharedDtor();
}

void CChatRoom_RenameRole_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RenameRole_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RenameRole_Request& CChatRoom_RenameRole_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameRole_Request.base);
  return *internal_default_instance();
}


void CChatRoom_RenameRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RenameRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RenameRole_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_RenameRole_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RenameRole_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RenameRole_Request)
  return false;
#undef DO_
}

void CChatRoom_RenameRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RenameRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameRole_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RenameRole_Request)
}

::google::protobuf::uint8* CChatRoom_RenameRole_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameRole_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameRole_Request)
  return target;
}

size_t CChatRoom_RenameRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameRole_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RenameRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RenameRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RenameRole_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RenameRole_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RenameRole_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RenameRole_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_RenameRole_Request::MergeFrom(const CChatRoom_RenameRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_RenameRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RenameRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RenameRole_Request::CopyFrom(const CChatRoom_RenameRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RenameRole_Request::Swap(CChatRoom_RenameRole_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RenameRole_Request::InternalSwap(CChatRoom_RenameRole_Request* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RenameRole_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RenameRole_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RenameRole_Response::CChatRoom_RenameRole_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameRole_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RenameRole_Response)
}
CChatRoom_RenameRole_Response::CChatRoom_RenameRole_Response(const CChatRoom_RenameRole_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameRole_Response)
}

void CChatRoom_RenameRole_Response::SharedCtor() {
}

CChatRoom_RenameRole_Response::~CChatRoom_RenameRole_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameRole_Response)
  SharedDtor();
}

void CChatRoom_RenameRole_Response::SharedDtor() {
}

void CChatRoom_RenameRole_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RenameRole_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RenameRole_Response& CChatRoom_RenameRole_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameRole_Response.base);
  return *internal_default_instance();
}


void CChatRoom_RenameRole_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RenameRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RenameRole_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RenameRole_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RenameRole_Response)
  return false;
#undef DO_
}

void CChatRoom_RenameRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RenameRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RenameRole_Response)
}

::google::protobuf::uint8* CChatRoom_RenameRole_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameRole_Response)
  return target;
}

size_t CChatRoom_RenameRole_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameRole_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RenameRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RenameRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RenameRole_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RenameRole_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RenameRole_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RenameRole_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_RenameRole_Response::MergeFrom(const CChatRoom_RenameRole_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_RenameRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RenameRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RenameRole_Response::CopyFrom(const CChatRoom_RenameRole_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameRole_Response::IsInitialized() const {
  return true;
}

void CChatRoom_RenameRole_Response::Swap(CChatRoom_RenameRole_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RenameRole_Response::InternalSwap(CChatRoom_RenameRole_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RenameRole_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ReorderRole_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ReorderRole_Request::kChatGroupIdFieldNumber;
const int CChatRoom_ReorderRole_Request::kRoleIdFieldNumber;
const int CChatRoom_ReorderRole_Request::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ReorderRole_Request::CChatRoom_ReorderRole_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderRole_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ReorderRole_Request)
}
CChatRoom_ReorderRole_Request::CChatRoom_ReorderRole_Request(const CChatRoom_ReorderRole_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderRole_Request)
}

void CChatRoom_ReorderRole_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
}

CChatRoom_ReorderRole_Request::~CChatRoom_ReorderRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReorderRole_Request)
  SharedDtor();
}

void CChatRoom_ReorderRole_Request::SharedDtor() {
}

void CChatRoom_ReorderRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ReorderRole_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ReorderRole_Request& CChatRoom_ReorderRole_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderRole_Request.base);
  return *internal_default_instance();
}


void CChatRoom_ReorderRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReorderRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ReorderRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ReorderRole_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ReorderRole_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ReorderRole_Request)
  return false;
#undef DO_
}

void CChatRoom_ReorderRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ReorderRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ReorderRole_Request)
}

::google::protobuf::uint8* CChatRoom_ReorderRole_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReorderRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReorderRole_Request)
  return target;
}

size_t CChatRoom_ReorderRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReorderRole_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ordinal = 3;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ReorderRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ReorderRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ReorderRole_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ReorderRole_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ReorderRole_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ReorderRole_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_ReorderRole_Request::MergeFrom(const CChatRoom_ReorderRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReorderRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_ReorderRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ReorderRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ReorderRole_Request::CopyFrom(const CChatRoom_ReorderRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReorderRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReorderRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_ReorderRole_Request::Swap(CChatRoom_ReorderRole_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ReorderRole_Request::InternalSwap(CChatRoom_ReorderRole_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ReorderRole_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ReorderRole_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ReorderRole_Response::CChatRoom_ReorderRole_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderRole_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ReorderRole_Response)
}
CChatRoom_ReorderRole_Response::CChatRoom_ReorderRole_Response(const CChatRoom_ReorderRole_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderRole_Response)
}

void CChatRoom_ReorderRole_Response::SharedCtor() {
}

CChatRoom_ReorderRole_Response::~CChatRoom_ReorderRole_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReorderRole_Response)
  SharedDtor();
}

void CChatRoom_ReorderRole_Response::SharedDtor() {
}

void CChatRoom_ReorderRole_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ReorderRole_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ReorderRole_Response& CChatRoom_ReorderRole_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderRole_Response.base);
  return *internal_default_instance();
}


void CChatRoom_ReorderRole_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReorderRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ReorderRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ReorderRole_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ReorderRole_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ReorderRole_Response)
  return false;
#undef DO_
}

void CChatRoom_ReorderRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ReorderRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ReorderRole_Response)
}

::google::protobuf::uint8* CChatRoom_ReorderRole_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReorderRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReorderRole_Response)
  return target;
}

size_t CChatRoom_ReorderRole_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReorderRole_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ReorderRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ReorderRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ReorderRole_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ReorderRole_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ReorderRole_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ReorderRole_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_ReorderRole_Response::MergeFrom(const CChatRoom_ReorderRole_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReorderRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_ReorderRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ReorderRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ReorderRole_Response::CopyFrom(const CChatRoom_ReorderRole_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReorderRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReorderRole_Response::IsInitialized() const {
  return true;
}

void CChatRoom_ReorderRole_Response::Swap(CChatRoom_ReorderRole_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ReorderRole_Response::InternalSwap(CChatRoom_ReorderRole_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ReorderRole_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteRole_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_DeleteRole_Request::kChatGroupIdFieldNumber;
const int CChatRoom_DeleteRole_Request::kRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteRole_Request::CChatRoom_DeleteRole_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRole_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteRole_Request)
}
CChatRoom_DeleteRole_Request::CChatRoom_DeleteRole_Request(const CChatRoom_DeleteRole_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRole_Request)
}

void CChatRoom_DeleteRole_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
}

CChatRoom_DeleteRole_Request::~CChatRoom_DeleteRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteRole_Request)
  SharedDtor();
}

void CChatRoom_DeleteRole_Request::SharedDtor() {
}

void CChatRoom_DeleteRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteRole_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteRole_Request& CChatRoom_DeleteRole_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRole_Request.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteRole_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteRole_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteRole_Request)
  return false;
#undef DO_
}

void CChatRoom_DeleteRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteRole_Request)
}

::google::protobuf::uint8* CChatRoom_DeleteRole_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteRole_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteRole_Request)
  return target;
}

size_t CChatRoom_DeleteRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteRole_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteRole_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteRole_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteRole_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteRole_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteRole_Request::MergeFrom(const CChatRoom_DeleteRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_DeleteRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteRole_Request::CopyFrom(const CChatRoom_DeleteRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteRole_Request::Swap(CChatRoom_DeleteRole_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteRole_Request::InternalSwap(CChatRoom_DeleteRole_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteRole_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteRole_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteRole_Response::CChatRoom_DeleteRole_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRole_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteRole_Response)
}
CChatRoom_DeleteRole_Response::CChatRoom_DeleteRole_Response(const CChatRoom_DeleteRole_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRole_Response)
}

void CChatRoom_DeleteRole_Response::SharedCtor() {
}

CChatRoom_DeleteRole_Response::~CChatRoom_DeleteRole_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteRole_Response)
  SharedDtor();
}

void CChatRoom_DeleteRole_Response::SharedDtor() {
}

void CChatRoom_DeleteRole_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteRole_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteRole_Response& CChatRoom_DeleteRole_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRole_Response.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteRole_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteRole_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteRole_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteRole_Response)
  return false;
#undef DO_
}

void CChatRoom_DeleteRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteRole_Response)
}

::google::protobuf::uint8* CChatRoom_DeleteRole_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteRole_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteRole_Response)
  return target;
}

size_t CChatRoom_DeleteRole_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteRole_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteRole_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteRole_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteRole_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteRole_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteRole_Response::MergeFrom(const CChatRoom_DeleteRole_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_DeleteRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteRole_Response::CopyFrom(const CChatRoom_DeleteRole_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteRole_Response::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteRole_Response::Swap(CChatRoom_DeleteRole_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteRole_Response::InternalSwap(CChatRoom_DeleteRole_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteRole_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetRoleActions_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetRoleActions_Request::kChatGroupIdFieldNumber;
const int CChatRoom_GetRoleActions_Request::kRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetRoleActions_Request::CChatRoom_GetRoleActions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoleActions_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetRoleActions_Request)
}
CChatRoom_GetRoleActions_Request::CChatRoom_GetRoleActions_Request(const CChatRoom_GetRoleActions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoleActions_Request)
}

void CChatRoom_GetRoleActions_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
}

CChatRoom_GetRoleActions_Request::~CChatRoom_GetRoleActions_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoleActions_Request)
  SharedDtor();
}

void CChatRoom_GetRoleActions_Request::SharedDtor() {
}

void CChatRoom_GetRoleActions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetRoleActions_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetRoleActions_Request& CChatRoom_GetRoleActions_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoleActions_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetRoleActions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoleActions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetRoleActions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetRoleActions_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetRoleActions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetRoleActions_Request)
  return false;
#undef DO_
}

void CChatRoom_GetRoleActions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetRoleActions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetRoleActions_Request)
}

::google::protobuf::uint8* CChatRoom_GetRoleActions_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoleActions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoleActions_Request)
  return target;
}

size_t CChatRoom_GetRoleActions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoleActions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetRoleActions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetRoleActions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetRoleActions_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetRoleActions_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetRoleActions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetRoleActions_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetRoleActions_Request::MergeFrom(const CChatRoom_GetRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoleActions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetRoleActions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetRoleActions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetRoleActions_Request::CopyFrom(const CChatRoom_GetRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoleActions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoleActions_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoleActions_Request::Swap(CChatRoom_GetRoleActions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetRoleActions_Request::InternalSwap(CChatRoom_GetRoleActions_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetRoleActions_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetRoleActions_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetRoleActions_Response::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetRoleActions_Response::CChatRoom_GetRoleActions_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoleActions_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetRoleActions_Response)
}
CChatRoom_GetRoleActions_Response::CChatRoom_GetRoleActions_Response(const CChatRoom_GetRoleActions_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoleActions_Response)
}

void CChatRoom_GetRoleActions_Response::SharedCtor() {
}

CChatRoom_GetRoleActions_Response::~CChatRoom_GetRoleActions_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoleActions_Response)
  SharedDtor();
}

void CChatRoom_GetRoleActions_Response::SharedDtor() {
}

void CChatRoom_GetRoleActions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetRoleActions_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetRoleActions_Response& CChatRoom_GetRoleActions_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRoleActions_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetRoleActions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoleActions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetRoleActions_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetRoleActions_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoleActions actions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetRoleActions_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetRoleActions_Response)
  return false;
#undef DO_
}

void CChatRoom_GetRoleActions_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetRoleActions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoleActions actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetRoleActions_Response)
}

::google::protobuf::uint8* CChatRoom_GetRoleActions_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoleActions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoleActions actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->actions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoleActions_Response)
  return target;
}

size_t CChatRoom_GetRoleActions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoleActions_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoleActions actions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetRoleActions_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetRoleActions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetRoleActions_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetRoleActions_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetRoleActions_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetRoleActions_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetRoleActions_Response::MergeFrom(const CChatRoom_GetRoleActions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoleActions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
}

void CChatRoom_GetRoleActions_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetRoleActions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetRoleActions_Response::CopyFrom(const CChatRoom_GetRoleActions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoleActions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoleActions_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoleActions_Response::Swap(CChatRoom_GetRoleActions_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetRoleActions_Response::InternalSwap(CChatRoom_GetRoleActions_Response* other) {
  using std::swap;
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetRoleActions_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ReplaceRoleActions_Request::InitAsDefaultInstance() {
  ::_CChatRoom_ReplaceRoleActions_Request_default_instance_._instance.get_mutable()->actions_ = const_cast< ::CChatRoleActions*>(
      ::CChatRoleActions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ReplaceRoleActions_Request::kChatGroupIdFieldNumber;
const int CChatRoom_ReplaceRoleActions_Request::kRoleIdFieldNumber;
const int CChatRoom_ReplaceRoleActions_Request::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ReplaceRoleActions_Request::CChatRoom_ReplaceRoleActions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReplaceRoleActions_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ReplaceRoleActions_Request)
}
CChatRoom_ReplaceRoleActions_Request::CChatRoom_ReplaceRoleActions_Request(const CChatRoom_ReplaceRoleActions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_actions()) {
    actions_ = new ::CChatRoleActions(*from.actions_);
  } else {
    actions_ = NULL;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReplaceRoleActions_Request)
}

void CChatRoom_ReplaceRoleActions_Request::SharedCtor() {
  ::memset(&actions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&actions_)) + sizeof(role_id_));
}

CChatRoom_ReplaceRoleActions_Request::~CChatRoom_ReplaceRoleActions_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReplaceRoleActions_Request)
  SharedDtor();
}

void CChatRoom_ReplaceRoleActions_Request::SharedDtor() {
  if (this != internal_default_instance()) delete actions_;
}

void CChatRoom_ReplaceRoleActions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ReplaceRoleActions_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ReplaceRoleActions_Request& CChatRoom_ReplaceRoleActions_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReplaceRoleActions_Request.base);
  return *internal_default_instance();
}


void CChatRoom_ReplaceRoleActions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReplaceRoleActions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(actions_ != NULL);
    actions_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ReplaceRoleActions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ReplaceRoleActions_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoleActions actions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ReplaceRoleActions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ReplaceRoleActions_Request)
  return false;
#undef DO_
}

void CChatRoom_ReplaceRoleActions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ReplaceRoleActions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .CChatRoleActions actions = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_actions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ReplaceRoleActions_Request)
}

::google::protobuf::uint8* CChatRoom_ReplaceRoleActions_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReplaceRoleActions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .CChatRoleActions actions = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_actions(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReplaceRoleActions_Request)
  return target;
}

size_t CChatRoom_ReplaceRoleActions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReplaceRoleActions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .CChatRoleActions actions = 4;
    if (has_actions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *actions_);
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ReplaceRoleActions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ReplaceRoleActions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ReplaceRoleActions_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ReplaceRoleActions_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ReplaceRoleActions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ReplaceRoleActions_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_ReplaceRoleActions_Request::MergeFrom(const CChatRoom_ReplaceRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReplaceRoleActions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_actions()->::CChatRoleActions::MergeFrom(from.actions());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_ReplaceRoleActions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ReplaceRoleActions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ReplaceRoleActions_Request::CopyFrom(const CChatRoom_ReplaceRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReplaceRoleActions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReplaceRoleActions_Request::IsInitialized() const {
  return true;
}

void CChatRoom_ReplaceRoleActions_Request::Swap(CChatRoom_ReplaceRoleActions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ReplaceRoleActions_Request::InternalSwap(CChatRoom_ReplaceRoleActions_Request* other) {
  using std::swap;
  swap(actions_, other->actions_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ReplaceRoleActions_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ReplaceRoleActions_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ReplaceRoleActions_Response::CChatRoom_ReplaceRoleActions_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReplaceRoleActions_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ReplaceRoleActions_Response)
}
CChatRoom_ReplaceRoleActions_Response::CChatRoom_ReplaceRoleActions_Response(const CChatRoom_ReplaceRoleActions_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReplaceRoleActions_Response)
}

void CChatRoom_ReplaceRoleActions_Response::SharedCtor() {
}

CChatRoom_ReplaceRoleActions_Response::~CChatRoom_ReplaceRoleActions_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReplaceRoleActions_Response)
  SharedDtor();
}

void CChatRoom_ReplaceRoleActions_Response::SharedDtor() {
}

void CChatRoom_ReplaceRoleActions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ReplaceRoleActions_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ReplaceRoleActions_Response& CChatRoom_ReplaceRoleActions_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReplaceRoleActions_Response.base);
  return *internal_default_instance();
}


void CChatRoom_ReplaceRoleActions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReplaceRoleActions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ReplaceRoleActions_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ReplaceRoleActions_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ReplaceRoleActions_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ReplaceRoleActions_Response)
  return false;
#undef DO_
}

void CChatRoom_ReplaceRoleActions_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ReplaceRoleActions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ReplaceRoleActions_Response)
}

::google::protobuf::uint8* CChatRoom_ReplaceRoleActions_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReplaceRoleActions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReplaceRoleActions_Response)
  return target;
}

size_t CChatRoom_ReplaceRoleActions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReplaceRoleActions_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ReplaceRoleActions_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ReplaceRoleActions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ReplaceRoleActions_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ReplaceRoleActions_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ReplaceRoleActions_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ReplaceRoleActions_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_ReplaceRoleActions_Response::MergeFrom(const CChatRoom_ReplaceRoleActions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReplaceRoleActions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_ReplaceRoleActions_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ReplaceRoleActions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ReplaceRoleActions_Response::CopyFrom(const CChatRoom_ReplaceRoleActions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReplaceRoleActions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReplaceRoleActions_Response::IsInitialized() const {
  return true;
}

void CChatRoom_ReplaceRoleActions_Response::Swap(CChatRoom_ReplaceRoleActions_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ReplaceRoleActions_Response::InternalSwap(CChatRoom_ReplaceRoleActions_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ReplaceRoleActions_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_AddRoleToUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_AddRoleToUser_Request::kChatGroupIdFieldNumber;
const int CChatRoom_AddRoleToUser_Request::kRoleIdFieldNumber;
const int CChatRoom_AddRoleToUser_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_AddRoleToUser_Request::CChatRoom_AddRoleToUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_AddRoleToUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_AddRoleToUser_Request)
}
CChatRoom_AddRoleToUser_Request::CChatRoom_AddRoleToUser_Request(const CChatRoom_AddRoleToUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_AddRoleToUser_Request)
}

void CChatRoom_AddRoleToUser_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_AddRoleToUser_Request::~CChatRoom_AddRoleToUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_AddRoleToUser_Request)
  SharedDtor();
}

void CChatRoom_AddRoleToUser_Request::SharedDtor() {
}

void CChatRoom_AddRoleToUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_AddRoleToUser_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_AddRoleToUser_Request& CChatRoom_AddRoleToUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_AddRoleToUser_Request.base);
  return *internal_default_instance();
}


void CChatRoom_AddRoleToUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_AddRoleToUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_AddRoleToUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_AddRoleToUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_AddRoleToUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_AddRoleToUser_Request)
  return false;
#undef DO_
}

void CChatRoom_AddRoleToUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_AddRoleToUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_AddRoleToUser_Request)
}

::google::protobuf::uint8* CChatRoom_AddRoleToUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_AddRoleToUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_AddRoleToUser_Request)
  return target;
}

size_t CChatRoom_AddRoleToUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_AddRoleToUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional fixed64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_AddRoleToUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_AddRoleToUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_AddRoleToUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_AddRoleToUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_AddRoleToUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_AddRoleToUser_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_AddRoleToUser_Request::MergeFrom(const CChatRoom_AddRoleToUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_AddRoleToUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_AddRoleToUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_AddRoleToUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_AddRoleToUser_Request::CopyFrom(const CChatRoom_AddRoleToUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_AddRoleToUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_AddRoleToUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_AddRoleToUser_Request::Swap(CChatRoom_AddRoleToUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_AddRoleToUser_Request::InternalSwap(CChatRoom_AddRoleToUser_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_AddRoleToUser_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_AddRoleToUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_AddRoleToUser_Response::CChatRoom_AddRoleToUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_AddRoleToUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_AddRoleToUser_Response)
}
CChatRoom_AddRoleToUser_Response::CChatRoom_AddRoleToUser_Response(const CChatRoom_AddRoleToUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_AddRoleToUser_Response)
}

void CChatRoom_AddRoleToUser_Response::SharedCtor() {
}

CChatRoom_AddRoleToUser_Response::~CChatRoom_AddRoleToUser_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_AddRoleToUser_Response)
  SharedDtor();
}

void CChatRoom_AddRoleToUser_Response::SharedDtor() {
}

void CChatRoom_AddRoleToUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_AddRoleToUser_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_AddRoleToUser_Response& CChatRoom_AddRoleToUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_AddRoleToUser_Response.base);
  return *internal_default_instance();
}


void CChatRoom_AddRoleToUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_AddRoleToUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_AddRoleToUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_AddRoleToUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_AddRoleToUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_AddRoleToUser_Response)
  return false;
#undef DO_
}

void CChatRoom_AddRoleToUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_AddRoleToUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_AddRoleToUser_Response)
}

::google::protobuf::uint8* CChatRoom_AddRoleToUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_AddRoleToUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_AddRoleToUser_Response)
  return target;
}

size_t CChatRoom_AddRoleToUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_AddRoleToUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_AddRoleToUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_AddRoleToUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_AddRoleToUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_AddRoleToUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_AddRoleToUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_AddRoleToUser_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_AddRoleToUser_Response::MergeFrom(const CChatRoom_AddRoleToUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_AddRoleToUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_AddRoleToUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_AddRoleToUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_AddRoleToUser_Response::CopyFrom(const CChatRoom_AddRoleToUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_AddRoleToUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_AddRoleToUser_Response::IsInitialized() const {
  return true;
}

void CChatRoom_AddRoleToUser_Response::Swap(CChatRoom_AddRoleToUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_AddRoleToUser_Response::InternalSwap(CChatRoom_AddRoleToUser_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_AddRoleToUser_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetRolesForUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetRolesForUser_Request::kChatGroupIdFieldNumber;
const int CChatRoom_GetRolesForUser_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetRolesForUser_Request::CChatRoom_GetRolesForUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRolesForUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetRolesForUser_Request)
}
CChatRoom_GetRolesForUser_Request::CChatRoom_GetRolesForUser_Request(const CChatRoom_GetRolesForUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRolesForUser_Request)
}

void CChatRoom_GetRolesForUser_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_GetRolesForUser_Request::~CChatRoom_GetRolesForUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRolesForUser_Request)
  SharedDtor();
}

void CChatRoom_GetRolesForUser_Request::SharedDtor() {
}

void CChatRoom_GetRolesForUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetRolesForUser_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetRolesForUser_Request& CChatRoom_GetRolesForUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRolesForUser_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetRolesForUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRolesForUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetRolesForUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetRolesForUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetRolesForUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetRolesForUser_Request)
  return false;
#undef DO_
}

void CChatRoom_GetRolesForUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetRolesForUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetRolesForUser_Request)
}

::google::protobuf::uint8* CChatRoom_GetRolesForUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRolesForUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRolesForUser_Request)
  return target;
}

size_t CChatRoom_GetRolesForUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRolesForUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional fixed64 steamid = 3;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetRolesForUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetRolesForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetRolesForUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetRolesForUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetRolesForUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetRolesForUser_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetRolesForUser_Request::MergeFrom(const CChatRoom_GetRolesForUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRolesForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetRolesForUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetRolesForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetRolesForUser_Request::CopyFrom(const CChatRoom_GetRolesForUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRolesForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRolesForUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetRolesForUser_Request::Swap(CChatRoom_GetRolesForUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetRolesForUser_Request::InternalSwap(CChatRoom_GetRolesForUser_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetRolesForUser_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetRolesForUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetRolesForUser_Response::kRoleIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetRolesForUser_Response::CChatRoom_GetRolesForUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRolesForUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetRolesForUser_Response)
}
CChatRoom_GetRolesForUser_Response::CChatRoom_GetRolesForUser_Response(const CChatRoom_GetRolesForUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      role_ids_(from.role_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRolesForUser_Response)
}

void CChatRoom_GetRolesForUser_Response::SharedCtor() {
}

CChatRoom_GetRolesForUser_Response::~CChatRoom_GetRolesForUser_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRolesForUser_Response)
  SharedDtor();
}

void CChatRoom_GetRolesForUser_Response::SharedDtor() {
}

void CChatRoom_GetRolesForUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetRolesForUser_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetRolesForUser_Response& CChatRoom_GetRolesForUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetRolesForUser_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetRolesForUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRolesForUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetRolesForUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetRolesForUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_role_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetRolesForUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetRolesForUser_Response)
  return false;
#undef DO_
}

void CChatRoom_GetRolesForUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetRolesForUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 role_ids = 1;
  for (int i = 0, n = this->role_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetRolesForUser_Response)
}

::google::protobuf::uint8* CChatRoom_GetRolesForUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRolesForUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 role_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->role_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRolesForUser_Response)
  return target;
}

size_t CChatRoom_GetRolesForUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRolesForUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 role_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->role_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetRolesForUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetRolesForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetRolesForUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetRolesForUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetRolesForUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetRolesForUser_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetRolesForUser_Response::MergeFrom(const CChatRoom_GetRolesForUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRolesForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_ids_.MergeFrom(from.role_ids_);
}

void CChatRoom_GetRolesForUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetRolesForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetRolesForUser_Response::CopyFrom(const CChatRoom_GetRolesForUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRolesForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRolesForUser_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetRolesForUser_Response::Swap(CChatRoom_GetRolesForUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetRolesForUser_Response::InternalSwap(CChatRoom_GetRolesForUser_Response* other) {
  using std::swap;
  role_ids_.InternalSwap(&other->role_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetRolesForUser_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteRoleFromUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_DeleteRoleFromUser_Request::kChatGroupIdFieldNumber;
const int CChatRoom_DeleteRoleFromUser_Request::kRoleIdFieldNumber;
const int CChatRoom_DeleteRoleFromUser_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteRoleFromUser_Request::CChatRoom_DeleteRoleFromUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRoleFromUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteRoleFromUser_Request)
}
CChatRoom_DeleteRoleFromUser_Request::CChatRoom_DeleteRoleFromUser_Request(const CChatRoom_DeleteRoleFromUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRoleFromUser_Request)
}

void CChatRoom_DeleteRoleFromUser_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_DeleteRoleFromUser_Request::~CChatRoom_DeleteRoleFromUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteRoleFromUser_Request)
  SharedDtor();
}

void CChatRoom_DeleteRoleFromUser_Request::SharedDtor() {
}

void CChatRoom_DeleteRoleFromUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteRoleFromUser_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteRoleFromUser_Request& CChatRoom_DeleteRoleFromUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRoleFromUser_Request.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteRoleFromUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteRoleFromUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteRoleFromUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteRoleFromUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteRoleFromUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteRoleFromUser_Request)
  return false;
#undef DO_
}

void CChatRoom_DeleteRoleFromUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteRoleFromUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 role_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteRoleFromUser_Request)
}

::google::protobuf::uint8* CChatRoom_DeleteRoleFromUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteRoleFromUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 role_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteRoleFromUser_Request)
  return target;
}

size_t CChatRoom_DeleteRoleFromUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteRoleFromUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional fixed64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteRoleFromUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteRoleFromUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteRoleFromUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteRoleFromUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteRoleFromUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteRoleFromUser_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteRoleFromUser_Request::MergeFrom(const CChatRoom_DeleteRoleFromUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteRoleFromUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_DeleteRoleFromUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteRoleFromUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteRoleFromUser_Request::CopyFrom(const CChatRoom_DeleteRoleFromUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteRoleFromUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteRoleFromUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteRoleFromUser_Request::Swap(CChatRoom_DeleteRoleFromUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteRoleFromUser_Request::InternalSwap(CChatRoom_DeleteRoleFromUser_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(role_id_, other->role_id_);
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteRoleFromUser_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteRoleFromUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteRoleFromUser_Response::CChatRoom_DeleteRoleFromUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRoleFromUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteRoleFromUser_Response)
}
CChatRoom_DeleteRoleFromUser_Response::CChatRoom_DeleteRoleFromUser_Response(const CChatRoom_DeleteRoleFromUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRoleFromUser_Response)
}

void CChatRoom_DeleteRoleFromUser_Response::SharedCtor() {
}

CChatRoom_DeleteRoleFromUser_Response::~CChatRoom_DeleteRoleFromUser_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteRoleFromUser_Response)
  SharedDtor();
}

void CChatRoom_DeleteRoleFromUser_Response::SharedDtor() {
}

void CChatRoom_DeleteRoleFromUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteRoleFromUser_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteRoleFromUser_Response& CChatRoom_DeleteRoleFromUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteRoleFromUser_Response.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteRoleFromUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteRoleFromUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteRoleFromUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteRoleFromUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteRoleFromUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteRoleFromUser_Response)
  return false;
#undef DO_
}

void CChatRoom_DeleteRoleFromUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteRoleFromUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteRoleFromUser_Response)
}

::google::protobuf::uint8* CChatRoom_DeleteRoleFromUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteRoleFromUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteRoleFromUser_Response)
  return target;
}

size_t CChatRoom_DeleteRoleFromUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteRoleFromUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteRoleFromUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteRoleFromUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteRoleFromUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteRoleFromUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteRoleFromUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteRoleFromUser_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteRoleFromUser_Response::MergeFrom(const CChatRoom_DeleteRoleFromUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteRoleFromUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_DeleteRoleFromUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteRoleFromUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteRoleFromUser_Response::CopyFrom(const CChatRoom_DeleteRoleFromUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteRoleFromUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteRoleFromUser_Response::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteRoleFromUser_Response::Swap(CChatRoom_DeleteRoleFromUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteRoleFromUser_Response::InternalSwap(CChatRoom_DeleteRoleFromUser_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteRoleFromUser_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_JoinChatRoomGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_JoinChatRoomGroup_Request::kChatGroupIdFieldNumber;
const int CChatRoom_JoinChatRoomGroup_Request::kInviteCodeFieldNumber;
const int CChatRoom_JoinChatRoomGroup_Request::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_JoinChatRoomGroup_Request::CChatRoom_JoinChatRoomGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinChatRoomGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_JoinChatRoomGroup_Request)
}
CChatRoom_JoinChatRoomGroup_Request::CChatRoom_JoinChatRoomGroup_Request(const CChatRoom_JoinChatRoomGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinChatRoomGroup_Request)
}

void CChatRoom_JoinChatRoomGroup_Request::SharedCtor() {
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_JoinChatRoomGroup_Request::~CChatRoom_JoinChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinChatRoomGroup_Request)
  SharedDtor();
}

void CChatRoom_JoinChatRoomGroup_Request::SharedDtor() {
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_JoinChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_JoinChatRoomGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_JoinChatRoomGroup_Request& CChatRoom_JoinChatRoomGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinChatRoomGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_JoinChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_JoinChatRoomGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_JoinChatRoomGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invite_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), static_cast<int>(this->invite_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_JoinChatRoomGroup_Request.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_JoinChatRoomGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_JoinChatRoomGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_JoinChatRoomGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_JoinChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_JoinChatRoomGroup_Request.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invite_code(), output);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_JoinChatRoomGroup_Request)
}

::google::protobuf::uint8* CChatRoom_JoinChatRoomGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_JoinChatRoomGroup_Request.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invite_code(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_JoinChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinChatRoomGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string invite_code = 2;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_code());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 3;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_JoinChatRoomGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_JoinChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_JoinChatRoomGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_JoinChatRoomGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_JoinChatRoomGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_JoinChatRoomGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_JoinChatRoomGroup_Request::MergeFrom(const CChatRoom_JoinChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invite_code();
      invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_JoinChatRoomGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_JoinChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_JoinChatRoomGroup_Request::CopyFrom(const CChatRoom_JoinChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_JoinChatRoomGroup_Request::Swap(CChatRoom_JoinChatRoomGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_JoinChatRoomGroup_Request::InternalSwap(CChatRoom_JoinChatRoomGroup_Request* other) {
  using std::swap;
  invite_code_.Swap(&other->invite_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_JoinChatRoomGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_JoinChatRoomGroup_Response::InitAsDefaultInstance() {
  ::_CChatRoom_JoinChatRoomGroup_Response_default_instance_._instance.get_mutable()->state_ = const_cast< ::CChatRoomGroupState*>(
      ::CChatRoomGroupState::internal_default_instance());
  ::_CChatRoom_JoinChatRoomGroup_Response_default_instance_._instance.get_mutable()->user_chat_state_ = const_cast< ::CUserChatRoomGroupState*>(
      ::CUserChatRoomGroupState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_JoinChatRoomGroup_Response::kStateFieldNumber;
const int CChatRoom_JoinChatRoomGroup_Response::kUserChatStateFieldNumber;
const int CChatRoom_JoinChatRoomGroup_Response::kJoinChatIdFieldNumber;
const int CChatRoom_JoinChatRoomGroup_Response::kTimeExpireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_JoinChatRoomGroup_Response::CChatRoom_JoinChatRoomGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinChatRoomGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_JoinChatRoomGroup_Response)
}
CChatRoom_JoinChatRoomGroup_Response::CChatRoom_JoinChatRoomGroup_Response(const CChatRoom_JoinChatRoomGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::CChatRoomGroupState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_user_chat_state()) {
    user_chat_state_ = new ::CUserChatRoomGroupState(*from.user_chat_state_);
  } else {
    user_chat_state_ = NULL;
  }
  ::memcpy(&join_chat_id_, &from.join_chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expire_) -
    reinterpret_cast<char*>(&join_chat_id_)) + sizeof(time_expire_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinChatRoomGroup_Response)
}

void CChatRoom_JoinChatRoomGroup_Response::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_expire_) -
      reinterpret_cast<char*>(&state_)) + sizeof(time_expire_));
}

CChatRoom_JoinChatRoomGroup_Response::~CChatRoom_JoinChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinChatRoomGroup_Response)
  SharedDtor();
}

void CChatRoom_JoinChatRoomGroup_Response::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete user_chat_state_;
}

void CChatRoom_JoinChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_JoinChatRoomGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_JoinChatRoomGroup_Response& CChatRoom_JoinChatRoomGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinChatRoomGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_JoinChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_chat_state_ != NULL);
      user_chat_state_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&join_chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expire_) -
        reinterpret_cast<char*>(&join_chat_id_)) + sizeof(time_expire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_JoinChatRoomGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_JoinChatRoomGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoomGroupState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CUserChatRoomGroupState user_chat_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_chat_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 join_chat_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_join_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &join_chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_expire = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_time_expire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_expire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_JoinChatRoomGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_JoinChatRoomGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_JoinChatRoomGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_JoinChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupState state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_state(), output);
  }

  // optional .CUserChatRoomGroupState user_chat_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_chat_state(), output);
  }

  // optional uint64 join_chat_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->join_chat_id(), output);
  }

  // optional uint32 time_expire = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_expire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_JoinChatRoomGroup_Response)
}

::google::protobuf::uint8* CChatRoom_JoinChatRoomGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_state(), deterministic, target);
  }

  // optional .CUserChatRoomGroupState user_chat_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_chat_state(), deterministic, target);
  }

  // optional uint64 join_chat_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->join_chat_id(), target);
  }

  // optional uint32 time_expire = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_expire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_JoinChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinChatRoomGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .CChatRoomGroupState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .CUserChatRoomGroupState user_chat_state = 3;
    if (has_user_chat_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_chat_state_);
    }

    // optional uint64 join_chat_id = 4;
    if (has_join_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->join_chat_id());
    }

    // optional uint32 time_expire = 5;
    if (has_time_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_expire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_JoinChatRoomGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_JoinChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_JoinChatRoomGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_JoinChatRoomGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_JoinChatRoomGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_JoinChatRoomGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_JoinChatRoomGroup_Response::MergeFrom(const CChatRoom_JoinChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::CChatRoomGroupState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_chat_state()->::CUserChatRoomGroupState::MergeFrom(from.user_chat_state());
    }
    if (cached_has_bits & 0x00000004u) {
      join_chat_id_ = from.join_chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_expire_ = from.time_expire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_JoinChatRoomGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_JoinChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_JoinChatRoomGroup_Response::CopyFrom(const CChatRoom_JoinChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_JoinChatRoomGroup_Response::Swap(CChatRoom_JoinChatRoomGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_JoinChatRoomGroup_Response::InternalSwap(CChatRoom_JoinChatRoomGroup_Response* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(user_chat_state_, other->user_chat_state_);
  swap(join_chat_id_, other->join_chat_id_);
  swap(time_expire_, other->time_expire_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_JoinChatRoomGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_InviteFriendToChatRoomGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_InviteFriendToChatRoomGroup_Request::kChatGroupIdFieldNumber;
const int CChatRoom_InviteFriendToChatRoomGroup_Request::kSteamidFieldNumber;
const int CChatRoom_InviteFriendToChatRoomGroup_Request::kChatIdFieldNumber;
const int CChatRoom_InviteFriendToChatRoomGroup_Request::kSkipFriendsuiCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_InviteFriendToChatRoomGroup_Request::CChatRoom_InviteFriendToChatRoomGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_InviteFriendToChatRoomGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_InviteFriendToChatRoomGroup_Request)
}
CChatRoom_InviteFriendToChatRoomGroup_Request::CChatRoom_InviteFriendToChatRoomGroup_Request(const CChatRoom_InviteFriendToChatRoomGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_friendsui_check_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(skip_friendsui_check_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_InviteFriendToChatRoomGroup_Request)
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_friendsui_check_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(skip_friendsui_check_));
}

CChatRoom_InviteFriendToChatRoomGroup_Request::~CChatRoom_InviteFriendToChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_InviteFriendToChatRoomGroup_Request)
  SharedDtor();
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::SharedDtor() {
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_InviteFriendToChatRoomGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_InviteFriendToChatRoomGroup_Request& CChatRoom_InviteFriendToChatRoomGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_InviteFriendToChatRoomGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_InviteFriendToChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_friendsui_check_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(skip_friendsui_check_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_InviteFriendToChatRoomGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_friendsui_check = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_skip_friendsui_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_friendsui_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_InviteFriendToChatRoomGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_InviteFriendToChatRoomGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chat_id(), output);
  }

  // optional bool skip_friendsui_check = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skip_friendsui_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_InviteFriendToChatRoomGroup_Request)
}

::google::protobuf::uint8* CChatRoom_InviteFriendToChatRoomGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->chat_id(), target);
  }

  // optional bool skip_friendsui_check = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skip_friendsui_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_InviteFriendToChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_InviteFriendToChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_id = 3;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional bool skip_friendsui_check = 4;
    if (has_skip_friendsui_check()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_InviteFriendToChatRoomGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_InviteFriendToChatRoomGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_InviteFriendToChatRoomGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_InviteFriendToChatRoomGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::MergeFrom(const CChatRoom_InviteFriendToChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      skip_friendsui_check_ = from.skip_friendsui_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::CopyFrom(const CChatRoom_InviteFriendToChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_InviteFriendToChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::Swap(CChatRoom_InviteFriendToChatRoomGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_InviteFriendToChatRoomGroup_Request::InternalSwap(CChatRoom_InviteFriendToChatRoomGroup_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(steamid_, other->steamid_);
  swap(chat_id_, other->chat_id_);
  swap(skip_friendsui_check_, other->skip_friendsui_check_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_InviteFriendToChatRoomGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_InviteFriendToChatRoomGroup_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_InviteFriendToChatRoomGroup_Response::CChatRoom_InviteFriendToChatRoomGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_InviteFriendToChatRoomGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_InviteFriendToChatRoomGroup_Response)
}
CChatRoom_InviteFriendToChatRoomGroup_Response::CChatRoom_InviteFriendToChatRoomGroup_Response(const CChatRoom_InviteFriendToChatRoomGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_InviteFriendToChatRoomGroup_Response)
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::SharedCtor() {
}

CChatRoom_InviteFriendToChatRoomGroup_Response::~CChatRoom_InviteFriendToChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_InviteFriendToChatRoomGroup_Response)
  SharedDtor();
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::SharedDtor() {
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_InviteFriendToChatRoomGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_InviteFriendToChatRoomGroup_Response& CChatRoom_InviteFriendToChatRoomGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_InviteFriendToChatRoomGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_InviteFriendToChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_InviteFriendToChatRoomGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_InviteFriendToChatRoomGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_InviteFriendToChatRoomGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_InviteFriendToChatRoomGroup_Response)
}

::google::protobuf::uint8* CChatRoom_InviteFriendToChatRoomGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_InviteFriendToChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_InviteFriendToChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_InviteFriendToChatRoomGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_InviteFriendToChatRoomGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_InviteFriendToChatRoomGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_InviteFriendToChatRoomGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::MergeFrom(const CChatRoom_InviteFriendToChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_InviteFriendToChatRoomGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::CopyFrom(const CChatRoom_InviteFriendToChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_InviteFriendToChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_InviteFriendToChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_InviteFriendToChatRoomGroup_Response::Swap(CChatRoom_InviteFriendToChatRoomGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_InviteFriendToChatRoomGroup_Response::InternalSwap(CChatRoom_InviteFriendToChatRoomGroup_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_InviteFriendToChatRoomGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_LeaveChatRoomGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_LeaveChatRoomGroup_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_LeaveChatRoomGroup_Request::CChatRoom_LeaveChatRoomGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveChatRoomGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_LeaveChatRoomGroup_Request)
}
CChatRoom_LeaveChatRoomGroup_Request::CChatRoom_LeaveChatRoomGroup_Request(const CChatRoom_LeaveChatRoomGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveChatRoomGroup_Request)
}

void CChatRoom_LeaveChatRoomGroup_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_LeaveChatRoomGroup_Request::~CChatRoom_LeaveChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_LeaveChatRoomGroup_Request)
  SharedDtor();
}

void CChatRoom_LeaveChatRoomGroup_Request::SharedDtor() {
}

void CChatRoom_LeaveChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_LeaveChatRoomGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_LeaveChatRoomGroup_Request& CChatRoom_LeaveChatRoomGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveChatRoomGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_LeaveChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_LeaveChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_LeaveChatRoomGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_LeaveChatRoomGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_LeaveChatRoomGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_LeaveChatRoomGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_LeaveChatRoomGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_LeaveChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_LeaveChatRoomGroup_Request)
}

::google::protobuf::uint8* CChatRoom_LeaveChatRoomGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_LeaveChatRoomGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_LeaveChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_LeaveChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_LeaveChatRoomGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_LeaveChatRoomGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_LeaveChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_LeaveChatRoomGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_LeaveChatRoomGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_LeaveChatRoomGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_LeaveChatRoomGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_LeaveChatRoomGroup_Request::MergeFrom(const CChatRoom_LeaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_LeaveChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_LeaveChatRoomGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_LeaveChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_LeaveChatRoomGroup_Request::CopyFrom(const CChatRoom_LeaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_LeaveChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_LeaveChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_LeaveChatRoomGroup_Request::Swap(CChatRoom_LeaveChatRoomGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_LeaveChatRoomGroup_Request::InternalSwap(CChatRoom_LeaveChatRoomGroup_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_LeaveChatRoomGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_LeaveChatRoomGroup_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_LeaveChatRoomGroup_Response::CChatRoom_LeaveChatRoomGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveChatRoomGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_LeaveChatRoomGroup_Response)
}
CChatRoom_LeaveChatRoomGroup_Response::CChatRoom_LeaveChatRoomGroup_Response(const CChatRoom_LeaveChatRoomGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveChatRoomGroup_Response)
}

void CChatRoom_LeaveChatRoomGroup_Response::SharedCtor() {
}

CChatRoom_LeaveChatRoomGroup_Response::~CChatRoom_LeaveChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_LeaveChatRoomGroup_Response)
  SharedDtor();
}

void CChatRoom_LeaveChatRoomGroup_Response::SharedDtor() {
}

void CChatRoom_LeaveChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_LeaveChatRoomGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_LeaveChatRoomGroup_Response& CChatRoom_LeaveChatRoomGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveChatRoomGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_LeaveChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_LeaveChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_LeaveChatRoomGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_LeaveChatRoomGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_LeaveChatRoomGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_LeaveChatRoomGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_LeaveChatRoomGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_LeaveChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_LeaveChatRoomGroup_Response)
}

::google::protobuf::uint8* CChatRoom_LeaveChatRoomGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_LeaveChatRoomGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_LeaveChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_LeaveChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_LeaveChatRoomGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_LeaveChatRoomGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_LeaveChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_LeaveChatRoomGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_LeaveChatRoomGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_LeaveChatRoomGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_LeaveChatRoomGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_LeaveChatRoomGroup_Response::MergeFrom(const CChatRoom_LeaveChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_LeaveChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_LeaveChatRoomGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_LeaveChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_LeaveChatRoomGroup_Response::CopyFrom(const CChatRoom_LeaveChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_LeaveChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_LeaveChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_LeaveChatRoomGroup_Response::Swap(CChatRoom_LeaveChatRoomGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_LeaveChatRoomGroup_Response::InternalSwap(CChatRoom_LeaveChatRoomGroup_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_LeaveChatRoomGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateChatRoom_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateChatRoom_Request::kChatGroupIdFieldNumber;
const int CChatRoom_CreateChatRoom_Request::kNameFieldNumber;
const int CChatRoom_CreateChatRoom_Request::kAllowVoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateChatRoom_Request::CChatRoom_CreateChatRoom_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoom_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateChatRoom_Request)
}
CChatRoom_CreateChatRoom_Request::CChatRoom_CreateChatRoom_Request(const CChatRoom_CreateChatRoom_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_voice_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(allow_voice_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoom_Request)
}

void CChatRoom_CreateChatRoom_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_voice_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(allow_voice_));
}

CChatRoom_CreateChatRoom_Request::~CChatRoom_CreateChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoom_Request)
  SharedDtor();
}

void CChatRoom_CreateChatRoom_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateChatRoom_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateChatRoom_Request& CChatRoom_CreateChatRoom_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoom_Request.base);
  return *internal_default_instance();
}


void CChatRoom_CreateChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_voice_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(allow_voice_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateChatRoom_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateChatRoom_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_CreateChatRoom_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_voice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_allow_voice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_voice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateChatRoom_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateChatRoom_Request)
  return false;
#undef DO_
}

void CChatRoom_CreateChatRoom_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateChatRoom_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool allow_voice = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_voice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateChatRoom_Request)
}

::google::protobuf::uint8* CChatRoom_CreateChatRoom_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateChatRoom_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool allow_voice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allow_voice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoom_Request)
  return target;
}

size_t CChatRoom_CreateChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoom_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional bool allow_voice = 3;
    if (has_allow_voice()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateChatRoom_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateChatRoom_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateChatRoom_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateChatRoom_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateChatRoom_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateChatRoom_Request::MergeFrom(const CChatRoom_CreateChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      allow_voice_ = from.allow_voice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_CreateChatRoom_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateChatRoom_Request::CopyFrom(const CChatRoom_CreateChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoom_Request::Swap(CChatRoom_CreateChatRoom_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateChatRoom_Request::InternalSwap(CChatRoom_CreateChatRoom_Request* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(allow_voice_, other->allow_voice_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateChatRoom_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateChatRoom_Response::InitAsDefaultInstance() {
  ::_CChatRoom_CreateChatRoom_Response_default_instance_._instance.get_mutable()->chat_room_ = const_cast< ::CChatRoomState*>(
      ::CChatRoomState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateChatRoom_Response::kChatRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateChatRoom_Response::CChatRoom_CreateChatRoom_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoom_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateChatRoom_Response)
}
CChatRoom_CreateChatRoom_Response::CChatRoom_CreateChatRoom_Response(const CChatRoom_CreateChatRoom_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chat_room()) {
    chat_room_ = new ::CChatRoomState(*from.chat_room_);
  } else {
    chat_room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoom_Response)
}

void CChatRoom_CreateChatRoom_Response::SharedCtor() {
  chat_room_ = NULL;
}

CChatRoom_CreateChatRoom_Response::~CChatRoom_CreateChatRoom_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoom_Response)
  SharedDtor();
}

void CChatRoom_CreateChatRoom_Response::SharedDtor() {
  if (this != internal_default_instance()) delete chat_room_;
}

void CChatRoom_CreateChatRoom_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateChatRoom_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateChatRoom_Response& CChatRoom_CreateChatRoom_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateChatRoom_Response.base);
  return *internal_default_instance();
}


void CChatRoom_CreateChatRoom_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_room_ != NULL);
    chat_room_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateChatRoom_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateChatRoom_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoomState chat_room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateChatRoom_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateChatRoom_Response)
  return false;
#undef DO_
}

void CChatRoom_CreateChatRoom_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomState chat_room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_chat_room(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateChatRoom_Response)
}

::google::protobuf::uint8* CChatRoom_CreateChatRoom_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomState chat_room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_chat_room(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoom_Response)
  return target;
}

size_t CChatRoom_CreateChatRoom_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoom_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CChatRoomState chat_room = 1;
  if (has_chat_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateChatRoom_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateChatRoom_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateChatRoom_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateChatRoom_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateChatRoom_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateChatRoom_Response::MergeFrom(const CChatRoom_CreateChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_room()) {
    mutable_chat_room()->::CChatRoomState::MergeFrom(from.chat_room());
  }
}

void CChatRoom_CreateChatRoom_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateChatRoom_Response::CopyFrom(const CChatRoom_CreateChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoom_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoom_Response::Swap(CChatRoom_CreateChatRoom_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateChatRoom_Response::InternalSwap(CChatRoom_CreateChatRoom_Response* other) {
  using std::swap;
  swap(chat_room_, other->chat_room_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateChatRoom_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteChatRoom_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_DeleteChatRoom_Request::kChatGroupIdFieldNumber;
const int CChatRoom_DeleteChatRoom_Request::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteChatRoom_Request::CChatRoom_DeleteChatRoom_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatRoom_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteChatRoom_Request)
}
CChatRoom_DeleteChatRoom_Request::CChatRoom_DeleteChatRoom_Request(const CChatRoom_DeleteChatRoom_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatRoom_Request)
}

void CChatRoom_DeleteChatRoom_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_DeleteChatRoom_Request::~CChatRoom_DeleteChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatRoom_Request)
  SharedDtor();
}

void CChatRoom_DeleteChatRoom_Request::SharedDtor() {
}

void CChatRoom_DeleteChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteChatRoom_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteChatRoom_Request& CChatRoom_DeleteChatRoom_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatRoom_Request.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteChatRoom_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteChatRoom_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteChatRoom_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteChatRoom_Request)
  return false;
#undef DO_
}

void CChatRoom_DeleteChatRoom_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteChatRoom_Request)
}

::google::protobuf::uint8* CChatRoom_DeleteChatRoom_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatRoom_Request)
  return target;
}

size_t CChatRoom_DeleteChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatRoom_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteChatRoom_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteChatRoom_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteChatRoom_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteChatRoom_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteChatRoom_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteChatRoom_Request::MergeFrom(const CChatRoom_DeleteChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_DeleteChatRoom_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteChatRoom_Request::CopyFrom(const CChatRoom_DeleteChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatRoom_Request::Swap(CChatRoom_DeleteChatRoom_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteChatRoom_Request::InternalSwap(CChatRoom_DeleteChatRoom_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteChatRoom_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteChatRoom_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteChatRoom_Response::CChatRoom_DeleteChatRoom_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatRoom_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteChatRoom_Response)
}
CChatRoom_DeleteChatRoom_Response::CChatRoom_DeleteChatRoom_Response(const CChatRoom_DeleteChatRoom_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatRoom_Response)
}

void CChatRoom_DeleteChatRoom_Response::SharedCtor() {
}

CChatRoom_DeleteChatRoom_Response::~CChatRoom_DeleteChatRoom_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatRoom_Response)
  SharedDtor();
}

void CChatRoom_DeleteChatRoom_Response::SharedDtor() {
}

void CChatRoom_DeleteChatRoom_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteChatRoom_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteChatRoom_Response& CChatRoom_DeleteChatRoom_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatRoom_Response.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteChatRoom_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteChatRoom_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteChatRoom_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteChatRoom_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteChatRoom_Response)
  return false;
#undef DO_
}

void CChatRoom_DeleteChatRoom_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteChatRoom_Response)
}

::google::protobuf::uint8* CChatRoom_DeleteChatRoom_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatRoom_Response)
  return target;
}

size_t CChatRoom_DeleteChatRoom_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatRoom_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteChatRoom_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteChatRoom_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteChatRoom_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteChatRoom_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteChatRoom_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteChatRoom_Response::MergeFrom(const CChatRoom_DeleteChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_DeleteChatRoom_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteChatRoom_Response::CopyFrom(const CChatRoom_DeleteChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatRoom_Response::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatRoom_Response::Swap(CChatRoom_DeleteChatRoom_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteChatRoom_Response::InternalSwap(CChatRoom_DeleteChatRoom_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteChatRoom_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RenameChatRoom_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_RenameChatRoom_Request::kChatGroupIdFieldNumber;
const int CChatRoom_RenameChatRoom_Request::kChatIdFieldNumber;
const int CChatRoom_RenameChatRoom_Request::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RenameChatRoom_Request::CChatRoom_RenameChatRoom_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoom_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RenameChatRoom_Request)
}
CChatRoom_RenameChatRoom_Request::CChatRoom_RenameChatRoom_Request(const CChatRoom_RenameChatRoom_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoom_Request)
}

void CChatRoom_RenameChatRoom_Request::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_RenameChatRoom_Request::~CChatRoom_RenameChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoom_Request)
  SharedDtor();
}

void CChatRoom_RenameChatRoom_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RenameChatRoom_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RenameChatRoom_Request& CChatRoom_RenameChatRoom_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoom_Request.base);
  return *internal_default_instance();
}


void CChatRoom_RenameChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RenameChatRoom_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RenameChatRoom_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_RenameChatRoom_Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RenameChatRoom_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RenameChatRoom_Request)
  return false;
#undef DO_
}

void CChatRoom_RenameChatRoom_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RenameChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoom_Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RenameChatRoom_Request)
}

::google::protobuf::uint8* CChatRoom_RenameChatRoom_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoom_Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoom_Request)
  return target;
}

size_t CChatRoom_RenameChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoom_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RenameChatRoom_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RenameChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RenameChatRoom_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RenameChatRoom_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RenameChatRoom_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RenameChatRoom_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_RenameChatRoom_Request::MergeFrom(const CChatRoom_RenameChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_RenameChatRoom_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RenameChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RenameChatRoom_Request::CopyFrom(const CChatRoom_RenameChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoom_Request::Swap(CChatRoom_RenameChatRoom_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RenameChatRoom_Request::InternalSwap(CChatRoom_RenameChatRoom_Request* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RenameChatRoom_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_RenameChatRoom_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_RenameChatRoom_Response::CChatRoom_RenameChatRoom_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoom_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_RenameChatRoom_Response)
}
CChatRoom_RenameChatRoom_Response::CChatRoom_RenameChatRoom_Response(const CChatRoom_RenameChatRoom_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoom_Response)
}

void CChatRoom_RenameChatRoom_Response::SharedCtor() {
}

CChatRoom_RenameChatRoom_Response::~CChatRoom_RenameChatRoom_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoom_Response)
  SharedDtor();
}

void CChatRoom_RenameChatRoom_Response::SharedDtor() {
}

void CChatRoom_RenameChatRoom_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_RenameChatRoom_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_RenameChatRoom_Response& CChatRoom_RenameChatRoom_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_RenameChatRoom_Response.base);
  return *internal_default_instance();
}


void CChatRoom_RenameChatRoom_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_RenameChatRoom_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_RenameChatRoom_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_RenameChatRoom_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_RenameChatRoom_Response)
  return false;
#undef DO_
}

void CChatRoom_RenameChatRoom_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_RenameChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_RenameChatRoom_Response)
}

::google::protobuf::uint8* CChatRoom_RenameChatRoom_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoom_Response)
  return target;
}

size_t CChatRoom_RenameChatRoom_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoom_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_RenameChatRoom_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_RenameChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_RenameChatRoom_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_RenameChatRoom_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_RenameChatRoom_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_RenameChatRoom_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_RenameChatRoom_Response::MergeFrom(const CChatRoom_RenameChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_RenameChatRoom_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_RenameChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_RenameChatRoom_Response::CopyFrom(const CChatRoom_RenameChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoom_Response::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoom_Response::Swap(CChatRoom_RenameChatRoom_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_RenameChatRoom_Response::InternalSwap(CChatRoom_RenameChatRoom_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_RenameChatRoom_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ReorderChatRoom_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ReorderChatRoom_Request::kChatGroupIdFieldNumber;
const int CChatRoom_ReorderChatRoom_Request::kChatIdFieldNumber;
const int CChatRoom_ReorderChatRoom_Request::kMoveAfterChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ReorderChatRoom_Request::CChatRoom_ReorderChatRoom_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderChatRoom_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ReorderChatRoom_Request)
}
CChatRoom_ReorderChatRoom_Request::CChatRoom_ReorderChatRoom_Request(const CChatRoom_ReorderChatRoom_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_after_chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(move_after_chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderChatRoom_Request)
}

void CChatRoom_ReorderChatRoom_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_after_chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(move_after_chat_id_));
}

CChatRoom_ReorderChatRoom_Request::~CChatRoom_ReorderChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReorderChatRoom_Request)
  SharedDtor();
}

void CChatRoom_ReorderChatRoom_Request::SharedDtor() {
}

void CChatRoom_ReorderChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ReorderChatRoom_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ReorderChatRoom_Request& CChatRoom_ReorderChatRoom_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderChatRoom_Request.base);
  return *internal_default_instance();
}


void CChatRoom_ReorderChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReorderChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_after_chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(move_after_chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ReorderChatRoom_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ReorderChatRoom_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 move_after_chat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_move_after_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &move_after_chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ReorderChatRoom_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ReorderChatRoom_Request)
  return false;
#undef DO_
}

void CChatRoom_ReorderChatRoom_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ReorderChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // optional uint64 move_after_chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->move_after_chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ReorderChatRoom_Request)
}

::google::protobuf::uint8* CChatRoom_ReorderChatRoom_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReorderChatRoom_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // optional uint64 move_after_chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->move_after_chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReorderChatRoom_Request)
  return target;
}

size_t CChatRoom_ReorderChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReorderChatRoom_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint64 move_after_chat_id = 3;
    if (has_move_after_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->move_after_chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ReorderChatRoom_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ReorderChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ReorderChatRoom_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ReorderChatRoom_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ReorderChatRoom_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ReorderChatRoom_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_ReorderChatRoom_Request::MergeFrom(const CChatRoom_ReorderChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReorderChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      move_after_chat_id_ = from.move_after_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_ReorderChatRoom_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ReorderChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ReorderChatRoom_Request::CopyFrom(const CChatRoom_ReorderChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReorderChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReorderChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_ReorderChatRoom_Request::Swap(CChatRoom_ReorderChatRoom_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ReorderChatRoom_Request::InternalSwap(CChatRoom_ReorderChatRoom_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(move_after_chat_id_, other->move_after_chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ReorderChatRoom_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ReorderChatRoom_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ReorderChatRoom_Response::CChatRoom_ReorderChatRoom_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderChatRoom_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ReorderChatRoom_Response)
}
CChatRoom_ReorderChatRoom_Response::CChatRoom_ReorderChatRoom_Response(const CChatRoom_ReorderChatRoom_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderChatRoom_Response)
}

void CChatRoom_ReorderChatRoom_Response::SharedCtor() {
}

CChatRoom_ReorderChatRoom_Response::~CChatRoom_ReorderChatRoom_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReorderChatRoom_Response)
  SharedDtor();
}

void CChatRoom_ReorderChatRoom_Response::SharedDtor() {
}

void CChatRoom_ReorderChatRoom_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ReorderChatRoom_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ReorderChatRoom_Response& CChatRoom_ReorderChatRoom_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ReorderChatRoom_Response.base);
  return *internal_default_instance();
}


void CChatRoom_ReorderChatRoom_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReorderChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ReorderChatRoom_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ReorderChatRoom_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ReorderChatRoom_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ReorderChatRoom_Response)
  return false;
#undef DO_
}

void CChatRoom_ReorderChatRoom_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ReorderChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ReorderChatRoom_Response)
}

::google::protobuf::uint8* CChatRoom_ReorderChatRoom_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReorderChatRoom_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReorderChatRoom_Response)
  return target;
}

size_t CChatRoom_ReorderChatRoom_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReorderChatRoom_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ReorderChatRoom_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ReorderChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ReorderChatRoom_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ReorderChatRoom_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ReorderChatRoom_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ReorderChatRoom_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_ReorderChatRoom_Response::MergeFrom(const CChatRoom_ReorderChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReorderChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_ReorderChatRoom_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ReorderChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ReorderChatRoom_Response::CopyFrom(const CChatRoom_ReorderChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReorderChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReorderChatRoom_Response::IsInitialized() const {
  return true;
}

void CChatRoom_ReorderChatRoom_Response::Swap(CChatRoom_ReorderChatRoom_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ReorderChatRoom_Response::InternalSwap(CChatRoom_ReorderChatRoom_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ReorderChatRoom_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SendChatMessage_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SendChatMessage_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SendChatMessage_Request::kChatIdFieldNumber;
const int CChatRoom_SendChatMessage_Request::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SendChatMessage_Request::CChatRoom_SendChatMessage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SendChatMessage_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SendChatMessage_Request)
}
CChatRoom_SendChatMessage_Request::CChatRoom_SendChatMessage_Request(const CChatRoom_SendChatMessage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SendChatMessage_Request)
}

void CChatRoom_SendChatMessage_Request::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_SendChatMessage_Request::~CChatRoom_SendChatMessage_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SendChatMessage_Request)
  SharedDtor();
}

void CChatRoom_SendChatMessage_Request::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SendChatMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SendChatMessage_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SendChatMessage_Request& CChatRoom_SendChatMessage_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SendChatMessage_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SendChatMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SendChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SendChatMessage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SendChatMessage_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_SendChatMessage_Request.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SendChatMessage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SendChatMessage_Request)
  return false;
#undef DO_
}

void CChatRoom_SendChatMessage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SendChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Request.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SendChatMessage_Request)
}

::google::protobuf::uint8* CChatRoom_SendChatMessage_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SendChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Request.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SendChatMessage_Request)
  return target;
}

size_t CChatRoom_SendChatMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SendChatMessage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SendChatMessage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SendChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SendChatMessage_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SendChatMessage_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SendChatMessage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SendChatMessage_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SendChatMessage_Request::MergeFrom(const CChatRoom_SendChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SendChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SendChatMessage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SendChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SendChatMessage_Request::CopyFrom(const CChatRoom_SendChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SendChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SendChatMessage_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SendChatMessage_Request::Swap(CChatRoom_SendChatMessage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SendChatMessage_Request::InternalSwap(CChatRoom_SendChatMessage_Request* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SendChatMessage_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SendChatMessage_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SendChatMessage_Response::kModifiedMessageFieldNumber;
const int CChatRoom_SendChatMessage_Response::kServerTimestampFieldNumber;
const int CChatRoom_SendChatMessage_Response::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SendChatMessage_Response::CChatRoom_SendChatMessage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SendChatMessage_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SendChatMessage_Response)
}
CChatRoom_SendChatMessage_Response::CChatRoom_SendChatMessage_Response(const CChatRoom_SendChatMessage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modified_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modified_message()) {
    modified_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_message_);
  }
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SendChatMessage_Response)
}

void CChatRoom_SendChatMessage_Response::SharedCtor() {
  modified_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
}

CChatRoom_SendChatMessage_Response::~CChatRoom_SendChatMessage_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SendChatMessage_Response)
  SharedDtor();
}

void CChatRoom_SendChatMessage_Response::SharedDtor() {
  modified_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SendChatMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SendChatMessage_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SendChatMessage_Response& CChatRoom_SendChatMessage_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SendChatMessage_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SendChatMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SendChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    modified_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SendChatMessage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SendChatMessage_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string modified_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modified_message().data(), static_cast<int>(this->modified_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_SendChatMessage_Response.modified_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SendChatMessage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SendChatMessage_Response)
  return false;
#undef DO_
}

void CChatRoom_SendChatMessage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SendChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string modified_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modified_message().data(), static_cast<int>(this->modified_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Response.modified_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modified_message(), output);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_timestamp(), output);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SendChatMessage_Response)
}

::google::protobuf::uint8* CChatRoom_SendChatMessage_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SendChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string modified_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modified_message().data(), static_cast<int>(this->modified_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Response.modified_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modified_message(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_timestamp(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SendChatMessage_Response)
  return target;
}

size_t CChatRoom_SendChatMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SendChatMessage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string modified_message = 1;
    if (has_modified_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modified_message());
    }

    // optional uint32 server_timestamp = 2;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_timestamp());
    }

    // optional uint32 ordinal = 3;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SendChatMessage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SendChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SendChatMessage_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SendChatMessage_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SendChatMessage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SendChatMessage_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SendChatMessage_Response::MergeFrom(const CChatRoom_SendChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SendChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_modified_message();
      modified_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SendChatMessage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SendChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SendChatMessage_Response::CopyFrom(const CChatRoom_SendChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SendChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SendChatMessage_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SendChatMessage_Response::Swap(CChatRoom_SendChatMessage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SendChatMessage_Response::InternalSwap(CChatRoom_SendChatMessage_Response* other) {
  using std::swap;
  modified_message_.Swap(&other->modified_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_timestamp_, other->server_timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SendChatMessage_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_JoinVoiceChat_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_JoinVoiceChat_Request::kChatGroupIdFieldNumber;
const int CChatRoom_JoinVoiceChat_Request::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_JoinVoiceChat_Request::CChatRoom_JoinVoiceChat_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinVoiceChat_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_JoinVoiceChat_Request)
}
CChatRoom_JoinVoiceChat_Request::CChatRoom_JoinVoiceChat_Request(const CChatRoom_JoinVoiceChat_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinVoiceChat_Request)
}

void CChatRoom_JoinVoiceChat_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_JoinVoiceChat_Request::~CChatRoom_JoinVoiceChat_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinVoiceChat_Request)
  SharedDtor();
}

void CChatRoom_JoinVoiceChat_Request::SharedDtor() {
}

void CChatRoom_JoinVoiceChat_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_JoinVoiceChat_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_JoinVoiceChat_Request& CChatRoom_JoinVoiceChat_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinVoiceChat_Request.base);
  return *internal_default_instance();
}


void CChatRoom_JoinVoiceChat_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinVoiceChat_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_JoinVoiceChat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_JoinVoiceChat_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_JoinVoiceChat_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_JoinVoiceChat_Request)
  return false;
#undef DO_
}

void CChatRoom_JoinVoiceChat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_JoinVoiceChat_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_JoinVoiceChat_Request)
}

::google::protobuf::uint8* CChatRoom_JoinVoiceChat_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinVoiceChat_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinVoiceChat_Request)
  return target;
}

size_t CChatRoom_JoinVoiceChat_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinVoiceChat_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_JoinVoiceChat_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_JoinVoiceChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_JoinVoiceChat_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_JoinVoiceChat_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_JoinVoiceChat_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_JoinVoiceChat_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_JoinVoiceChat_Request::MergeFrom(const CChatRoom_JoinVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinVoiceChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_JoinVoiceChat_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_JoinVoiceChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_JoinVoiceChat_Request::CopyFrom(const CChatRoom_JoinVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinVoiceChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinVoiceChat_Request::IsInitialized() const {
  return true;
}

void CChatRoom_JoinVoiceChat_Request::Swap(CChatRoom_JoinVoiceChat_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_JoinVoiceChat_Request::InternalSwap(CChatRoom_JoinVoiceChat_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_JoinVoiceChat_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_JoinVoiceChat_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_JoinVoiceChat_Response::kVoiceChatidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_JoinVoiceChat_Response::CChatRoom_JoinVoiceChat_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinVoiceChat_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_JoinVoiceChat_Response)
}
CChatRoom_JoinVoiceChat_Response::CChatRoom_JoinVoiceChat_Response(const CChatRoom_JoinVoiceChat_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_chatid_ = from.voice_chatid_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinVoiceChat_Response)
}

void CChatRoom_JoinVoiceChat_Response::SharedCtor() {
  voice_chatid_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_JoinVoiceChat_Response::~CChatRoom_JoinVoiceChat_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinVoiceChat_Response)
  SharedDtor();
}

void CChatRoom_JoinVoiceChat_Response::SharedDtor() {
}

void CChatRoom_JoinVoiceChat_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_JoinVoiceChat_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_JoinVoiceChat_Response& CChatRoom_JoinVoiceChat_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_JoinVoiceChat_Response.base);
  return *internal_default_instance();
}


void CChatRoom_JoinVoiceChat_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinVoiceChat_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voice_chatid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_JoinVoiceChat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_JoinVoiceChat_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 voice_chatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_voice_chatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voice_chatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_JoinVoiceChat_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_JoinVoiceChat_Response)
  return false;
#undef DO_
}

void CChatRoom_JoinVoiceChat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_JoinVoiceChat_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 voice_chatid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->voice_chatid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_JoinVoiceChat_Response)
}

::google::protobuf::uint8* CChatRoom_JoinVoiceChat_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinVoiceChat_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 voice_chatid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->voice_chatid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinVoiceChat_Response)
  return target;
}

size_t CChatRoom_JoinVoiceChat_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinVoiceChat_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 voice_chatid = 1;
  if (has_voice_chatid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->voice_chatid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_JoinVoiceChat_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_JoinVoiceChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_JoinVoiceChat_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_JoinVoiceChat_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_JoinVoiceChat_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_JoinVoiceChat_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_JoinVoiceChat_Response::MergeFrom(const CChatRoom_JoinVoiceChat_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinVoiceChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voice_chatid()) {
    set_voice_chatid(from.voice_chatid());
  }
}

void CChatRoom_JoinVoiceChat_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_JoinVoiceChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_JoinVoiceChat_Response::CopyFrom(const CChatRoom_JoinVoiceChat_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinVoiceChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinVoiceChat_Response::IsInitialized() const {
  return true;
}

void CChatRoom_JoinVoiceChat_Response::Swap(CChatRoom_JoinVoiceChat_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_JoinVoiceChat_Response::InternalSwap(CChatRoom_JoinVoiceChat_Response* other) {
  using std::swap;
  swap(voice_chatid_, other->voice_chatid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_JoinVoiceChat_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_LeaveVoiceChat_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_LeaveVoiceChat_Request::kChatGroupIdFieldNumber;
const int CChatRoom_LeaveVoiceChat_Request::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_LeaveVoiceChat_Request::CChatRoom_LeaveVoiceChat_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveVoiceChat_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_LeaveVoiceChat_Request)
}
CChatRoom_LeaveVoiceChat_Request::CChatRoom_LeaveVoiceChat_Request(const CChatRoom_LeaveVoiceChat_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveVoiceChat_Request)
}

void CChatRoom_LeaveVoiceChat_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_LeaveVoiceChat_Request::~CChatRoom_LeaveVoiceChat_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_LeaveVoiceChat_Request)
  SharedDtor();
}

void CChatRoom_LeaveVoiceChat_Request::SharedDtor() {
}

void CChatRoom_LeaveVoiceChat_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_LeaveVoiceChat_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_LeaveVoiceChat_Request& CChatRoom_LeaveVoiceChat_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveVoiceChat_Request.base);
  return *internal_default_instance();
}


void CChatRoom_LeaveVoiceChat_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_LeaveVoiceChat_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_LeaveVoiceChat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_LeaveVoiceChat_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_LeaveVoiceChat_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_LeaveVoiceChat_Request)
  return false;
#undef DO_
}

void CChatRoom_LeaveVoiceChat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_LeaveVoiceChat_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_LeaveVoiceChat_Request)
}

::google::protobuf::uint8* CChatRoom_LeaveVoiceChat_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_LeaveVoiceChat_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_LeaveVoiceChat_Request)
  return target;
}

size_t CChatRoom_LeaveVoiceChat_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_LeaveVoiceChat_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_LeaveVoiceChat_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_LeaveVoiceChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_LeaveVoiceChat_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_LeaveVoiceChat_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_LeaveVoiceChat_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_LeaveVoiceChat_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_LeaveVoiceChat_Request::MergeFrom(const CChatRoom_LeaveVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_LeaveVoiceChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_LeaveVoiceChat_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_LeaveVoiceChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_LeaveVoiceChat_Request::CopyFrom(const CChatRoom_LeaveVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_LeaveVoiceChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_LeaveVoiceChat_Request::IsInitialized() const {
  return true;
}

void CChatRoom_LeaveVoiceChat_Request::Swap(CChatRoom_LeaveVoiceChat_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_LeaveVoiceChat_Request::InternalSwap(CChatRoom_LeaveVoiceChat_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_LeaveVoiceChat_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_LeaveVoiceChat_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_LeaveVoiceChat_Response::CChatRoom_LeaveVoiceChat_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveVoiceChat_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_LeaveVoiceChat_Response)
}
CChatRoom_LeaveVoiceChat_Response::CChatRoom_LeaveVoiceChat_Response(const CChatRoom_LeaveVoiceChat_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveVoiceChat_Response)
}

void CChatRoom_LeaveVoiceChat_Response::SharedCtor() {
}

CChatRoom_LeaveVoiceChat_Response::~CChatRoom_LeaveVoiceChat_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_LeaveVoiceChat_Response)
  SharedDtor();
}

void CChatRoom_LeaveVoiceChat_Response::SharedDtor() {
}

void CChatRoom_LeaveVoiceChat_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_LeaveVoiceChat_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_LeaveVoiceChat_Response& CChatRoom_LeaveVoiceChat_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_LeaveVoiceChat_Response.base);
  return *internal_default_instance();
}


void CChatRoom_LeaveVoiceChat_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_LeaveVoiceChat_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_LeaveVoiceChat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_LeaveVoiceChat_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_LeaveVoiceChat_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_LeaveVoiceChat_Response)
  return false;
#undef DO_
}

void CChatRoom_LeaveVoiceChat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_LeaveVoiceChat_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_LeaveVoiceChat_Response)
}

::google::protobuf::uint8* CChatRoom_LeaveVoiceChat_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_LeaveVoiceChat_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_LeaveVoiceChat_Response)
  return target;
}

size_t CChatRoom_LeaveVoiceChat_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_LeaveVoiceChat_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_LeaveVoiceChat_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_LeaveVoiceChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_LeaveVoiceChat_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_LeaveVoiceChat_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_LeaveVoiceChat_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_LeaveVoiceChat_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_LeaveVoiceChat_Response::MergeFrom(const CChatRoom_LeaveVoiceChat_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_LeaveVoiceChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_LeaveVoiceChat_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_LeaveVoiceChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_LeaveVoiceChat_Response::CopyFrom(const CChatRoom_LeaveVoiceChat_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_LeaveVoiceChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_LeaveVoiceChat_Response::IsInitialized() const {
  return true;
}

void CChatRoom_LeaveVoiceChat_Response::Swap(CChatRoom_LeaveVoiceChat_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_LeaveVoiceChat_Response::InternalSwap(CChatRoom_LeaveVoiceChat_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_LeaveVoiceChat_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetMessageHistory_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetMessageHistory_Request::kChatGroupIdFieldNumber;
const int CChatRoom_GetMessageHistory_Request::kChatIdFieldNumber;
const int CChatRoom_GetMessageHistory_Request::kLastTimeFieldNumber;
const int CChatRoom_GetMessageHistory_Request::kLastOrdinalFieldNumber;
const int CChatRoom_GetMessageHistory_Request::kStartTimeFieldNumber;
const int CChatRoom_GetMessageHistory_Request::kStartOrdinalFieldNumber;
const int CChatRoom_GetMessageHistory_Request::kMaxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetMessageHistory_Request::CChatRoom_GetMessageHistory_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetMessageHistory_Request)
}
CChatRoom_GetMessageHistory_Request::CChatRoom_GetMessageHistory_Request(const CChatRoom_GetMessageHistory_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Request)
}

void CChatRoom_GetMessageHistory_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_count_));
}

CChatRoom_GetMessageHistory_Request::~CChatRoom_GetMessageHistory_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Request)
  SharedDtor();
}

void CChatRoom_GetMessageHistory_Request::SharedDtor() {
}

void CChatRoom_GetMessageHistory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetMessageHistory_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetMessageHistory_Request& CChatRoom_GetMessageHistory_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetMessageHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_count_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetMessageHistory_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetMessageHistory_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_ordinal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_ordinal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_start_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetMessageHistory_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetMessageHistory_Request)
  return false;
#undef DO_
}

void CChatRoom_GetMessageHistory_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetMessageHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // optional uint32 last_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_time(), output);
  }

  // optional uint32 last_ordinal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_ordinal(), output);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_time(), output);
  }

  // optional uint32 start_ordinal = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_ordinal(), output);
  }

  // optional uint32 max_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetMessageHistory_Request)
}

::google::protobuf::uint8* CChatRoom_GetMessageHistory_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // optional uint32 last_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_time(), target);
  }

  // optional uint32 last_ordinal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_ordinal(), target);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_time(), target);
  }

  // optional uint32 start_ordinal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_ordinal(), target);
  }

  // optional uint32 max_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Request)
  return target;
}

size_t CChatRoom_GetMessageHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint32 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

    // optional uint32 last_ordinal = 4;
    if (has_last_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ordinal());
    }

    // optional uint32 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 start_ordinal = 6;
    if (has_start_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_ordinal());
    }

    // optional uint32 max_count = 7;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetMessageHistory_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetMessageHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetMessageHistory_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetMessageHistory_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetMessageHistory_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetMessageHistory_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetMessageHistory_Request::MergeFrom(const CChatRoom_GetMessageHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_time_ = from.last_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_ordinal_ = from.last_ordinal_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_ordinal_ = from.start_ordinal_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_count_ = from.max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetMessageHistory_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetMessageHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetMessageHistory_Request::CopyFrom(const CChatRoom_GetMessageHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Request::Swap(CChatRoom_GetMessageHistory_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetMessageHistory_Request::InternalSwap(CChatRoom_GetMessageHistory_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(last_time_, other->last_time_);
  swap(last_ordinal_, other->last_ordinal_);
  swap(start_time_, other->start_time_);
  swap(start_ordinal_, other->start_ordinal_);
  swap(max_count_, other->max_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetMessageHistory_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMessage::kMessageFieldNumber;
const int ServerMessage::kStringParamFieldNumber;
const int ServerMessage::kAccountidParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessage::ServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_ServerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_param()) {
    string_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_param_);
  }
  ::memcpy(&message_, &from.message_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_param_) -
    reinterpret_cast<char*>(&message_)) + sizeof(accountid_param_));
  // @@protoc_insertion_point(copy_constructor:ServerMessage)
}

void ServerMessage::SharedCtor() {
  string_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_param_) -
      reinterpret_cast<char*>(&message_)) + sizeof(accountid_param_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  string_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerMessage& ServerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_ServerMessage.base);
  return *internal_default_instance();
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_param_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&message_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_param_) -
        reinterpret_cast<char*>(&message_)) + sizeof(accountid_param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomServerMessage_IsValid(value)) {
            set_message(static_cast< ::EChatRoomServerMessage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_param().data(), static_cast<int>(this->string_param().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerMessage.string_param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_accountid_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message(), output);
  }

  // optional string string_param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_param().data(), static_cast<int>(this->string_param().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerMessage.string_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_param(), output);
  }

  // optional uint32 accountid_param = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage)
}

::google::protobuf::uint8* ServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message(), target);
  }

  // optional string string_param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_param().data(), static_cast<int>(this->string_param().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerMessage.string_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_param(), target);
  }

  // optional uint32 accountid_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string string_param = 2;
    if (has_string_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_param());
    }

    // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message());
    }

    // optional uint32 accountid_param = 3;
    if (has_accountid_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid_param());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_string_param();
      string_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_param_);
    }
    if (cached_has_bits & 0x00000002u) {
      message_ = from.message_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_param_ = from.accountid_param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  string_param_.Swap(&other->string_param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  swap(accountid_param_, other->accountid_param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetMessageHistory_Response_ChatMessage::InitAsDefaultInstance() {
  ::_CChatRoom_GetMessageHistory_Response_ChatMessage_default_instance_._instance.get_mutable()->server_message_ = const_cast< ::ServerMessage*>(
      ::ServerMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetMessageHistory_Response_ChatMessage::kSenderFieldNumber;
const int CChatRoom_GetMessageHistory_Response_ChatMessage::kServerTimestampFieldNumber;
const int CChatRoom_GetMessageHistory_Response_ChatMessage::kMessageFieldNumber;
const int CChatRoom_GetMessageHistory_Response_ChatMessage::kOrdinalFieldNumber;
const int CChatRoom_GetMessageHistory_Response_ChatMessage::kServerMessageFieldNumber;
const int CChatRoom_GetMessageHistory_Response_ChatMessage::kDeletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetMessageHistory_Response_ChatMessage::CChatRoom_GetMessageHistory_Response_ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Response_ChatMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetMessageHistory_Response.ChatMessage)
}
CChatRoom_GetMessageHistory_Response_ChatMessage::CChatRoom_GetMessageHistory_Response_ChatMessage(const CChatRoom_GetMessageHistory_Response_ChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_server_message()) {
    server_message_ = new ::ServerMessage(*from.server_message_);
  } else {
    server_message_ = NULL;
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Response.ChatMessage)
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_) -
      reinterpret_cast<char*>(&server_message_)) + sizeof(deleted_));
}

CChatRoom_GetMessageHistory_Response_ChatMessage::~CChatRoom_GetMessageHistory_Response_ChatMessage() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Response.ChatMessage)
  SharedDtor();
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_message_;
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetMessageHistory_Response_ChatMessage::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetMessageHistory_Response_ChatMessage& CChatRoom_GetMessageHistory_Response_ChatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Response_ChatMessage.base);
  return *internal_default_instance();
}


void CChatRoom_GetMessageHistory_Response_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_message_ != NULL);
      server_message_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&sender_)) + sizeof(deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetMessageHistory_Response_ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetMessageHistory_Response.ChatMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ServerMessage server_message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deleted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_deleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetMessageHistory_Response.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetMessageHistory_Response.ChatMessage)
  return false;
#undef DO_
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sender(), output);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_timestamp(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetMessageHistory_Response.ChatMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ordinal(), output);
  }

  // optional .ServerMessage server_message = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_server_message(), output);
  }

  // optional bool deleted = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->deleted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetMessageHistory_Response.ChatMessage)
}

::google::protobuf::uint8* CChatRoom_GetMessageHistory_Response_ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sender(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetMessageHistory_Response.ChatMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ordinal(), target);
  }

  // optional .ServerMessage server_message = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_server_message(), deterministic, target);
  }

  // optional bool deleted = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->deleted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Response.ChatMessage)
  return target;
}

size_t CChatRoom_GetMessageHistory_Response_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .ServerMessage server_message = 5;
    if (has_server_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_);
    }

    // optional uint32 sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender());
    }

    // optional uint32 server_timestamp = 2;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_timestamp());
    }

    // optional uint32 ordinal = 4;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

    // optional bool deleted = 6;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetMessageHistory_Response_ChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetMessageHistory_Response_ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetMessageHistory_Response.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetMessageHistory_Response.ChatMessage)
    MergeFrom(*source);
  }
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::MergeFrom(const CChatRoom_GetMessageHistory_Response_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server_message()->::ServerMessage::MergeFrom(from.server_message());
    }
    if (cached_has_bits & 0x00000004u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000020u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::CopyFrom(const CChatRoom_GetMessageHistory_Response_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Response_ChatMessage::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::Swap(CChatRoom_GetMessageHistory_Response_ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetMessageHistory_Response_ChatMessage::InternalSwap(CChatRoom_GetMessageHistory_Response_ChatMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_message_, other->server_message_);
  swap(sender_, other->sender_);
  swap(server_timestamp_, other->server_timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(deleted_, other->deleted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetMessageHistory_Response_ChatMessage::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetMessageHistory_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetMessageHistory_Response::kMessagesFieldNumber;
const int CChatRoom_GetMessageHistory_Response::kMoreAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetMessageHistory_Response::CChatRoom_GetMessageHistory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetMessageHistory_Response)
}
CChatRoom_GetMessageHistory_Response::CChatRoom_GetMessageHistory_Response(const CChatRoom_GetMessageHistory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  more_available_ = from.more_available_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Response)
}

void CChatRoom_GetMessageHistory_Response::SharedCtor() {
  more_available_ = false;
}

CChatRoom_GetMessageHistory_Response::~CChatRoom_GetMessageHistory_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Response)
  SharedDtor();
}

void CChatRoom_GetMessageHistory_Response::SharedDtor() {
}

void CChatRoom_GetMessageHistory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetMessageHistory_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetMessageHistory_Response& CChatRoom_GetMessageHistory_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMessageHistory_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetMessageHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  more_available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetMessageHistory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetMessageHistory_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool more_available = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_more_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetMessageHistory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetMessageHistory_Response)
  return false;
#undef DO_
}

void CChatRoom_GetMessageHistory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetMessageHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->messages(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_available = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->more_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetMessageHistory_Response)
}

::google::protobuf::uint8* CChatRoom_GetMessageHistory_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->messages(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_available = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->more_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Response)
  return target;
}

size_t CChatRoom_GetMessageHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // optional bool more_available = 4;
  if (has_more_available()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetMessageHistory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetMessageHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetMessageHistory_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetMessageHistory_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetMessageHistory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetMessageHistory_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetMessageHistory_Response::MergeFrom(const CChatRoom_GetMessageHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.has_more_available()) {
    set_more_available(from.more_available());
  }
}

void CChatRoom_GetMessageHistory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetMessageHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetMessageHistory_Response::CopyFrom(const CChatRoom_GetMessageHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Response::Swap(CChatRoom_GetMessageHistory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetMessageHistory_Response::InternalSwap(CChatRoom_GetMessageHistory_Response* other) {
  using std::swap;
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(more_available_, other->more_available_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetMessageHistory_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetMyChatRoomGroups_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetMyChatRoomGroups_Request::CChatRoom_GetMyChatRoomGroups_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMyChatRoomGroups_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetMyChatRoomGroups_Request)
}
CChatRoom_GetMyChatRoomGroups_Request::CChatRoom_GetMyChatRoomGroups_Request(const CChatRoom_GetMyChatRoomGroups_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMyChatRoomGroups_Request)
}

void CChatRoom_GetMyChatRoomGroups_Request::SharedCtor() {
}

CChatRoom_GetMyChatRoomGroups_Request::~CChatRoom_GetMyChatRoomGroups_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMyChatRoomGroups_Request)
  SharedDtor();
}

void CChatRoom_GetMyChatRoomGroups_Request::SharedDtor() {
}

void CChatRoom_GetMyChatRoomGroups_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetMyChatRoomGroups_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetMyChatRoomGroups_Request& CChatRoom_GetMyChatRoomGroups_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMyChatRoomGroups_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetMyChatRoomGroups_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMyChatRoomGroups_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetMyChatRoomGroups_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetMyChatRoomGroups_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetMyChatRoomGroups_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetMyChatRoomGroups_Request)
  return false;
#undef DO_
}

void CChatRoom_GetMyChatRoomGroups_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetMyChatRoomGroups_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetMyChatRoomGroups_Request)
}

::google::protobuf::uint8* CChatRoom_GetMyChatRoomGroups_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMyChatRoomGroups_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMyChatRoomGroups_Request)
  return target;
}

size_t CChatRoom_GetMyChatRoomGroups_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMyChatRoomGroups_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetMyChatRoomGroups_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetMyChatRoomGroups_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetMyChatRoomGroups_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetMyChatRoomGroups_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetMyChatRoomGroups_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetMyChatRoomGroups_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetMyChatRoomGroups_Request::MergeFrom(const CChatRoom_GetMyChatRoomGroups_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMyChatRoomGroups_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_GetMyChatRoomGroups_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetMyChatRoomGroups_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetMyChatRoomGroups_Request::CopyFrom(const CChatRoom_GetMyChatRoomGroups_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMyChatRoomGroups_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMyChatRoomGroups_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetMyChatRoomGroups_Request::Swap(CChatRoom_GetMyChatRoomGroups_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetMyChatRoomGroups_Request::InternalSwap(CChatRoom_GetMyChatRoomGroups_Request* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetMyChatRoomGroups_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetChatRoomGroupSummary_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetChatRoomGroupSummary_Response::kChatGroupIdFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kChatGroupNameFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kActiveMemberCountFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kActiveVoiceMemberCountFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kDefaultChatIdFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kChatRoomsFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kClanidFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kChatGroupTaglineFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kAccountidOwnerFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kTopMembersFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kChatGroupAvatarShaFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kRankFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kDefaultRoleIdFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kRoleIdsFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kRoleActionsFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kWatchingBroadcastAccountidFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kAppidFieldNumber;
const int CChatRoom_GetChatRoomGroupSummary_Response::kPartyBeaconsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetChatRoomGroupSummary_Response::CChatRoom_GetChatRoomGroupSummary_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetChatRoomGroupSummary_Response)
}
CChatRoom_GetChatRoomGroupSummary_Response::CChatRoom_GetChatRoomGroupSummary_Response(const CChatRoom_GetChatRoomGroupSummary_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chat_rooms_(from.chat_rooms_),
      top_members_(from.top_members_),
      role_ids_(from.role_ids_),
      role_actions_(from.role_actions_),
      party_beacons_(from.party_beacons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_group_name()) {
    chat_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_group_name_);
  }
  chat_group_tagline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_group_tagline()) {
    chat_group_tagline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_group_tagline_);
  }
  chat_group_avatar_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_group_avatar_sha()) {
    chat_group_avatar_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_group_avatar_sha_);
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupSummary_Response)
}

void CChatRoom_GetChatRoomGroupSummary_Response::SharedCtor() {
  chat_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_tagline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_avatar_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(appid_));
}

CChatRoom_GetChatRoomGroupSummary_Response::~CChatRoom_GetChatRoomGroupSummary_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupSummary_Response)
  SharedDtor();
}

void CChatRoom_GetChatRoomGroupSummary_Response::SharedDtor() {
  chat_group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_tagline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_avatar_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetChatRoomGroupSummary_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetChatRoomGroupSummary_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetChatRoomGroupSummary_Response& CChatRoom_GetChatRoomGroupSummary_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetChatRoomGroupSummary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupSummary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_rooms_.Clear();
  top_members_.Clear();
  role_ids_.Clear();
  role_actions_.Clear();
  party_beacons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_tagline_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_avatar_sha_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clanid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(clanid_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&accountid_owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&accountid_owner_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetChatRoomGroupSummary_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetChatRoomGroupSummary_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chat_group_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_group_name().data(), static_cast<int>(this->chat_group_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_member_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_active_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_voice_member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_active_voice_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_voice_member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 default_chat_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_default_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoomState chat_rooms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clanid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_clanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chat_group_tagline = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_group_tagline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_group_tagline().data(), static_cast<int>(this->chat_group_tagline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_tagline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid_owner = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_accountid_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 top_members = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_top_members())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_top_members())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chat_group_avatar_sha = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_group_avatar_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomGroupRank_IsValid(value)) {
            set_rank(static_cast< ::EChatRoomGroupRank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 default_role_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_default_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 role_ids = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 112u, input, this->mutable_role_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoleActions role_actions = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_role_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_accountid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_watching_broadcast_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatPartyBeacon party_beacons = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_party_beacons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetChatRoomGroupSummary_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetChatRoomGroupSummary_Response)
  return false;
#undef DO_
}

void CChatRoom_GetChatRoomGroupSummary_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetChatRoomGroupSummary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string chat_group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_group_name().data(), static_cast<int>(this->chat_group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_group_name(), output);
  }

  // optional uint32 active_member_count = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_member_count(), output);
  }

  // optional uint32 active_voice_member_count = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->active_voice_member_count(), output);
  }

  // optional uint64 default_chat_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->default_chat_id(), output);
  }

  // repeated .CChatRoomState chat_rooms = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_rooms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->chat_rooms(static_cast<int>(i)),
      output);
  }

  // optional uint32 clanid = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->clanid(), output);
  }

  // optional string chat_group_tagline = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_group_tagline().data(), static_cast<int>(this->chat_group_tagline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_tagline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->chat_group_tagline(), output);
  }

  // optional uint32 accountid_owner = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->accountid_owner(), output);
  }

  // repeated uint32 top_members = 10;
  for (int i = 0, n = this->top_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->top_members(i), output);
  }

  // optional bytes chat_group_avatar_sha = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->chat_group_avatar_sha(), output);
  }

  // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->rank(), output);
  }

  // optional uint64 default_role_id = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->default_role_id(), output);
  }

  // repeated uint64 role_ids = 14;
  for (int i = 0, n = this->role_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      14, this->role_ids(i), output);
  }

  // repeated .CChatRoleActions role_actions = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->role_actions(static_cast<int>(i)),
      output);
  }

  // optional uint32 watching_broadcast_accountid = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->watching_broadcast_accountid(), output);
  }

  // optional uint32 appid = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->appid(), output);
  }

  // repeated .CChatPartyBeacon party_beacons = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->party_beacons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->party_beacons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetChatRoomGroupSummary_Response)
}

::google::protobuf::uint8* CChatRoom_GetChatRoomGroupSummary_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupSummary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string chat_group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_group_name().data(), static_cast<int>(this->chat_group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_group_name(), target);
  }

  // optional uint32 active_member_count = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_member_count(), target);
  }

  // optional uint32 active_voice_member_count = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->active_voice_member_count(), target);
  }

  // optional uint64 default_chat_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->default_chat_id(), target);
  }

  // repeated .CChatRoomState chat_rooms = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_rooms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->chat_rooms(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 clanid = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->clanid(), target);
  }

  // optional string chat_group_tagline = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_group_tagline().data(), static_cast<int>(this->chat_group_tagline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_tagline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->chat_group_tagline(), target);
  }

  // optional uint32 accountid_owner = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->accountid_owner(), target);
  }

  // repeated uint32 top_members = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->top_members_, target);

  // optional bytes chat_group_avatar_sha = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->chat_group_avatar_sha(), target);
  }

  // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->rank(), target);
  }

  // optional uint64 default_role_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->default_role_id(), target);
  }

  // repeated uint64 role_ids = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(14, this->role_ids_, target);

  // repeated .CChatRoleActions role_actions = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->role_actions(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 watching_broadcast_accountid = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->watching_broadcast_accountid(), target);
  }

  // optional uint32 appid = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->appid(), target);
  }

  // repeated .CChatPartyBeacon party_beacons = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->party_beacons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->party_beacons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupSummary_Response)
  return target;
}

size_t CChatRoom_GetChatRoomGroupSummary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupSummary_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoomState chat_rooms = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_rooms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_rooms(static_cast<int>(i)));
    }
  }

  // repeated uint32 top_members = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->top_members_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->top_members_size());
    total_size += data_size;
  }

  // repeated uint64 role_ids = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->role_ids_size());
    total_size += data_size;
  }

  // repeated .CChatRoleActions role_actions = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->role_actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->role_actions(static_cast<int>(i)));
    }
  }

  // repeated .CChatPartyBeacon party_beacons = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->party_beacons_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->party_beacons(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string chat_group_name = 2;
    if (has_chat_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_group_name());
    }

    // optional string chat_group_tagline = 8;
    if (has_chat_group_tagline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_group_tagline());
    }

    // optional bytes chat_group_avatar_sha = 11;
    if (has_chat_group_avatar_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_group_avatar_sha());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint32 active_member_count = 3;
    if (has_active_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_member_count());
    }

    // optional uint32 active_voice_member_count = 4;
    if (has_active_voice_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_voice_member_count());
    }

    // optional uint64 default_chat_id = 5;
    if (has_default_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_chat_id());
    }

    // optional uint32 clanid = 7;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clanid());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 accountid_owner = 9;
    if (has_accountid_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid_owner());
    }

    // optional uint64 default_role_id = 13;
    if (has_default_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_role_id());
    }

    // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank());
    }

    // optional uint32 watching_broadcast_accountid = 16;
    if (has_watching_broadcast_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_accountid());
    }

    // optional uint32 appid = 17;
    if (has_appid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetChatRoomGroupSummary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetChatRoomGroupSummary_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetChatRoomGroupSummary_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetChatRoomGroupSummary_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetChatRoomGroupSummary_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(const CChatRoom_GetChatRoomGroupSummary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupSummary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_rooms_.MergeFrom(from.chat_rooms_);
  top_members_.MergeFrom(from.top_members_);
  role_ids_.MergeFrom(from.role_ids_);
  role_actions_.MergeFrom(from.role_actions_);
  party_beacons_.MergeFrom(from.party_beacons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chat_group_name();
      chat_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_group_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chat_group_tagline();
      chat_group_tagline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_group_tagline_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_chat_group_avatar_sha();
      chat_group_avatar_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_group_avatar_sha_);
    }
    if (cached_has_bits & 0x00000008u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_member_count_ = from.active_member_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_voice_member_count_ = from.active_voice_member_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      default_chat_id_ = from.default_chat_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      clanid_ = from.clanid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      accountid_owner_ = from.accountid_owner_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_role_id_ = from.default_role_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000800u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    if (cached_has_bits & 0x00001000u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetChatRoomGroupSummary_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetChatRoomGroupSummary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetChatRoomGroupSummary_Response::CopyFrom(const CChatRoom_GetChatRoomGroupSummary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupSummary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupSummary_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupSummary_Response::Swap(CChatRoom_GetChatRoomGroupSummary_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetChatRoomGroupSummary_Response::InternalSwap(CChatRoom_GetChatRoomGroupSummary_Response* other) {
  using std::swap;
  CastToBase(&chat_rooms_)->InternalSwap(CastToBase(&other->chat_rooms_));
  top_members_.InternalSwap(&other->top_members_);
  role_ids_.InternalSwap(&other->role_ids_);
  CastToBase(&role_actions_)->InternalSwap(CastToBase(&other->role_actions_));
  CastToBase(&party_beacons_)->InternalSwap(CastToBase(&other->party_beacons_));
  chat_group_name_.Swap(&other->chat_group_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_group_tagline_.Swap(&other->chat_group_tagline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_group_avatar_sha_.Swap(&other->chat_group_avatar_sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(active_member_count_, other->active_member_count_);
  swap(active_voice_member_count_, other->active_voice_member_count_);
  swap(default_chat_id_, other->default_chat_id_);
  swap(clanid_, other->clanid_);
  swap(accountid_owner_, other->accountid_owner_);
  swap(default_role_id_, other->default_role_id_);
  swap(rank_, other->rank_);
  swap(watching_broadcast_accountid_, other->watching_broadcast_accountid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetChatRoomGroupSummary_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoomSummaryPair::InitAsDefaultInstance() {
  ::_CChatRoomSummaryPair_default_instance_._instance.get_mutable()->user_chat_group_state_ = const_cast< ::CUserChatRoomGroupState*>(
      ::CUserChatRoomGroupState::internal_default_instance());
  ::_CChatRoomSummaryPair_default_instance_._instance.get_mutable()->group_summary_ = const_cast< ::CChatRoom_GetChatRoomGroupSummary_Response*>(
      ::CChatRoom_GetChatRoomGroupSummary_Response::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoomSummaryPair::kUserChatGroupStateFieldNumber;
const int CChatRoomSummaryPair::kGroupSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoomSummaryPair::CChatRoomSummaryPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomSummaryPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoomSummaryPair)
}
CChatRoomSummaryPair::CChatRoomSummaryPair(const CChatRoomSummaryPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_chat_group_state()) {
    user_chat_group_state_ = new ::CUserChatRoomGroupState(*from.user_chat_group_state_);
  } else {
    user_chat_group_state_ = NULL;
  }
  if (from.has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoomSummaryPair)
}

void CChatRoomSummaryPair::SharedCtor() {
  ::memset(&user_chat_group_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_summary_) -
      reinterpret_cast<char*>(&user_chat_group_state_)) + sizeof(group_summary_));
}

CChatRoomSummaryPair::~CChatRoomSummaryPair() {
  // @@protoc_insertion_point(destructor:CChatRoomSummaryPair)
  SharedDtor();
}

void CChatRoomSummaryPair::SharedDtor() {
  if (this != internal_default_instance()) delete user_chat_group_state_;
  if (this != internal_default_instance()) delete group_summary_;
}

void CChatRoomSummaryPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoomSummaryPair::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoomSummaryPair& CChatRoomSummaryPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomSummaryPair.base);
  return *internal_default_instance();
}


void CChatRoomSummaryPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomSummaryPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_chat_group_state_ != NULL);
      user_chat_group_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_summary_ != NULL);
      group_summary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoomSummaryPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoomSummaryPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CUserChatRoomGroupState user_chat_group_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_chat_group_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoomSummaryPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoomSummaryPair)
  return false;
#undef DO_
}

void CChatRoomSummaryPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoomSummaryPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CUserChatRoomGroupState user_chat_group_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user_chat_group_state(), output);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_group_summary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoomSummaryPair)
}

::google::protobuf::uint8* CChatRoomSummaryPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomSummaryPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CUserChatRoomGroupState user_chat_group_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user_chat_group_state(), deterministic, target);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_group_summary(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomSummaryPair)
  return target;
}

size_t CChatRoomSummaryPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomSummaryPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CUserChatRoomGroupState user_chat_group_state = 1;
    if (has_user_chat_group_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_chat_group_state_);
    }

    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
    if (has_group_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoomSummaryPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoomSummaryPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoomSummaryPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoomSummaryPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoomSummaryPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoomSummaryPair)
    MergeFrom(*source);
  }
}

void CChatRoomSummaryPair::MergeFrom(const CChatRoomSummaryPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomSummaryPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_chat_group_state()->::CUserChatRoomGroupState::MergeFrom(from.user_chat_group_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from.group_summary());
    }
  }
}

void CChatRoomSummaryPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoomSummaryPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoomSummaryPair::CopyFrom(const CChatRoomSummaryPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomSummaryPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomSummaryPair::IsInitialized() const {
  return true;
}

void CChatRoomSummaryPair::Swap(CChatRoomSummaryPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoomSummaryPair::InternalSwap(CChatRoomSummaryPair* other) {
  using std::swap;
  swap(user_chat_group_state_, other->user_chat_group_state_);
  swap(group_summary_, other->group_summary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoomSummaryPair::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetMyChatRoomGroups_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetMyChatRoomGroups_Response::kChatRoomGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetMyChatRoomGroups_Response::CChatRoom_GetMyChatRoomGroups_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMyChatRoomGroups_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetMyChatRoomGroups_Response)
}
CChatRoom_GetMyChatRoomGroups_Response::CChatRoom_GetMyChatRoomGroups_Response(const CChatRoom_GetMyChatRoomGroups_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chat_room_groups_(from.chat_room_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMyChatRoomGroups_Response)
}

void CChatRoom_GetMyChatRoomGroups_Response::SharedCtor() {
}

CChatRoom_GetMyChatRoomGroups_Response::~CChatRoom_GetMyChatRoomGroups_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMyChatRoomGroups_Response)
  SharedDtor();
}

void CChatRoom_GetMyChatRoomGroups_Response::SharedDtor() {
}

void CChatRoom_GetMyChatRoomGroups_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetMyChatRoomGroups_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetMyChatRoomGroups_Response& CChatRoom_GetMyChatRoomGroups_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetMyChatRoomGroups_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetMyChatRoomGroups_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMyChatRoomGroups_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_groups_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetMyChatRoomGroups_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetMyChatRoomGroups_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoomSummaryPair chat_room_groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_room_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetMyChatRoomGroups_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetMyChatRoomGroups_Response)
  return false;
#undef DO_
}

void CChatRoom_GetMyChatRoomGroups_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetMyChatRoomGroups_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomSummaryPair chat_room_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_room_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chat_room_groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetMyChatRoomGroups_Response)
}

::google::protobuf::uint8* CChatRoom_GetMyChatRoomGroups_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMyChatRoomGroups_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomSummaryPair chat_room_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_room_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chat_room_groups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMyChatRoomGroups_Response)
  return target;
}

size_t CChatRoom_GetMyChatRoomGroups_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMyChatRoomGroups_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoomSummaryPair chat_room_groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_room_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_room_groups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetMyChatRoomGroups_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetMyChatRoomGroups_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetMyChatRoomGroups_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetMyChatRoomGroups_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetMyChatRoomGroups_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetMyChatRoomGroups_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetMyChatRoomGroups_Response::MergeFrom(const CChatRoom_GetMyChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMyChatRoomGroups_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_room_groups_.MergeFrom(from.chat_room_groups_);
}

void CChatRoom_GetMyChatRoomGroups_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetMyChatRoomGroups_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetMyChatRoomGroups_Response::CopyFrom(const CChatRoom_GetMyChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMyChatRoomGroups_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMyChatRoomGroups_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetMyChatRoomGroups_Response::Swap(CChatRoom_GetMyChatRoomGroups_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetMyChatRoomGroups_Response::InternalSwap(CChatRoom_GetMyChatRoomGroups_Response* other) {
  using std::swap;
  CastToBase(&chat_room_groups_)->InternalSwap(CastToBase(&other->chat_room_groups_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetMyChatRoomGroups_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetChatRoomGroupState_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetChatRoomGroupState_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetChatRoomGroupState_Request::CChatRoom_GetChatRoomGroupState_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupState_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetChatRoomGroupState_Request)
}
CChatRoom_GetChatRoomGroupState_Request::CChatRoom_GetChatRoomGroupState_Request(const CChatRoom_GetChatRoomGroupState_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupState_Request)
}

void CChatRoom_GetChatRoomGroupState_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_GetChatRoomGroupState_Request::~CChatRoom_GetChatRoomGroupState_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupState_Request)
  SharedDtor();
}

void CChatRoom_GetChatRoomGroupState_Request::SharedDtor() {
}

void CChatRoom_GetChatRoomGroupState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetChatRoomGroupState_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetChatRoomGroupState_Request& CChatRoom_GetChatRoomGroupState_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupState_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetChatRoomGroupState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetChatRoomGroupState_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetChatRoomGroupState_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetChatRoomGroupState_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetChatRoomGroupState_Request)
  return false;
#undef DO_
}

void CChatRoom_GetChatRoomGroupState_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetChatRoomGroupState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetChatRoomGroupState_Request)
}

::google::protobuf::uint8* CChatRoom_GetChatRoomGroupState_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupState_Request)
  return target;
}

size_t CChatRoom_GetChatRoomGroupState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupState_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetChatRoomGroupState_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetChatRoomGroupState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetChatRoomGroupState_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetChatRoomGroupState_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetChatRoomGroupState_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetChatRoomGroupState_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetChatRoomGroupState_Request::MergeFrom(const CChatRoom_GetChatRoomGroupState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_GetChatRoomGroupState_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetChatRoomGroupState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetChatRoomGroupState_Request::CopyFrom(const CChatRoom_GetChatRoomGroupState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupState_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupState_Request::Swap(CChatRoom_GetChatRoomGroupState_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetChatRoomGroupState_Request::InternalSwap(CChatRoom_GetChatRoomGroupState_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetChatRoomGroupState_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetChatRoomGroupState_Response::InitAsDefaultInstance() {
  ::_CChatRoom_GetChatRoomGroupState_Response_default_instance_._instance.get_mutable()->state_ = const_cast< ::CChatRoomGroupState*>(
      ::CChatRoomGroupState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetChatRoomGroupState_Response::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetChatRoomGroupState_Response::CChatRoom_GetChatRoomGroupState_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupState_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetChatRoomGroupState_Response)
}
CChatRoom_GetChatRoomGroupState_Response::CChatRoom_GetChatRoomGroupState_Response(const CChatRoom_GetChatRoomGroupState_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::CChatRoomGroupState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupState_Response)
}

void CChatRoom_GetChatRoomGroupState_Response::SharedCtor() {
  state_ = NULL;
}

CChatRoom_GetChatRoomGroupState_Response::~CChatRoom_GetChatRoomGroupState_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupState_Response)
  SharedDtor();
}

void CChatRoom_GetChatRoomGroupState_Response::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void CChatRoom_GetChatRoomGroupState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetChatRoomGroupState_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetChatRoomGroupState_Response& CChatRoom_GetChatRoomGroupState_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupState_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetChatRoomGroupState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetChatRoomGroupState_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetChatRoomGroupState_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoomGroupState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetChatRoomGroupState_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetChatRoomGroupState_Response)
  return false;
#undef DO_
}

void CChatRoom_GetChatRoomGroupState_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetChatRoomGroupState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupState state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetChatRoomGroupState_Response)
}

::google::protobuf::uint8* CChatRoom_GetChatRoomGroupState_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupState_Response)
  return target;
}

size_t CChatRoom_GetChatRoomGroupState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupState_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CChatRoomGroupState state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetChatRoomGroupState_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetChatRoomGroupState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetChatRoomGroupState_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetChatRoomGroupState_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetChatRoomGroupState_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetChatRoomGroupState_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetChatRoomGroupState_Response::MergeFrom(const CChatRoom_GetChatRoomGroupState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::CChatRoomGroupState::MergeFrom(from.state());
  }
}

void CChatRoom_GetChatRoomGroupState_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetChatRoomGroupState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetChatRoomGroupState_Response::CopyFrom(const CChatRoom_GetChatRoomGroupState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupState_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupState_Response::Swap(CChatRoom_GetChatRoomGroupState_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetChatRoomGroupState_Response::InternalSwap(CChatRoom_GetChatRoomGroupState_Response* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetChatRoomGroupState_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetChatRoomGroupSummary_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetChatRoomGroupSummary_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetChatRoomGroupSummary_Request::CChatRoom_GetChatRoomGroupSummary_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetChatRoomGroupSummary_Request)
}
CChatRoom_GetChatRoomGroupSummary_Request::CChatRoom_GetChatRoomGroupSummary_Request(const CChatRoom_GetChatRoomGroupSummary_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupSummary_Request)
}

void CChatRoom_GetChatRoomGroupSummary_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_GetChatRoomGroupSummary_Request::~CChatRoom_GetChatRoomGroupSummary_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupSummary_Request)
  SharedDtor();
}

void CChatRoom_GetChatRoomGroupSummary_Request::SharedDtor() {
}

void CChatRoom_GetChatRoomGroupSummary_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetChatRoomGroupSummary_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetChatRoomGroupSummary_Request& CChatRoom_GetChatRoomGroupSummary_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetChatRoomGroupSummary_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetChatRoomGroupSummary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupSummary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetChatRoomGroupSummary_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetChatRoomGroupSummary_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetChatRoomGroupSummary_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetChatRoomGroupSummary_Request)
  return false;
#undef DO_
}

void CChatRoom_GetChatRoomGroupSummary_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetChatRoomGroupSummary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetChatRoomGroupSummary_Request)
}

::google::protobuf::uint8* CChatRoom_GetChatRoomGroupSummary_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupSummary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupSummary_Request)
  return target;
}

size_t CChatRoom_GetChatRoomGroupSummary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupSummary_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetChatRoomGroupSummary_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetChatRoomGroupSummary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetChatRoomGroupSummary_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetChatRoomGroupSummary_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetChatRoomGroupSummary_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetChatRoomGroupSummary_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetChatRoomGroupSummary_Request::MergeFrom(const CChatRoom_GetChatRoomGroupSummary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupSummary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_GetChatRoomGroupSummary_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetChatRoomGroupSummary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetChatRoomGroupSummary_Request::CopyFrom(const CChatRoom_GetChatRoomGroupSummary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupSummary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupSummary_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupSummary_Request::Swap(CChatRoom_GetChatRoomGroupSummary_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetChatRoomGroupSummary_Request::InternalSwap(CChatRoom_GetChatRoomGroupSummary_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetChatRoomGroupSummary_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_AckChatMessage_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_AckChatMessage_Notification::kChatGroupIdFieldNumber;
const int CChatRoom_AckChatMessage_Notification::kChatIdFieldNumber;
const int CChatRoom_AckChatMessage_Notification::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_AckChatMessage_Notification::CChatRoom_AckChatMessage_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_AckChatMessage_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_AckChatMessage_Notification)
}
CChatRoom_AckChatMessage_Notification::CChatRoom_AckChatMessage_Notification(const CChatRoom_AckChatMessage_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_AckChatMessage_Notification)
}

void CChatRoom_AckChatMessage_Notification::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
}

CChatRoom_AckChatMessage_Notification::~CChatRoom_AckChatMessage_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_AckChatMessage_Notification)
  SharedDtor();
}

void CChatRoom_AckChatMessage_Notification::SharedDtor() {
}

void CChatRoom_AckChatMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_AckChatMessage_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_AckChatMessage_Notification& CChatRoom_AckChatMessage_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_AckChatMessage_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_AckChatMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_AckChatMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_AckChatMessage_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_AckChatMessage_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_AckChatMessage_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_AckChatMessage_Notification)
  return false;
#undef DO_
}

void CChatRoom_AckChatMessage_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_AckChatMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_AckChatMessage_Notification)
}

::google::protobuf::uint8* CChatRoom_AckChatMessage_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_AckChatMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_AckChatMessage_Notification)
  return target;
}

size_t CChatRoom_AckChatMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_AckChatMessage_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_AckChatMessage_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_AckChatMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_AckChatMessage_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_AckChatMessage_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_AckChatMessage_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_AckChatMessage_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_AckChatMessage_Notification::MergeFrom(const CChatRoom_AckChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_AckChatMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_AckChatMessage_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_AckChatMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_AckChatMessage_Notification::CopyFrom(const CChatRoom_AckChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_AckChatMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_AckChatMessage_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_AckChatMessage_Notification::Swap(CChatRoom_AckChatMessage_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_AckChatMessage_Notification::InternalSwap(CChatRoom_AckChatMessage_Notification* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_AckChatMessage_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateInviteLink_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateInviteLink_Request::kChatGroupIdFieldNumber;
const int CChatRoom_CreateInviteLink_Request::kSecondsValidFieldNumber;
const int CChatRoom_CreateInviteLink_Request::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateInviteLink_Request::CChatRoom_CreateInviteLink_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateInviteLink_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateInviteLink_Request)
}
CChatRoom_CreateInviteLink_Request::CChatRoom_CreateInviteLink_Request(const CChatRoom_CreateInviteLink_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_valid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(seconds_valid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateInviteLink_Request)
}

void CChatRoom_CreateInviteLink_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_valid_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(seconds_valid_));
}

CChatRoom_CreateInviteLink_Request::~CChatRoom_CreateInviteLink_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateInviteLink_Request)
  SharedDtor();
}

void CChatRoom_CreateInviteLink_Request::SharedDtor() {
}

void CChatRoom_CreateInviteLink_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateInviteLink_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateInviteLink_Request& CChatRoom_CreateInviteLink_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateInviteLink_Request.base);
  return *internal_default_instance();
}


void CChatRoom_CreateInviteLink_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateInviteLink_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_valid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(seconds_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateInviteLink_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateInviteLink_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seconds_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateInviteLink_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateInviteLink_Request)
  return false;
#undef DO_
}

void CChatRoom_CreateInviteLink_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateInviteLink_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint32 seconds_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seconds_valid(), output);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateInviteLink_Request)
}

::google::protobuf::uint8* CChatRoom_CreateInviteLink_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateInviteLink_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint32 seconds_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seconds_valid(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateInviteLink_Request)
  return target;
}

size_t CChatRoom_CreateInviteLink_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateInviteLink_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 3;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint32 seconds_valid = 2;
    if (has_seconds_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_valid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateInviteLink_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateInviteLink_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateInviteLink_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateInviteLink_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateInviteLink_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateInviteLink_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateInviteLink_Request::MergeFrom(const CChatRoom_CreateInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateInviteLink_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_valid_ = from.seconds_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_CreateInviteLink_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateInviteLink_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateInviteLink_Request::CopyFrom(const CChatRoom_CreateInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateInviteLink_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateInviteLink_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateInviteLink_Request::Swap(CChatRoom_CreateInviteLink_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateInviteLink_Request::InternalSwap(CChatRoom_CreateInviteLink_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(seconds_valid_, other->seconds_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateInviteLink_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_CreateInviteLink_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_CreateInviteLink_Response::kInviteCodeFieldNumber;
const int CChatRoom_CreateInviteLink_Response::kSecondsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_CreateInviteLink_Response::CChatRoom_CreateInviteLink_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateInviteLink_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_CreateInviteLink_Response)
}
CChatRoom_CreateInviteLink_Response::CChatRoom_CreateInviteLink_Response(const CChatRoom_CreateInviteLink_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  seconds_valid_ = from.seconds_valid_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateInviteLink_Response)
}

void CChatRoom_CreateInviteLink_Response::SharedCtor() {
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seconds_valid_ = 0u;
}

CChatRoom_CreateInviteLink_Response::~CChatRoom_CreateInviteLink_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateInviteLink_Response)
  SharedDtor();
}

void CChatRoom_CreateInviteLink_Response::SharedDtor() {
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateInviteLink_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_CreateInviteLink_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_CreateInviteLink_Response& CChatRoom_CreateInviteLink_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_CreateInviteLink_Response.base);
  return *internal_default_instance();
}


void CChatRoom_CreateInviteLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateInviteLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmptyNoArena();
  }
  seconds_valid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_CreateInviteLink_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_CreateInviteLink_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invite_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), static_cast<int>(this->invite_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_CreateInviteLink_Response.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seconds_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_CreateInviteLink_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_CreateInviteLink_Response)
  return false;
#undef DO_
}

void CChatRoom_CreateInviteLink_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_CreateInviteLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateInviteLink_Response.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invite_code(), output);
  }

  // optional uint32 seconds_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seconds_valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_CreateInviteLink_Response)
}

::google::protobuf::uint8* CChatRoom_CreateInviteLink_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateInviteLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateInviteLink_Response.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invite_code(), target);
  }

  // optional uint32 seconds_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seconds_valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateInviteLink_Response)
  return target;
}

size_t CChatRoom_CreateInviteLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateInviteLink_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_code());
    }

    // optional uint32 seconds_valid = 2;
    if (has_seconds_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_valid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_CreateInviteLink_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_CreateInviteLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_CreateInviteLink_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_CreateInviteLink_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_CreateInviteLink_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_CreateInviteLink_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_CreateInviteLink_Response::MergeFrom(const CChatRoom_CreateInviteLink_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateInviteLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invite_code();
      invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_valid_ = from.seconds_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_CreateInviteLink_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_CreateInviteLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_CreateInviteLink_Response::CopyFrom(const CChatRoom_CreateInviteLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateInviteLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateInviteLink_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateInviteLink_Response::Swap(CChatRoom_CreateInviteLink_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_CreateInviteLink_Response::InternalSwap(CChatRoom_CreateInviteLink_Response* other) {
  using std::swap;
  invite_code_.Swap(&other->invite_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seconds_valid_, other->seconds_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_CreateInviteLink_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteLinkInfo_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteLinkInfo_Request::kInviteCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteLinkInfo_Request::CChatRoom_GetInviteLinkInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinkInfo_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteLinkInfo_Request)
}
CChatRoom_GetInviteLinkInfo_Request::CChatRoom_GetInviteLinkInfo_Request(const CChatRoom_GetInviteLinkInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinkInfo_Request)
}

void CChatRoom_GetInviteLinkInfo_Request::SharedCtor() {
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CChatRoom_GetInviteLinkInfo_Request::~CChatRoom_GetInviteLinkInfo_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinkInfo_Request)
  SharedDtor();
}

void CChatRoom_GetInviteLinkInfo_Request::SharedDtor() {
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetInviteLinkInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteLinkInfo_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteLinkInfo_Request& CChatRoom_GetInviteLinkInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinkInfo_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteLinkInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinkInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteLinkInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteLinkInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invite_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), static_cast<int>(this->invite_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetInviteLinkInfo_Request.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteLinkInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteLinkInfo_Request)
  return false;
#undef DO_
}

void CChatRoom_GetInviteLinkInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteLinkInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteLinkInfo_Request.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invite_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteLinkInfo_Request)
}

::google::protobuf::uint8* CChatRoom_GetInviteLinkInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinkInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteLinkInfo_Request.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invite_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinkInfo_Request)
  return target;
}

size_t CChatRoom_GetInviteLinkInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinkInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string invite_code = 1;
  if (has_invite_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->invite_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteLinkInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteLinkInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteLinkInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteLinkInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteLinkInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteLinkInfo_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteLinkInfo_Request::MergeFrom(const CChatRoom_GetInviteLinkInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinkInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_invite_code()) {
    set_has_invite_code();
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
}

void CChatRoom_GetInviteLinkInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteLinkInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteLinkInfo_Request::CopyFrom(const CChatRoom_GetInviteLinkInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinkInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinkInfo_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinkInfo_Request::Swap(CChatRoom_GetInviteLinkInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteLinkInfo_Request::InternalSwap(CChatRoom_GetInviteLinkInfo_Request* other) {
  using std::swap;
  invite_code_.Swap(&other->invite_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteLinkInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteLinkInfo_Response::InitAsDefaultInstance() {
  ::_CChatRoom_GetInviteLinkInfo_Response_default_instance_._instance.get_mutable()->group_summary_ = const_cast< ::CChatRoom_GetChatRoomGroupSummary_Response*>(
      ::CChatRoom_GetChatRoomGroupSummary_Response::internal_default_instance());
  ::_CChatRoom_GetInviteLinkInfo_Response_default_instance_._instance.get_mutable()->user_chat_group_state_ = const_cast< ::CUserChatRoomGroupState*>(
      ::CUserChatRoomGroupState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteLinkInfo_Response::kSteamidSenderFieldNumber;
const int CChatRoom_GetInviteLinkInfo_Response::kTimeExpiresFieldNumber;
const int CChatRoom_GetInviteLinkInfo_Response::kChatIdFieldNumber;
const int CChatRoom_GetInviteLinkInfo_Response::kGroupSummaryFieldNumber;
const int CChatRoom_GetInviteLinkInfo_Response::kUserChatGroupStateFieldNumber;
const int CChatRoom_GetInviteLinkInfo_Response::kTimeKickExpireFieldNumber;
const int CChatRoom_GetInviteLinkInfo_Response::kBannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteLinkInfo_Response::CChatRoom_GetInviteLinkInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinkInfo_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteLinkInfo_Response)
}
CChatRoom_GetInviteLinkInfo_Response::CChatRoom_GetInviteLinkInfo_Response(const CChatRoom_GetInviteLinkInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = NULL;
  }
  if (from.has_user_chat_group_state()) {
    user_chat_group_state_ = new ::CUserChatRoomGroupState(*from.user_chat_group_state_);
  } else {
    user_chat_group_state_ = NULL;
  }
  ::memcpy(&steamid_sender_, &from.steamid_sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&steamid_sender_)) + sizeof(banned_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinkInfo_Response)
}

void CChatRoom_GetInviteLinkInfo_Response::SharedCtor() {
  ::memset(&group_summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banned_) -
      reinterpret_cast<char*>(&group_summary_)) + sizeof(banned_));
}

CChatRoom_GetInviteLinkInfo_Response::~CChatRoom_GetInviteLinkInfo_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinkInfo_Response)
  SharedDtor();
}

void CChatRoom_GetInviteLinkInfo_Response::SharedDtor() {
  if (this != internal_default_instance()) delete group_summary_;
  if (this != internal_default_instance()) delete user_chat_group_state_;
}

void CChatRoom_GetInviteLinkInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteLinkInfo_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteLinkInfo_Response& CChatRoom_GetInviteLinkInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinkInfo_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteLinkInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinkInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_summary_ != NULL);
      group_summary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_chat_group_state_ != NULL);
      user_chat_group_state_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&steamid_sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banned_) -
        reinterpret_cast<char*>(&steamid_sender_)) + sizeof(banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteLinkInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteLinkInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steamid_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_expires = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time_expires();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_expires_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CUserChatRoomGroupState user_chat_group_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_chat_group_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_kick_expire = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_time_kick_expire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_kick_expire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool banned = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteLinkInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteLinkInfo_Response)
  return false;
#undef DO_
}

void CChatRoom_GetInviteLinkInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteLinkInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid_sender(), output);
  }

  // optional uint32 time_expires = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_expires(), output);
  }

  // optional uint64 chat_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->chat_id(), output);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_group_summary(), output);
  }

  // optional .CUserChatRoomGroupState user_chat_group_state = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_user_chat_group_state(), output);
  }

  // optional uint32 time_kick_expire = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time_kick_expire(), output);
  }

  // optional bool banned = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->banned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteLinkInfo_Response)
}

::google::protobuf::uint8* CChatRoom_GetInviteLinkInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinkInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid_sender(), target);
  }

  // optional uint32 time_expires = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_expires(), target);
  }

  // optional uint64 chat_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->chat_id(), target);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_group_summary(), deterministic, target);
  }

  // optional .CUserChatRoomGroupState user_chat_group_state = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_user_chat_group_state(), deterministic, target);
  }

  // optional uint32 time_kick_expire = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time_kick_expire(), target);
  }

  // optional bool banned = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->banned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinkInfo_Response)
  return target;
}

size_t CChatRoom_GetInviteLinkInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinkInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
    if (has_group_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

    // optional .CUserChatRoomGroupState user_chat_group_state = 9;
    if (has_user_chat_group_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_chat_group_state_);
    }

    // optional fixed64 steamid_sender = 3;
    if (has_steamid_sender()) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_id = 6;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint32 time_expires = 4;
    if (has_time_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_expires());
    }

    // optional uint32 time_kick_expire = 10;
    if (has_time_kick_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_kick_expire());
    }

    // optional bool banned = 11;
    if (has_banned()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteLinkInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteLinkInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteLinkInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteLinkInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteLinkInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteLinkInfo_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteLinkInfo_Response::MergeFrom(const CChatRoom_GetInviteLinkInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinkInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from.group_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_chat_group_state()->::CUserChatRoomGroupState::MergeFrom(from.user_chat_group_state());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_sender_ = from.steamid_sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_expires_ = from.time_expires_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_kick_expire_ = from.time_kick_expire_;
    }
    if (cached_has_bits & 0x00000040u) {
      banned_ = from.banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetInviteLinkInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteLinkInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteLinkInfo_Response::CopyFrom(const CChatRoom_GetInviteLinkInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinkInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinkInfo_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinkInfo_Response::Swap(CChatRoom_GetInviteLinkInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteLinkInfo_Response::InternalSwap(CChatRoom_GetInviteLinkInfo_Response* other) {
  using std::swap;
  swap(group_summary_, other->group_summary_);
  swap(user_chat_group_state_, other->user_chat_group_state_);
  swap(steamid_sender_, other->steamid_sender_);
  swap(chat_id_, other->chat_id_);
  swap(time_expires_, other->time_expires_);
  swap(time_kick_expire_, other->time_kick_expire_);
  swap(banned_, other->banned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteLinkInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteInfo_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteInfo_Request::kSteamidInviteeFieldNumber;
const int CChatRoom_GetInviteInfo_Request::kChatGroupIdFieldNumber;
const int CChatRoom_GetInviteInfo_Request::kChatIdFieldNumber;
const int CChatRoom_GetInviteInfo_Request::kInviteCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteInfo_Request::CChatRoom_GetInviteInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteInfo_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteInfo_Request)
}
CChatRoom_GetInviteInfo_Request::CChatRoom_GetInviteInfo_Request(const CChatRoom_GetInviteInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  ::memcpy(&steamid_invitee_, &from.steamid_invitee_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&steamid_invitee_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteInfo_Request)
}

void CChatRoom_GetInviteInfo_Request::SharedCtor() {
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_invitee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&steamid_invitee_)) + sizeof(chat_id_));
}

CChatRoom_GetInviteInfo_Request::~CChatRoom_GetInviteInfo_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteInfo_Request)
  SharedDtor();
}

void CChatRoom_GetInviteInfo_Request::SharedDtor() {
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetInviteInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteInfo_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteInfo_Request& CChatRoom_GetInviteInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteInfo_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&steamid_invitee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&steamid_invitee_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_invitee = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid_invitee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_invitee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invite_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), static_cast<int>(this->invite_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetInviteInfo_Request.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteInfo_Request)
  return false;
#undef DO_
}

void CChatRoom_GetInviteInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_invitee = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_invitee(), output);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chat_id(), output);
  }

  // optional string invite_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteInfo_Request.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->invite_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteInfo_Request)
}

::google::protobuf::uint8* CChatRoom_GetInviteInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_invitee = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_invitee(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->chat_id(), target);
  }

  // optional string invite_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteInfo_Request.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->invite_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteInfo_Request)
  return target;
}

size_t CChatRoom_GetInviteInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string invite_code = 4;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_code());
    }

    // optional fixed64 steamid_invitee = 1;
    if (has_steamid_invitee()) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_group_id = 2;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 3;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteInfo_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteInfo_Request::MergeFrom(const CChatRoom_GetInviteInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invite_code();
      invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_invitee_ = from.steamid_invitee_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetInviteInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteInfo_Request::CopyFrom(const CChatRoom_GetInviteInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteInfo_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteInfo_Request::Swap(CChatRoom_GetInviteInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteInfo_Request::InternalSwap(CChatRoom_GetInviteInfo_Request* other) {
  using std::swap;
  invite_code_.Swap(&other->invite_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_invitee_, other->steamid_invitee_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteInfo_Response::InitAsDefaultInstance() {
  ::_CChatRoom_GetInviteInfo_Response_default_instance_._instance.get_mutable()->group_summary_ = const_cast< ::CChatRoom_GetChatRoomGroupSummary_Response*>(
      ::CChatRoom_GetChatRoomGroupSummary_Response::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteInfo_Response::kGroupSummaryFieldNumber;
const int CChatRoom_GetInviteInfo_Response::kTimeKickExpireFieldNumber;
const int CChatRoom_GetInviteInfo_Response::kBannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteInfo_Response::CChatRoom_GetInviteInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteInfo_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteInfo_Response)
}
CChatRoom_GetInviteInfo_Response::CChatRoom_GetInviteInfo_Response(const CChatRoom_GetInviteInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = NULL;
  }
  ::memcpy(&time_kick_expire_, &from.time_kick_expire_,
    static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&time_kick_expire_)) + sizeof(banned_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteInfo_Response)
}

void CChatRoom_GetInviteInfo_Response::SharedCtor() {
  ::memset(&group_summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banned_) -
      reinterpret_cast<char*>(&group_summary_)) + sizeof(banned_));
}

CChatRoom_GetInviteInfo_Response::~CChatRoom_GetInviteInfo_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteInfo_Response)
  SharedDtor();
}

void CChatRoom_GetInviteInfo_Response::SharedDtor() {
  if (this != internal_default_instance()) delete group_summary_;
}

void CChatRoom_GetInviteInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteInfo_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteInfo_Response& CChatRoom_GetInviteInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteInfo_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(group_summary_ != NULL);
    group_summary_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&time_kick_expire_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banned_) -
        reinterpret_cast<char*>(&time_kick_expire_)) + sizeof(banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_kick_expire = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_kick_expire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_kick_expire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteInfo_Response)
  return false;
#undef DO_
}

void CChatRoom_GetInviteInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_group_summary(), output);
  }

  // optional uint32 time_kick_expire = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_kick_expire(), output);
  }

  // optional bool banned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->banned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteInfo_Response)
}

::google::protobuf::uint8* CChatRoom_GetInviteInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_group_summary(), deterministic, target);
  }

  // optional uint32 time_kick_expire = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_kick_expire(), target);
  }

  // optional bool banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->banned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteInfo_Response)
  return target;
}

size_t CChatRoom_GetInviteInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
    if (has_group_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

    // optional uint32 time_kick_expire = 2;
    if (has_time_kick_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_kick_expire());
    }

    // optional bool banned = 3;
    if (has_banned()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteInfo_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteInfo_Response::MergeFrom(const CChatRoom_GetInviteInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from.group_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      time_kick_expire_ = from.time_kick_expire_;
    }
    if (cached_has_bits & 0x00000004u) {
      banned_ = from.banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetInviteInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteInfo_Response::CopyFrom(const CChatRoom_GetInviteInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteInfo_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteInfo_Response::Swap(CChatRoom_GetInviteInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteInfo_Response::InternalSwap(CChatRoom_GetInviteInfo_Response* other) {
  using std::swap;
  swap(group_summary_, other->group_summary_);
  swap(time_kick_expire_, other->time_kick_expire_);
  swap(banned_, other->banned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteLinksForGroup_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteLinksForGroup_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteLinksForGroup_Request::CChatRoom_GetInviteLinksForGroup_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteLinksForGroup_Request)
}
CChatRoom_GetInviteLinksForGroup_Request::CChatRoom_GetInviteLinksForGroup_Request(const CChatRoom_GetInviteLinksForGroup_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinksForGroup_Request)
}

void CChatRoom_GetInviteLinksForGroup_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_GetInviteLinksForGroup_Request::~CChatRoom_GetInviteLinksForGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinksForGroup_Request)
  SharedDtor();
}

void CChatRoom_GetInviteLinksForGroup_Request::SharedDtor() {
}

void CChatRoom_GetInviteLinksForGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteLinksForGroup_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteLinksForGroup_Request& CChatRoom_GetInviteLinksForGroup_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteLinksForGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinksForGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteLinksForGroup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteLinksForGroup_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteLinksForGroup_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteLinksForGroup_Request)
  return false;
#undef DO_
}

void CChatRoom_GetInviteLinksForGroup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteLinksForGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteLinksForGroup_Request)
}

::google::protobuf::uint8* CChatRoom_GetInviteLinksForGroup_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinksForGroup_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinksForGroup_Request)
  return target;
}

size_t CChatRoom_GetInviteLinksForGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinksForGroup_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteLinksForGroup_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteLinksForGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteLinksForGroup_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteLinksForGroup_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteLinksForGroup_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteLinksForGroup_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteLinksForGroup_Request::MergeFrom(const CChatRoom_GetInviteLinksForGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinksForGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_GetInviteLinksForGroup_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteLinksForGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteLinksForGroup_Request::CopyFrom(const CChatRoom_GetInviteLinksForGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinksForGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinksForGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinksForGroup_Request::Swap(CChatRoom_GetInviteLinksForGroup_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteLinksForGroup_Request::InternalSwap(CChatRoom_GetInviteLinksForGroup_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteLinksForGroup_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::kInviteCodeFieldNumber;
const int CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::kSteamidCreatorFieldNumber;
const int CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::kTimeExpiresFieldNumber;
const int CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
}
CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo(const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  ::memcpy(&steamid_creator_, &from.steamid_creator_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expires_) -
    reinterpret_cast<char*>(&steamid_creator_)) + sizeof(time_expires_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SharedCtor() {
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_creator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_expires_) -
      reinterpret_cast<char*>(&steamid_creator_)) + sizeof(time_expires_));
}

CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::~CChatRoom_GetInviteLinksForGroup_Response_LinkInfo() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  SharedDtor();
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SharedDtor() {
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&steamid_creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expires_) -
        reinterpret_cast<char*>(&steamid_creator_)) + sizeof(time_expires_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invite_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), static_cast<int>(this->invite_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetInviteLinksForGroup_Response.LinkInfo.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid_creator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_expires = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_expires();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_expires_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  return false;
#undef DO_
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteLinksForGroup_Response.LinkInfo.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invite_code(), output);
  }

  // optional fixed64 steamid_creator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_creator(), output);
  }

  // optional uint32 time_expires = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_expires(), output);
  }

  // optional uint64 chat_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->chat_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
}

::google::protobuf::uint8* CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteLinksForGroup_Response.LinkInfo.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invite_code(), target);
  }

  // optional fixed64 steamid_creator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_creator(), target);
  }

  // optional uint32 time_expires = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_expires(), target);
  }

  // optional uint64 chat_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->chat_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  return target;
}

size_t CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_code());
    }

    // optional fixed64 steamid_creator = 2;
    if (has_steamid_creator()) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_id = 4;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint32 time_expires = 3;
    if (has_time_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_expires());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::MergeFrom(const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invite_code();
      invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_creator_ = from.steamid_creator_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_expires_ = from.time_expires_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CopyFrom(const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::Swap(CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::InternalSwap(CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* other) {
  using std::swap;
  invite_code_.Swap(&other->invite_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_creator_, other->steamid_creator_);
  swap(chat_id_, other->chat_id_);
  swap(time_expires_, other->time_expires_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteLinksForGroup_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteLinksForGroup_Response::kInviteLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteLinksForGroup_Response::CChatRoom_GetInviteLinksForGroup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteLinksForGroup_Response)
}
CChatRoom_GetInviteLinksForGroup_Response::CChatRoom_GetInviteLinksForGroup_Response(const CChatRoom_GetInviteLinksForGroup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      invite_links_(from.invite_links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinksForGroup_Response)
}

void CChatRoom_GetInviteLinksForGroup_Response::SharedCtor() {
}

CChatRoom_GetInviteLinksForGroup_Response::~CChatRoom_GetInviteLinksForGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinksForGroup_Response)
  SharedDtor();
}

void CChatRoom_GetInviteLinksForGroup_Response::SharedDtor() {
}

void CChatRoom_GetInviteLinksForGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteLinksForGroup_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteLinksForGroup_Response& CChatRoom_GetInviteLinksForGroup_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteLinksForGroup_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteLinksForGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinksForGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_links_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteLinksForGroup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteLinksForGroup_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_invite_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteLinksForGroup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteLinksForGroup_Response)
  return false;
#undef DO_
}

void CChatRoom_GetInviteLinksForGroup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteLinksForGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invite_links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->invite_links(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteLinksForGroup_Response)
}

::google::protobuf::uint8* CChatRoom_GetInviteLinksForGroup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinksForGroup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invite_links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->invite_links(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinksForGroup_Response)
  return target;
}

size_t CChatRoom_GetInviteLinksForGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinksForGroup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->invite_links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->invite_links(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteLinksForGroup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteLinksForGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteLinksForGroup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteLinksForGroup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteLinksForGroup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteLinksForGroup_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteLinksForGroup_Response::MergeFrom(const CChatRoom_GetInviteLinksForGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinksForGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invite_links_.MergeFrom(from.invite_links_);
}

void CChatRoom_GetInviteLinksForGroup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteLinksForGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteLinksForGroup_Response::CopyFrom(const CChatRoom_GetInviteLinksForGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinksForGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinksForGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinksForGroup_Response::Swap(CChatRoom_GetInviteLinksForGroup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteLinksForGroup_Response::InternalSwap(CChatRoom_GetInviteLinksForGroup_Response* other) {
  using std::swap;
  CastToBase(&invite_links_)->InternalSwap(CastToBase(&other->invite_links_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteLinksForGroup_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetBanList_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetBanList_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetBanList_Request::CChatRoom_GetBanList_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetBanList_Request)
}
CChatRoom_GetBanList_Request::CChatRoom_GetBanList_Request(const CChatRoom_GetBanList_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetBanList_Request)
}

void CChatRoom_GetBanList_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_GetBanList_Request::~CChatRoom_GetBanList_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetBanList_Request)
  SharedDtor();
}

void CChatRoom_GetBanList_Request::SharedDtor() {
}

void CChatRoom_GetBanList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetBanList_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetBanList_Request& CChatRoom_GetBanList_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetBanList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetBanList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetBanList_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetBanList_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetBanList_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetBanList_Request)
  return false;
#undef DO_
}

void CChatRoom_GetBanList_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetBanList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetBanList_Request)
}

::google::protobuf::uint8* CChatRoom_GetBanList_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetBanList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetBanList_Request)
  return target;
}

size_t CChatRoom_GetBanList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetBanList_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetBanList_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetBanList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetBanList_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetBanList_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetBanList_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetBanList_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetBanList_Request::MergeFrom(const CChatRoom_GetBanList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetBanList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_GetBanList_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetBanList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetBanList_Request::CopyFrom(const CChatRoom_GetBanList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetBanList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetBanList_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetBanList_Request::Swap(CChatRoom_GetBanList_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetBanList_Request::InternalSwap(CChatRoom_GetBanList_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetBanList_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetBanList_Response_BanInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetBanList_Response_BanInfo::kAccountidFieldNumber;
const int CChatRoom_GetBanList_Response_BanInfo::kAccountidActorFieldNumber;
const int CChatRoom_GetBanList_Response_BanInfo::kTimeBannedFieldNumber;
const int CChatRoom_GetBanList_Response_BanInfo::kBanReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetBanList_Response_BanInfo::CChatRoom_GetBanList_Response_BanInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Response_BanInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetBanList_Response.BanInfo)
}
CChatRoom_GetBanList_Response_BanInfo::CChatRoom_GetBanList_Response_BanInfo(const CChatRoom_GetBanList_Response_BanInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ban_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ban_reason()) {
    ban_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ban_reason_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_banned_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_banned_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetBanList_Response.BanInfo)
}

void CChatRoom_GetBanList_Response_BanInfo::SharedCtor() {
  ban_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_banned_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(time_banned_));
}

CChatRoom_GetBanList_Response_BanInfo::~CChatRoom_GetBanList_Response_BanInfo() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetBanList_Response.BanInfo)
  SharedDtor();
}

void CChatRoom_GetBanList_Response_BanInfo::SharedDtor() {
  ban_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetBanList_Response_BanInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetBanList_Response_BanInfo::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetBanList_Response_BanInfo& CChatRoom_GetBanList_Response_BanInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Response_BanInfo.base);
  return *internal_default_instance();
}


void CChatRoom_GetBanList_Response_BanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetBanList_Response.BanInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ban_reason_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_banned_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(time_banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetBanList_Response_BanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetBanList_Response.BanInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid_actor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accountid_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ban_reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ban_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ban_reason().data(), static_cast<int>(this->ban_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_GetBanList_Response.BanInfo.ban_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetBanList_Response.BanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetBanList_Response.BanInfo)
  return false;
#undef DO_
}

void CChatRoom_GetBanList_Response_BanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetBanList_Response.BanInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 accountid_actor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid_actor(), output);
  }

  // optional uint32 time_banned = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_banned(), output);
  }

  // optional string ban_reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), static_cast<int>(this->ban_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetBanList_Response.BanInfo.ban_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ban_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetBanList_Response.BanInfo)
}

::google::protobuf::uint8* CChatRoom_GetBanList_Response_BanInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetBanList_Response.BanInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 accountid_actor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid_actor(), target);
  }

  // optional uint32 time_banned = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_banned(), target);
  }

  // optional string ban_reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), static_cast<int>(this->ban_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetBanList_Response.BanInfo.ban_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ban_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetBanList_Response.BanInfo)
  return target;
}

size_t CChatRoom_GetBanList_Response_BanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetBanList_Response.BanInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ban_reason = 4;
    if (has_ban_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ban_reason());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 accountid_actor = 2;
    if (has_accountid_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid_actor());
    }

    // optional uint32 time_banned = 3;
    if (has_time_banned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_banned());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetBanList_Response_BanInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetBanList_Response.BanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetBanList_Response_BanInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetBanList_Response_BanInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetBanList_Response.BanInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetBanList_Response.BanInfo)
    MergeFrom(*source);
  }
}

void CChatRoom_GetBanList_Response_BanInfo::MergeFrom(const CChatRoom_GetBanList_Response_BanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetBanList_Response.BanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ban_reason();
      ban_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ban_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_actor_ = from.accountid_actor_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_banned_ = from.time_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_GetBanList_Response_BanInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetBanList_Response.BanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetBanList_Response_BanInfo::CopyFrom(const CChatRoom_GetBanList_Response_BanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetBanList_Response.BanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetBanList_Response_BanInfo::IsInitialized() const {
  return true;
}

void CChatRoom_GetBanList_Response_BanInfo::Swap(CChatRoom_GetBanList_Response_BanInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetBanList_Response_BanInfo::InternalSwap(CChatRoom_GetBanList_Response_BanInfo* other) {
  using std::swap;
  ban_reason_.Swap(&other->ban_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(accountid_actor_, other->accountid_actor_);
  swap(time_banned_, other->time_banned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetBanList_Response_BanInfo::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetBanList_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetBanList_Response::kBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetBanList_Response::CChatRoom_GetBanList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetBanList_Response)
}
CChatRoom_GetBanList_Response::CChatRoom_GetBanList_Response(const CChatRoom_GetBanList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetBanList_Response)
}

void CChatRoom_GetBanList_Response::SharedCtor() {
}

CChatRoom_GetBanList_Response::~CChatRoom_GetBanList_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetBanList_Response)
  SharedDtor();
}

void CChatRoom_GetBanList_Response::SharedDtor() {
}

void CChatRoom_GetBanList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetBanList_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetBanList_Response& CChatRoom_GetBanList_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetBanList_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetBanList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetBanList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bans_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetBanList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetBanList_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetBanList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetBanList_Response)
  return false;
#undef DO_
}

void CChatRoom_GetBanList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetBanList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetBanList_Response)
}

::google::protobuf::uint8* CChatRoom_GetBanList_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetBanList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bans(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetBanList_Response)
  return target;
}

size_t CChatRoom_GetBanList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetBanList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bans(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetBanList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetBanList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetBanList_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetBanList_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetBanList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetBanList_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetBanList_Response::MergeFrom(const CChatRoom_GetBanList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetBanList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bans_.MergeFrom(from.bans_);
}

void CChatRoom_GetBanList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetBanList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetBanList_Response::CopyFrom(const CChatRoom_GetBanList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetBanList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetBanList_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetBanList_Response::Swap(CChatRoom_GetBanList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetBanList_Response::InternalSwap(CChatRoom_GetBanList_Response* other) {
  using std::swap;
  CastToBase(&bans_)->InternalSwap(CastToBase(&other->bans_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetBanList_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteList_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteList_Request::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteList_Request::CChatRoom_GetInviteList_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteList_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteList_Request)
}
CChatRoom_GetInviteList_Request::CChatRoom_GetInviteList_Request(const CChatRoom_GetInviteList_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteList_Request)
}

void CChatRoom_GetInviteList_Request::SharedCtor() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_GetInviteList_Request::~CChatRoom_GetInviteList_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteList_Request)
  SharedDtor();
}

void CChatRoom_GetInviteList_Request::SharedDtor() {
}

void CChatRoom_GetInviteList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteList_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteList_Request& CChatRoom_GetInviteList_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteList_Request.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteList_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteList_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteList_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteList_Request)
  return false;
#undef DO_
}

void CChatRoom_GetInviteList_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteList_Request)
}

::google::protobuf::uint8* CChatRoom_GetInviteList_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteList_Request)
  return target;
}

size_t CChatRoom_GetInviteList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteList_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 chat_group_id = 1;
  if (has_chat_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chat_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteList_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteList_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteList_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteList_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteList_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteList_Request::MergeFrom(const CChatRoom_GetInviteList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_id()) {
    set_chat_group_id(from.chat_group_id());
  }
}

void CChatRoom_GetInviteList_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteList_Request::CopyFrom(const CChatRoom_GetInviteList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteList_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteList_Request::Swap(CChatRoom_GetInviteList_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteList_Request::InternalSwap(CChatRoom_GetInviteList_Request* other) {
  using std::swap;
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteList_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoomGroupInvite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoomGroupInvite::kAccountidFieldNumber;
const int CChatRoomGroupInvite::kAccountidActorFieldNumber;
const int CChatRoomGroupInvite::kTimeInvitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoomGroupInvite::CChatRoomGroupInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupInvite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoomGroupInvite)
}
CChatRoomGroupInvite::CChatRoomGroupInvite(const CChatRoomGroupInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_invited_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_invited_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomGroupInvite)
}

void CChatRoomGroupInvite::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_invited_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(time_invited_));
}

CChatRoomGroupInvite::~CChatRoomGroupInvite() {
  // @@protoc_insertion_point(destructor:CChatRoomGroupInvite)
  SharedDtor();
}

void CChatRoomGroupInvite::SharedDtor() {
}

void CChatRoomGroupInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoomGroupInvite::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoomGroupInvite& CChatRoomGroupInvite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoomGroupInvite.base);
  return *internal_default_instance();
}


void CChatRoomGroupInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomGroupInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_invited_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(time_invited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoomGroupInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoomGroupInvite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid_actor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accountid_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_invited = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_invited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoomGroupInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoomGroupInvite)
  return false;
#undef DO_
}

void CChatRoomGroupInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoomGroupInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 accountid_actor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid_actor(), output);
  }

  // optional uint32 time_invited = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_invited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoomGroupInvite)
}

::google::protobuf::uint8* CChatRoomGroupInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomGroupInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 accountid_actor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid_actor(), target);
  }

  // optional uint32 time_invited = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_invited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomGroupInvite)
  return target;
}

size_t CChatRoomGroupInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomGroupInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 accountid_actor = 2;
    if (has_accountid_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid_actor());
    }

    // optional uint32 time_invited = 3;
    if (has_time_invited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_invited());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoomGroupInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoomGroupInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoomGroupInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoomGroupInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoomGroupInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoomGroupInvite)
    MergeFrom(*source);
  }
}

void CChatRoomGroupInvite::MergeFrom(const CChatRoomGroupInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomGroupInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_actor_ = from.accountid_actor_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_invited_ = from.time_invited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoomGroupInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoomGroupInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoomGroupInvite::CopyFrom(const CChatRoomGroupInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomGroupInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomGroupInvite::IsInitialized() const {
  return true;
}

void CChatRoomGroupInvite::Swap(CChatRoomGroupInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoomGroupInvite::InternalSwap(CChatRoomGroupInvite* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(accountid_actor_, other->accountid_actor_);
  swap(time_invited_, other->time_invited_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoomGroupInvite::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_GetInviteList_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_GetInviteList_Response::kInvitesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_GetInviteList_Response::CChatRoom_GetInviteList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteList_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_GetInviteList_Response)
}
CChatRoom_GetInviteList_Response::CChatRoom_GetInviteList_Response(const CChatRoom_GetInviteList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      invites_(from.invites_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteList_Response)
}

void CChatRoom_GetInviteList_Response::SharedCtor() {
}

CChatRoom_GetInviteList_Response::~CChatRoom_GetInviteList_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteList_Response)
  SharedDtor();
}

void CChatRoom_GetInviteList_Response::SharedDtor() {
}

void CChatRoom_GetInviteList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_GetInviteList_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_GetInviteList_Response& CChatRoom_GetInviteList_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_GetInviteList_Response.base);
  return *internal_default_instance();
}


void CChatRoom_GetInviteList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invites_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_GetInviteList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_GetInviteList_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoomGroupInvite invites = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_invites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_GetInviteList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_GetInviteList_Response)
  return false;
#undef DO_
}

void CChatRoom_GetInviteList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_GetInviteList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomGroupInvite invites = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invites_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->invites(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_GetInviteList_Response)
}

::google::protobuf::uint8* CChatRoom_GetInviteList_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomGroupInvite invites = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invites_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->invites(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteList_Response)
  return target;
}

size_t CChatRoom_GetInviteList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoomGroupInvite invites = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->invites_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->invites(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_GetInviteList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_GetInviteList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_GetInviteList_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_GetInviteList_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_GetInviteList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_GetInviteList_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_GetInviteList_Response::MergeFrom(const CChatRoom_GetInviteList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invites_.MergeFrom(from.invites_);
}

void CChatRoom_GetInviteList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_GetInviteList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_GetInviteList_Response::CopyFrom(const CChatRoom_GetInviteList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteList_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteList_Response::Swap(CChatRoom_GetInviteList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_GetInviteList_Response::InternalSwap(CChatRoom_GetInviteList_Response* other) {
  using std::swap;
  CastToBase(&invites_)->InternalSwap(CastToBase(&other->invites_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_GetInviteList_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteInviteLink_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_DeleteInviteLink_Request::kChatGroupIdFieldNumber;
const int CChatRoom_DeleteInviteLink_Request::kInviteCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteInviteLink_Request::CChatRoom_DeleteInviteLink_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteInviteLink_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteInviteLink_Request)
}
CChatRoom_DeleteInviteLink_Request::CChatRoom_DeleteInviteLink_Request(const CChatRoom_DeleteInviteLink_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteInviteLink_Request)
}

void CChatRoom_DeleteInviteLink_Request::SharedCtor() {
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_group_id_ = GOOGLE_ULONGLONG(0);
}

CChatRoom_DeleteInviteLink_Request::~CChatRoom_DeleteInviteLink_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteInviteLink_Request)
  SharedDtor();
}

void CChatRoom_DeleteInviteLink_Request::SharedDtor() {
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_DeleteInviteLink_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteInviteLink_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteInviteLink_Request& CChatRoom_DeleteInviteLink_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteInviteLink_Request.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteInviteLink_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteInviteLink_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmptyNoArena();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteInviteLink_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteInviteLink_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invite_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), static_cast<int>(this->invite_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_DeleteInviteLink_Request.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteInviteLink_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteInviteLink_Request)
  return false;
#undef DO_
}

void CChatRoom_DeleteInviteLink_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteInviteLink_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional string invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_DeleteInviteLink_Request.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invite_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteInviteLink_Request)
}

::google::protobuf::uint8* CChatRoom_DeleteInviteLink_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteInviteLink_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional string invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), static_cast<int>(this->invite_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_DeleteInviteLink_Request.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invite_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteInviteLink_Request)
  return target;
}

size_t CChatRoom_DeleteInviteLink_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteInviteLink_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string invite_code = 2;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_code());
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteInviteLink_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteInviteLink_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteInviteLink_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteInviteLink_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteInviteLink_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteInviteLink_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteInviteLink_Request::MergeFrom(const CChatRoom_DeleteInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteInviteLink_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invite_code();
      invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_DeleteInviteLink_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteInviteLink_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteInviteLink_Request::CopyFrom(const CChatRoom_DeleteInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteInviteLink_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteInviteLink_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteInviteLink_Request::Swap(CChatRoom_DeleteInviteLink_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteInviteLink_Request::InternalSwap(CChatRoom_DeleteInviteLink_Request* other) {
  using std::swap;
  invite_code_.Swap(&other->invite_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteInviteLink_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteInviteLink_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteInviteLink_Response::CChatRoom_DeleteInviteLink_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteInviteLink_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteInviteLink_Response)
}
CChatRoom_DeleteInviteLink_Response::CChatRoom_DeleteInviteLink_Response(const CChatRoom_DeleteInviteLink_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteInviteLink_Response)
}

void CChatRoom_DeleteInviteLink_Response::SharedCtor() {
}

CChatRoom_DeleteInviteLink_Response::~CChatRoom_DeleteInviteLink_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteInviteLink_Response)
  SharedDtor();
}

void CChatRoom_DeleteInviteLink_Response::SharedDtor() {
}

void CChatRoom_DeleteInviteLink_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteInviteLink_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteInviteLink_Response& CChatRoom_DeleteInviteLink_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteInviteLink_Response.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteInviteLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteInviteLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteInviteLink_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteInviteLink_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteInviteLink_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteInviteLink_Response)
  return false;
#undef DO_
}

void CChatRoom_DeleteInviteLink_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteInviteLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteInviteLink_Response)
}

::google::protobuf::uint8* CChatRoom_DeleteInviteLink_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteInviteLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteInviteLink_Response)
  return target;
}

size_t CChatRoom_DeleteInviteLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteInviteLink_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteInviteLink_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteInviteLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteInviteLink_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteInviteLink_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteInviteLink_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteInviteLink_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteInviteLink_Response::MergeFrom(const CChatRoom_DeleteInviteLink_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteInviteLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_DeleteInviteLink_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteInviteLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteInviteLink_Response::CopyFrom(const CChatRoom_DeleteInviteLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteInviteLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteInviteLink_Response::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteInviteLink_Response::Swap(CChatRoom_DeleteInviteLink_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteInviteLink_Response::InternalSwap(CChatRoom_DeleteInviteLink_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteInviteLink_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetSessionActiveChatRoomGroups_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetSessionActiveChatRoomGroups_Request::kChatGroupIdsFieldNumber;
const int CChatRoom_SetSessionActiveChatRoomGroups_Request::kChatGroupsDataRequestedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetSessionActiveChatRoomGroups_Request::CChatRoom_SetSessionActiveChatRoomGroups_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetSessionActiveChatRoomGroups_Request)
}
CChatRoom_SetSessionActiveChatRoomGroups_Request::CChatRoom_SetSessionActiveChatRoomGroups_Request(const CChatRoom_SetSessionActiveChatRoomGroups_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chat_group_ids_(from.chat_group_ids_),
      chat_groups_data_requested_(from.chat_groups_data_requested_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetSessionActiveChatRoomGroups_Request)
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::SharedCtor() {
}

CChatRoom_SetSessionActiveChatRoomGroups_Request::~CChatRoom_SetSessionActiveChatRoomGroups_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  SharedDtor();
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::SharedDtor() {
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetSessionActiveChatRoomGroups_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetSessionActiveChatRoomGroups_Request& CChatRoom_SetSessionActiveChatRoomGroups_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SetSessionActiveChatRoomGroups_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_ids_.Clear();
  chat_groups_data_requested_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetSessionActiveChatRoomGroups_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 chat_group_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_chat_group_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_chat_group_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 chat_groups_data_requested = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_chat_groups_data_requested())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_chat_groups_data_requested())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  return false;
#undef DO_
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 chat_group_ids = 1;
  for (int i = 0, n = this->chat_group_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->chat_group_ids(i), output);
  }

  // repeated uint64 chat_groups_data_requested = 2;
  for (int i = 0, n = this->chat_groups_data_requested_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->chat_groups_data_requested(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetSessionActiveChatRoomGroups_Request)
}

::google::protobuf::uint8* CChatRoom_SetSessionActiveChatRoomGroups_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 chat_group_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->chat_group_ids_, target);

  // repeated uint64 chat_groups_data_requested = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->chat_groups_data_requested_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  return target;
}

size_t CChatRoom_SetSessionActiveChatRoomGroups_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 chat_group_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->chat_group_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->chat_group_ids_size());
    total_size += data_size;
  }

  // repeated uint64 chat_groups_data_requested = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->chat_groups_data_requested_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->chat_groups_data_requested_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetSessionActiveChatRoomGroups_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetSessionActiveChatRoomGroups_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetSessionActiveChatRoomGroups_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetSessionActiveChatRoomGroups_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::MergeFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_group_ids_.MergeFrom(from.chat_group_ids_);
  chat_groups_data_requested_.MergeFrom(from.chat_groups_data_requested_);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::CopyFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetSessionActiveChatRoomGroups_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::Swap(CChatRoom_SetSessionActiveChatRoomGroups_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetSessionActiveChatRoomGroups_Request::InternalSwap(CChatRoom_SetSessionActiveChatRoomGroups_Request* other) {
  using std::swap;
  chat_group_ids_.InternalSwap(&other->chat_group_ids_);
  chat_groups_data_requested_.InternalSwap(&other->chat_groups_data_requested_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetSessionActiveChatRoomGroups_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetSessionActiveChatRoomGroups_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetSessionActiveChatRoomGroups_Response::kChatStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetSessionActiveChatRoomGroups_Response::CChatRoom_SetSessionActiveChatRoomGroups_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetSessionActiveChatRoomGroups_Response)
}
CChatRoom_SetSessionActiveChatRoomGroups_Response::CChatRoom_SetSessionActiveChatRoomGroups_Response(const CChatRoom_SetSessionActiveChatRoomGroups_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chat_states_(from.chat_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetSessionActiveChatRoomGroups_Response)
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::SharedCtor() {
}

CChatRoom_SetSessionActiveChatRoomGroups_Response::~CChatRoom_SetSessionActiveChatRoomGroups_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  SharedDtor();
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::SharedDtor() {
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetSessionActiveChatRoomGroups_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetSessionActiveChatRoomGroups_Response& CChatRoom_SetSessionActiveChatRoomGroups_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetSessionActiveChatRoomGroups_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SetSessionActiveChatRoomGroups_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetSessionActiveChatRoomGroups_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CChatRoomGroupState chat_states = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  return false;
#undef DO_
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomGroupState chat_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chat_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetSessionActiveChatRoomGroups_Response)
}

::google::protobuf::uint8* CChatRoom_SetSessionActiveChatRoomGroups_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomGroupState chat_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chat_states(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  return target;
}

size_t CChatRoom_SetSessionActiveChatRoomGroups_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoomGroupState chat_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_states(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetSessionActiveChatRoomGroups_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetSessionActiveChatRoomGroups_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetSessionActiveChatRoomGroups_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetSessionActiveChatRoomGroups_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::MergeFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_states_.MergeFrom(from.chat_states_);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::CopyFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetSessionActiveChatRoomGroups_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::Swap(CChatRoom_SetSessionActiveChatRoomGroups_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetSessionActiveChatRoomGroups_Response::InternalSwap(CChatRoom_SetSessionActiveChatRoomGroups_Response* other) {
  using std::swap;
  CastToBase(&chat_states_)->InternalSwap(CastToBase(&other->chat_states_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetSessionActiveChatRoomGroups_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::kDesktopNotificationLevelFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::kMobileNotificationLevelFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::kUnreadIndicatorMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
}
CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences(const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&desktop_notification_level_, &from.desktop_notification_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&desktop_notification_level_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SharedCtor() {
  ::memset(&desktop_notification_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_indicator_muted_) -
      reinterpret_cast<char*>(&desktop_notification_level_)) + sizeof(unread_indicator_muted_));
}

CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::~CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  SharedDtor();
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SharedDtor() {
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences.base);
  return *internal_default_instance();
}


void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&desktop_notification_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&desktop_notification_level_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_desktop_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_mobile_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unread_indicator_muted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_unread_indicator_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unread_indicator_muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  return false;
#undef DO_
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->desktop_notification_level(), output);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mobile_notification_level(), output);
  }

  // optional bool unread_indicator_muted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unread_indicator_muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
}

::google::protobuf::uint8* CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mobile_notification_level(), target);
  }

  // optional bool unread_indicator_muted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unread_indicator_muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_desktop_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_mobile_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mobile_notification_level());
    }

    // optional bool unread_indicator_muted = 3;
    if (has_unread_indicator_muted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
    MergeFrom(*source);
  }
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::Swap(CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* other) {
  using std::swap;
  swap(desktop_notification_level_, other->desktop_notification_level_);
  swap(mobile_notification_level_, other->mobile_notification_level_);
  swap(unread_indicator_muted_, other->unread_indicator_muted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::kChatIdFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::kDesktopNotificationLevelFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::kMobileNotificationLevelFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::kUnreadIndicatorMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
}
CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences(const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_indicator_muted_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
}

CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::~CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  SharedDtor();
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SharedDtor() {
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences.base);
  return *internal_default_instance();
}


void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_desktop_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomNotificationLevel_IsValid(value)) {
            set_mobile_notification_level(static_cast< ::EChatRoomNotificationLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unread_indicator_muted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unread_indicator_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unread_indicator_muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  return false;
#undef DO_
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->desktop_notification_level(), output);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mobile_notification_level(), output);
  }

  // optional bool unread_indicator_muted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unread_indicator_muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
}

::google::protobuf::uint8* CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_id(), target);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mobile_notification_level(), target);
  }

  // optional bool unread_indicator_muted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unread_indicator_muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_desktop_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
    if (has_mobile_notification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mobile_notification_level());
    }

    // optional bool unread_indicator_muted = 4;
    if (has_unread_indicator_muted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
    MergeFrom(*source);
  }
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::Swap(CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* other) {
  using std::swap;
  swap(chat_id_, other->chat_id_);
  swap(desktop_notification_level_, other->desktop_notification_level_);
  swap(mobile_notification_level_, other->mobile_notification_level_);
  swap(unread_indicator_muted_, other->unread_indicator_muted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetUserChatGroupPreferences_Request::InitAsDefaultInstance() {
  ::_CChatRoom_SetUserChatGroupPreferences_Request_default_instance_._instance.get_mutable()->chat_group_preferences_ = const_cast< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences*>(
      ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_SetUserChatGroupPreferences_Request::kChatGroupIdFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request::kChatGroupPreferencesFieldNumber;
const int CChatRoom_SetUserChatGroupPreferences_Request::kChatRoomPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetUserChatGroupPreferences_Request::CChatRoom_SetUserChatGroupPreferences_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetUserChatGroupPreferences_Request)
}
CChatRoom_SetUserChatGroupPreferences_Request::CChatRoom_SetUserChatGroupPreferences_Request(const CChatRoom_SetUserChatGroupPreferences_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chat_room_preferences_(from.chat_room_preferences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chat_group_preferences()) {
    chat_group_preferences_ = new ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences(*from.chat_group_preferences_);
  } else {
    chat_group_preferences_ = NULL;
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Request)
}

void CChatRoom_SetUserChatGroupPreferences_Request::SharedCtor() {
  ::memset(&chat_group_preferences_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_group_id_) -
      reinterpret_cast<char*>(&chat_group_preferences_)) + sizeof(chat_group_id_));
}

CChatRoom_SetUserChatGroupPreferences_Request::~CChatRoom_SetUserChatGroupPreferences_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Request)
  SharedDtor();
}

void CChatRoom_SetUserChatGroupPreferences_Request::SharedDtor() {
  if (this != internal_default_instance()) delete chat_group_preferences_;
}

void CChatRoom_SetUserChatGroupPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetUserChatGroupPreferences_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetUserChatGroupPreferences_Request& CChatRoom_SetUserChatGroupPreferences_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Request.base);
  return *internal_default_instance();
}


void CChatRoom_SetUserChatGroupPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_preferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_group_preferences_ != NULL);
    chat_group_preferences_->Clear();
  }
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetUserChatGroupPreferences_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetUserChatGroupPreferences_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_group_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_room_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetUserChatGroupPreferences_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetUserChatGroupPreferences_Request)
  return false;
#undef DO_
}

void CChatRoom_SetUserChatGroupPreferences_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetUserChatGroupPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_chat_group_preferences(), output);
  }

  // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_room_preferences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->chat_room_preferences(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetUserChatGroupPreferences_Request)
}

::google::protobuf::uint8* CChatRoom_SetUserChatGroupPreferences_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_chat_group_preferences(), deterministic, target);
  }

  // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_room_preferences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->chat_room_preferences(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Request)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_room_preferences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_room_preferences(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
    if (has_chat_group_preferences()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chat_group_preferences_);
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetUserChatGroupPreferences_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetUserChatGroupPreferences_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetUserChatGroupPreferences_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetUserChatGroupPreferences_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetUserChatGroupPreferences_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_SetUserChatGroupPreferences_Request::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_room_preferences_.MergeFrom(from.chat_room_preferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chat_group_preferences()->::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeFrom(from.chat_group_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_SetUserChatGroupPreferences_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetUserChatGroupPreferences_Request::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Request::Swap(CChatRoom_SetUserChatGroupPreferences_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetUserChatGroupPreferences_Request::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Request* other) {
  using std::swap;
  CastToBase(&chat_room_preferences_)->InternalSwap(CastToBase(&other->chat_room_preferences_));
  swap(chat_group_preferences_, other->chat_group_preferences_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetUserChatGroupPreferences_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_SetUserChatGroupPreferences_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_SetUserChatGroupPreferences_Response::CChatRoom_SetUserChatGroupPreferences_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_SetUserChatGroupPreferences_Response)
}
CChatRoom_SetUserChatGroupPreferences_Response::CChatRoom_SetUserChatGroupPreferences_Response(const CChatRoom_SetUserChatGroupPreferences_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Response)
}

void CChatRoom_SetUserChatGroupPreferences_Response::SharedCtor() {
}

CChatRoom_SetUserChatGroupPreferences_Response::~CChatRoom_SetUserChatGroupPreferences_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Response)
  SharedDtor();
}

void CChatRoom_SetUserChatGroupPreferences_Response::SharedDtor() {
}

void CChatRoom_SetUserChatGroupPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_SetUserChatGroupPreferences_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_SetUserChatGroupPreferences_Response& CChatRoom_SetUserChatGroupPreferences_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_SetUserChatGroupPreferences_Response.base);
  return *internal_default_instance();
}


void CChatRoom_SetUserChatGroupPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_SetUserChatGroupPreferences_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_SetUserChatGroupPreferences_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_SetUserChatGroupPreferences_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_SetUserChatGroupPreferences_Response)
  return false;
#undef DO_
}

void CChatRoom_SetUserChatGroupPreferences_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_SetUserChatGroupPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_SetUserChatGroupPreferences_Response)
}

::google::protobuf::uint8* CChatRoom_SetUserChatGroupPreferences_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Response)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_SetUserChatGroupPreferences_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_SetUserChatGroupPreferences_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_SetUserChatGroupPreferences_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_SetUserChatGroupPreferences_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_SetUserChatGroupPreferences_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_SetUserChatGroupPreferences_Response::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_SetUserChatGroupPreferences_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_SetUserChatGroupPreferences_Response::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Response::Swap(CChatRoom_SetUserChatGroupPreferences_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_SetUserChatGroupPreferences_Response::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_SetUserChatGroupPreferences_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteChatMessages_Request_Message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_DeleteChatMessages_Request_Message::kServerTimestampFieldNumber;
const int CChatRoom_DeleteChatMessages_Request_Message::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteChatMessages_Request_Message::CChatRoom_DeleteChatMessages_Request_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Request_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteChatMessages_Request.Message)
}
CChatRoom_DeleteChatMessages_Request_Message::CChatRoom_DeleteChatMessages_Request_Message(const CChatRoom_DeleteChatMessages_Request_Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatMessages_Request.Message)
}

void CChatRoom_DeleteChatMessages_Request_Message::SharedCtor() {
  ::memset(&server_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
}

CChatRoom_DeleteChatMessages_Request_Message::~CChatRoom_DeleteChatMessages_Request_Message() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatMessages_Request.Message)
  SharedDtor();
}

void CChatRoom_DeleteChatMessages_Request_Message::SharedDtor() {
}

void CChatRoom_DeleteChatMessages_Request_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteChatMessages_Request_Message::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteChatMessages_Request_Message& CChatRoom_DeleteChatMessages_Request_Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Request_Message.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteChatMessages_Request_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatMessages_Request.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteChatMessages_Request_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteChatMessages_Request.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteChatMessages_Request.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteChatMessages_Request.Message)
  return false;
#undef DO_
}

void CChatRoom_DeleteChatMessages_Request_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteChatMessages_Request.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_timestamp(), output);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteChatMessages_Request.Message)
}

::google::protobuf::uint8* CChatRoom_DeleteChatMessages_Request_Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatMessages_Request.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_timestamp(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatMessages_Request.Message)
  return target;
}

size_t CChatRoom_DeleteChatMessages_Request_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatMessages_Request.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 server_timestamp = 1;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_timestamp());
    }

    // optional uint32 ordinal = 2;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteChatMessages_Request_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteChatMessages_Request.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteChatMessages_Request_Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteChatMessages_Request_Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteChatMessages_Request.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteChatMessages_Request.Message)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteChatMessages_Request_Message::MergeFrom(const CChatRoom_DeleteChatMessages_Request_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatMessages_Request.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_DeleteChatMessages_Request_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteChatMessages_Request.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteChatMessages_Request_Message::CopyFrom(const CChatRoom_DeleteChatMessages_Request_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatMessages_Request.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatMessages_Request_Message::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatMessages_Request_Message::Swap(CChatRoom_DeleteChatMessages_Request_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteChatMessages_Request_Message::InternalSwap(CChatRoom_DeleteChatMessages_Request_Message* other) {
  using std::swap;
  swap(server_timestamp_, other->server_timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteChatMessages_Request_Message::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteChatMessages_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_DeleteChatMessages_Request::kChatGroupIdFieldNumber;
const int CChatRoom_DeleteChatMessages_Request::kChatIdFieldNumber;
const int CChatRoom_DeleteChatMessages_Request::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteChatMessages_Request::CChatRoom_DeleteChatMessages_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteChatMessages_Request)
}
CChatRoom_DeleteChatMessages_Request::CChatRoom_DeleteChatMessages_Request(const CChatRoom_DeleteChatMessages_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatMessages_Request)
}

void CChatRoom_DeleteChatMessages_Request::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_DeleteChatMessages_Request::~CChatRoom_DeleteChatMessages_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatMessages_Request)
  SharedDtor();
}

void CChatRoom_DeleteChatMessages_Request::SharedDtor() {
}

void CChatRoom_DeleteChatMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteChatMessages_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteChatMessages_Request& CChatRoom_DeleteChatMessages_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Request.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteChatMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatMessages_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteChatMessages_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteChatMessages_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteChatMessages_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteChatMessages_Request)
  return false;
#undef DO_
}

void CChatRoom_DeleteChatMessages_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteChatMessages_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteChatMessages_Request)
}

::google::protobuf::uint8* CChatRoom_DeleteChatMessages_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatMessages_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->messages(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatMessages_Request)
  return target;
}

size_t CChatRoom_DeleteChatMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatMessages_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteChatMessages_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteChatMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteChatMessages_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteChatMessages_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteChatMessages_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteChatMessages_Request)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteChatMessages_Request::MergeFrom(const CChatRoom_DeleteChatMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_DeleteChatMessages_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteChatMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteChatMessages_Request::CopyFrom(const CChatRoom_DeleteChatMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatMessages_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatMessages_Request::Swap(CChatRoom_DeleteChatMessages_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteChatMessages_Request::InternalSwap(CChatRoom_DeleteChatMessages_Request* other) {
  using std::swap;
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteChatMessages_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_DeleteChatMessages_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_DeleteChatMessages_Response::CChatRoom_DeleteChatMessages_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_DeleteChatMessages_Response)
}
CChatRoom_DeleteChatMessages_Response::CChatRoom_DeleteChatMessages_Response(const CChatRoom_DeleteChatMessages_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatMessages_Response)
}

void CChatRoom_DeleteChatMessages_Response::SharedCtor() {
}

CChatRoom_DeleteChatMessages_Response::~CChatRoom_DeleteChatMessages_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatMessages_Response)
  SharedDtor();
}

void CChatRoom_DeleteChatMessages_Response::SharedDtor() {
}

void CChatRoom_DeleteChatMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_DeleteChatMessages_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_DeleteChatMessages_Response& CChatRoom_DeleteChatMessages_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_DeleteChatMessages_Response.base);
  return *internal_default_instance();
}


void CChatRoom_DeleteChatMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatMessages_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_DeleteChatMessages_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_DeleteChatMessages_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_DeleteChatMessages_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_DeleteChatMessages_Response)
  return false;
#undef DO_
}

void CChatRoom_DeleteChatMessages_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_DeleteChatMessages_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_DeleteChatMessages_Response)
}

::google::protobuf::uint8* CChatRoom_DeleteChatMessages_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatMessages_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatMessages_Response)
  return target;
}

size_t CChatRoom_DeleteChatMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatMessages_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_DeleteChatMessages_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_DeleteChatMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_DeleteChatMessages_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_DeleteChatMessages_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_DeleteChatMessages_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_DeleteChatMessages_Response)
    MergeFrom(*source);
  }
}

void CChatRoom_DeleteChatMessages_Response::MergeFrom(const CChatRoom_DeleteChatMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CChatRoom_DeleteChatMessages_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_DeleteChatMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_DeleteChatMessages_Response::CopyFrom(const CChatRoom_DeleteChatMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatMessages_Response::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatMessages_Response::Swap(CChatRoom_DeleteChatMessages_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_DeleteChatMessages_Response::InternalSwap(CChatRoom_DeleteChatMessages_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_DeleteChatMessages_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CClanChatRooms_GetClanChatRoomInfo_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClanChatRooms_GetClanChatRoomInfo_Request::kSteamidFieldNumber;
const int CClanChatRooms_GetClanChatRoomInfo_Request::kAutocreateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClanChatRooms_GetClanChatRoomInfo_Request::CClanChatRooms_GetClanChatRoomInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_GetClanChatRoomInfo_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClanChatRooms_GetClanChatRoomInfo_Request)
}
CClanChatRooms_GetClanChatRoomInfo_Request::CClanChatRooms_GetClanChatRoomInfo_Request(const CClanChatRooms_GetClanChatRoomInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autocreate_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(autocreate_));
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_GetClanChatRoomInfo_Request)
}

void CClanChatRooms_GetClanChatRoomInfo_Request::SharedCtor() {
  steamid_ = GOOGLE_ULONGLONG(0);
  autocreate_ = true;
}

CClanChatRooms_GetClanChatRoomInfo_Request::~CClanChatRooms_GetClanChatRoomInfo_Request() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_GetClanChatRoomInfo_Request)
  SharedDtor();
}

void CClanChatRooms_GetClanChatRoomInfo_Request::SharedDtor() {
}

void CClanChatRooms_GetClanChatRoomInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CClanChatRooms_GetClanChatRoomInfo_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClanChatRooms_GetClanChatRoomInfo_Request& CClanChatRooms_GetClanChatRoomInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_GetClanChatRoomInfo_Request.base);
  return *internal_default_instance();
}


void CClanChatRooms_GetClanChatRoomInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    steamid_ = GOOGLE_ULONGLONG(0);
    autocreate_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClanChatRooms_GetClanChatRoomInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_autocreate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autocreate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClanChatRooms_GetClanChatRoomInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClanChatRooms_GetClanChatRoomInfo_Request)
  return false;
#undef DO_
}

void CClanChatRooms_GetClanChatRoomInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autocreate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClanChatRooms_GetClanChatRoomInfo_Request)
}

::google::protobuf::uint8* CClanChatRooms_GetClanChatRoomInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autocreate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_GetClanChatRoomInfo_Request)
  return target;
}

size_t CClanChatRooms_GetClanChatRoomInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
    if (has_autocreate()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClanChatRooms_GetClanChatRoomInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CClanChatRooms_GetClanChatRoomInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClanChatRooms_GetClanChatRoomInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClanChatRooms_GetClanChatRoomInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClanChatRooms_GetClanChatRoomInfo_Request)
    MergeFrom(*source);
  }
}

void CClanChatRooms_GetClanChatRoomInfo_Request::MergeFrom(const CClanChatRooms_GetClanChatRoomInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      autocreate_ = from.autocreate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClanChatRooms_GetClanChatRoomInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanChatRooms_GetClanChatRoomInfo_Request::CopyFrom(const CClanChatRooms_GetClanChatRoomInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_GetClanChatRoomInfo_Request::IsInitialized() const {
  return true;
}

void CClanChatRooms_GetClanChatRoomInfo_Request::Swap(CClanChatRooms_GetClanChatRoomInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClanChatRooms_GetClanChatRoomInfo_Request::InternalSwap(CClanChatRooms_GetClanChatRoomInfo_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(autocreate_, other->autocreate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CClanChatRooms_GetClanChatRoomInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CClanChatRooms_GetClanChatRoomInfo_Response::InitAsDefaultInstance() {
  ::_CClanChatRooms_GetClanChatRoomInfo_Response_default_instance_._instance.get_mutable()->chat_group_summary_ = const_cast< ::CChatRoom_GetChatRoomGroupSummary_Response*>(
      ::CChatRoom_GetChatRoomGroupSummary_Response::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClanChatRooms_GetClanChatRoomInfo_Response::kChatGroupSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClanChatRooms_GetClanChatRoomInfo_Response::CClanChatRooms_GetClanChatRoomInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_GetClanChatRoomInfo_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClanChatRooms_GetClanChatRoomInfo_Response)
}
CClanChatRooms_GetClanChatRoomInfo_Response::CClanChatRooms_GetClanChatRoomInfo_Response(const CClanChatRooms_GetClanChatRoomInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chat_group_summary()) {
    chat_group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.chat_group_summary_);
  } else {
    chat_group_summary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_GetClanChatRoomInfo_Response)
}

void CClanChatRooms_GetClanChatRoomInfo_Response::SharedCtor() {
  chat_group_summary_ = NULL;
}

CClanChatRooms_GetClanChatRoomInfo_Response::~CClanChatRooms_GetClanChatRoomInfo_Response() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_GetClanChatRoomInfo_Response)
  SharedDtor();
}

void CClanChatRooms_GetClanChatRoomInfo_Response::SharedDtor() {
  if (this != internal_default_instance()) delete chat_group_summary_;
}

void CClanChatRooms_GetClanChatRoomInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CClanChatRooms_GetClanChatRoomInfo_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClanChatRooms_GetClanChatRoomInfo_Response& CClanChatRooms_GetClanChatRoomInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_GetClanChatRoomInfo_Response.base);
  return *internal_default_instance();
}


void CClanChatRooms_GetClanChatRoomInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_group_summary_ != NULL);
    chat_group_summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClanChatRooms_GetClanChatRoomInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_group_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClanChatRooms_GetClanChatRoomInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClanChatRooms_GetClanChatRoomInfo_Response)
  return false;
#undef DO_
}

void CClanChatRooms_GetClanChatRoomInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_chat_group_summary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClanChatRooms_GetClanChatRoomInfo_Response)
}

::google::protobuf::uint8* CClanChatRooms_GetClanChatRoomInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_chat_group_summary(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_GetClanChatRoomInfo_Response)
  return target;
}

size_t CClanChatRooms_GetClanChatRoomInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
  if (has_chat_group_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_group_summary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClanChatRooms_GetClanChatRoomInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CClanChatRooms_GetClanChatRoomInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClanChatRooms_GetClanChatRoomInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClanChatRooms_GetClanChatRoomInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClanChatRooms_GetClanChatRoomInfo_Response)
    MergeFrom(*source);
  }
}

void CClanChatRooms_GetClanChatRoomInfo_Response::MergeFrom(const CClanChatRooms_GetClanChatRoomInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_group_summary()) {
    mutable_chat_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from.chat_group_summary());
  }
}

void CClanChatRooms_GetClanChatRoomInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanChatRooms_GetClanChatRoomInfo_Response::CopyFrom(const CClanChatRooms_GetClanChatRoomInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_GetClanChatRoomInfo_Response::IsInitialized() const {
  return true;
}

void CClanChatRooms_GetClanChatRoomInfo_Response::Swap(CClanChatRooms_GetClanChatRoomInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClanChatRooms_GetClanChatRoomInfo_Response::InternalSwap(CClanChatRooms_GetClanChatRoomInfo_Response* other) {
  using std::swap;
  swap(chat_group_summary_, other->chat_group_summary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CClanChatRooms_GetClanChatRoomInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CClanChatRooms_SetClanChatRoomPrivate_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClanChatRooms_SetClanChatRoomPrivate_Request::kSteamidFieldNumber;
const int CClanChatRooms_SetClanChatRoomPrivate_Request::kChatRoomPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClanChatRooms_SetClanChatRoomPrivate_Request::CClanChatRooms_SetClanChatRoomPrivate_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_SetClanChatRoomPrivate_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClanChatRooms_SetClanChatRoomPrivate_Request)
}
CClanChatRooms_SetClanChatRoomPrivate_Request::CClanChatRooms_SetClanChatRoomPrivate_Request(const CClanChatRooms_SetClanChatRoomPrivate_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_room_private_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(chat_room_private_));
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_SetClanChatRoomPrivate_Request)
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_room_private_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(chat_room_private_));
}

CClanChatRooms_SetClanChatRoomPrivate_Request::~CClanChatRooms_SetClanChatRoomPrivate_Request() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_SetClanChatRoomPrivate_Request)
  SharedDtor();
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::SharedDtor() {
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CClanChatRooms_SetClanChatRoomPrivate_Request::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClanChatRooms_SetClanChatRoomPrivate_Request& CClanChatRooms_SetClanChatRoomPrivate_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_SetClanChatRoomPrivate_Request.base);
  return *internal_default_instance();
}


void CClanChatRooms_SetClanChatRoomPrivate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_room_private_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(chat_room_private_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClanChatRooms_SetClanChatRoomPrivate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat_room_private = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_room_private();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_room_private_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClanChatRooms_SetClanChatRoomPrivate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClanChatRooms_SetClanChatRoomPrivate_Request)
  return false;
#undef DO_
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool chat_room_private = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat_room_private(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClanChatRooms_SetClanChatRoomPrivate_Request)
}

::google::protobuf::uint8* CClanChatRooms_SetClanChatRoomPrivate_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool chat_room_private = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat_room_private(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_SetClanChatRoomPrivate_Request)
  return target;
}

size_t CClanChatRooms_SetClanChatRoomPrivate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool chat_room_private = 2;
    if (has_chat_room_private()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CClanChatRooms_SetClanChatRoomPrivate_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClanChatRooms_SetClanChatRoomPrivate_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClanChatRooms_SetClanChatRoomPrivate_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClanChatRooms_SetClanChatRoomPrivate_Request)
    MergeFrom(*source);
  }
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::MergeFrom(const CClanChatRooms_SetClanChatRoomPrivate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_room_private_ = from.chat_room_private_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::CopyFrom(const CClanChatRooms_SetClanChatRoomPrivate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_SetClanChatRoomPrivate_Request::IsInitialized() const {
  return true;
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::Swap(CClanChatRooms_SetClanChatRoomPrivate_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClanChatRooms_SetClanChatRoomPrivate_Request::InternalSwap(CClanChatRooms_SetClanChatRoomPrivate_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(chat_room_private_, other->chat_room_private_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CClanChatRooms_SetClanChatRoomPrivate_Request::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CClanChatRooms_SetClanChatRoomPrivate_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClanChatRooms_SetClanChatRoomPrivate_Response::kChatRoomPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClanChatRooms_SetClanChatRoomPrivate_Response::CClanChatRooms_SetClanChatRoomPrivate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_SetClanChatRoomPrivate_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClanChatRooms_SetClanChatRoomPrivate_Response)
}
CClanChatRooms_SetClanChatRoomPrivate_Response::CClanChatRooms_SetClanChatRoomPrivate_Response(const CClanChatRooms_SetClanChatRoomPrivate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_room_private_ = from.chat_room_private_;
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_SetClanChatRoomPrivate_Response)
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::SharedCtor() {
  chat_room_private_ = false;
}

CClanChatRooms_SetClanChatRoomPrivate_Response::~CClanChatRooms_SetClanChatRoomPrivate_Response() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_SetClanChatRoomPrivate_Response)
  SharedDtor();
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::SharedDtor() {
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CClanChatRooms_SetClanChatRoomPrivate_Response::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClanChatRooms_SetClanChatRoomPrivate_Response& CClanChatRooms_SetClanChatRoomPrivate_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CClanChatRooms_SetClanChatRoomPrivate_Response.base);
  return *internal_default_instance();
}


void CClanChatRooms_SetClanChatRoomPrivate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_private_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClanChatRooms_SetClanChatRoomPrivate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool chat_room_private = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_room_private();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_room_private_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClanChatRooms_SetClanChatRoomPrivate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClanChatRooms_SetClanChatRoomPrivate_Response)
  return false;
#undef DO_
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool chat_room_private = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->chat_room_private(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClanChatRooms_SetClanChatRoomPrivate_Response)
}

::google::protobuf::uint8* CClanChatRooms_SetClanChatRoomPrivate_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool chat_room_private = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->chat_room_private(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_SetClanChatRoomPrivate_Response)
  return target;
}

size_t CClanChatRooms_SetClanChatRoomPrivate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool chat_room_private = 1;
  if (has_chat_room_private()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CClanChatRooms_SetClanChatRoomPrivate_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClanChatRooms_SetClanChatRoomPrivate_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClanChatRooms_SetClanChatRoomPrivate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClanChatRooms_SetClanChatRoomPrivate_Response)
    MergeFrom(*source);
  }
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::MergeFrom(const CClanChatRooms_SetClanChatRoomPrivate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chat_room_private()) {
    set_chat_room_private(from.chat_room_private());
  }
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::CopyFrom(const CClanChatRooms_SetClanChatRoomPrivate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_SetClanChatRoomPrivate_Response::IsInitialized() const {
  return true;
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::Swap(CClanChatRooms_SetClanChatRoomPrivate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClanChatRooms_SetClanChatRoomPrivate_Response::InternalSwap(CClanChatRooms_SetClanChatRoomPrivate_Response* other) {
  using std::swap;
  swap(chat_room_private_, other->chat_room_private_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CClanChatRooms_SetClanChatRoomPrivate_Response::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatMentions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatMentions::kMentionAllFieldNumber;
const int CChatMentions::kMentionHereFieldNumber;
const int CChatMentions::kMentionAccountidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatMentions::CChatMentions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatMentions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatMentions)
}
CChatMentions::CChatMentions(const CChatMentions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mention_accountids_(from.mention_accountids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mention_all_, &from.mention_all_,
    static_cast<size_t>(reinterpret_cast<char*>(&mention_here_) -
    reinterpret_cast<char*>(&mention_all_)) + sizeof(mention_here_));
  // @@protoc_insertion_point(copy_constructor:CChatMentions)
}

void CChatMentions::SharedCtor() {
  ::memset(&mention_all_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mention_here_) -
      reinterpret_cast<char*>(&mention_all_)) + sizeof(mention_here_));
}

CChatMentions::~CChatMentions() {
  // @@protoc_insertion_point(destructor:CChatMentions)
  SharedDtor();
}

void CChatMentions::SharedDtor() {
}

void CChatMentions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatMentions::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatMentions& CChatMentions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatMentions.base);
  return *internal_default_instance();
}


void CChatMentions::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatMentions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mention_accountids_.Clear();
  ::memset(&mention_all_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mention_here_) -
      reinterpret_cast<char*>(&mention_all_)) + sizeof(mention_here_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatMentions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatMentions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool mention_all = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mention_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mention_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mention_here = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mention_here();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mention_here_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mention_accountids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_mention_accountids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mention_accountids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatMentions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatMentions)
  return false;
#undef DO_
}

void CChatMentions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatMentions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mention_all = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->mention_all(), output);
  }

  // optional bool mention_here = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mention_here(), output);
  }

  // repeated uint32 mention_accountids = 3;
  for (int i = 0, n = this->mention_accountids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->mention_accountids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatMentions)
}

::google::protobuf::uint8* CChatMentions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatMentions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mention_all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->mention_all(), target);
  }

  // optional bool mention_here = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mention_here(), target);
  }

  // repeated uint32 mention_accountids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->mention_accountids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatMentions)
  return target;
}

size_t CChatMentions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatMentions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 mention_accountids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mention_accountids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mention_accountids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool mention_all = 1;
    if (has_mention_all()) {
      total_size += 1 + 1;
    }

    // optional bool mention_here = 2;
    if (has_mention_here()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatMentions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatMentions)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatMentions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatMentions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatMentions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatMentions)
    MergeFrom(*source);
  }
}

void CChatMentions::MergeFrom(const CChatMentions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatMentions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mention_accountids_.MergeFrom(from.mention_accountids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mention_all_ = from.mention_all_;
    }
    if (cached_has_bits & 0x00000002u) {
      mention_here_ = from.mention_here_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatMentions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatMentions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatMentions::CopyFrom(const CChatMentions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatMentions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatMentions::IsInitialized() const {
  return true;
}

void CChatMentions::Swap(CChatMentions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatMentions::InternalSwap(CChatMentions* other) {
  using std::swap;
  mention_accountids_.InternalSwap(&other->mention_accountids_);
  swap(mention_all_, other->mention_all_);
  swap(mention_here_, other->mention_here_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatMentions::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_IncomingChatMessage_Notification::InitAsDefaultInstance() {
  ::_CChatRoom_IncomingChatMessage_Notification_default_instance_._instance.get_mutable()->mentions_ = const_cast< ::CChatMentions*>(
      ::CChatMentions::internal_default_instance());
  ::_CChatRoom_IncomingChatMessage_Notification_default_instance_._instance.get_mutable()->server_message_ = const_cast< ::ServerMessage*>(
      ::ServerMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_IncomingChatMessage_Notification::kChatGroupIdFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kChatIdFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kSteamidSenderFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kMessageFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kTimestampFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kMentionsFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kOrdinalFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kServerMessageFieldNumber;
const int CChatRoom_IncomingChatMessage_Notification::kMessageNoBbcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_IncomingChatMessage_Notification::CChatRoom_IncomingChatMessage_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_IncomingChatMessage_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_IncomingChatMessage_Notification)
}
CChatRoom_IncomingChatMessage_Notification::CChatRoom_IncomingChatMessage_Notification(const CChatRoom_IncomingChatMessage_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  message_no_bbcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_no_bbcode()) {
    message_no_bbcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_no_bbcode_);
  }
  if (from.has_mentions()) {
    mentions_ = new ::CChatMentions(*from.mentions_);
  } else {
    mentions_ = NULL;
  }
  if (from.has_server_message()) {
    server_message_ = new ::ServerMessage(*from.server_message_);
  } else {
    server_message_ = NULL;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_IncomingChatMessage_Notification)
}

void CChatRoom_IncomingChatMessage_Notification::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_no_bbcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mentions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordinal_) -
      reinterpret_cast<char*>(&mentions_)) + sizeof(ordinal_));
}

CChatRoom_IncomingChatMessage_Notification::~CChatRoom_IncomingChatMessage_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_IncomingChatMessage_Notification)
  SharedDtor();
}

void CChatRoom_IncomingChatMessage_Notification::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_no_bbcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mentions_;
  if (this != internal_default_instance()) delete server_message_;
}

void CChatRoom_IncomingChatMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_IncomingChatMessage_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_IncomingChatMessage_Notification& CChatRoom_IncomingChatMessage_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_IncomingChatMessage_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_IncomingChatMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_IncomingChatMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_no_bbcode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mentions_ != NULL);
      mentions_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(server_message_ != NULL);
      server_message_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
  }
  ordinal_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_IncomingChatMessage_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_IncomingChatMessage_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steamid_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_IncomingChatMessage_Notification.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatMentions mentions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mentions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ServerMessage server_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_no_bbcode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_no_bbcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_no_bbcode().data(), static_cast<int>(this->message_no_bbcode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CChatRoom_IncomingChatMessage_Notification.message_no_bbcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_IncomingChatMessage_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_IncomingChatMessage_Notification)
  return false;
#undef DO_
}

void CChatRoom_IncomingChatMessage_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_IncomingChatMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // optional fixed64 steamid_sender = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid_sender(), output);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional .CChatMentions mentions = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_mentions(), output);
  }

  // optional uint32 ordinal = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ordinal(), output);
  }

  // optional .ServerMessage server_message = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_server_message(), output);
  }

  // optional string message_no_bbcode = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_no_bbcode().data(), static_cast<int>(this->message_no_bbcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.message_no_bbcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->message_no_bbcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_IncomingChatMessage_Notification)
}

::google::protobuf::uint8* CChatRoom_IncomingChatMessage_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_IncomingChatMessage_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // optional fixed64 steamid_sender = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid_sender(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional .CChatMentions mentions = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_mentions(), deterministic, target);
  }

  // optional uint32 ordinal = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ordinal(), target);
  }

  // optional .ServerMessage server_message = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_server_message(), deterministic, target);
  }

  // optional string message_no_bbcode = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_no_bbcode().data(), static_cast<int>(this->message_no_bbcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.message_no_bbcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->message_no_bbcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_IncomingChatMessage_Notification)
  return target;
}

size_t CChatRoom_IncomingChatMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_IncomingChatMessage_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string message_no_bbcode = 9;
    if (has_message_no_bbcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_no_bbcode());
    }

    // optional .CChatMentions mentions = 6;
    if (has_mentions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mentions_);
    }

    // optional .ServerMessage server_message = 8;
    if (has_server_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_);
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional fixed64 steamid_sender = 3;
    if (has_steamid_sender()) {
      total_size += 1 + 8;
    }

    // optional uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  // optional uint32 ordinal = 7;
  if (has_ordinal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ordinal());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_IncomingChatMessage_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_IncomingChatMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_IncomingChatMessage_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_IncomingChatMessage_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_IncomingChatMessage_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_IncomingChatMessage_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_IncomingChatMessage_Notification::MergeFrom(const CChatRoom_IncomingChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_IncomingChatMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_no_bbcode();
      message_no_bbcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_no_bbcode_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mentions()->::CChatMentions::MergeFrom(from.mentions());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_server_message()->::ServerMessage::MergeFrom(from.server_message());
    }
    if (cached_has_bits & 0x00000010u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_sender_ = from.steamid_sender_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_ordinal(from.ordinal());
  }
}

void CChatRoom_IncomingChatMessage_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_IncomingChatMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_IncomingChatMessage_Notification::CopyFrom(const CChatRoom_IncomingChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_IncomingChatMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_IncomingChatMessage_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_IncomingChatMessage_Notification::Swap(CChatRoom_IncomingChatMessage_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_IncomingChatMessage_Notification::InternalSwap(CChatRoom_IncomingChatMessage_Notification* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_no_bbcode_.Swap(&other->message_no_bbcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mentions_, other->mentions_);
  swap(server_message_, other->server_message_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(steamid_sender_, other->steamid_sender_);
  swap(timestamp_, other->timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_IncomingChatMessage_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ChatMessageModified_Notification_ChatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ChatMessageModified_Notification_ChatMessage::kServerTimestampFieldNumber;
const int CChatRoom_ChatMessageModified_Notification_ChatMessage::kOrdinalFieldNumber;
const int CChatRoom_ChatMessageModified_Notification_ChatMessage::kDeletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ChatMessageModified_Notification_ChatMessage::CChatRoom_ChatMessageModified_Notification_ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatMessageModified_Notification_ChatMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ChatMessageModified_Notification.ChatMessage)
}
CChatRoom_ChatMessageModified_Notification_ChatMessage::CChatRoom_ChatMessageModified_Notification_ChatMessage(const CChatRoom_ChatMessageModified_Notification_ChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatMessageModified_Notification.ChatMessage)
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::SharedCtor() {
  ::memset(&server_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_) -
      reinterpret_cast<char*>(&server_timestamp_)) + sizeof(deleted_));
}

CChatRoom_ChatMessageModified_Notification_ChatMessage::~CChatRoom_ChatMessageModified_Notification_ChatMessage() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  SharedDtor();
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::SharedDtor() {
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ChatMessageModified_Notification_ChatMessage::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ChatMessageModified_Notification_ChatMessage& CChatRoom_ChatMessageModified_Notification_ChatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatMessageModified_Notification_ChatMessage.base);
  return *internal_default_instance();
}


void CChatRoom_ChatMessageModified_Notification_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ChatMessageModified_Notification_ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deleted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_deleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  return false;
#undef DO_
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_timestamp(), output);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordinal(), output);
  }

  // optional bool deleted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deleted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ChatMessageModified_Notification.ChatMessage)
}

::google::protobuf::uint8* CChatRoom_ChatMessageModified_Notification_ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_timestamp(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordinal(), target);
  }

  // optional bool deleted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deleted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  return target;
}

size_t CChatRoom_ChatMessageModified_Notification_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 server_timestamp = 1;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_timestamp());
    }

    // optional uint32 ordinal = 2;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

    // optional bool deleted = 3;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ChatMessageModified_Notification_ChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ChatMessageModified_Notification_ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ChatMessageModified_Notification.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ChatMessageModified_Notification.ChatMessage)
    MergeFrom(*source);
  }
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::MergeFrom(const CChatRoom_ChatMessageModified_Notification_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000004u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::CopyFrom(const CChatRoom_ChatMessageModified_Notification_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatMessageModified_Notification_ChatMessage::IsInitialized() const {
  return true;
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::Swap(CChatRoom_ChatMessageModified_Notification_ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ChatMessageModified_Notification_ChatMessage::InternalSwap(CChatRoom_ChatMessageModified_Notification_ChatMessage* other) {
  using std::swap;
  swap(server_timestamp_, other->server_timestamp_);
  swap(ordinal_, other->ordinal_);
  swap(deleted_, other->deleted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ChatMessageModified_Notification_ChatMessage::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ChatMessageModified_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ChatMessageModified_Notification::kChatGroupIdFieldNumber;
const int CChatRoom_ChatMessageModified_Notification::kChatIdFieldNumber;
const int CChatRoom_ChatMessageModified_Notification::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ChatMessageModified_Notification::CChatRoom_ChatMessageModified_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatMessageModified_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ChatMessageModified_Notification)
}
CChatRoom_ChatMessageModified_Notification::CChatRoom_ChatMessageModified_Notification(const CChatRoom_ChatMessageModified_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatMessageModified_Notification)
}

void CChatRoom_ChatMessageModified_Notification::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_ChatMessageModified_Notification::~CChatRoom_ChatMessageModified_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatMessageModified_Notification)
  SharedDtor();
}

void CChatRoom_ChatMessageModified_Notification::SharedDtor() {
}

void CChatRoom_ChatMessageModified_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ChatMessageModified_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ChatMessageModified_Notification& CChatRoom_ChatMessageModified_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatMessageModified_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_ChatMessageModified_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatMessageModified_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ChatMessageModified_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ChatMessageModified_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ChatMessageModified_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ChatMessageModified_Notification)
  return false;
#undef DO_
}

void CChatRoom_ChatMessageModified_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ChatMessageModified_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
  }

  // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ChatMessageModified_Notification)
}

::google::protobuf::uint8* CChatRoom_ChatMessageModified_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatMessageModified_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_id(), target);
  }

  // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->messages(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatMessageModified_Notification)
  return target;
}

size_t CChatRoom_ChatMessageModified_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatMessageModified_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ChatMessageModified_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ChatMessageModified_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ChatMessageModified_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ChatMessageModified_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ChatMessageModified_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ChatMessageModified_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_ChatMessageModified_Notification::MergeFrom(const CChatRoom_ChatMessageModified_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatMessageModified_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_ChatMessageModified_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ChatMessageModified_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ChatMessageModified_Notification::CopyFrom(const CChatRoom_ChatMessageModified_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatMessageModified_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatMessageModified_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_ChatMessageModified_Notification::Swap(CChatRoom_ChatMessageModified_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ChatMessageModified_Notification::InternalSwap(CChatRoom_ChatMessageModified_Notification* other) {
  using std::swap;
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(chat_group_id_, other->chat_group_id_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ChatMessageModified_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_MemberStateChange_Notification::InitAsDefaultInstance() {
  ::_CChatRoom_MemberStateChange_Notification_default_instance_._instance.get_mutable()->member_ = const_cast< ::CChatRoomMember*>(
      ::CChatRoomMember::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_MemberStateChange_Notification::kChatGroupIdFieldNumber;
const int CChatRoom_MemberStateChange_Notification::kMemberFieldNumber;
const int CChatRoom_MemberStateChange_Notification::kChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_MemberStateChange_Notification::CChatRoom_MemberStateChange_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_MemberStateChange_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_MemberStateChange_Notification)
}
CChatRoom_MemberStateChange_Notification::CChatRoom_MemberStateChange_Notification(const CChatRoom_MemberStateChange_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_member()) {
    member_ = new ::CChatRoomMember(*from.member_);
  } else {
    member_ = NULL;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(change_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MemberStateChange_Notification)
}

void CChatRoom_MemberStateChange_Notification::SharedCtor() {
  ::memset(&member_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_) -
      reinterpret_cast<char*>(&member_)) + sizeof(change_));
}

CChatRoom_MemberStateChange_Notification::~CChatRoom_MemberStateChange_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_MemberStateChange_Notification)
  SharedDtor();
}

void CChatRoom_MemberStateChange_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void CChatRoom_MemberStateChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_MemberStateChange_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_MemberStateChange_Notification& CChatRoom_MemberStateChange_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_MemberStateChange_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_MemberStateChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_MemberStateChange_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_ != NULL);
    member_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_MemberStateChange_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_MemberStateChange_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoomMember member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomMemberStateChange_IsValid(value)) {
            set_change(static_cast< ::EChatRoomMemberStateChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_MemberStateChange_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_MemberStateChange_Notification)
  return false;
#undef DO_
}

void CChatRoom_MemberStateChange_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_MemberStateChange_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional .CChatRoomMember member = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_member(), output);
  }

  // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_MemberStateChange_Notification)
}

::google::protobuf::uint8* CChatRoom_MemberStateChange_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_MemberStateChange_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional .CChatRoomMember member = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_member(), deterministic, target);
  }

  // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_MemberStateChange_Notification)
  return target;
}

size_t CChatRoom_MemberStateChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_MemberStateChange_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .CChatRoomMember member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *member_);
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_MemberStateChange_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_MemberStateChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_MemberStateChange_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_MemberStateChange_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_MemberStateChange_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_MemberStateChange_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_MemberStateChange_Notification::MergeFrom(const CChatRoom_MemberStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_MemberStateChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_member()->::CChatRoomMember::MergeFrom(from.member());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      change_ = from.change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_MemberStateChange_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_MemberStateChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_MemberStateChange_Notification::CopyFrom(const CChatRoom_MemberStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_MemberStateChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_MemberStateChange_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_MemberStateChange_Notification::Swap(CChatRoom_MemberStateChange_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_MemberStateChange_Notification::InternalSwap(CChatRoom_MemberStateChange_Notification* other) {
  using std::swap;
  swap(member_, other->member_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(change_, other->change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_MemberStateChange_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ChatRoomHeaderState_Notification::InitAsDefaultInstance() {
  ::_CChatRoom_ChatRoomHeaderState_Notification_default_instance_._instance.get_mutable()->header_state_ = const_cast< ::CChatRoomGroupHeaderState*>(
      ::CChatRoomGroupHeaderState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ChatRoomHeaderState_Notification::kHeaderStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ChatRoomHeaderState_Notification::CChatRoom_ChatRoomHeaderState_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatRoomHeaderState_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ChatRoomHeaderState_Notification)
}
CChatRoom_ChatRoomHeaderState_Notification::CChatRoom_ChatRoomHeaderState_Notification(const CChatRoom_ChatRoomHeaderState_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_state()) {
    header_state_ = new ::CChatRoomGroupHeaderState(*from.header_state_);
  } else {
    header_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatRoomHeaderState_Notification)
}

void CChatRoom_ChatRoomHeaderState_Notification::SharedCtor() {
  header_state_ = NULL;
}

CChatRoom_ChatRoomHeaderState_Notification::~CChatRoom_ChatRoomHeaderState_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatRoomHeaderState_Notification)
  SharedDtor();
}

void CChatRoom_ChatRoomHeaderState_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete header_state_;
}

void CChatRoom_ChatRoomHeaderState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ChatRoomHeaderState_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ChatRoomHeaderState_Notification& CChatRoom_ChatRoomHeaderState_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatRoomHeaderState_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_ChatRoomHeaderState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatRoomHeaderState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_state_ != NULL);
    header_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ChatRoomHeaderState_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ChatRoomHeaderState_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CChatRoomGroupHeaderState header_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ChatRoomHeaderState_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ChatRoomHeaderState_Notification)
  return false;
#undef DO_
}

void CChatRoom_ChatRoomHeaderState_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ChatRoomHeaderState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ChatRoomHeaderState_Notification)
}

::google::protobuf::uint8* CChatRoom_ChatRoomHeaderState_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatRoomHeaderState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatRoomHeaderState_Notification)
  return target;
}

size_t CChatRoom_ChatRoomHeaderState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatRoomHeaderState_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (has_header_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ChatRoomHeaderState_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ChatRoomHeaderState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ChatRoomHeaderState_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ChatRoomHeaderState_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ChatRoomHeaderState_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ChatRoomHeaderState_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_ChatRoomHeaderState_Notification::MergeFrom(const CChatRoom_ChatRoomHeaderState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatRoomHeaderState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header_state()) {
    mutable_header_state()->::CChatRoomGroupHeaderState::MergeFrom(from.header_state());
  }
}

void CChatRoom_ChatRoomHeaderState_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ChatRoomHeaderState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ChatRoomHeaderState_Notification::CopyFrom(const CChatRoom_ChatRoomHeaderState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatRoomHeaderState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatRoomHeaderState_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_ChatRoomHeaderState_Notification::Swap(CChatRoom_ChatRoomHeaderState_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ChatRoomHeaderState_Notification::InternalSwap(CChatRoom_ChatRoomHeaderState_Notification* other) {
  using std::swap;
  swap(header_state_, other->header_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ChatRoomHeaderState_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_ChatRoomGroupRoomsChange_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_ChatRoomGroupRoomsChange_Notification::kChatGroupIdFieldNumber;
const int CChatRoom_ChatRoomGroupRoomsChange_Notification::kDefaultChatIdFieldNumber;
const int CChatRoom_ChatRoomGroupRoomsChange_Notification::kChatRoomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_ChatRoomGroupRoomsChange_Notification::CChatRoom_ChatRoomGroupRoomsChange_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatRoomGroupRoomsChange_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_ChatRoomGroupRoomsChange_Notification)
}
CChatRoom_ChatRoomGroupRoomsChange_Notification::CChatRoom_ChatRoomGroupRoomsChange_Notification(const CChatRoom_ChatRoomGroupRoomsChange_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chat_rooms_(from.chat_rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatRoomGroupRoomsChange_Notification)
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_chat_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
}

CChatRoom_ChatRoomGroupRoomsChange_Notification::~CChatRoom_ChatRoomGroupRoomsChange_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  SharedDtor();
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::SharedDtor() {
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_ChatRoomGroupRoomsChange_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_ChatRoomGroupRoomsChange_Notification& CChatRoom_ChatRoomGroupRoomsChange_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_ChatRoomGroupRoomsChange_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_ChatRoomGroupRoomsChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_rooms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_ChatRoomGroupRoomsChange_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 default_chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_default_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CChatRoomState chat_rooms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  return false;
#undef DO_
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional uint64 default_chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->default_chat_id(), output);
  }

  // repeated .CChatRoomState chat_rooms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_rooms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->chat_rooms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_ChatRoomGroupRoomsChange_Notification)
}

::google::protobuf::uint8* CChatRoom_ChatRoomGroupRoomsChange_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional uint64 default_chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->default_chat_id(), target);
  }

  // repeated .CChatRoomState chat_rooms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_rooms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->chat_rooms(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  return target;
}

size_t CChatRoom_ChatRoomGroupRoomsChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CChatRoomState chat_rooms = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_rooms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_rooms(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint64 default_chat_id = 2;
    if (has_default_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_chat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_ChatRoomGroupRoomsChange_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_ChatRoomGroupRoomsChange_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_ChatRoomGroupRoomsChange_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_ChatRoomGroupRoomsChange_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::MergeFrom(const CChatRoom_ChatRoomGroupRoomsChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chat_rooms_.MergeFrom(from.chat_rooms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_chat_id_ = from.default_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::CopyFrom(const CChatRoom_ChatRoomGroupRoomsChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatRoomGroupRoomsChange_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::Swap(CChatRoom_ChatRoomGroupRoomsChange_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_ChatRoomGroupRoomsChange_Notification::InternalSwap(CChatRoom_ChatRoomGroupRoomsChange_Notification* other) {
  using std::swap;
  CastToBase(&chat_rooms_)->InternalSwap(CastToBase(&other->chat_rooms_));
  swap(chat_group_id_, other->chat_group_id_);
  swap(default_chat_id_, other->default_chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_ChatRoomGroupRoomsChange_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::kChatIdFieldNumber;
const int CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
}
CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification(const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_group_id_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_group_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_group_id_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_group_id_));
}

CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::~CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  SharedDtor();
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SharedDtor() {
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification.base);
  return *internal_default_instance();
}


void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_group_id_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  return false;
#undef DO_
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
}

::google::protobuf::uint8* CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_id(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  return target;
}

size_t CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint64 chat_group_id = 2;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
    MergeFrom(*source);
  }
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::MergeFrom(const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CopyFrom(const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::Swap(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::InternalSwap(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* other) {
  using std::swap;
  swap(chat_id_, other->chat_id_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::InitAsDefaultInstance() {
  ::_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_._instance.get_mutable()->user_chat_group_state_ = const_cast< ::CUserChatRoomGroupState*>(
      ::CUserChatRoomGroupState::internal_default_instance());
  ::_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_._instance.get_mutable()->group_summary_ = const_cast< ::CChatRoom_GetChatRoomGroupSummary_Response*>(
      ::CChatRoom_GetChatRoomGroupSummary_Response::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::kChatGroupIdFieldNumber;
const int ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::kUserChatGroupStateFieldNumber;
const int ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::kGroupSummaryFieldNumber;
const int ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::kUserActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
}
ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_chat_group_state()) {
    user_chat_group_state_ = new ::CUserChatRoomGroupState(*from.user_chat_group_state_);
  } else {
    user_chat_group_state_ = NULL;
  }
  if (from.has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = NULL;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_action_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(user_action_));
  // @@protoc_insertion_point(copy_constructor:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SharedCtor() {
  ::memset(&user_chat_group_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_action_) -
      reinterpret_cast<char*>(&user_chat_group_state_)) + sizeof(user_action_));
}

ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::~ChatRoomClient_NotifyChatGroupUserStateChanged_Notification() {
  // @@protoc_insertion_point(destructor:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  SharedDtor();
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete user_chat_group_state_;
  if (this != internal_default_instance()) delete group_summary_;
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.base);
  return *internal_default_instance();
}


void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_chat_group_state_ != NULL);
      user_chat_group_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_summary_ != NULL);
      group_summary_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_action_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(user_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chat_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_chat_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CUserChatRoomGroupState user_chat_group_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_chat_group_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EChatRoomMemberStateChange_IsValid(value)) {
            set_user_action(static_cast< ::EChatRoomMemberStateChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  return false;
#undef DO_
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_group_id(), output);
  }

  // optional .CUserChatRoomGroupState user_chat_group_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user_chat_group_state(), output);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_group_summary(), output);
  }

  // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->user_action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
}

::google::protobuf::uint8* ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chat_group_id(), target);
  }

  // optional .CUserChatRoomGroupState user_chat_group_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user_chat_group_state(), deterministic, target);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_group_summary(), deterministic, target);
  }

  // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->user_action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  return target;
}

size_t ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .CUserChatRoomGroupState user_chat_group_state = 2;
    if (has_user_chat_group_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_chat_group_state_);
    }

    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
    if (has_group_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

    // optional uint64 chat_group_id = 1;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
    if (has_user_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
    MergeFrom(*source);
  }
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::MergeFrom(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_chat_group_state()->::CUserChatRoomGroupState::MergeFrom(from.user_chat_group_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from.group_summary());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_action_ = from.user_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::CopyFrom(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::IsInitialized() const {
  return true;
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::Swap(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::InternalSwap(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* other) {
  using std::swap;
  swap(user_chat_group_state_, other->user_chat_group_state_);
  swap(group_summary_, other->group_summary_);
  swap(chat_group_id_, other->chat_group_id_);
  swap(user_action_, other->user_action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kNotificationsShowIngameFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kNotificationsShowOnlineFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kNotificationsShowMessageFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kNotificationsEventsAndAnnouncementsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kSoundsPlayIngameFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kSoundsPlayOnlineFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kSoundsPlayMessageFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kSoundsEventsAndAnnouncementsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kAlwaysNewChatWindowFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kForceAlphabeticFriendSortingFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kChatFlashModeFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kRememberOpenChatsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kCompactQuickAccessFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kCompactFriendsListFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kNotificationsShowChatRoomNotificationFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kSoundsPlayChatRoomNotificationFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kHideOfflineFriendsInTagGroupsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kHideCategorizedFriendsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kCategorizeInGameFriendsByGameFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kChatFontSizeFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kUse24HourClockFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kDoNotDisturbModeFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kDisableEmbedInliningFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Settings::kSignIntoFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_ClientUsabilityMetrics_Notification_Settings::CChatUsability_ClientUsabilityMetrics_Notification_Settings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Settings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
}
CChatUsability_ClientUsabilityMetrics_Notification_Settings::CChatUsability_ClientUsabilityMetrics_Notification_Settings(const CChatUsability_ClientUsabilityMetrics_Notification_Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&notifications_show_ingame_, &from.notifications_show_ingame_,
    static_cast<size_t>(reinterpret_cast<char*>(&sign_into_friends_) -
    reinterpret_cast<char*>(&notifications_show_ingame_)) + sizeof(sign_into_friends_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SharedCtor() {
  ::memset(&notifications_show_ingame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sign_into_friends_) -
      reinterpret_cast<char*>(&notifications_show_ingame_)) + sizeof(sign_into_friends_));
}

CChatUsability_ClientUsabilityMetrics_Notification_Settings::~CChatUsability_ClientUsabilityMetrics_Notification_Settings() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  SharedDtor();
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SharedDtor() {
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_ClientUsabilityMetrics_Notification_Settings::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_ClientUsabilityMetrics_Notification_Settings& CChatUsability_ClientUsabilityMetrics_Notification_Settings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Settings.base);
  return *internal_default_instance();
}


void CChatUsability_ClientUsabilityMetrics_Notification_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&notifications_show_ingame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_events_and_announcements_) -
        reinterpret_cast<char*>(&notifications_show_ingame_)) + sizeof(sounds_events_and_announcements_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&chat_flash_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_play_chat_room_notification_) -
        reinterpret_cast<char*>(&chat_flash_mode_)) + sizeof(sounds_play_chat_room_notification_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&hide_offline_friends_in_tag_groups_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sign_into_friends_) -
        reinterpret_cast<char*>(&hide_offline_friends_in_tag_groups_)) + sizeof(sign_into_friends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool notifications_show_ingame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_notifications_show_ingame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_show_ingame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notifications_show_online = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_notifications_show_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_show_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notifications_show_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_notifications_show_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_show_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notifications_events_and_announcements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_notifications_events_and_announcements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_events_and_announcements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sounds_play_ingame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sounds_play_ingame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sounds_play_ingame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sounds_play_online = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sounds_play_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sounds_play_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sounds_play_message = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sounds_play_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sounds_play_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sounds_events_and_announcements = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sounds_events_and_announcements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sounds_events_and_announcements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool always_new_chat_window = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_always_new_chat_window();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_new_chat_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_alphabetic_friend_sorting = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_force_alphabetic_friend_sorting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_alphabetic_friend_sorting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_flash_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_chat_flash_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_flash_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remember_open_chats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_remember_open_chats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remember_open_chats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compact_quick_access = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_compact_quick_access();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compact_quick_access_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compact_friends_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_compact_friends_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compact_friends_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notifications_show_chat_room_notification = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_notifications_show_chat_room_notification();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_show_chat_room_notification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sounds_play_chat_room_notification = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_sounds_play_chat_room_notification();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sounds_play_chat_room_notification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_offline_friends_in_tag_groups = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_hide_offline_friends_in_tag_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_offline_friends_in_tag_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_categorized_friends = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_hide_categorized_friends();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_categorized_friends_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool categorize_in_game_friends_by_game = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_categorize_in_game_friends_by_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &categorize_in_game_friends_by_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_font_size = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_chat_font_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use24hour_clock = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_use24hour_clock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use24hour_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool do_not_disturb_mode = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_do_not_disturb_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_not_disturb_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_embed_inlining = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_disable_embed_inlining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_embed_inlining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sign_into_friends = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_sign_into_friends();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sign_into_friends_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  return false;
#undef DO_
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool notifications_show_ingame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->notifications_show_ingame(), output);
  }

  // optional bool notifications_show_online = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->notifications_show_online(), output);
  }

  // optional bool notifications_show_message = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->notifications_show_message(), output);
  }

  // optional bool notifications_events_and_announcements = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notifications_events_and_announcements(), output);
  }

  // optional bool sounds_play_ingame = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sounds_play_ingame(), output);
  }

  // optional bool sounds_play_online = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sounds_play_online(), output);
  }

  // optional bool sounds_play_message = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sounds_play_message(), output);
  }

  // optional bool sounds_events_and_announcements = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sounds_events_and_announcements(), output);
  }

  // optional bool always_new_chat_window = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->always_new_chat_window(), output);
  }

  // optional bool force_alphabetic_friend_sorting = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->force_alphabetic_friend_sorting(), output);
  }

  // optional int32 chat_flash_mode = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->chat_flash_mode(), output);
  }

  // optional bool remember_open_chats = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->remember_open_chats(), output);
  }

  // optional bool compact_quick_access = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->compact_quick_access(), output);
  }

  // optional bool compact_friends_list = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->compact_friends_list(), output);
  }

  // optional bool notifications_show_chat_room_notification = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->notifications_show_chat_room_notification(), output);
  }

  // optional bool sounds_play_chat_room_notification = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->sounds_play_chat_room_notification(), output);
  }

  // optional bool hide_offline_friends_in_tag_groups = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->hide_offline_friends_in_tag_groups(), output);
  }

  // optional bool hide_categorized_friends = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->hide_categorized_friends(), output);
  }

  // optional bool categorize_in_game_friends_by_game = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->categorize_in_game_friends_by_game(), output);
  }

  // optional int32 chat_font_size = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->chat_font_size(), output);
  }

  // optional bool use24hour_clock = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->use24hour_clock(), output);
  }

  // optional bool do_not_disturb_mode = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->do_not_disturb_mode(), output);
  }

  // optional bool disable_embed_inlining = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->disable_embed_inlining(), output);
  }

  // optional bool sign_into_friends = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->sign_into_friends(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
}

::google::protobuf::uint8* CChatUsability_ClientUsabilityMetrics_Notification_Settings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool notifications_show_ingame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->notifications_show_ingame(), target);
  }

  // optional bool notifications_show_online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->notifications_show_online(), target);
  }

  // optional bool notifications_show_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->notifications_show_message(), target);
  }

  // optional bool notifications_events_and_announcements = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notifications_events_and_announcements(), target);
  }

  // optional bool sounds_play_ingame = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sounds_play_ingame(), target);
  }

  // optional bool sounds_play_online = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sounds_play_online(), target);
  }

  // optional bool sounds_play_message = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sounds_play_message(), target);
  }

  // optional bool sounds_events_and_announcements = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->sounds_events_and_announcements(), target);
  }

  // optional bool always_new_chat_window = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->always_new_chat_window(), target);
  }

  // optional bool force_alphabetic_friend_sorting = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->force_alphabetic_friend_sorting(), target);
  }

  // optional int32 chat_flash_mode = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->chat_flash_mode(), target);
  }

  // optional bool remember_open_chats = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->remember_open_chats(), target);
  }

  // optional bool compact_quick_access = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->compact_quick_access(), target);
  }

  // optional bool compact_friends_list = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->compact_friends_list(), target);
  }

  // optional bool notifications_show_chat_room_notification = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->notifications_show_chat_room_notification(), target);
  }

  // optional bool sounds_play_chat_room_notification = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->sounds_play_chat_room_notification(), target);
  }

  // optional bool hide_offline_friends_in_tag_groups = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->hide_offline_friends_in_tag_groups(), target);
  }

  // optional bool hide_categorized_friends = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->hide_categorized_friends(), target);
  }

  // optional bool categorize_in_game_friends_by_game = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->categorize_in_game_friends_by_game(), target);
  }

  // optional int32 chat_font_size = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->chat_font_size(), target);
  }

  // optional bool use24hour_clock = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->use24hour_clock(), target);
  }

  // optional bool do_not_disturb_mode = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->do_not_disturb_mode(), target);
  }

  // optional bool disable_embed_inlining = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->disable_embed_inlining(), target);
  }

  // optional bool sign_into_friends = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->sign_into_friends(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool notifications_show_ingame = 1;
    if (has_notifications_show_ingame()) {
      total_size += 1 + 1;
    }

    // optional bool notifications_show_online = 2;
    if (has_notifications_show_online()) {
      total_size += 1 + 1;
    }

    // optional bool notifications_show_message = 3;
    if (has_notifications_show_message()) {
      total_size += 1 + 1;
    }

    // optional bool notifications_events_and_announcements = 4;
    if (has_notifications_events_and_announcements()) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_ingame = 5;
    if (has_sounds_play_ingame()) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_online = 6;
    if (has_sounds_play_online()) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_message = 7;
    if (has_sounds_play_message()) {
      total_size += 1 + 1;
    }

    // optional bool sounds_events_and_announcements = 8;
    if (has_sounds_events_and_announcements()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 chat_flash_mode = 11;
    if (has_chat_flash_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_flash_mode());
    }

    // optional bool always_new_chat_window = 9;
    if (has_always_new_chat_window()) {
      total_size += 1 + 1;
    }

    // optional bool force_alphabetic_friend_sorting = 10;
    if (has_force_alphabetic_friend_sorting()) {
      total_size += 1 + 1;
    }

    // optional bool remember_open_chats = 12;
    if (has_remember_open_chats()) {
      total_size += 1 + 1;
    }

    // optional bool compact_quick_access = 13;
    if (has_compact_quick_access()) {
      total_size += 1 + 1;
    }

    // optional bool compact_friends_list = 14;
    if (has_compact_friends_list()) {
      total_size += 1 + 1;
    }

    // optional bool notifications_show_chat_room_notification = 15;
    if (has_notifications_show_chat_room_notification()) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_chat_room_notification = 16;
    if (has_sounds_play_chat_room_notification()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool hide_offline_friends_in_tag_groups = 17;
    if (has_hide_offline_friends_in_tag_groups()) {
      total_size += 2 + 1;
    }

    // optional int32 chat_font_size = 20;
    if (has_chat_font_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_font_size());
    }

    // optional bool hide_categorized_friends = 18;
    if (has_hide_categorized_friends()) {
      total_size += 2 + 1;
    }

    // optional bool categorize_in_game_friends_by_game = 19;
    if (has_categorize_in_game_friends_by_game()) {
      total_size += 2 + 1;
    }

    // optional bool use24hour_clock = 21;
    if (has_use24hour_clock()) {
      total_size += 2 + 1;
    }

    // optional bool do_not_disturb_mode = 22;
    if (has_do_not_disturb_mode()) {
      total_size += 2 + 1;
    }

    // optional bool disable_embed_inlining = 23;
    if (has_disable_embed_inlining()) {
      total_size += 2 + 1;
    }

    // optional bool sign_into_friends = 24;
    if (has_sign_into_friends()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_ClientUsabilityMetrics_Notification_Settings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_ClientUsabilityMetrics_Notification_Settings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
    MergeFrom(*source);
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      notifications_show_ingame_ = from.notifications_show_ingame_;
    }
    if (cached_has_bits & 0x00000002u) {
      notifications_show_online_ = from.notifications_show_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifications_show_message_ = from.notifications_show_message_;
    }
    if (cached_has_bits & 0x00000008u) {
      notifications_events_and_announcements_ = from.notifications_events_and_announcements_;
    }
    if (cached_has_bits & 0x00000010u) {
      sounds_play_ingame_ = from.sounds_play_ingame_;
    }
    if (cached_has_bits & 0x00000020u) {
      sounds_play_online_ = from.sounds_play_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      sounds_play_message_ = from.sounds_play_message_;
    }
    if (cached_has_bits & 0x00000080u) {
      sounds_events_and_announcements_ = from.sounds_events_and_announcements_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      chat_flash_mode_ = from.chat_flash_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      always_new_chat_window_ = from.always_new_chat_window_;
    }
    if (cached_has_bits & 0x00000400u) {
      force_alphabetic_friend_sorting_ = from.force_alphabetic_friend_sorting_;
    }
    if (cached_has_bits & 0x00000800u) {
      remember_open_chats_ = from.remember_open_chats_;
    }
    if (cached_has_bits & 0x00001000u) {
      compact_quick_access_ = from.compact_quick_access_;
    }
    if (cached_has_bits & 0x00002000u) {
      compact_friends_list_ = from.compact_friends_list_;
    }
    if (cached_has_bits & 0x00004000u) {
      notifications_show_chat_room_notification_ = from.notifications_show_chat_room_notification_;
    }
    if (cached_has_bits & 0x00008000u) {
      sounds_play_chat_room_notification_ = from.sounds_play_chat_room_notification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      hide_offline_friends_in_tag_groups_ = from.hide_offline_friends_in_tag_groups_;
    }
    if (cached_has_bits & 0x00020000u) {
      chat_font_size_ = from.chat_font_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      hide_categorized_friends_ = from.hide_categorized_friends_;
    }
    if (cached_has_bits & 0x00080000u) {
      categorize_in_game_friends_by_game_ = from.categorize_in_game_friends_by_game_;
    }
    if (cached_has_bits & 0x00100000u) {
      use24hour_clock_ = from.use24hour_clock_;
    }
    if (cached_has_bits & 0x00200000u) {
      do_not_disturb_mode_ = from.do_not_disturb_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      disable_embed_inlining_ = from.disable_embed_inlining_;
    }
    if (cached_has_bits & 0x00800000u) {
      sign_into_friends_ = from.sign_into_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_Settings::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::Swap(CChatUsability_ClientUsabilityMetrics_Notification_Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_ClientUsabilityMetrics_Notification_Settings::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_Settings* other) {
  using std::swap;
  swap(notifications_show_ingame_, other->notifications_show_ingame_);
  swap(notifications_show_online_, other->notifications_show_online_);
  swap(notifications_show_message_, other->notifications_show_message_);
  swap(notifications_events_and_announcements_, other->notifications_events_and_announcements_);
  swap(sounds_play_ingame_, other->sounds_play_ingame_);
  swap(sounds_play_online_, other->sounds_play_online_);
  swap(sounds_play_message_, other->sounds_play_message_);
  swap(sounds_events_and_announcements_, other->sounds_events_and_announcements_);
  swap(chat_flash_mode_, other->chat_flash_mode_);
  swap(always_new_chat_window_, other->always_new_chat_window_);
  swap(force_alphabetic_friend_sorting_, other->force_alphabetic_friend_sorting_);
  swap(remember_open_chats_, other->remember_open_chats_);
  swap(compact_quick_access_, other->compact_quick_access_);
  swap(compact_friends_list_, other->compact_friends_list_);
  swap(notifications_show_chat_room_notification_, other->notifications_show_chat_room_notification_);
  swap(sounds_play_chat_room_notification_, other->sounds_play_chat_room_notification_);
  swap(hide_offline_friends_in_tag_groups_, other->hide_offline_friends_in_tag_groups_);
  swap(chat_font_size_, other->chat_font_size_);
  swap(hide_categorized_friends_, other->hide_categorized_friends_);
  swap(categorize_in_game_friends_by_game_, other->categorize_in_game_friends_by_game_);
  swap(use24hour_clock_, other->use24hour_clock_);
  swap(do_not_disturb_mode_, other->do_not_disturb_mode_);
  swap(disable_embed_inlining_, other->disable_embed_inlining_);
  swap(sign_into_friends_, other->sign_into_friends_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_ClientUsabilityMetrics_Notification_Settings::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kVoiceInputGainFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kVoiceOutputGainFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kNoiseGateLevelFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kVoiceUseEchoCancellationFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kVoiceUseNoiseCancellationFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kVoiceUseAutoGainControlFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kSelectedNonDefaultMicFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kSelectedNonDefaultOutputFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kPushToTalkEnabledFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kPushToMuteEnabledFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::kPlayPttSoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
}
CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings(const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&voice_input_gain_, &from.voice_input_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_ptt_sounds_) -
    reinterpret_cast<char*>(&voice_input_gain_)) + sizeof(play_ptt_sounds_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SharedCtor() {
  ::memset(&voice_input_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_ptt_sounds_) -
      reinterpret_cast<char*>(&voice_input_gain_)) + sizeof(play_ptt_sounds_));
}

CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::~CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  SharedDtor();
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SharedDtor() {
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings.base);
  return *internal_default_instance();
}


void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&voice_input_gain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_non_default_output_) -
        reinterpret_cast<char*>(&voice_input_gain_)) + sizeof(selected_non_default_output_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&push_to_talk_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&play_ptt_sounds_) -
        reinterpret_cast<char*>(&push_to_talk_enabled_)) + sizeof(play_ptt_sounds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float voice_input_gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_voice_input_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voice_input_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float voice_output_gain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_voice_output_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voice_output_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 noise_gate_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_noise_gate_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noise_gate_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_use_echo_cancellation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_voice_use_echo_cancellation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_use_echo_cancellation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_use_noise_cancellation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_voice_use_noise_cancellation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_use_noise_cancellation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_use_auto_gain_control = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_voice_use_auto_gain_control();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_use_auto_gain_control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selected_non_default_mic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_selected_non_default_mic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_non_default_mic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selected_non_default_output = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_selected_non_default_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_non_default_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool push_to_talk_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_push_to_talk_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_to_talk_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool push_to_mute_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_push_to_mute_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_to_mute_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool play_ptt_sounds = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_play_ptt_sounds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &play_ptt_sounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  return false;
#undef DO_
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float voice_input_gain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->voice_input_gain(), output);
  }

  // optional float voice_output_gain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->voice_output_gain(), output);
  }

  // optional int32 noise_gate_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->noise_gate_level(), output);
  }

  // optional bool voice_use_echo_cancellation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->voice_use_echo_cancellation(), output);
  }

  // optional bool voice_use_noise_cancellation = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->voice_use_noise_cancellation(), output);
  }

  // optional bool voice_use_auto_gain_control = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->voice_use_auto_gain_control(), output);
  }

  // optional bool selected_non_default_mic = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->selected_non_default_mic(), output);
  }

  // optional bool selected_non_default_output = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->selected_non_default_output(), output);
  }

  // optional bool push_to_talk_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->push_to_talk_enabled(), output);
  }

  // optional bool push_to_mute_enabled = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->push_to_mute_enabled(), output);
  }

  // optional bool play_ptt_sounds = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->play_ptt_sounds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
}

::google::protobuf::uint8* CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float voice_input_gain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->voice_input_gain(), target);
  }

  // optional float voice_output_gain = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->voice_output_gain(), target);
  }

  // optional int32 noise_gate_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->noise_gate_level(), target);
  }

  // optional bool voice_use_echo_cancellation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->voice_use_echo_cancellation(), target);
  }

  // optional bool voice_use_noise_cancellation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->voice_use_noise_cancellation(), target);
  }

  // optional bool voice_use_auto_gain_control = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->voice_use_auto_gain_control(), target);
  }

  // optional bool selected_non_default_mic = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->selected_non_default_mic(), target);
  }

  // optional bool selected_non_default_output = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->selected_non_default_output(), target);
  }

  // optional bool push_to_talk_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->push_to_talk_enabled(), target);
  }

  // optional bool push_to_mute_enabled = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->push_to_mute_enabled(), target);
  }

  // optional bool play_ptt_sounds = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->play_ptt_sounds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float voice_input_gain = 1;
    if (has_voice_input_gain()) {
      total_size += 1 + 4;
    }

    // optional float voice_output_gain = 2;
    if (has_voice_output_gain()) {
      total_size += 1 + 4;
    }

    // optional int32 noise_gate_level = 3;
    if (has_noise_gate_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noise_gate_level());
    }

    // optional bool voice_use_echo_cancellation = 4;
    if (has_voice_use_echo_cancellation()) {
      total_size += 1 + 1;
    }

    // optional bool voice_use_noise_cancellation = 5;
    if (has_voice_use_noise_cancellation()) {
      total_size += 1 + 1;
    }

    // optional bool voice_use_auto_gain_control = 6;
    if (has_voice_use_auto_gain_control()) {
      total_size += 1 + 1;
    }

    // optional bool selected_non_default_mic = 7;
    if (has_selected_non_default_mic()) {
      total_size += 1 + 1;
    }

    // optional bool selected_non_default_output = 8;
    if (has_selected_non_default_output()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool push_to_talk_enabled = 9;
    if (has_push_to_talk_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool push_to_mute_enabled = 10;
    if (has_push_to_mute_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool play_ptt_sounds = 11;
    if (has_play_ptt_sounds()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
    MergeFrom(*source);
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      voice_input_gain_ = from.voice_input_gain_;
    }
    if (cached_has_bits & 0x00000002u) {
      voice_output_gain_ = from.voice_output_gain_;
    }
    if (cached_has_bits & 0x00000004u) {
      noise_gate_level_ = from.noise_gate_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      voice_use_echo_cancellation_ = from.voice_use_echo_cancellation_;
    }
    if (cached_has_bits & 0x00000010u) {
      voice_use_noise_cancellation_ = from.voice_use_noise_cancellation_;
    }
    if (cached_has_bits & 0x00000020u) {
      voice_use_auto_gain_control_ = from.voice_use_auto_gain_control_;
    }
    if (cached_has_bits & 0x00000040u) {
      selected_non_default_mic_ = from.selected_non_default_mic_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_non_default_output_ = from.selected_non_default_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      push_to_talk_enabled_ = from.push_to_talk_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      push_to_mute_enabled_ = from.push_to_mute_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      play_ptt_sounds_ = from.play_ptt_sounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::Swap(CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* other) {
  using std::swap;
  swap(voice_input_gain_, other->voice_input_gain_);
  swap(voice_output_gain_, other->voice_output_gain_);
  swap(noise_gate_level_, other->noise_gate_level_);
  swap(voice_use_echo_cancellation_, other->voice_use_echo_cancellation_);
  swap(voice_use_noise_cancellation_, other->voice_use_noise_cancellation_);
  swap(voice_use_auto_gain_control_, other->voice_use_auto_gain_control_);
  swap(selected_non_default_mic_, other->selected_non_default_mic_);
  swap(selected_non_default_output_, other->selected_non_default_output_);
  swap(push_to_talk_enabled_, other->push_to_talk_enabled_);
  swap(push_to_mute_enabled_, other->push_to_mute_enabled_);
  swap(play_ptt_sounds_, other->play_ptt_sounds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::kInGameCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::kOnlineCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::kOfflineCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::kGameGroupsCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::kCategoriesCollapsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
}
CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState(const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_game_collapsed_, &from.in_game_collapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&categories_collapsed_) -
    reinterpret_cast<char*>(&in_game_collapsed_)) + sizeof(categories_collapsed_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SharedCtor() {
  ::memset(&in_game_collapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&categories_collapsed_) -
      reinterpret_cast<char*>(&in_game_collapsed_)) + sizeof(categories_collapsed_));
}

CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::~CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  SharedDtor();
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SharedDtor() {
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState.base);
  return *internal_default_instance();
}


void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&in_game_collapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&categories_collapsed_) -
        reinterpret_cast<char*>(&in_game_collapsed_)) + sizeof(categories_collapsed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool in_game_collapsed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_in_game_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_game_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online_collapsed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_online_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool offline_collapsed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offline_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_groups_collapsed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_game_groups_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_groups_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 categories_collapsed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_categories_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &categories_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  return false;
#undef DO_
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool in_game_collapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->in_game_collapsed(), output);
  }

  // optional bool online_collapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online_collapsed(), output);
  }

  // optional bool offline_collapsed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->offline_collapsed(), output);
  }

  // optional int32 game_groups_collapsed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_groups_collapsed(), output);
  }

  // optional int32 categories_collapsed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->categories_collapsed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
}

::google::protobuf::uint8* CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool in_game_collapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->in_game_collapsed(), target);
  }

  // optional bool online_collapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online_collapsed(), target);
  }

  // optional bool offline_collapsed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->offline_collapsed(), target);
  }

  // optional int32 game_groups_collapsed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_groups_collapsed(), target);
  }

  // optional int32 categories_collapsed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->categories_collapsed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bool in_game_collapsed = 1;
    if (has_in_game_collapsed()) {
      total_size += 1 + 1;
    }

    // optional bool online_collapsed = 2;
    if (has_online_collapsed()) {
      total_size += 1 + 1;
    }

    // optional bool offline_collapsed = 3;
    if (has_offline_collapsed()) {
      total_size += 1 + 1;
    }

    // optional int32 game_groups_collapsed = 4;
    if (has_game_groups_collapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_groups_collapsed());
    }

    // optional int32 categories_collapsed = 5;
    if (has_categories_collapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->categories_collapsed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
    MergeFrom(*source);
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      in_game_collapsed_ = from.in_game_collapsed_;
    }
    if (cached_has_bits & 0x00000002u) {
      online_collapsed_ = from.online_collapsed_;
    }
    if (cached_has_bits & 0x00000004u) {
      offline_collapsed_ = from.offline_collapsed_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_groups_collapsed_ = from.game_groups_collapsed_;
    }
    if (cached_has_bits & 0x00000010u) {
      categories_collapsed_ = from.categories_collapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::Swap(CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* other) {
  using std::swap;
  swap(in_game_collapsed_, other->in_game_collapsed_);
  swap(online_collapsed_, other->online_collapsed_);
  swap(offline_collapsed_, other->offline_collapsed_);
  swap(game_groups_collapsed_, other->game_groups_collapsed_);
  swap(categories_collapsed_, other->categories_collapsed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::InitAsDefaultInstance() {
  ::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_default_instance_._instance.get_mutable()->category_collapse_ = const_cast< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState*>(
      ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendsListHeightFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendsListWidthFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendsListDockedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendsListCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendsListGroupChatsHeightFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendsListVisibleFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kChatPopupsOpenedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kGroupChatTabsOpenedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kFriendChatTabsOpenedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kChatWindowWidthFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kChatWindowHeightFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kCategoryCollapseFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kGroupChatLeftColCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kGroupChatRightColCollapsedFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kInOneOnOneVoiceChatFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_UIState::kInGroupVoiceChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_ClientUsabilityMetrics_Notification_UIState::CChatUsability_ClientUsabilityMetrics_Notification_UIState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
}
CChatUsability_ClientUsabilityMetrics_Notification_UIState::CChatUsability_ClientUsabilityMetrics_Notification_UIState(const CChatUsability_ClientUsabilityMetrics_Notification_UIState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_category_collapse()) {
    category_collapse_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState(*from.category_collapse_);
  } else {
    category_collapse_ = NULL;
  }
  ::memcpy(&friends_list_height_, &from.friends_list_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_group_voice_chat_) -
    reinterpret_cast<char*>(&friends_list_height_)) + sizeof(in_group_voice_chat_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SharedCtor() {
  ::memset(&category_collapse_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_group_voice_chat_) -
      reinterpret_cast<char*>(&category_collapse_)) + sizeof(in_group_voice_chat_));
}

CChatUsability_ClientUsabilityMetrics_Notification_UIState::~CChatUsability_ClientUsabilityMetrics_Notification_UIState() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  SharedDtor();
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SharedDtor() {
  if (this != internal_default_instance()) delete category_collapse_;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_ClientUsabilityMetrics_Notification_UIState::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_ClientUsabilityMetrics_Notification_UIState& CChatUsability_ClientUsabilityMetrics_Notification_UIState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_UIState.base);
  return *internal_default_instance();
}


void CChatUsability_ClientUsabilityMetrics_Notification_UIState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(category_collapse_ != NULL);
    category_collapse_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&friends_list_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friends_list_visible_) -
        reinterpret_cast<char*>(&friends_list_height_)) + sizeof(friends_list_visible_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&in_one_on_one_voice_chat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_group_voice_chat_) -
        reinterpret_cast<char*>(&in_one_on_one_voice_chat_)) + sizeof(in_group_voice_chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friends_list_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_friends_list_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_list_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_list_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_friends_list_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_list_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friends_list_docked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_friends_list_docked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_list_docked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friends_list_collapsed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_friends_list_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_list_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_list_group_chats_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_friends_list_group_chats_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_list_group_chats_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friends_list_visible = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_friends_list_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_list_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_popups_opened = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_chat_popups_opened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_popups_opened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_chat_tabs_opened = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_group_chat_tabs_opened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_chat_tabs_opened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friend_chat_tabs_opened = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_friend_chat_tabs_opened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_chat_tabs_opened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_window_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_chat_window_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_window_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_window_height = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_chat_window_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_window_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category_collapse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_chat_left_col_collapsed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_group_chat_left_col_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_chat_left_col_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_chat_right_col_collapsed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_group_chat_right_col_collapsed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_chat_right_col_collapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_one_on_one_voice_chat = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_in_one_on_one_voice_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_one_on_one_voice_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_group_voice_chat = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_in_group_voice_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_group_voice_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  return false;
#undef DO_
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 friends_list_height = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friends_list_height(), output);
  }

  // optional int32 friends_list_width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friends_list_width(), output);
  }

  // optional bool friends_list_docked = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->friends_list_docked(), output);
  }

  // optional bool friends_list_collapsed = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->friends_list_collapsed(), output);
  }

  // optional int32 friends_list_group_chats_height = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friends_list_group_chats_height(), output);
  }

  // optional bool friends_list_visible = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->friends_list_visible(), output);
  }

  // optional int32 chat_popups_opened = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chat_popups_opened(), output);
  }

  // optional int32 group_chat_tabs_opened = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->group_chat_tabs_opened(), output);
  }

  // optional int32 friend_chat_tabs_opened = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friend_chat_tabs_opened(), output);
  }

  // optional int32 chat_window_width = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chat_window_width(), output);
  }

  // optional int32 chat_window_height = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->chat_window_height(), output);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_category_collapse(), output);
  }

  // optional int32 group_chat_left_col_collapsed = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->group_chat_left_col_collapsed(), output);
  }

  // optional int32 group_chat_right_col_collapsed = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->group_chat_right_col_collapsed(), output);
  }

  // optional bool in_one_on_one_voice_chat = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->in_one_on_one_voice_chat(), output);
  }

  // optional bool in_group_voice_chat = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->in_group_voice_chat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
}

::google::protobuf::uint8* CChatUsability_ClientUsabilityMetrics_Notification_UIState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 friends_list_height = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friends_list_height(), target);
  }

  // optional int32 friends_list_width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friends_list_width(), target);
  }

  // optional bool friends_list_docked = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->friends_list_docked(), target);
  }

  // optional bool friends_list_collapsed = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->friends_list_collapsed(), target);
  }

  // optional int32 friends_list_group_chats_height = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friends_list_group_chats_height(), target);
  }

  // optional bool friends_list_visible = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->friends_list_visible(), target);
  }

  // optional int32 chat_popups_opened = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chat_popups_opened(), target);
  }

  // optional int32 group_chat_tabs_opened = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->group_chat_tabs_opened(), target);
  }

  // optional int32 friend_chat_tabs_opened = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friend_chat_tabs_opened(), target);
  }

  // optional int32 chat_window_width = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chat_window_width(), target);
  }

  // optional int32 chat_window_height = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->chat_window_height(), target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_category_collapse(), deterministic, target);
  }

  // optional int32 group_chat_left_col_collapsed = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->group_chat_left_col_collapsed(), target);
  }

  // optional int32 group_chat_right_col_collapsed = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->group_chat_right_col_collapsed(), target);
  }

  // optional bool in_one_on_one_voice_chat = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->in_one_on_one_voice_chat(), target);
  }

  // optional bool in_group_voice_chat = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->in_group_voice_chat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_UIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
    if (has_category_collapse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *category_collapse_);
    }

    // optional int32 friends_list_height = 1;
    if (has_friends_list_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_list_height());
    }

    // optional int32 friends_list_width = 2;
    if (has_friends_list_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_list_width());
    }

    // optional int32 friends_list_group_chats_height = 5;
    if (has_friends_list_group_chats_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_list_group_chats_height());
    }

    // optional int32 chat_popups_opened = 7;
    if (has_chat_popups_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_popups_opened());
    }

    // optional bool friends_list_docked = 3;
    if (has_friends_list_docked()) {
      total_size += 1 + 1;
    }

    // optional bool friends_list_collapsed = 4;
    if (has_friends_list_collapsed()) {
      total_size += 1 + 1;
    }

    // optional bool friends_list_visible = 6;
    if (has_friends_list_visible()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool in_one_on_one_voice_chat = 15;
    if (has_in_one_on_one_voice_chat()) {
      total_size += 1 + 1;
    }

    // optional int32 group_chat_tabs_opened = 8;
    if (has_group_chat_tabs_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_chat_tabs_opened());
    }

    // optional int32 friend_chat_tabs_opened = 9;
    if (has_friend_chat_tabs_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_chat_tabs_opened());
    }

    // optional int32 chat_window_width = 10;
    if (has_chat_window_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_window_width());
    }

    // optional int32 chat_window_height = 11;
    if (has_chat_window_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_window_height());
    }

    // optional int32 group_chat_left_col_collapsed = 13;
    if (has_group_chat_left_col_collapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_chat_left_col_collapsed());
    }

    // optional int32 group_chat_right_col_collapsed = 14;
    if (has_group_chat_right_col_collapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_chat_right_col_collapsed());
    }

    // optional bool in_group_voice_chat = 16;
    if (has_in_group_voice_chat()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_ClientUsabilityMetrics_Notification_UIState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_ClientUsabilityMetrics_Notification_UIState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
    MergeFrom(*source);
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_category_collapse()->::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeFrom(from.category_collapse());
    }
    if (cached_has_bits & 0x00000002u) {
      friends_list_height_ = from.friends_list_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_list_width_ = from.friends_list_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      friends_list_group_chats_height_ = from.friends_list_group_chats_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_popups_opened_ = from.chat_popups_opened_;
    }
    if (cached_has_bits & 0x00000020u) {
      friends_list_docked_ = from.friends_list_docked_;
    }
    if (cached_has_bits & 0x00000040u) {
      friends_list_collapsed_ = from.friends_list_collapsed_;
    }
    if (cached_has_bits & 0x00000080u) {
      friends_list_visible_ = from.friends_list_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      in_one_on_one_voice_chat_ = from.in_one_on_one_voice_chat_;
    }
    if (cached_has_bits & 0x00000200u) {
      group_chat_tabs_opened_ = from.group_chat_tabs_opened_;
    }
    if (cached_has_bits & 0x00000400u) {
      friend_chat_tabs_opened_ = from.friend_chat_tabs_opened_;
    }
    if (cached_has_bits & 0x00000800u) {
      chat_window_width_ = from.chat_window_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      chat_window_height_ = from.chat_window_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      group_chat_left_col_collapsed_ = from.group_chat_left_col_collapsed_;
    }
    if (cached_has_bits & 0x00004000u) {
      group_chat_right_col_collapsed_ = from.group_chat_right_col_collapsed_;
    }
    if (cached_has_bits & 0x00008000u) {
      in_group_voice_chat_ = from.in_group_voice_chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_UIState::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::Swap(CChatUsability_ClientUsabilityMetrics_Notification_UIState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_ClientUsabilityMetrics_Notification_UIState::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_UIState* other) {
  using std::swap;
  swap(category_collapse_, other->category_collapse_);
  swap(friends_list_height_, other->friends_list_height_);
  swap(friends_list_width_, other->friends_list_width_);
  swap(friends_list_group_chats_height_, other->friends_list_group_chats_height_);
  swap(chat_popups_opened_, other->chat_popups_opened_);
  swap(friends_list_docked_, other->friends_list_docked_);
  swap(friends_list_collapsed_, other->friends_list_collapsed_);
  swap(friends_list_visible_, other->friends_list_visible_);
  swap(in_one_on_one_voice_chat_, other->in_one_on_one_voice_chat_);
  swap(group_chat_tabs_opened_, other->group_chat_tabs_opened_);
  swap(friend_chat_tabs_opened_, other->friend_chat_tabs_opened_);
  swap(chat_window_width_, other->chat_window_width_);
  swap(chat_window_height_, other->chat_window_height_);
  swap(group_chat_left_col_collapsed_, other->group_chat_left_col_collapsed_);
  swap(group_chat_right_col_collapsed_, other->group_chat_right_col_collapsed_);
  swap(in_group_voice_chat_, other->in_group_voice_chat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_ClientUsabilityMetrics_Notification_UIState::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsCategoryCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsCategorizedCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsOnlineCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsInGameCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsInGameSingletonCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kGameGroupCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kFriendsFavoriteCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kGroupChatCountFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification_Metrics::kGroupChatFavoriteCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CChatUsability_ClientUsabilityMetrics_Notification_Metrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Metrics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
}
CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CChatUsability_ClientUsabilityMetrics_Notification_Metrics(const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&friends_count_, &from.friends_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_chat_favorite_count_) -
    reinterpret_cast<char*>(&friends_count_)) + sizeof(group_chat_favorite_count_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SharedCtor() {
  ::memset(&friends_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_chat_favorite_count_) -
      reinterpret_cast<char*>(&friends_count_)) + sizeof(group_chat_favorite_count_));
}

CChatUsability_ClientUsabilityMetrics_Notification_Metrics::~CChatUsability_ClientUsabilityMetrics_Notification_Metrics() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  SharedDtor();
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SharedDtor() {
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_ClientUsabilityMetrics_Notification_Metrics::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& CChatUsability_ClientUsabilityMetrics_Notification_Metrics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification_Metrics.base);
  return *internal_default_instance();
}


void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&friends_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friends_favorite_count_) -
        reinterpret_cast<char*>(&friends_count_)) + sizeof(friends_favorite_count_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&group_chat_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_chat_favorite_count_) -
        reinterpret_cast<char*>(&group_chat_count_)) + sizeof(group_chat_favorite_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friends_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_friends_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_category_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_friends_category_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_category_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_categorized_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_friends_categorized_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_categorized_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_online_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_friends_online_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_online_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_in_game_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_friends_in_game_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_in_game_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_in_game_singleton_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_friends_in_game_singleton_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_in_game_singleton_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_group_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_game_group_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_group_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 friends_favorite_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_friends_favorite_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_favorite_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_chat_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_group_chat_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_chat_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_chat_favorite_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_group_chat_favorite_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_chat_favorite_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  return false;
#undef DO_
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 friends_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friends_count(), output);
  }

  // optional int32 friends_category_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friends_category_count(), output);
  }

  // optional int32 friends_categorized_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->friends_categorized_count(), output);
  }

  // optional int32 friends_online_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friends_online_count(), output);
  }

  // optional int32 friends_in_game_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friends_in_game_count(), output);
  }

  // optional int32 friends_in_game_singleton_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->friends_in_game_singleton_count(), output);
  }

  // optional int32 game_group_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->game_group_count(), output);
  }

  // optional int32 friends_favorite_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->friends_favorite_count(), output);
  }

  // optional int32 group_chat_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->group_chat_count(), output);
  }

  // optional int32 group_chat_favorite_count = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->group_chat_favorite_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
}

::google::protobuf::uint8* CChatUsability_ClientUsabilityMetrics_Notification_Metrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 friends_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friends_count(), target);
  }

  // optional int32 friends_category_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friends_category_count(), target);
  }

  // optional int32 friends_categorized_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->friends_categorized_count(), target);
  }

  // optional int32 friends_online_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friends_online_count(), target);
  }

  // optional int32 friends_in_game_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friends_in_game_count(), target);
  }

  // optional int32 friends_in_game_singleton_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->friends_in_game_singleton_count(), target);
  }

  // optional int32 game_group_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->game_group_count(), target);
  }

  // optional int32 friends_favorite_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->friends_favorite_count(), target);
  }

  // optional int32 group_chat_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->group_chat_count(), target);
  }

  // optional int32 group_chat_favorite_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->group_chat_favorite_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 friends_count = 1;
    if (has_friends_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_count());
    }

    // optional int32 friends_category_count = 2;
    if (has_friends_category_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_category_count());
    }

    // optional int32 friends_categorized_count = 3;
    if (has_friends_categorized_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_categorized_count());
    }

    // optional int32 friends_online_count = 4;
    if (has_friends_online_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_online_count());
    }

    // optional int32 friends_in_game_count = 5;
    if (has_friends_in_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_in_game_count());
    }

    // optional int32 friends_in_game_singleton_count = 6;
    if (has_friends_in_game_singleton_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_in_game_singleton_count());
    }

    // optional int32 game_group_count = 7;
    if (has_game_group_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_group_count());
    }

    // optional int32 friends_favorite_count = 8;
    if (has_friends_favorite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_favorite_count());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 group_chat_count = 9;
    if (has_group_chat_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_chat_count());
    }

    // optional int32 group_chat_favorite_count = 10;
    if (has_group_chat_favorite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_chat_favorite_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_ClientUsabilityMetrics_Notification_Metrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_ClientUsabilityMetrics_Notification_Metrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
    MergeFrom(*source);
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      friends_count_ = from.friends_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      friends_category_count_ = from.friends_category_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_categorized_count_ = from.friends_categorized_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      friends_online_count_ = from.friends_online_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      friends_in_game_count_ = from.friends_in_game_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      friends_in_game_singleton_count_ = from.friends_in_game_singleton_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_group_count_ = from.game_group_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      friends_favorite_count_ = from.friends_favorite_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      group_chat_count_ = from.group_chat_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      group_chat_favorite_count_ = from.group_chat_favorite_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_Metrics::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::Swap(CChatUsability_ClientUsabilityMetrics_Notification_Metrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_Metrics* other) {
  using std::swap;
  swap(friends_count_, other->friends_count_);
  swap(friends_category_count_, other->friends_category_count_);
  swap(friends_categorized_count_, other->friends_categorized_count_);
  swap(friends_online_count_, other->friends_online_count_);
  swap(friends_in_game_count_, other->friends_in_game_count_);
  swap(friends_in_game_singleton_count_, other->friends_in_game_singleton_count_);
  swap(game_group_count_, other->game_group_count_);
  swap(friends_favorite_count_, other->friends_favorite_count_);
  swap(group_chat_count_, other->group_chat_count_);
  swap(group_chat_favorite_count_, other->group_chat_favorite_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_ClientUsabilityMetrics_Notification_Metrics::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_ClientUsabilityMetrics_Notification::InitAsDefaultInstance() {
  ::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_._instance.get_mutable()->settings_ = const_cast< ::CChatUsability_ClientUsabilityMetrics_Notification_Settings*>(
      ::CChatUsability_ClientUsabilityMetrics_Notification_Settings::internal_default_instance());
  ::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_._instance.get_mutable()->voice_settings_ = const_cast< ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings*>(
      ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::internal_default_instance());
  ::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_._instance.get_mutable()->ui_state_ = const_cast< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState*>(
      ::CChatUsability_ClientUsabilityMetrics_Notification_UIState::internal_default_instance());
  ::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics*>(
      ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_ClientUsabilityMetrics_Notification::kMetricsRunIdFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kClientBuildFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kMetricsVersionFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kInWebFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kSettingsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kVoiceSettingsFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kUiStateFieldNumber;
const int CChatUsability_ClientUsabilityMetrics_Notification::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_ClientUsabilityMetrics_Notification::CChatUsability_ClientUsabilityMetrics_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_ClientUsabilityMetrics_Notification)
}
CChatUsability_ClientUsabilityMetrics_Notification::CChatUsability_ClientUsabilityMetrics_Notification(const CChatUsability_ClientUsabilityMetrics_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_Settings(*from.settings_);
  } else {
    settings_ = NULL;
  }
  if (from.has_voice_settings()) {
    voice_settings_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings(*from.voice_settings_);
  } else {
    voice_settings_ = NULL;
  }
  if (from.has_ui_state()) {
    ui_state_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_UIState(*from.ui_state_);
  } else {
    ui_state_ = NULL;
  }
  if (from.has_metrics()) {
    metrics_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  ::memcpy(&metrics_run_id_, &from.metrics_run_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_web_) -
    reinterpret_cast<char*>(&metrics_run_id_)) + sizeof(in_web_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification)
}

void CChatUsability_ClientUsabilityMetrics_Notification::SharedCtor() {
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_web_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(in_web_));
}

CChatUsability_ClientUsabilityMetrics_Notification::~CChatUsability_ClientUsabilityMetrics_Notification() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification)
  SharedDtor();
}

void CChatUsability_ClientUsabilityMetrics_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete voice_settings_;
  if (this != internal_default_instance()) delete ui_state_;
  if (this != internal_default_instance()) delete metrics_;
}

void CChatUsability_ClientUsabilityMetrics_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_ClientUsabilityMetrics_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_ClientUsabilityMetrics_Notification& CChatUsability_ClientUsabilityMetrics_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_ClientUsabilityMetrics_Notification.base);
  return *internal_default_instance();
}


void CChatUsability_ClientUsabilityMetrics_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_ != NULL);
      settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(voice_settings_ != NULL);
      voice_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ui_state_ != NULL);
      ui_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&metrics_run_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_web_) -
        reinterpret_cast<char*>(&metrics_run_id_)) + sizeof(in_web_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_ClientUsabilityMetrics_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_ClientUsabilityMetrics_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 metrics_run_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_metrics_run_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metrics_run_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_build = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_client_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 metrics_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_metrics_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metrics_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_web = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_in_web();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_web_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voice_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ui_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_ClientUsabilityMetrics_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_ClientUsabilityMetrics_Notification)
  return false;
#undef DO_
}

void CChatUsability_ClientUsabilityMetrics_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_ClientUsabilityMetrics_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 metrics_run_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->metrics_run_id(), output);
  }

  // optional uint32 client_build = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_build(), output);
  }

  // optional uint32 metrics_version = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->metrics_version(), output);
  }

  // optional bool in_web = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->in_web(), output);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_settings(), output);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_voice_settings(), output);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_ui_state(), output);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_metrics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_ClientUsabilityMetrics_Notification)
}

::google::protobuf::uint8* CChatUsability_ClientUsabilityMetrics_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 metrics_run_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->metrics_run_id(), target);
  }

  // optional uint32 client_build = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_build(), target);
  }

  // optional uint32 metrics_version = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->metrics_version(), target);
  }

  // optional bool in_web = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->in_web(), target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_settings(), deterministic, target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_voice_settings(), deterministic, target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_ui_state(), deterministic, target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_metrics(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
    if (has_voice_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *voice_settings_);
    }

    // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
    if (has_ui_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ui_state_);
    }

    // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *metrics_);
    }

    // optional uint32 metrics_run_id = 1;
    if (has_metrics_run_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->metrics_run_id());
    }

    // optional uint32 client_build = 2;
    if (has_client_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_build());
    }

    // optional uint32 metrics_version = 3;
    if (has_metrics_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->metrics_version());
    }

    // optional bool in_web = 4;
    if (has_in_web()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_ClientUsabilityMetrics_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_ClientUsabilityMetrics_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_ClientUsabilityMetrics_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_ClientUsabilityMetrics_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_ClientUsabilityMetrics_Notification)
    MergeFrom(*source);
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_settings()->::CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeFrom(from.settings());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_voice_settings()->::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeFrom(from.voice_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ui_state()->::CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeFrom(from.ui_state());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_metrics()->::CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeFrom(from.metrics());
    }
    if (cached_has_bits & 0x00000010u) {
      metrics_run_id_ = from.metrics_run_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_build_ = from.client_build_;
    }
    if (cached_has_bits & 0x00000040u) {
      metrics_version_ = from.metrics_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_web_ = from.in_web_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CChatUsability_ClientUsabilityMetrics_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_ClientUsabilityMetrics_Notification::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification::Swap(CChatUsability_ClientUsabilityMetrics_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_ClientUsabilityMetrics_Notification::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification* other) {
  using std::swap;
  swap(settings_, other->settings_);
  swap(voice_settings_, other->voice_settings_);
  swap(ui_state_, other->ui_state_);
  swap(metrics_, other->metrics_);
  swap(metrics_run_id_, other->metrics_run_id_);
  swap(client_build_, other->client_build_);
  swap(metrics_version_, other->metrics_version_);
  swap(in_web_, other->in_web_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_ClientUsabilityMetrics_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CChatUsability_RequestClientUsabilityMetrics_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatUsability_RequestClientUsabilityMetrics_Notification::kMetricsRunIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatUsability_RequestClientUsabilityMetrics_Notification::CChatUsability_RequestClientUsabilityMetrics_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_RequestClientUsabilityMetrics_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatUsability_RequestClientUsabilityMetrics_Notification)
}
CChatUsability_RequestClientUsabilityMetrics_Notification::CChatUsability_RequestClientUsabilityMetrics_Notification(const CChatUsability_RequestClientUsabilityMetrics_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metrics_run_id_ = from.metrics_run_id_;
  // @@protoc_insertion_point(copy_constructor:CChatUsability_RequestClientUsabilityMetrics_Notification)
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::SharedCtor() {
  metrics_run_id_ = 0u;
}

CChatUsability_RequestClientUsabilityMetrics_Notification::~CChatUsability_RequestClientUsabilityMetrics_Notification() {
  // @@protoc_insertion_point(destructor:CChatUsability_RequestClientUsabilityMetrics_Notification)
  SharedDtor();
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::SharedDtor() {
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CChatUsability_RequestClientUsabilityMetrics_Notification::descriptor() {
  ::protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CChatUsability_RequestClientUsabilityMetrics_Notification& CChatUsability_RequestClientUsabilityMetrics_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fchat_2esteamclient_2eproto::scc_info_CChatUsability_RequestClientUsabilityMetrics_Notification.base);
  return *internal_default_instance();
}


void CChatUsability_RequestClientUsabilityMetrics_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_run_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CChatUsability_RequestClientUsabilityMetrics_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 metrics_run_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_metrics_run_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metrics_run_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatUsability_RequestClientUsabilityMetrics_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatUsability_RequestClientUsabilityMetrics_Notification)
  return false;
#undef DO_
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 metrics_run_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->metrics_run_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CChatUsability_RequestClientUsabilityMetrics_Notification)
}

::google::protobuf::uint8* CChatUsability_RequestClientUsabilityMetrics_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 metrics_run_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->metrics_run_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_RequestClientUsabilityMetrics_Notification)
  return target;
}

size_t CChatUsability_RequestClientUsabilityMetrics_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 metrics_run_id = 1;
  if (has_metrics_run_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metrics_run_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatUsability_RequestClientUsabilityMetrics_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatUsability_RequestClientUsabilityMetrics_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatUsability_RequestClientUsabilityMetrics_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatUsability_RequestClientUsabilityMetrics_Notification)
    MergeFrom(*source);
  }
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::MergeFrom(const CChatUsability_RequestClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metrics_run_id()) {
    set_metrics_run_id(from.metrics_run_id());
  }
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::CopyFrom(const CChatUsability_RequestClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_RequestClientUsabilityMetrics_Notification::IsInitialized() const {
  return true;
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::Swap(CChatUsability_RequestClientUsabilityMetrics_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatUsability_RequestClientUsabilityMetrics_Notification::InternalSwap(CChatUsability_RequestClientUsabilityMetrics_Notification* other) {
  using std::swap;
  swap(metrics_run_id_, other->metrics_run_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CChatUsability_RequestClientUsabilityMetrics_Notification::GetMetadata() const {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Chat::~Chat() {}

const ::google::protobuf::ServiceDescriptor* Chat::descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Chat::GetDescriptor() {
  return descriptor();
}

void Chat::RequestFriendPersonaStates(::google::protobuf::RpcController* controller,
                         const ::CChat_RequestFriendPersonaStates_Request*,
                         ::CChat_RequestFriendPersonaStates_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestFriendPersonaStates() not implemented.");
  done->Run();
}

void Chat::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      RequestFriendPersonaStates(controller,
             ::google::protobuf::down_cast<const ::CChat_RequestFriendPersonaStates_Request*>(request),
             ::google::protobuf::down_cast< ::CChat_RequestFriendPersonaStates_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Chat::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChat_RequestFriendPersonaStates_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Chat::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChat_RequestFriendPersonaStates_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Chat_Stub::Chat_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Chat_Stub::Chat_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Chat_Stub::~Chat_Stub() {
  if (owns_channel_) delete channel_;
}

void Chat_Stub::RequestFriendPersonaStates(::google::protobuf::RpcController* controller,
                              const ::CChat_RequestFriendPersonaStates_Request* request,
                              ::CChat_RequestFriendPersonaStates_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ChatRoom::~ChatRoom() {}

const ::google::protobuf::ServiceDescriptor* ChatRoom::descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* ChatRoom::GetDescriptor() {
  return descriptor();
}

void ChatRoom::CreateChatRoomGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_CreateChatRoomGroup_Request*,
                         ::CChatRoom_CreateChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::SaveChatRoomGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SaveChatRoomGroup_Request*,
                         ::CChatRoom_SaveChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::RenameChatRoomGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_RenameChatRoomGroup_Request*,
                         ::CChatRoom_RenameChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::SetChatRoomGroupTagline(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SetChatRoomGroupTagline_Request*,
                         ::CChatRoom_SetChatRoomGroupTagline_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetChatRoomGroupTagline() not implemented.");
  done->Run();
}

void ChatRoom::SetChatRoomGroupAvatar(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SetChatRoomGroupAvatar_Request*,
                         ::CChatRoom_SetChatRoomGroupAvatar_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetChatRoomGroupAvatar() not implemented.");
  done->Run();
}

void ChatRoom::SetChatRoomGroupWatchingBroadcast(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request*,
                         ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetChatRoomGroupWatchingBroadcast() not implemented.");
  done->Run();
}

void ChatRoom::MuteUserInGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_MuteUser_Request*,
                         ::CChatRoom_MuteUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MuteUserInGroup() not implemented.");
  done->Run();
}

void ChatRoom::KickUserFromGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_KickUser_Request*,
                         ::CChatRoom_KickUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KickUserFromGroup() not implemented.");
  done->Run();
}

void ChatRoom::SetUserBanState(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SetUserBanState_Request*,
                         ::CChatRoom_SetUserBanState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserBanState() not implemented.");
  done->Run();
}

void ChatRoom::RevokeInviteToGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_RevokeInvite_Request*,
                         ::CChatRoom_RevokeInvite_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeInviteToGroup() not implemented.");
  done->Run();
}

void ChatRoom::CreateRole(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_CreateRole_Request*,
                         ::CChatRoom_CreateRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateRole() not implemented.");
  done->Run();
}

void ChatRoom::GetRoles(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetRoles_Request*,
                         ::CChatRoom_GetRoles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRoles() not implemented.");
  done->Run();
}

void ChatRoom::RenameRole(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_RenameRole_Request*,
                         ::CChatRoom_RenameRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameRole() not implemented.");
  done->Run();
}

void ChatRoom::ReorderRole(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_ReorderRole_Request*,
                         ::CChatRoom_ReorderRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReorderRole() not implemented.");
  done->Run();
}

void ChatRoom::DeleteRole(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_DeleteRole_Request*,
                         ::CChatRoom_DeleteRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteRole() not implemented.");
  done->Run();
}

void ChatRoom::GetRoleActions(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetRoleActions_Request*,
                         ::CChatRoom_GetRoleActions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRoleActions() not implemented.");
  done->Run();
}

void ChatRoom::ReplaceRoleActions(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_ReplaceRoleActions_Request*,
                         ::CChatRoom_ReplaceRoleActions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReplaceRoleActions() not implemented.");
  done->Run();
}

void ChatRoom::AddRoleToUser(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_AddRoleToUser_Request*,
                         ::CChatRoom_AddRoleToUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddRoleToUser() not implemented.");
  done->Run();
}

void ChatRoom::GetRolesForUser(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetRolesForUser_Request*,
                         ::CChatRoom_GetRolesForUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRolesForUser() not implemented.");
  done->Run();
}

void ChatRoom::DeleteRoleFromUser(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_DeleteRoleFromUser_Request*,
                         ::CChatRoom_DeleteRoleFromUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteRoleFromUser() not implemented.");
  done->Run();
}

void ChatRoom::JoinChatRoomGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_JoinChatRoomGroup_Request*,
                         ::CChatRoom_JoinChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::InviteFriendToChatRoomGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_InviteFriendToChatRoomGroup_Request*,
                         ::CChatRoom_InviteFriendToChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InviteFriendToChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::LeaveChatRoomGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_LeaveChatRoomGroup_Request*,
                         ::CChatRoom_LeaveChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LeaveChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::CreateChatRoom(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_CreateChatRoom_Request*,
                         ::CChatRoom_CreateChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::DeleteChatRoom(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_DeleteChatRoom_Request*,
                         ::CChatRoom_DeleteChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::RenameChatRoom(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_RenameChatRoom_Request*,
                         ::CChatRoom_RenameChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::ReorderChatRoom(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_ReorderChatRoom_Request*,
                         ::CChatRoom_ReorderChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReorderChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::SendChatMessage(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SendChatMessage_Request*,
                         ::CChatRoom_SendChatMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendChatMessage() not implemented.");
  done->Run();
}

void ChatRoom::JoinVoiceChat(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_JoinVoiceChat_Request*,
                         ::CChatRoom_JoinVoiceChat_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinVoiceChat() not implemented.");
  done->Run();
}

void ChatRoom::LeaveVoiceChat(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_LeaveVoiceChat_Request*,
                         ::CChatRoom_LeaveVoiceChat_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LeaveVoiceChat() not implemented.");
  done->Run();
}

void ChatRoom::GetMessageHistory(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetMessageHistory_Request*,
                         ::CChatRoom_GetMessageHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessageHistory() not implemented.");
  done->Run();
}

void ChatRoom::GetMyChatRoomGroups(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetMyChatRoomGroups_Request*,
                         ::CChatRoom_GetMyChatRoomGroups_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMyChatRoomGroups() not implemented.");
  done->Run();
}

void ChatRoom::GetChatRoomGroupState(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetChatRoomGroupState_Request*,
                         ::CChatRoom_GetChatRoomGroupState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatRoomGroupState() not implemented.");
  done->Run();
}

void ChatRoom::GetChatRoomGroupSummary(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetChatRoomGroupSummary_Request*,
                         ::CChatRoom_GetChatRoomGroupSummary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatRoomGroupSummary() not implemented.");
  done->Run();
}

void ChatRoom::AckChatMessage(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_AckChatMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AckChatMessage() not implemented.");
  done->Run();
}

void ChatRoom::CreateInviteLink(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_CreateInviteLink_Request*,
                         ::CChatRoom_CreateInviteLink_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateInviteLink() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteLinkInfo(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetInviteLinkInfo_Request*,
                         ::CChatRoom_GetInviteLinkInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteLinkInfo() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteInfo(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetInviteInfo_Request*,
                         ::CChatRoom_GetInviteInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteInfo() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteLinksForGroup(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetInviteLinksForGroup_Request*,
                         ::CChatRoom_GetInviteLinksForGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteLinksForGroup() not implemented.");
  done->Run();
}

void ChatRoom::GetBanList(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetBanList_Request*,
                         ::CChatRoom_GetBanList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBanList() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteList(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_GetInviteList_Request*,
                         ::CChatRoom_GetInviteList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteList() not implemented.");
  done->Run();
}

void ChatRoom::DeleteInviteLink(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_DeleteInviteLink_Request*,
                         ::CChatRoom_DeleteInviteLink_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteInviteLink() not implemented.");
  done->Run();
}

void ChatRoom::SetSessionActiveChatRoomGroups(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SetSessionActiveChatRoomGroups_Request*,
                         ::CChatRoom_SetSessionActiveChatRoomGroups_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetSessionActiveChatRoomGroups() not implemented.");
  done->Run();
}

void ChatRoom::SetUserChatGroupPreferences(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_SetUserChatGroupPreferences_Request*,
                         ::CChatRoom_SetUserChatGroupPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserChatGroupPreferences() not implemented.");
  done->Run();
}

void ChatRoom::DeleteChatMessages(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_DeleteChatMessages_Request*,
                         ::CChatRoom_DeleteChatMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteChatMessages() not implemented.");
  done->Run();
}

void ChatRoom::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      CreateChatRoomGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_CreateChatRoomGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_CreateChatRoomGroup_Response*>(response),
             done);
      break;
    case 1:
      SaveChatRoomGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SaveChatRoomGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SaveChatRoomGroup_Response*>(response),
             done);
      break;
    case 2:
      RenameChatRoomGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_RenameChatRoomGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_RenameChatRoomGroup_Response*>(response),
             done);
      break;
    case 3:
      SetChatRoomGroupTagline(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SetChatRoomGroupTagline_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SetChatRoomGroupTagline_Response*>(response),
             done);
      break;
    case 4:
      SetChatRoomGroupAvatar(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SetChatRoomGroupAvatar_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SetChatRoomGroupAvatar_Response*>(response),
             done);
      break;
    case 5:
      SetChatRoomGroupWatchingBroadcast(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response*>(response),
             done);
      break;
    case 6:
      MuteUserInGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_MuteUser_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_MuteUser_Response*>(response),
             done);
      break;
    case 7:
      KickUserFromGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_KickUser_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_KickUser_Response*>(response),
             done);
      break;
    case 8:
      SetUserBanState(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SetUserBanState_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SetUserBanState_Response*>(response),
             done);
      break;
    case 9:
      RevokeInviteToGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_RevokeInvite_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_RevokeInvite_Response*>(response),
             done);
      break;
    case 10:
      CreateRole(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_CreateRole_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_CreateRole_Response*>(response),
             done);
      break;
    case 11:
      GetRoles(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetRoles_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetRoles_Response*>(response),
             done);
      break;
    case 12:
      RenameRole(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_RenameRole_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_RenameRole_Response*>(response),
             done);
      break;
    case 13:
      ReorderRole(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_ReorderRole_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_ReorderRole_Response*>(response),
             done);
      break;
    case 14:
      DeleteRole(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_DeleteRole_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_DeleteRole_Response*>(response),
             done);
      break;
    case 15:
      GetRoleActions(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetRoleActions_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetRoleActions_Response*>(response),
             done);
      break;
    case 16:
      ReplaceRoleActions(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_ReplaceRoleActions_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_ReplaceRoleActions_Response*>(response),
             done);
      break;
    case 17:
      AddRoleToUser(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_AddRoleToUser_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_AddRoleToUser_Response*>(response),
             done);
      break;
    case 18:
      GetRolesForUser(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetRolesForUser_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetRolesForUser_Response*>(response),
             done);
      break;
    case 19:
      DeleteRoleFromUser(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_DeleteRoleFromUser_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_DeleteRoleFromUser_Response*>(response),
             done);
      break;
    case 20:
      JoinChatRoomGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_JoinChatRoomGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_JoinChatRoomGroup_Response*>(response),
             done);
      break;
    case 21:
      InviteFriendToChatRoomGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_InviteFriendToChatRoomGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_InviteFriendToChatRoomGroup_Response*>(response),
             done);
      break;
    case 22:
      LeaveChatRoomGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_LeaveChatRoomGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_LeaveChatRoomGroup_Response*>(response),
             done);
      break;
    case 23:
      CreateChatRoom(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_CreateChatRoom_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_CreateChatRoom_Response*>(response),
             done);
      break;
    case 24:
      DeleteChatRoom(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_DeleteChatRoom_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_DeleteChatRoom_Response*>(response),
             done);
      break;
    case 25:
      RenameChatRoom(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_RenameChatRoom_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_RenameChatRoom_Response*>(response),
             done);
      break;
    case 26:
      ReorderChatRoom(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_ReorderChatRoom_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_ReorderChatRoom_Response*>(response),
             done);
      break;
    case 27:
      SendChatMessage(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SendChatMessage_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SendChatMessage_Response*>(response),
             done);
      break;
    case 28:
      JoinVoiceChat(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_JoinVoiceChat_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_JoinVoiceChat_Response*>(response),
             done);
      break;
    case 29:
      LeaveVoiceChat(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_LeaveVoiceChat_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_LeaveVoiceChat_Response*>(response),
             done);
      break;
    case 30:
      GetMessageHistory(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetMessageHistory_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetMessageHistory_Response*>(response),
             done);
      break;
    case 31:
      GetMyChatRoomGroups(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetMyChatRoomGroups_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetMyChatRoomGroups_Response*>(response),
             done);
      break;
    case 32:
      GetChatRoomGroupState(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetChatRoomGroupState_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetChatRoomGroupState_Response*>(response),
             done);
      break;
    case 33:
      GetChatRoomGroupSummary(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetChatRoomGroupSummary_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetChatRoomGroupSummary_Response*>(response),
             done);
      break;
    case 34:
      AckChatMessage(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_AckChatMessage_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 35:
      CreateInviteLink(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_CreateInviteLink_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_CreateInviteLink_Response*>(response),
             done);
      break;
    case 36:
      GetInviteLinkInfo(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetInviteLinkInfo_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetInviteLinkInfo_Response*>(response),
             done);
      break;
    case 37:
      GetInviteInfo(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetInviteInfo_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetInviteInfo_Response*>(response),
             done);
      break;
    case 38:
      GetInviteLinksForGroup(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetInviteLinksForGroup_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetInviteLinksForGroup_Response*>(response),
             done);
      break;
    case 39:
      GetBanList(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetBanList_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetBanList_Response*>(response),
             done);
      break;
    case 40:
      GetInviteList(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_GetInviteList_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_GetInviteList_Response*>(response),
             done);
      break;
    case 41:
      DeleteInviteLink(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_DeleteInviteLink_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_DeleteInviteLink_Response*>(response),
             done);
      break;
    case 42:
      SetSessionActiveChatRoomGroups(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SetSessionActiveChatRoomGroups_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SetSessionActiveChatRoomGroups_Response*>(response),
             done);
      break;
    case 43:
      SetUserChatGroupPreferences(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_SetUserChatGroupPreferences_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_SetUserChatGroupPreferences_Response*>(response),
             done);
      break;
    case 44:
      DeleteChatMessages(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_DeleteChatMessages_Request*>(request),
             ::google::protobuf::down_cast< ::CChatRoom_DeleteChatMessages_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChatRoom::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatRoom_CreateChatRoomGroup_Request::default_instance();
    case 1:
      return ::CChatRoom_SaveChatRoomGroup_Request::default_instance();
    case 2:
      return ::CChatRoom_RenameChatRoomGroup_Request::default_instance();
    case 3:
      return ::CChatRoom_SetChatRoomGroupTagline_Request::default_instance();
    case 4:
      return ::CChatRoom_SetChatRoomGroupAvatar_Request::default_instance();
    case 5:
      return ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::default_instance();
    case 6:
      return ::CChatRoom_MuteUser_Request::default_instance();
    case 7:
      return ::CChatRoom_KickUser_Request::default_instance();
    case 8:
      return ::CChatRoom_SetUserBanState_Request::default_instance();
    case 9:
      return ::CChatRoom_RevokeInvite_Request::default_instance();
    case 10:
      return ::CChatRoom_CreateRole_Request::default_instance();
    case 11:
      return ::CChatRoom_GetRoles_Request::default_instance();
    case 12:
      return ::CChatRoom_RenameRole_Request::default_instance();
    case 13:
      return ::CChatRoom_ReorderRole_Request::default_instance();
    case 14:
      return ::CChatRoom_DeleteRole_Request::default_instance();
    case 15:
      return ::CChatRoom_GetRoleActions_Request::default_instance();
    case 16:
      return ::CChatRoom_ReplaceRoleActions_Request::default_instance();
    case 17:
      return ::CChatRoom_AddRoleToUser_Request::default_instance();
    case 18:
      return ::CChatRoom_GetRolesForUser_Request::default_instance();
    case 19:
      return ::CChatRoom_DeleteRoleFromUser_Request::default_instance();
    case 20:
      return ::CChatRoom_JoinChatRoomGroup_Request::default_instance();
    case 21:
      return ::CChatRoom_InviteFriendToChatRoomGroup_Request::default_instance();
    case 22:
      return ::CChatRoom_LeaveChatRoomGroup_Request::default_instance();
    case 23:
      return ::CChatRoom_CreateChatRoom_Request::default_instance();
    case 24:
      return ::CChatRoom_DeleteChatRoom_Request::default_instance();
    case 25:
      return ::CChatRoom_RenameChatRoom_Request::default_instance();
    case 26:
      return ::CChatRoom_ReorderChatRoom_Request::default_instance();
    case 27:
      return ::CChatRoom_SendChatMessage_Request::default_instance();
    case 28:
      return ::CChatRoom_JoinVoiceChat_Request::default_instance();
    case 29:
      return ::CChatRoom_LeaveVoiceChat_Request::default_instance();
    case 30:
      return ::CChatRoom_GetMessageHistory_Request::default_instance();
    case 31:
      return ::CChatRoom_GetMyChatRoomGroups_Request::default_instance();
    case 32:
      return ::CChatRoom_GetChatRoomGroupState_Request::default_instance();
    case 33:
      return ::CChatRoom_GetChatRoomGroupSummary_Request::default_instance();
    case 34:
      return ::CChatRoom_AckChatMessage_Notification::default_instance();
    case 35:
      return ::CChatRoom_CreateInviteLink_Request::default_instance();
    case 36:
      return ::CChatRoom_GetInviteLinkInfo_Request::default_instance();
    case 37:
      return ::CChatRoom_GetInviteInfo_Request::default_instance();
    case 38:
      return ::CChatRoom_GetInviteLinksForGroup_Request::default_instance();
    case 39:
      return ::CChatRoom_GetBanList_Request::default_instance();
    case 40:
      return ::CChatRoom_GetInviteList_Request::default_instance();
    case 41:
      return ::CChatRoom_DeleteInviteLink_Request::default_instance();
    case 42:
      return ::CChatRoom_SetSessionActiveChatRoomGroups_Request::default_instance();
    case 43:
      return ::CChatRoom_SetUserChatGroupPreferences_Request::default_instance();
    case 44:
      return ::CChatRoom_DeleteChatMessages_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ChatRoom::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatRoom_CreateChatRoomGroup_Response::default_instance();
    case 1:
      return ::CChatRoom_SaveChatRoomGroup_Response::default_instance();
    case 2:
      return ::CChatRoom_RenameChatRoomGroup_Response::default_instance();
    case 3:
      return ::CChatRoom_SetChatRoomGroupTagline_Response::default_instance();
    case 4:
      return ::CChatRoom_SetChatRoomGroupAvatar_Response::default_instance();
    case 5:
      return ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::default_instance();
    case 6:
      return ::CChatRoom_MuteUser_Response::default_instance();
    case 7:
      return ::CChatRoom_KickUser_Response::default_instance();
    case 8:
      return ::CChatRoom_SetUserBanState_Response::default_instance();
    case 9:
      return ::CChatRoom_RevokeInvite_Response::default_instance();
    case 10:
      return ::CChatRoom_CreateRole_Response::default_instance();
    case 11:
      return ::CChatRoom_GetRoles_Response::default_instance();
    case 12:
      return ::CChatRoom_RenameRole_Response::default_instance();
    case 13:
      return ::CChatRoom_ReorderRole_Response::default_instance();
    case 14:
      return ::CChatRoom_DeleteRole_Response::default_instance();
    case 15:
      return ::CChatRoom_GetRoleActions_Response::default_instance();
    case 16:
      return ::CChatRoom_ReplaceRoleActions_Response::default_instance();
    case 17:
      return ::CChatRoom_AddRoleToUser_Response::default_instance();
    case 18:
      return ::CChatRoom_GetRolesForUser_Response::default_instance();
    case 19:
      return ::CChatRoom_DeleteRoleFromUser_Response::default_instance();
    case 20:
      return ::CChatRoom_JoinChatRoomGroup_Response::default_instance();
    case 21:
      return ::CChatRoom_InviteFriendToChatRoomGroup_Response::default_instance();
    case 22:
      return ::CChatRoom_LeaveChatRoomGroup_Response::default_instance();
    case 23:
      return ::CChatRoom_CreateChatRoom_Response::default_instance();
    case 24:
      return ::CChatRoom_DeleteChatRoom_Response::default_instance();
    case 25:
      return ::CChatRoom_RenameChatRoom_Response::default_instance();
    case 26:
      return ::CChatRoom_ReorderChatRoom_Response::default_instance();
    case 27:
      return ::CChatRoom_SendChatMessage_Response::default_instance();
    case 28:
      return ::CChatRoom_JoinVoiceChat_Response::default_instance();
    case 29:
      return ::CChatRoom_LeaveVoiceChat_Response::default_instance();
    case 30:
      return ::CChatRoom_GetMessageHistory_Response::default_instance();
    case 31:
      return ::CChatRoom_GetMyChatRoomGroups_Response::default_instance();
    case 32:
      return ::CChatRoom_GetChatRoomGroupState_Response::default_instance();
    case 33:
      return ::CChatRoom_GetChatRoomGroupSummary_Response::default_instance();
    case 34:
      return ::NoResponse::default_instance();
    case 35:
      return ::CChatRoom_CreateInviteLink_Response::default_instance();
    case 36:
      return ::CChatRoom_GetInviteLinkInfo_Response::default_instance();
    case 37:
      return ::CChatRoom_GetInviteInfo_Response::default_instance();
    case 38:
      return ::CChatRoom_GetInviteLinksForGroup_Response::default_instance();
    case 39:
      return ::CChatRoom_GetBanList_Response::default_instance();
    case 40:
      return ::CChatRoom_GetInviteList_Response::default_instance();
    case 41:
      return ::CChatRoom_DeleteInviteLink_Response::default_instance();
    case 42:
      return ::CChatRoom_SetSessionActiveChatRoomGroups_Response::default_instance();
    case 43:
      return ::CChatRoom_SetUserChatGroupPreferences_Response::default_instance();
    case 44:
      return ::CChatRoom_DeleteChatMessages_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatRoom_Stub::ChatRoom_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatRoom_Stub::ChatRoom_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChatRoom_Stub::~ChatRoom_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatRoom_Stub::CreateChatRoomGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_CreateChatRoomGroup_Request* request,
                              ::CChatRoom_CreateChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChatRoom_Stub::SaveChatRoomGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SaveChatRoomGroup_Request* request,
                              ::CChatRoom_SaveChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChatRoom_Stub::RenameChatRoomGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_RenameChatRoomGroup_Request* request,
                              ::CChatRoom_RenameChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetChatRoomGroupTagline(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SetChatRoomGroupTagline_Request* request,
                              ::CChatRoom_SetChatRoomGroupTagline_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetChatRoomGroupAvatar(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SetChatRoomGroupAvatar_Request* request,
                              ::CChatRoom_SetChatRoomGroupAvatar_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetChatRoomGroupWatchingBroadcast(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* request,
                              ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChatRoom_Stub::MuteUserInGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_MuteUser_Request* request,
                              ::CChatRoom_MuteUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ChatRoom_Stub::KickUserFromGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_KickUser_Request* request,
                              ::CChatRoom_KickUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetUserBanState(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SetUserBanState_Request* request,
                              ::CChatRoom_SetUserBanState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ChatRoom_Stub::RevokeInviteToGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_RevokeInvite_Request* request,
                              ::CChatRoom_RevokeInvite_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ChatRoom_Stub::CreateRole(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_CreateRole_Request* request,
                              ::CChatRoom_CreateRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetRoles(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetRoles_Request* request,
                              ::CChatRoom_GetRoles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void ChatRoom_Stub::RenameRole(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_RenameRole_Request* request,
                              ::CChatRoom_RenameRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void ChatRoom_Stub::ReorderRole(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_ReorderRole_Request* request,
                              ::CChatRoom_ReorderRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteRole(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_DeleteRole_Request* request,
                              ::CChatRoom_DeleteRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetRoleActions(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetRoleActions_Request* request,
                              ::CChatRoom_GetRoleActions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void ChatRoom_Stub::ReplaceRoleActions(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_ReplaceRoleActions_Request* request,
                              ::CChatRoom_ReplaceRoleActions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void ChatRoom_Stub::AddRoleToUser(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_AddRoleToUser_Request* request,
                              ::CChatRoom_AddRoleToUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetRolesForUser(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetRolesForUser_Request* request,
                              ::CChatRoom_GetRolesForUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteRoleFromUser(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_DeleteRoleFromUser_Request* request,
                              ::CChatRoom_DeleteRoleFromUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void ChatRoom_Stub::JoinChatRoomGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_JoinChatRoomGroup_Request* request,
                              ::CChatRoom_JoinChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void ChatRoom_Stub::InviteFriendToChatRoomGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_InviteFriendToChatRoomGroup_Request* request,
                              ::CChatRoom_InviteFriendToChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void ChatRoom_Stub::LeaveChatRoomGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_LeaveChatRoomGroup_Request* request,
                              ::CChatRoom_LeaveChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void ChatRoom_Stub::CreateChatRoom(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_CreateChatRoom_Request* request,
                              ::CChatRoom_CreateChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteChatRoom(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_DeleteChatRoom_Request* request,
                              ::CChatRoom_DeleteChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void ChatRoom_Stub::RenameChatRoom(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_RenameChatRoom_Request* request,
                              ::CChatRoom_RenameChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void ChatRoom_Stub::ReorderChatRoom(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_ReorderChatRoom_Request* request,
                              ::CChatRoom_ReorderChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void ChatRoom_Stub::SendChatMessage(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SendChatMessage_Request* request,
                              ::CChatRoom_SendChatMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void ChatRoom_Stub::JoinVoiceChat(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_JoinVoiceChat_Request* request,
                              ::CChatRoom_JoinVoiceChat_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void ChatRoom_Stub::LeaveVoiceChat(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_LeaveVoiceChat_Request* request,
                              ::CChatRoom_LeaveVoiceChat_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetMessageHistory(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetMessageHistory_Request* request,
                              ::CChatRoom_GetMessageHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetMyChatRoomGroups(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetMyChatRoomGroups_Request* request,
                              ::CChatRoom_GetMyChatRoomGroups_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetChatRoomGroupState(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetChatRoomGroupState_Request* request,
                              ::CChatRoom_GetChatRoomGroupState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetChatRoomGroupSummary(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetChatRoomGroupSummary_Request* request,
                              ::CChatRoom_GetChatRoomGroupSummary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
void ChatRoom_Stub::AckChatMessage(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_AckChatMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34),
                       controller, request, response, done);
}
void ChatRoom_Stub::CreateInviteLink(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_CreateInviteLink_Request* request,
                              ::CChatRoom_CreateInviteLink_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteLinkInfo(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetInviteLinkInfo_Request* request,
                              ::CChatRoom_GetInviteLinkInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteInfo(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetInviteInfo_Request* request,
                              ::CChatRoom_GetInviteInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteLinksForGroup(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetInviteLinksForGroup_Request* request,
                              ::CChatRoom_GetInviteLinksForGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(38),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetBanList(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetBanList_Request* request,
                              ::CChatRoom_GetBanList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(39),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteList(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_GetInviteList_Request* request,
                              ::CChatRoom_GetInviteList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(40),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteInviteLink(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_DeleteInviteLink_Request* request,
                              ::CChatRoom_DeleteInviteLink_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(41),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetSessionActiveChatRoomGroups(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SetSessionActiveChatRoomGroups_Request* request,
                              ::CChatRoom_SetSessionActiveChatRoomGroups_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(42),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetUserChatGroupPreferences(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_SetUserChatGroupPreferences_Request* request,
                              ::CChatRoom_SetUserChatGroupPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(43),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteChatMessages(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_DeleteChatMessages_Request* request,
                              ::CChatRoom_DeleteChatMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(44),
                       controller, request, response, done);
}
// ===================================================================

ClanChatRooms::~ClanChatRooms() {}

const ::google::protobuf::ServiceDescriptor* ClanChatRooms::descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[2];
}

const ::google::protobuf::ServiceDescriptor* ClanChatRooms::GetDescriptor() {
  return descriptor();
}

void ClanChatRooms::GetClanChatRoomInfo(::google::protobuf::RpcController* controller,
                         const ::CClanChatRooms_GetClanChatRoomInfo_Request*,
                         ::CClanChatRooms_GetClanChatRoomInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClanChatRoomInfo() not implemented.");
  done->Run();
}

void ClanChatRooms::SetClanChatRoomPrivate(::google::protobuf::RpcController* controller,
                         const ::CClanChatRooms_SetClanChatRoomPrivate_Request*,
                         ::CClanChatRooms_SetClanChatRoomPrivate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetClanChatRoomPrivate() not implemented.");
  done->Run();
}

void ClanChatRooms::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[2]);
  switch(method->index()) {
    case 0:
      GetClanChatRoomInfo(controller,
             ::google::protobuf::down_cast<const ::CClanChatRooms_GetClanChatRoomInfo_Request*>(request),
             ::google::protobuf::down_cast< ::CClanChatRooms_GetClanChatRoomInfo_Response*>(response),
             done);
      break;
    case 1:
      SetClanChatRoomPrivate(controller,
             ::google::protobuf::down_cast<const ::CClanChatRooms_SetClanChatRoomPrivate_Request*>(request),
             ::google::protobuf::down_cast< ::CClanChatRooms_SetClanChatRoomPrivate_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ClanChatRooms::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CClanChatRooms_GetClanChatRoomInfo_Request::default_instance();
    case 1:
      return ::CClanChatRooms_SetClanChatRoomPrivate_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ClanChatRooms::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CClanChatRooms_GetClanChatRoomInfo_Response::default_instance();
    case 1:
      return ::CClanChatRooms_SetClanChatRoomPrivate_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ClanChatRooms_Stub::ClanChatRooms_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ClanChatRooms_Stub::ClanChatRooms_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ClanChatRooms_Stub::~ClanChatRooms_Stub() {
  if (owns_channel_) delete channel_;
}

void ClanChatRooms_Stub::GetClanChatRoomInfo(::google::protobuf::RpcController* controller,
                              const ::CClanChatRooms_GetClanChatRoomInfo_Request* request,
                              ::CClanChatRooms_GetClanChatRoomInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ClanChatRooms_Stub::SetClanChatRoomPrivate(::google::protobuf::RpcController* controller,
                              const ::CClanChatRooms_SetClanChatRoomPrivate_Request* request,
                              ::CClanChatRooms_SetClanChatRoomPrivate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

ChatRoomClient::~ChatRoomClient() {}

const ::google::protobuf::ServiceDescriptor* ChatRoomClient::descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[3];
}

const ::google::protobuf::ServiceDescriptor* ChatRoomClient::GetDescriptor() {
  return descriptor();
}

void ChatRoomClient::NotifyIncomingChatMessage(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_IncomingChatMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyIncomingChatMessage() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatMessageModified(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_ChatMessageModified_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatMessageModified() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyMemberStateChange(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_MemberStateChange_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyMemberStateChange() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatRoomHeaderStateChange(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_ChatRoomHeaderState_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatRoomHeaderStateChange() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatRoomGroupRoomsChange(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_ChatRoomGroupRoomsChange_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatRoomGroupRoomsChange() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyShouldRejoinChatRoomVoiceChat(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyShouldRejoinChatRoomVoiceChat() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatGroupUserStateChanged(::google::protobuf::RpcController* controller,
                         const ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatGroupUserStateChanged() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyAckChatMessageEcho(::google::protobuf::RpcController* controller,
                         const ::CChatRoom_AckChatMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAckChatMessageEcho() not implemented.");
  done->Run();
}

void ChatRoomClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[3]);
  switch(method->index()) {
    case 0:
      NotifyIncomingChatMessage(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_IncomingChatMessage_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 1:
      NotifyChatMessageModified(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_ChatMessageModified_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 2:
      NotifyMemberStateChange(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_MemberStateChange_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 3:
      NotifyChatRoomHeaderStateChange(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_ChatRoomHeaderState_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 4:
      NotifyChatRoomGroupRoomsChange(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_ChatRoomGroupRoomsChange_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 5:
      NotifyShouldRejoinChatRoomVoiceChat(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 6:
      NotifyChatGroupUserStateChanged(controller,
             ::google::protobuf::down_cast<const ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 7:
      NotifyAckChatMessageEcho(controller,
             ::google::protobuf::down_cast<const ::CChatRoom_AckChatMessage_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChatRoomClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatRoom_IncomingChatMessage_Notification::default_instance();
    case 1:
      return ::CChatRoom_ChatMessageModified_Notification::default_instance();
    case 2:
      return ::CChatRoom_MemberStateChange_Notification::default_instance();
    case 3:
      return ::CChatRoom_ChatRoomHeaderState_Notification::default_instance();
    case 4:
      return ::CChatRoom_ChatRoomGroupRoomsChange_Notification::default_instance();
    case 5:
      return ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::default_instance();
    case 6:
      return ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::default_instance();
    case 7:
      return ::CChatRoom_AckChatMessage_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ChatRoomClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::NoResponse::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatRoomClient_Stub::ChatRoomClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatRoomClient_Stub::ChatRoomClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChatRoomClient_Stub::~ChatRoomClient_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatRoomClient_Stub::NotifyIncomingChatMessage(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_IncomingChatMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatMessageModified(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_ChatMessageModified_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyMemberStateChange(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_MemberStateChange_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatRoomHeaderStateChange(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_ChatRoomHeaderState_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatRoomGroupRoomsChange(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_ChatRoomGroupRoomsChange_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyShouldRejoinChatRoomVoiceChat(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatGroupUserStateChanged(::google::protobuf::RpcController* controller,
                              const ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyAckChatMessageEcho(::google::protobuf::RpcController* controller,
                              const ::CChatRoom_AckChatMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
// ===================================================================

ChatUsability::~ChatUsability() {}

const ::google::protobuf::ServiceDescriptor* ChatUsability::descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[4];
}

const ::google::protobuf::ServiceDescriptor* ChatUsability::GetDescriptor() {
  return descriptor();
}

void ChatUsability::NotifyClientUsabilityMetrics(::google::protobuf::RpcController* controller,
                         const ::CChatUsability_ClientUsabilityMetrics_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClientUsabilityMetrics() not implemented.");
  done->Run();
}

void ChatUsability::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[4]);
  switch(method->index()) {
    case 0:
      NotifyClientUsabilityMetrics(controller,
             ::google::protobuf::down_cast<const ::CChatUsability_ClientUsabilityMetrics_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChatUsability::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatUsability_ClientUsabilityMetrics_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ChatUsability::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatUsability_Stub::ChatUsability_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatUsability_Stub::ChatUsability_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChatUsability_Stub::~ChatUsability_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatUsability_Stub::NotifyClientUsabilityMetrics(::google::protobuf::RpcController* controller,
                              const ::CChatUsability_ClientUsabilityMetrics_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ChatUsabilityClient::~ChatUsabilityClient() {}

const ::google::protobuf::ServiceDescriptor* ChatUsabilityClient::descriptor() {
  protobuf_steammessages_5fchat_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[5];
}

const ::google::protobuf::ServiceDescriptor* ChatUsabilityClient::GetDescriptor() {
  return descriptor();
}

void ChatUsabilityClient::NotifyRequestClientUsabilityMetrics(::google::protobuf::RpcController* controller,
                         const ::CChatUsability_RequestClientUsabilityMetrics_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyRequestClientUsabilityMetrics() not implemented.");
  done->Run();
}

void ChatUsabilityClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fchat_2esteamclient_2eproto::file_level_service_descriptors[5]);
  switch(method->index()) {
    case 0:
      NotifyRequestClientUsabilityMetrics(controller,
             ::google::protobuf::down_cast<const ::CChatUsability_RequestClientUsabilityMetrics_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChatUsabilityClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatUsability_RequestClientUsabilityMetrics_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ChatUsabilityClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatUsabilityClient_Stub::ChatUsabilityClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatUsabilityClient_Stub::ChatUsabilityClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChatUsabilityClient_Stub::~ChatUsabilityClient_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatUsabilityClient_Stub::NotifyRequestClientUsabilityMetrics(::google::protobuf::RpcController* controller,
                              const ::CChatUsability_RequestClientUsabilityMetrics_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChat_RequestFriendPersonaStates_Request* Arena::CreateMaybeMessage< ::CChat_RequestFriendPersonaStates_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChat_RequestFriendPersonaStates_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChat_RequestFriendPersonaStates_Response* Arena::CreateMaybeMessage< ::CChat_RequestFriendPersonaStates_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChat_RequestFriendPersonaStates_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateChatRoomGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRole* Arena::CreateMaybeMessage< ::CChatRole >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRole >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoleActions* Arena::CreateMaybeMessage< ::CChatRoleActions >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoleActions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatPartyBeacon* Arena::CreateMaybeMessage< ::CChatPartyBeacon >(Arena* arena) {
  return Arena::CreateInternal< ::CChatPartyBeacon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoomGroupHeaderState* Arena::CreateMaybeMessage< ::CChatRoomGroupHeaderState >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoomGroupHeaderState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoomMember* Arena::CreateMaybeMessage< ::CChatRoomMember >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoomMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoomState* Arena::CreateMaybeMessage< ::CChatRoomState >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoomState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoomGroupState* Arena::CreateMaybeMessage< ::CChatRoomGroupState >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoomGroupState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CUserChatRoomState* Arena::CreateMaybeMessage< ::CUserChatRoomState >(Arena* arena) {
  return Arena::CreateInternal< ::CUserChatRoomState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CUserChatRoomGroupState* Arena::CreateMaybeMessage< ::CUserChatRoomGroupState >(Arena* arena) {
  return Arena::CreateInternal< ::CUserChatRoomGroupState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateChatRoomGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SaveChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_SaveChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SaveChatRoomGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SaveChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_SaveChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SaveChatRoomGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RenameChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RenameChatRoomGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RenameChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RenameChatRoomGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetChatRoomGroupTagline_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupTagline_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetChatRoomGroupTagline_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetChatRoomGroupTagline_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupTagline_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetChatRoomGroupTagline_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetChatRoomGroupAvatar_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupAvatar_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetChatRoomGroupAvatar_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetChatRoomGroupAvatar_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupAvatar_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetChatRoomGroupAvatar_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_MuteUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_MuteUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_MuteUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_MuteUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_MuteUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_MuteUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_KickUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_KickUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_KickUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_KickUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_KickUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_KickUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetUserBanState_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetUserBanState_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetUserBanState_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetUserBanState_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetUserBanState_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetUserBanState_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RevokeInvite_Request* Arena::CreateMaybeMessage< ::CChatRoom_RevokeInvite_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RevokeInvite_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RevokeInvite_Response* Arena::CreateMaybeMessage< ::CChatRoom_RevokeInvite_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RevokeInvite_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateRole_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateRole_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateRole_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateRole_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetRoles_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetRoles_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetRoles_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetRoles_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetRoles_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetRoles_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RenameRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_RenameRole_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RenameRole_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RenameRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_RenameRole_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RenameRole_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ReorderRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_ReorderRole_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ReorderRole_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ReorderRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_ReorderRole_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ReorderRole_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRole_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteRole_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRole_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteRole_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetRoleActions_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetRoleActions_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetRoleActions_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetRoleActions_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetRoleActions_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetRoleActions_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ReplaceRoleActions_Request* Arena::CreateMaybeMessage< ::CChatRoom_ReplaceRoleActions_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ReplaceRoleActions_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ReplaceRoleActions_Response* Arena::CreateMaybeMessage< ::CChatRoom_ReplaceRoleActions_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ReplaceRoleActions_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_AddRoleToUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_AddRoleToUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_AddRoleToUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_AddRoleToUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_AddRoleToUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_AddRoleToUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetRolesForUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetRolesForUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetRolesForUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetRolesForUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetRolesForUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetRolesForUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteRoleFromUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRoleFromUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteRoleFromUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteRoleFromUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRoleFromUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteRoleFromUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_JoinChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_JoinChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_JoinChatRoomGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_JoinChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_JoinChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_JoinChatRoomGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_InviteFriendToChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_InviteFriendToChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_InviteFriendToChatRoomGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_InviteFriendToChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_InviteFriendToChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_InviteFriendToChatRoomGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_LeaveChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_LeaveChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_LeaveChatRoomGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_LeaveChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_LeaveChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_LeaveChatRoomGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoom_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateChatRoom_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoom_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateChatRoom_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatRoom_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteChatRoom_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatRoom_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteChatRoom_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RenameChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoom_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RenameChatRoom_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_RenameChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoom_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_RenameChatRoom_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ReorderChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_ReorderChatRoom_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ReorderChatRoom_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ReorderChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_ReorderChatRoom_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ReorderChatRoom_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SendChatMessage_Request* Arena::CreateMaybeMessage< ::CChatRoom_SendChatMessage_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SendChatMessage_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SendChatMessage_Response* Arena::CreateMaybeMessage< ::CChatRoom_SendChatMessage_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SendChatMessage_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_JoinVoiceChat_Request* Arena::CreateMaybeMessage< ::CChatRoom_JoinVoiceChat_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_JoinVoiceChat_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_JoinVoiceChat_Response* Arena::CreateMaybeMessage< ::CChatRoom_JoinVoiceChat_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_JoinVoiceChat_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_LeaveVoiceChat_Request* Arena::CreateMaybeMessage< ::CChatRoom_LeaveVoiceChat_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_LeaveVoiceChat_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_LeaveVoiceChat_Response* Arena::CreateMaybeMessage< ::CChatRoom_LeaveVoiceChat_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_LeaveVoiceChat_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetMessageHistory_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetMessageHistory_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerMessage* Arena::CreateMaybeMessage< ::ServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetMessageHistory_Response_ChatMessage* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Response_ChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetMessageHistory_Response_ChatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetMessageHistory_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetMessageHistory_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetMyChatRoomGroups_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetMyChatRoomGroups_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetMyChatRoomGroups_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetChatRoomGroupSummary_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupSummary_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetChatRoomGroupSummary_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoomSummaryPair* Arena::CreateMaybeMessage< ::CChatRoomSummaryPair >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoomSummaryPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetMyChatRoomGroups_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetMyChatRoomGroups_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetMyChatRoomGroups_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetChatRoomGroupState_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupState_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetChatRoomGroupState_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetChatRoomGroupState_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupState_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetChatRoomGroupState_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetChatRoomGroupSummary_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupSummary_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetChatRoomGroupSummary_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_AckChatMessage_Notification* Arena::CreateMaybeMessage< ::CChatRoom_AckChatMessage_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_AckChatMessage_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateInviteLink_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateInviteLink_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateInviteLink_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_CreateInviteLink_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateInviteLink_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_CreateInviteLink_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteLinkInfo_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinkInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteLinkInfo_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteLinkInfo_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinkInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteLinkInfo_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteInfo_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteInfo_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteInfo_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteInfo_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteLinksForGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinksForGroup_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteLinksForGroup_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteLinksForGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinksForGroup_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteLinksForGroup_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetBanList_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetBanList_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetBanList_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetBanList_Response_BanInfo* Arena::CreateMaybeMessage< ::CChatRoom_GetBanList_Response_BanInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetBanList_Response_BanInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetBanList_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetBanList_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetBanList_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteList_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteList_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteList_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoomGroupInvite* Arena::CreateMaybeMessage< ::CChatRoomGroupInvite >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoomGroupInvite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_GetInviteList_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteList_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_GetInviteList_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteInviteLink_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteInviteLink_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteInviteLink_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteInviteLink_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteInviteLink_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteInviteLink_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetSessionActiveChatRoomGroups_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetSessionActiveChatRoomGroups_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetSessionActiveChatRoomGroups_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetSessionActiveChatRoomGroups_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetSessionActiveChatRoomGroups_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetSessionActiveChatRoomGroups_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetUserChatGroupPreferences_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_SetUserChatGroupPreferences_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteChatMessages_Request_Message* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatMessages_Request_Message >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteChatMessages_Request_Message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteChatMessages_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatMessages_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteChatMessages_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_DeleteChatMessages_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatMessages_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_DeleteChatMessages_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CClanChatRooms_GetClanChatRoomInfo_Request* Arena::CreateMaybeMessage< ::CClanChatRooms_GetClanChatRoomInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CClanChatRooms_GetClanChatRoomInfo_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CClanChatRooms_GetClanChatRoomInfo_Response* Arena::CreateMaybeMessage< ::CClanChatRooms_GetClanChatRoomInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CClanChatRooms_GetClanChatRoomInfo_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CClanChatRooms_SetClanChatRoomPrivate_Request* Arena::CreateMaybeMessage< ::CClanChatRooms_SetClanChatRoomPrivate_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CClanChatRooms_SetClanChatRoomPrivate_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CClanChatRooms_SetClanChatRoomPrivate_Response* Arena::CreateMaybeMessage< ::CClanChatRooms_SetClanChatRoomPrivate_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CClanChatRooms_SetClanChatRoomPrivate_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatMentions* Arena::CreateMaybeMessage< ::CChatMentions >(Arena* arena) {
  return Arena::CreateInternal< ::CChatMentions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_IncomingChatMessage_Notification* Arena::CreateMaybeMessage< ::CChatRoom_IncomingChatMessage_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_IncomingChatMessage_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ChatMessageModified_Notification_ChatMessage* Arena::CreateMaybeMessage< ::CChatRoom_ChatMessageModified_Notification_ChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ChatMessageModified_Notification_ChatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ChatMessageModified_Notification* Arena::CreateMaybeMessage< ::CChatRoom_ChatMessageModified_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ChatMessageModified_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_MemberStateChange_Notification* Arena::CreateMaybeMessage< ::CChatRoom_MemberStateChange_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_MemberStateChange_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ChatRoomHeaderState_Notification* Arena::CreateMaybeMessage< ::CChatRoom_ChatRoomHeaderState_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ChatRoomHeaderState_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_ChatRoomGroupRoomsChange_Notification* Arena::CreateMaybeMessage< ::CChatRoom_ChatRoomGroupRoomsChange_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_ChatRoomGroupRoomsChange_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* Arena::CreateMaybeMessage< ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* Arena::CreateMaybeMessage< ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_Settings* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_Settings >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_Settings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_UIState* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_ClientUsabilityMetrics_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CChatUsability_RequestClientUsabilityMetrics_Notification* Arena::CreateMaybeMessage< ::CChatUsability_RequestClientUsabilityMetrics_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CChatUsability_RequestClientUsabilityMetrics_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
