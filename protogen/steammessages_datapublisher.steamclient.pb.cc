// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_datapublisher.steamclient.proto

#include "steammessages_datapublisher.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CDataPublisher_ClientContentCorruptionReport_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataPublisher_ClientContentCorruptionReport_Notification>
      _instance;
} _CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_;
class CValveHWSurvey_GetSurveySchedule_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CValveHWSurvey_GetSurveySchedule_Request>
      _instance;
} _CValveHWSurvey_GetSurveySchedule_Request_default_instance_;
class CValveHWSurvey_GetSurveySchedule_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CValveHWSurvey_GetSurveySchedule_Response>
      _instance;
} _CValveHWSurvey_GetSurveySchedule_Response_default_instance_;
namespace protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto {
static void InitDefaultsCDataPublisher_ClientContentCorruptionReport_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_;
    new (ptr) ::CDataPublisher_ClientContentCorruptionReport_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataPublisher_ClientContentCorruptionReport_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDataPublisher_ClientContentCorruptionReport_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDataPublisher_ClientContentCorruptionReport_Notification}, {}};

static void InitDefaultsCValveHWSurvey_GetSurveySchedule_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CValveHWSurvey_GetSurveySchedule_Request_default_instance_;
    new (ptr) ::CValveHWSurvey_GetSurveySchedule_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CValveHWSurvey_GetSurveySchedule_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CValveHWSurvey_GetSurveySchedule_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCValveHWSurvey_GetSurveySchedule_Request}, {}};

static void InitDefaultsCValveHWSurvey_GetSurveySchedule_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CValveHWSurvey_GetSurveySchedule_Response_default_instance_;
    new (ptr) ::CValveHWSurvey_GetSurveySchedule_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CValveHWSurvey_GetSurveySchedule_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CValveHWSurvey_GetSurveySchedule_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCValveHWSurvey_GetSurveySchedule_Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDataPublisher_ClientContentCorruptionReport_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CValveHWSurvey_GetSurveySchedule_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CValveHWSurvey_GetSurveySchedule_Response.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, depotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, download_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, objectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, is_manifest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, object_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, corruption_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, used_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataPublisher_ClientContentCorruptionReport_Notification, oc_proxy_detected_),
  2,
  3,
  0,
  1,
  4,
  7,
  6,
  5,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Request, surveydatetoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Request, surveydatetokenversion_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Response, surveydatetoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CValveHWSurvey_GetSurveySchedule_Response, surveydatetokenversion_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::CDataPublisher_ClientContentCorruptionReport_Notification)},
  { 25, 32, sizeof(::CValveHWSurvey_GetSurveySchedule_Request)},
  { 34, 41, sizeof(::CValveHWSurvey_GetSurveySchedule_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CValveHWSurvey_GetSurveySchedule_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CValveHWSurvey_GetSurveySchedule_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_datapublisher.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-steammessages_datapublisher.steamclien"
      "t.proto\032,steammessages_unified_base.stea"
      "mclient.proto\"\375\003\n9CDataPublisher_ClientC"
      "ontentCorruptionReport_Notification\022\r\n\005a"
      "ppid\030\001 \001(\r\022\017\n\007depotid\030\002 \001(\r\0229\n\017download_"
      "source\030\003 \001(\tB \202\265\030\034host name of download "
      "source\022.\n\010objectid\030\004 \001(\tB\034\202\265\030\030Chunk SHA "
      "or Manifest ID\022\"\n\006cellid\030\005 \001(\rB\022\202\265\030\016Clie"
      "nt Cell ID\022>\n\013is_manifest\030\006 \001(\010B)\202\265\030%The"
      " object is a manifest, not a chunk\022-\n\013ob"
      "ject_size\030\007 \001(\004B\030\202\265\030\024object size in byte"
      "s\0227\n\017corruption_type\030\010 \001(\rB\036\202\265\030\032See ECon"
      "tentCorruptionType\022-\n\nused_https\030\t \001(\010B\031"
      "\202\265\030\025the request was HTTPS\022:\n\021oc_proxy_de"
      "tected\030\n \001(\010B\037\202\265\030\033detected an OpenCache "
      "proxy\"c\n(CValveHWSurvey_GetSurveySchedul"
      "e_Request\022\027\n\017surveydatetoken\030\001 \001(\t\022\036\n\026su"
      "rveydatetokenversion\030\002 \001(\006\"d\n)CValveHWSu"
      "rvey_GetSurveySchedule_Response\022\027\n\017surve"
      "ydatetoken\030\001 \001(\r\022\036\n\026surveydatetokenversi"
      "on\030\002 \001(\0062\242\001\n\rDataPublisher\022h\n\035ClientCont"
      "entCorruptionReport\022:.CDataPublisher_Cli"
      "entContentCorruptionReport_Notification\032"
      "\013.NoResponse\032\'\202\265\030#Data Publisher (DP) se"
      "rver services2\254\001\n\rValveHWSurvey\022\207\001\n\021GetS"
      "urveySchedule\022).CValveHWSurvey_GetSurvey"
      "Schedule_Request\032*.CValveHWSurvey_GetSur"
      "veySchedule_Response\"\033\202\265\030\027Should I run t"
      "he survey\032\021\202\265\030\rValveHWSurveyB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_datapublisher.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto

// ===================================================================

void CDataPublisher_ClientContentCorruptionReport_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataPublisher_ClientContentCorruptionReport_Notification::kAppidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kDepotidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kDownloadSourceFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kObjectidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kCellidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kIsManifestFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kObjectSizeFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kCorruptionTypeFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kUsedHttpsFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kOcProxyDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataPublisher_ClientContentCorruptionReport_Notification::CDataPublisher_ClientContentCorruptionReport_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::scc_info_CDataPublisher_ClientContentCorruptionReport_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataPublisher_ClientContentCorruptionReport_Notification)
}
CDataPublisher_ClientContentCorruptionReport_Notification::CDataPublisher_ClientContentCorruptionReport_Notification(const CDataPublisher_ClientContentCorruptionReport_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  download_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_download_source()) {
    download_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_source_);
  }
  objectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_objectid()) {
    objectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectid_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&oc_proxy_detected_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(oc_proxy_detected_));
  // @@protoc_insertion_point(copy_constructor:CDataPublisher_ClientContentCorruptionReport_Notification)
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SharedCtor() {
  download_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oc_proxy_detected_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(oc_proxy_detected_));
}

CDataPublisher_ClientContentCorruptionReport_Notification::~CDataPublisher_ClientContentCorruptionReport_Notification() {
  // @@protoc_insertion_point(destructor:CDataPublisher_ClientContentCorruptionReport_Notification)
  SharedDtor();
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SharedDtor() {
  download_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataPublisher_ClientContentCorruptionReport_Notification::descriptor() {
  ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataPublisher_ClientContentCorruptionReport_Notification& CDataPublisher_ClientContentCorruptionReport_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::scc_info_CDataPublisher_ClientContentCorruptionReport_Notification.base);
  return *internal_default_instance();
}


void CDataPublisher_ClientContentCorruptionReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      download_source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      objectid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_manifest_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_manifest_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&used_https_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&oc_proxy_detected_) -
        reinterpret_cast<char*>(&used_https_)) + sizeof(oc_proxy_detected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataPublisher_ClientContentCorruptionReport_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depotid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_depotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string download_source = 3 [(.description) = "host name of download source"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_source().data(), static_cast<int>(this->download_source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDataPublisher_ClientContentCorruptionReport_Notification.download_source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string objectid = 4 [(.description) = "Chunk SHA or Manifest ID"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objectid().data(), static_cast<int>(this->objectid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDataPublisher_ClientContentCorruptionReport_Notification.objectid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 5 [(.description) = "Client Cell ID"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_manifest = 6 [(.description) = "The object is a manifest, not a chunk"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_manifest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_manifest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 object_size = 7 [(.description) = "object size in bytes"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_object_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 corruption_type = 8 [(.description) = "See EContentCorruptionType"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_corruption_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corruption_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool used_https = 9 [(.description) = "the request was HTTPS"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_used_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &used_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool oc_proxy_detected = 10 [(.description) = "detected an OpenCache proxy"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_oc_proxy_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oc_proxy_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataPublisher_ClientContentCorruptionReport_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataPublisher_ClientContentCorruptionReport_Notification)
  return false;
#undef DO_
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depotid(), output);
  }

  // optional string download_source = 3 [(.description) = "host name of download source"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_source().data(), static_cast<int>(this->download_source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataPublisher_ClientContentCorruptionReport_Notification.download_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->download_source(), output);
  }

  // optional string objectid = 4 [(.description) = "Chunk SHA or Manifest ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectid().data(), static_cast<int>(this->objectid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataPublisher_ClientContentCorruptionReport_Notification.objectid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->objectid(), output);
  }

  // optional uint32 cellid = 5 [(.description) = "Client Cell ID"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cellid(), output);
  }

  // optional bool is_manifest = 6 [(.description) = "The object is a manifest, not a chunk"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_manifest(), output);
  }

  // optional uint64 object_size = 7 [(.description) = "object size in bytes"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->object_size(), output);
  }

  // optional uint32 corruption_type = 8 [(.description) = "See EContentCorruptionType"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->corruption_type(), output);
  }

  // optional bool used_https = 9 [(.description) = "the request was HTTPS"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->used_https(), output);
  }

  // optional bool oc_proxy_detected = 10 [(.description) = "detected an OpenCache proxy"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->oc_proxy_detected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataPublisher_ClientContentCorruptionReport_Notification)
}

::google::protobuf::uint8* CDataPublisher_ClientContentCorruptionReport_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depotid(), target);
  }

  // optional string download_source = 3 [(.description) = "host name of download source"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_source().data(), static_cast<int>(this->download_source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataPublisher_ClientContentCorruptionReport_Notification.download_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->download_source(), target);
  }

  // optional string objectid = 4 [(.description) = "Chunk SHA or Manifest ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectid().data(), static_cast<int>(this->objectid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataPublisher_ClientContentCorruptionReport_Notification.objectid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->objectid(), target);
  }

  // optional uint32 cellid = 5 [(.description) = "Client Cell ID"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cellid(), target);
  }

  // optional bool is_manifest = 6 [(.description) = "The object is a manifest, not a chunk"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_manifest(), target);
  }

  // optional uint64 object_size = 7 [(.description) = "object size in bytes"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->object_size(), target);
  }

  // optional uint32 corruption_type = 8 [(.description) = "See EContentCorruptionType"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->corruption_type(), target);
  }

  // optional bool used_https = 9 [(.description) = "the request was HTTPS"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->used_https(), target);
  }

  // optional bool oc_proxy_detected = 10 [(.description) = "detected an OpenCache proxy"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->oc_proxy_detected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataPublisher_ClientContentCorruptionReport_Notification)
  return target;
}

size_t CDataPublisher_ClientContentCorruptionReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string download_source = 3 [(.description) = "host name of download source"];
    if (has_download_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_source());
    }

    // optional string objectid = 4 [(.description) = "Chunk SHA or Manifest ID"];
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 depotid = 2;
    if (has_depotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depotid());
    }

    // optional uint32 cellid = 5 [(.description) = "Client Cell ID"];
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional uint32 corruption_type = 8 [(.description) = "See EContentCorruptionType"];
    if (has_corruption_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corruption_type());
    }

    // optional uint64 object_size = 7 [(.description) = "object size in bytes"];
    if (has_object_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_size());
    }

    // optional bool is_manifest = 6 [(.description) = "The object is a manifest, not a chunk"];
    if (has_is_manifest()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool used_https = 9 [(.description) = "the request was HTTPS"];
    if (has_used_https()) {
      total_size += 1 + 1;
    }

    // optional bool oc_proxy_detected = 10 [(.description) = "detected an OpenCache proxy"];
    if (has_oc_proxy_detected()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataPublisher_ClientContentCorruptionReport_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataPublisher_ClientContentCorruptionReport_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataPublisher_ClientContentCorruptionReport_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataPublisher_ClientContentCorruptionReport_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataPublisher_ClientContentCorruptionReport_Notification)
    MergeFrom(*source);
  }
}

void CDataPublisher_ClientContentCorruptionReport_Notification::MergeFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_download_source();
      download_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_objectid();
      objectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectid_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      depotid_ = from.depotid_;
    }
    if (cached_has_bits & 0x00000010u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000020u) {
      corruption_type_ = from.corruption_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      object_size_ = from.object_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_manifest_ = from.is_manifest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      used_https_ = from.used_https_;
    }
    if (cached_has_bits & 0x00000200u) {
      oc_proxy_detected_ = from.oc_proxy_detected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataPublisher_ClientContentCorruptionReport_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataPublisher_ClientContentCorruptionReport_Notification::CopyFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataPublisher_ClientContentCorruptionReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataPublisher_ClientContentCorruptionReport_Notification::IsInitialized() const {
  return true;
}

void CDataPublisher_ClientContentCorruptionReport_Notification::Swap(CDataPublisher_ClientContentCorruptionReport_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataPublisher_ClientContentCorruptionReport_Notification::InternalSwap(CDataPublisher_ClientContentCorruptionReport_Notification* other) {
  using std::swap;
  download_source_.Swap(&other->download_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectid_.Swap(&other->objectid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(depotid_, other->depotid_);
  swap(cellid_, other->cellid_);
  swap(corruption_type_, other->corruption_type_);
  swap(object_size_, other->object_size_);
  swap(is_manifest_, other->is_manifest_);
  swap(used_https_, other->used_https_);
  swap(oc_proxy_detected_, other->oc_proxy_detected_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataPublisher_ClientContentCorruptionReport_Notification::GetMetadata() const {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CValveHWSurvey_GetSurveySchedule_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CValveHWSurvey_GetSurveySchedule_Request::kSurveydatetokenFieldNumber;
const int CValveHWSurvey_GetSurveySchedule_Request::kSurveydatetokenversionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CValveHWSurvey_GetSurveySchedule_Request::CValveHWSurvey_GetSurveySchedule_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::scc_info_CValveHWSurvey_GetSurveySchedule_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CValveHWSurvey_GetSurveySchedule_Request)
}
CValveHWSurvey_GetSurveySchedule_Request::CValveHWSurvey_GetSurveySchedule_Request(const CValveHWSurvey_GetSurveySchedule_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  surveydatetoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_surveydatetoken()) {
    surveydatetoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surveydatetoken_);
  }
  surveydatetokenversion_ = from.surveydatetokenversion_;
  // @@protoc_insertion_point(copy_constructor:CValveHWSurvey_GetSurveySchedule_Request)
}

void CValveHWSurvey_GetSurveySchedule_Request::SharedCtor() {
  surveydatetoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  surveydatetokenversion_ = GOOGLE_ULONGLONG(0);
}

CValveHWSurvey_GetSurveySchedule_Request::~CValveHWSurvey_GetSurveySchedule_Request() {
  // @@protoc_insertion_point(destructor:CValveHWSurvey_GetSurveySchedule_Request)
  SharedDtor();
}

void CValveHWSurvey_GetSurveySchedule_Request::SharedDtor() {
  surveydatetoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CValveHWSurvey_GetSurveySchedule_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CValveHWSurvey_GetSurveySchedule_Request::descriptor() {
  ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CValveHWSurvey_GetSurveySchedule_Request& CValveHWSurvey_GetSurveySchedule_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::scc_info_CValveHWSurvey_GetSurveySchedule_Request.base);
  return *internal_default_instance();
}


void CValveHWSurvey_GetSurveySchedule_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CValveHWSurvey_GetSurveySchedule_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    surveydatetoken_.ClearNonDefaultToEmptyNoArena();
  }
  surveydatetokenversion_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CValveHWSurvey_GetSurveySchedule_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CValveHWSurvey_GetSurveySchedule_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string surveydatetoken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surveydatetoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->surveydatetoken().data(), static_cast<int>(this->surveydatetoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 surveydatetokenversion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_surveydatetokenversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &surveydatetokenversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CValveHWSurvey_GetSurveySchedule_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CValveHWSurvey_GetSurveySchedule_Request)
  return false;
#undef DO_
}

void CValveHWSurvey_GetSurveySchedule_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CValveHWSurvey_GetSurveySchedule_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string surveydatetoken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surveydatetoken().data(), static_cast<int>(this->surveydatetoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->surveydatetoken(), output);
  }

  // optional fixed64 surveydatetokenversion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->surveydatetokenversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CValveHWSurvey_GetSurveySchedule_Request)
}

::google::protobuf::uint8* CValveHWSurvey_GetSurveySchedule_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CValveHWSurvey_GetSurveySchedule_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string surveydatetoken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surveydatetoken().data(), static_cast<int>(this->surveydatetoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surveydatetoken(), target);
  }

  // optional fixed64 surveydatetokenversion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->surveydatetokenversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CValveHWSurvey_GetSurveySchedule_Request)
  return target;
}

size_t CValveHWSurvey_GetSurveySchedule_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CValveHWSurvey_GetSurveySchedule_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string surveydatetoken = 1;
    if (has_surveydatetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surveydatetoken());
    }

    // optional fixed64 surveydatetokenversion = 2;
    if (has_surveydatetokenversion()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CValveHWSurvey_GetSurveySchedule_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CValveHWSurvey_GetSurveySchedule_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CValveHWSurvey_GetSurveySchedule_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CValveHWSurvey_GetSurveySchedule_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CValveHWSurvey_GetSurveySchedule_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CValveHWSurvey_GetSurveySchedule_Request)
    MergeFrom(*source);
  }
}

void CValveHWSurvey_GetSurveySchedule_Request::MergeFrom(const CValveHWSurvey_GetSurveySchedule_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CValveHWSurvey_GetSurveySchedule_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_surveydatetoken();
      surveydatetoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surveydatetoken_);
    }
    if (cached_has_bits & 0x00000002u) {
      surveydatetokenversion_ = from.surveydatetokenversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CValveHWSurvey_GetSurveySchedule_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CValveHWSurvey_GetSurveySchedule_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CValveHWSurvey_GetSurveySchedule_Request::CopyFrom(const CValveHWSurvey_GetSurveySchedule_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CValveHWSurvey_GetSurveySchedule_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CValveHWSurvey_GetSurveySchedule_Request::IsInitialized() const {
  return true;
}

void CValveHWSurvey_GetSurveySchedule_Request::Swap(CValveHWSurvey_GetSurveySchedule_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CValveHWSurvey_GetSurveySchedule_Request::InternalSwap(CValveHWSurvey_GetSurveySchedule_Request* other) {
  using std::swap;
  surveydatetoken_.Swap(&other->surveydatetoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(surveydatetokenversion_, other->surveydatetokenversion_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CValveHWSurvey_GetSurveySchedule_Request::GetMetadata() const {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CValveHWSurvey_GetSurveySchedule_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CValveHWSurvey_GetSurveySchedule_Response::kSurveydatetokenFieldNumber;
const int CValveHWSurvey_GetSurveySchedule_Response::kSurveydatetokenversionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CValveHWSurvey_GetSurveySchedule_Response::CValveHWSurvey_GetSurveySchedule_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::scc_info_CValveHWSurvey_GetSurveySchedule_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CValveHWSurvey_GetSurveySchedule_Response)
}
CValveHWSurvey_GetSurveySchedule_Response::CValveHWSurvey_GetSurveySchedule_Response(const CValveHWSurvey_GetSurveySchedule_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&surveydatetokenversion_, &from.surveydatetokenversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&surveydatetoken_) -
    reinterpret_cast<char*>(&surveydatetokenversion_)) + sizeof(surveydatetoken_));
  // @@protoc_insertion_point(copy_constructor:CValveHWSurvey_GetSurveySchedule_Response)
}

void CValveHWSurvey_GetSurveySchedule_Response::SharedCtor() {
  ::memset(&surveydatetokenversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surveydatetoken_) -
      reinterpret_cast<char*>(&surveydatetokenversion_)) + sizeof(surveydatetoken_));
}

CValveHWSurvey_GetSurveySchedule_Response::~CValveHWSurvey_GetSurveySchedule_Response() {
  // @@protoc_insertion_point(destructor:CValveHWSurvey_GetSurveySchedule_Response)
  SharedDtor();
}

void CValveHWSurvey_GetSurveySchedule_Response::SharedDtor() {
}

void CValveHWSurvey_GetSurveySchedule_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CValveHWSurvey_GetSurveySchedule_Response::descriptor() {
  ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CValveHWSurvey_GetSurveySchedule_Response& CValveHWSurvey_GetSurveySchedule_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::scc_info_CValveHWSurvey_GetSurveySchedule_Response.base);
  return *internal_default_instance();
}


void CValveHWSurvey_GetSurveySchedule_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CValveHWSurvey_GetSurveySchedule_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&surveydatetokenversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&surveydatetoken_) -
        reinterpret_cast<char*>(&surveydatetokenversion_)) + sizeof(surveydatetoken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CValveHWSurvey_GetSurveySchedule_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CValveHWSurvey_GetSurveySchedule_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 surveydatetoken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_surveydatetoken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surveydatetoken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 surveydatetokenversion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_surveydatetokenversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &surveydatetokenversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CValveHWSurvey_GetSurveySchedule_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CValveHWSurvey_GetSurveySchedule_Response)
  return false;
#undef DO_
}

void CValveHWSurvey_GetSurveySchedule_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CValveHWSurvey_GetSurveySchedule_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 surveydatetoken = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->surveydatetoken(), output);
  }

  // optional fixed64 surveydatetokenversion = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->surveydatetokenversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CValveHWSurvey_GetSurveySchedule_Response)
}

::google::protobuf::uint8* CValveHWSurvey_GetSurveySchedule_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CValveHWSurvey_GetSurveySchedule_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 surveydatetoken = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->surveydatetoken(), target);
  }

  // optional fixed64 surveydatetokenversion = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->surveydatetokenversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CValveHWSurvey_GetSurveySchedule_Response)
  return target;
}

size_t CValveHWSurvey_GetSurveySchedule_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CValveHWSurvey_GetSurveySchedule_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 surveydatetokenversion = 2;
    if (has_surveydatetokenversion()) {
      total_size += 1 + 8;
    }

    // optional uint32 surveydatetoken = 1;
    if (has_surveydatetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surveydatetoken());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CValveHWSurvey_GetSurveySchedule_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CValveHWSurvey_GetSurveySchedule_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CValveHWSurvey_GetSurveySchedule_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CValveHWSurvey_GetSurveySchedule_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CValveHWSurvey_GetSurveySchedule_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CValveHWSurvey_GetSurveySchedule_Response)
    MergeFrom(*source);
  }
}

void CValveHWSurvey_GetSurveySchedule_Response::MergeFrom(const CValveHWSurvey_GetSurveySchedule_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CValveHWSurvey_GetSurveySchedule_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      surveydatetokenversion_ = from.surveydatetokenversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      surveydatetoken_ = from.surveydatetoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CValveHWSurvey_GetSurveySchedule_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CValveHWSurvey_GetSurveySchedule_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CValveHWSurvey_GetSurveySchedule_Response::CopyFrom(const CValveHWSurvey_GetSurveySchedule_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CValveHWSurvey_GetSurveySchedule_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CValveHWSurvey_GetSurveySchedule_Response::IsInitialized() const {
  return true;
}

void CValveHWSurvey_GetSurveySchedule_Response::Swap(CValveHWSurvey_GetSurveySchedule_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CValveHWSurvey_GetSurveySchedule_Response::InternalSwap(CValveHWSurvey_GetSurveySchedule_Response* other) {
  using std::swap;
  swap(surveydatetokenversion_, other->surveydatetokenversion_);
  swap(surveydatetoken_, other->surveydatetoken_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CValveHWSurvey_GetSurveySchedule_Response::GetMetadata() const {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DataPublisher::~DataPublisher() {}

const ::google::protobuf::ServiceDescriptor* DataPublisher::descriptor() {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* DataPublisher::GetDescriptor() {
  return descriptor();
}

void DataPublisher::ClientContentCorruptionReport(::google::protobuf::RpcController* controller,
                         const ::CDataPublisher_ClientContentCorruptionReport_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientContentCorruptionReport() not implemented.");
  done->Run();
}

void DataPublisher::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ClientContentCorruptionReport(controller,
             ::google::protobuf::down_cast<const ::CDataPublisher_ClientContentCorruptionReport_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DataPublisher::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CDataPublisher_ClientContentCorruptionReport_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DataPublisher::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DataPublisher_Stub::DataPublisher_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DataPublisher_Stub::DataPublisher_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DataPublisher_Stub::~DataPublisher_Stub() {
  if (owns_channel_) delete channel_;
}

void DataPublisher_Stub::ClientContentCorruptionReport(::google::protobuf::RpcController* controller,
                              const ::CDataPublisher_ClientContentCorruptionReport_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ValveHWSurvey::~ValveHWSurvey() {}

const ::google::protobuf::ServiceDescriptor* ValveHWSurvey::descriptor() {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* ValveHWSurvey::GetDescriptor() {
  return descriptor();
}

void ValveHWSurvey::GetSurveySchedule(::google::protobuf::RpcController* controller,
                         const ::CValveHWSurvey_GetSurveySchedule_Request*,
                         ::CValveHWSurvey_GetSurveySchedule_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSurveySchedule() not implemented.");
  done->Run();
}

void ValveHWSurvey::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      GetSurveySchedule(controller,
             ::google::protobuf::down_cast<const ::CValveHWSurvey_GetSurveySchedule_Request*>(request),
             ::google::protobuf::down_cast< ::CValveHWSurvey_GetSurveySchedule_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ValveHWSurvey::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CValveHWSurvey_GetSurveySchedule_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ValveHWSurvey::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CValveHWSurvey_GetSurveySchedule_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ValveHWSurvey_Stub::ValveHWSurvey_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ValveHWSurvey_Stub::ValveHWSurvey_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ValveHWSurvey_Stub::~ValveHWSurvey_Stub() {
  if (owns_channel_) delete channel_;
}

void ValveHWSurvey_Stub::GetSurveySchedule(::google::protobuf::RpcController* controller,
                              const ::CValveHWSurvey_GetSurveySchedule_Request* request,
                              ::CValveHWSurvey_GetSurveySchedule_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataPublisher_ClientContentCorruptionReport_Notification* Arena::CreateMaybeMessage< ::CDataPublisher_ClientContentCorruptionReport_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CDataPublisher_ClientContentCorruptionReport_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CValveHWSurvey_GetSurveySchedule_Request* Arena::CreateMaybeMessage< ::CValveHWSurvey_GetSurveySchedule_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CValveHWSurvey_GetSurveySchedule_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CValveHWSurvey_GetSurveySchedule_Response* Arena::CreateMaybeMessage< ::CValveHWSurvey_GetSurveySchedule_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CValveHWSurvey_GetSurveySchedule_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
