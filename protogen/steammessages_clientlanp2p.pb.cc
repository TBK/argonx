// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientlanp2p.proto

#include "steammessages_clientlanp2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fclientlanp2p_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fclientlanp2p_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fclientlanp2p_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunks_ChunkKey;
}  // namespace protobuf_steammessages_5fclientlanp2p_2eproto
class CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunks_ChunkKey>
      _instance;
} _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
class CMsgClientLANP2PRequestChunksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunks>
      _instance;
} _CMsgClientLANP2PRequestChunks_default_instance_;
class CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunksResponse_ChunkData>
      _instance;
} _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
class CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunksResponse>
      _instance;
} _CMsgClientLANP2PRequestChunksResponse_default_instance_;
namespace protobuf_steammessages_5fclientlanp2p_2eproto {
static void InitDefaultsCMsgClientLANP2PRequestChunks_ChunkKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
    new (ptr) ::CMsgClientLANP2PRequestChunks_ChunkKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientLANP2PRequestChunks_ChunkKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunks_ChunkKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLANP2PRequestChunks_ChunkKey}, {}};

static void InitDefaultsCMsgClientLANP2PRequestChunks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientLANP2PRequestChunks_default_instance_;
    new (ptr) ::CMsgClientLANP2PRequestChunks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientLANP2PRequestChunks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientLANP2PRequestChunks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientLANP2PRequestChunks}, {
      &protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunks_ChunkKey.base,}};

static void InitDefaultsCMsgClientLANP2PRequestChunksResponse_ChunkData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
    new (ptr) ::CMsgClientLANP2PRequestChunksResponse_ChunkData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientLANP2PRequestChunksResponse_ChunkData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientLANP2PRequestChunksResponse_ChunkData}, {}};

static void InitDefaultsCMsgClientLANP2PRequestChunksResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientLANP2PRequestChunksResponse_default_instance_;
    new (ptr) ::CMsgClientLANP2PRequestChunksResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientLANP2PRequestChunksResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientLANP2PRequestChunksResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientLANP2PRequestChunksResponse}, {
      &protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunks_ChunkKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientLANP2PRequestChunksResponse.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, sha_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks, chunk_keys_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, chunk_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, compressed_),
  2,
  3,
  0,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse, chunk_responses_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgClientLANP2PRequestChunks_ChunkKey)},
  { 9, 15, sizeof(::CMsgClientLANP2PRequestChunks)},
  { 16, 27, sizeof(::CMsgClientLANP2PRequestChunksResponse_ChunkData)},
  { 33, 39, sizeof(::CMsgClientLANP2PRequestChunksResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientLANP2PRequestChunks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientLANP2PRequestChunksResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_clientlanp2p.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n steammessages_clientlanp2p.proto\032\030stea"
      "mmessages_base.proto\"\207\001\n\035CMsgClientLANP2"
      "PRequestChunks\022;\n\nchunk_keys\030\001 \003(\0132\'.CMs"
      "gClientLANP2PRequestChunks.ChunkKey\032)\n\010C"
      "hunkKey\022\020\n\010depot_id\030\001 \001(\r\022\013\n\003sha\030\002 \001(\014\"\351"
      "\001\n%CMsgClientLANP2PRequestChunksResponse"
      "\022I\n\017chunk_responses\030\001 \003(\01320.CMsgClientLA"
      "NP2PRequestChunksResponse.ChunkData\032u\n\tC"
      "hunkData\022\016\n\006result\030\001 \001(\r\022\020\n\010depot_id\030\002 \001"
      "(\r\022\013\n\003sha\030\003 \001(\014\022\022\n\nchunk_data\030\004 \001(\014\022\021\n\te"
      "ncrypted\030\005 \001(\010\022\022\n\ncompressed\030\006 \001(\010B\005H\001\200\001"
      "\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientlanp2p.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fclientlanp2p_2eproto

// ===================================================================

void CMsgClientLANP2PRequestChunks_ChunkKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunks_ChunkKey::kDepotIdFieldNumber;
const int CMsgClientLANP2PRequestChunks_ChunkKey::kShaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunks_ChunkKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientLANP2PRequestChunks.ChunkKey)
}
CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey(const CMsgClientLANP2PRequestChunks_ChunkKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  depot_id_ = from.depot_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunks.ChunkKey)
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedCtor() {
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depot_id_ = 0u;
}

CMsgClientLANP2PRequestChunks_ChunkKey::~CMsgClientLANP2PRequestChunks_ChunkKey() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunks.ChunkKey)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunks_ChunkKey::descriptor() {
  ::protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks_ChunkKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunks_ChunkKey.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunks_ChunkKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmptyNoArena();
  }
  depot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunks_ChunkKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientLANP2PRequestChunks.ChunkKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientLANP2PRequestChunks.ChunkKey)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientLANP2PRequestChunks.ChunkKey)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunks_ChunkKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunks.ChunkKey)
  return target;
}

size_t CMsgClientLANP2PRequestChunks_ChunkKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes sha = 2;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks_ChunkKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunks_ChunkKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunks.ChunkKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunks.ChunkKey)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks_ChunkKey::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::Swap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunks_ChunkKey::InternalSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  using std::swap;
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(depot_id_, other->depot_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunks_ChunkKey::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLANP2PRequestChunks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunks::kChunkKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientLANP2PRequestChunks)
}
CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks(const CMsgClientLANP2PRequestChunks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chunk_keys_(from.chunk_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunks)
}

void CMsgClientLANP2PRequestChunks::SharedCtor() {
}

CMsgClientLANP2PRequestChunks::~CMsgClientLANP2PRequestChunks() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunks)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunks::SharedDtor() {
}

void CMsgClientLANP2PRequestChunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunks::descriptor() {
  ::protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunks& CMsgClientLANP2PRequestChunks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunks.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientLANP2PRequestChunks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientLANP2PRequestChunks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientLANP2PRequestChunks)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunk_keys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientLANP2PRequestChunks)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunk_keys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunks)
  return target;
}

size_t CMsgClientLANP2PRequestChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunks)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_keys_.MergeFrom(from.chunk_keys_);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks::Swap(CMsgClientLANP2PRequestChunks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunks::InternalSwap(CMsgClientLANP2PRequestChunks* other) {
  using std::swap;
  CastToBase(&chunk_keys_)->InternalSwap(CastToBase(&other->chunk_keys_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunks::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLANP2PRequestChunksResponse_ChunkData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kResultFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kDepotIdFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kShaFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kChunkDataFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kEncryptedFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientLANP2PRequestChunksResponse.ChunkData)
}
CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  chunk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chunk_data()) {
    chunk_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_data_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedCtor() {
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
}

CMsgClientLANP2PRequestChunksResponse_ChunkData::~CMsgClientLANP2PRequestChunksResponse_ChunkData() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunksResponse_ChunkData::descriptor() {
  ::protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse_ChunkData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunksResponse_ChunkData.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunksResponse_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chunk_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_) -
        reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunksResponse_ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chunk_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depot_id(), output);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha(), output);
  }

  // optional bytes chunk_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chunk_data(), output);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->encrypted(), output);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depot_id(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha(), target);
  }

  // optional bytes chunk_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chunk_data(), target);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->encrypted(), target);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes sha = 3;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes chunk_data = 4;
    if (has_chunk_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chunk_data());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 depot_id = 2;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bool encrypted = 5;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 6;
    if (has_compressed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse_ChunkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunksResponse_ChunkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunksResponse.ChunkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunksResponse.ChunkData)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chunk_data();
      chunk_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse_ChunkData::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::Swap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  using std::swap;
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chunk_data_.Swap(&other->chunk_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(depot_id_, other->depot_id_);
  swap(encrypted_, other->encrypted_);
  swap(compressed_, other->compressed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunksResponse_ChunkData::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientLANP2PRequestChunksResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunksResponse::kChunkResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunksResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientLANP2PRequestChunksResponse)
}
CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse(const CMsgClientLANP2PRequestChunksResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chunk_responses_(from.chunk_responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunksResponse)
}

void CMsgClientLANP2PRequestChunksResponse::SharedCtor() {
}

CMsgClientLANP2PRequestChunksResponse::~CMsgClientLANP2PRequestChunksResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunksResponse)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunksResponse::SharedDtor() {
}

void CMsgClientLANP2PRequestChunksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunksResponse::descriptor() {
  ::protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunksResponse& CMsgClientLANP2PRequestChunksResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fclientlanp2p_2eproto::scc_info_CMsgClientLANP2PRequestChunksResponse.base);
  return *internal_default_instance();
}


void CMsgClientLANP2PRequestChunksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_responses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientLANP2PRequestChunksResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientLANP2PRequestChunksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientLANP2PRequestChunksResponse)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunk_responses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientLANP2PRequestChunksResponse)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunksResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_responses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunk_responses(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunksResponse)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunksResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_responses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunksResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunksResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_responses_.MergeFrom(from.chunk_responses_);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse::Swap(CMsgClientLANP2PRequestChunksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunksResponse::InternalSwap(CMsgClientLANP2PRequestChunksResponse* other) {
  using std::swap;
  CastToBase(&chunk_responses_)->InternalSwap(CastToBase(&other->chunk_responses_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunksResponse::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientLANP2PRequestChunks_ChunkKey* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunks_ChunkKey >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientLANP2PRequestChunks_ChunkKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientLANP2PRequestChunks* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunks >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientLANP2PRequestChunks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientLANP2PRequestChunksResponse_ChunkData* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientLANP2PRequestChunksResponse* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientLANP2PRequestChunksResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
