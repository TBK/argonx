// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_market.steamclient.proto

#include "steammessages_market.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CEconMarket_IsMarketplaceAllowed_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconMarket_IsMarketplaceAllowed_Request>
      _instance;
} _CEconMarket_IsMarketplaceAllowed_Request_default_instance_;
class CEconMarket_IsMarketplaceAllowed_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconMarket_IsMarketplaceAllowed_Response>
      _instance;
} _CEconMarket_IsMarketplaceAllowed_Response_default_instance_;
namespace protobuf_steammessages_5fmarket_2esteamclient_2eproto {
static void InitDefaultsCEconMarket_IsMarketplaceAllowed_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CEconMarket_IsMarketplaceAllowed_Request_default_instance_;
    new (ptr) ::CEconMarket_IsMarketplaceAllowed_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconMarket_IsMarketplaceAllowed_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEconMarket_IsMarketplaceAllowed_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEconMarket_IsMarketplaceAllowed_Request}, {}};

static void InitDefaultsCEconMarket_IsMarketplaceAllowed_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CEconMarket_IsMarketplaceAllowed_Response_default_instance_;
    new (ptr) ::CEconMarket_IsMarketplaceAllowed_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconMarket_IsMarketplaceAllowed_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEconMarket_IsMarketplaceAllowed_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEconMarket_IsMarketplaceAllowed_Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CEconMarket_IsMarketplaceAllowed_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEconMarket_IsMarketplaceAllowed_Response.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Request, webcookie_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, allowed_at_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, steamguard_required_days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, sales_this_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, max_sales_per_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, forms_requested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, forms_require_verification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconMarket_IsMarketplaceAllowed_Response, new_device_cooldown_days_),
  4,
  0,
  1,
  2,
  3,
  7,
  5,
  6,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CEconMarket_IsMarketplaceAllowed_Request)},
  { 7, 21, sizeof(::CEconMarket_IsMarketplaceAllowed_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CEconMarket_IsMarketplaceAllowed_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CEconMarket_IsMarketplaceAllowed_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_market.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&steammessages_market.steamclient.proto"
      "\032,steammessages_unified_base.steamclient"
      ".proto\"n\n(CEconMarket_IsMarketplaceAllow"
      "ed_Request\022B\n\twebcookie\030\001 \001(\tB/\202\265\030+The u"
      "ser\'s Steam Guard machine auth cookie.\"\314"
      "\007\n)CEconMarket_IsMarketplaceAllowed_Resp"
      "onse\022I\n\007allowed\030\001 \001(\010B8\202\265\0304Whether or no"
      "t the user is allowed to use the market\022"
      "K\n\006reason\030\002 \001(\rB;\202\265\0307The reason the user"
      " can\'t use the market, if applicable\022P\n\017"
      "allowed_at_time\030\003 \001(\rB7\202\265\0303The time the "
      "user will be allowed to use the market\022\204"
      "\001\n\030steamguard_required_days\030\004 \001(\rBb\202\265\030^T"
      "he number of days any user is required t"
      "o have had Steam Guard before they can u"
      "se the market\022d\n\017sales_this_year\030\005 \001(\005BK"
      "\202\265\030GThe number of sales this user has ha"
      "d or has pending this calendar year\022o\n\022m"
      "ax_sales_per_year\030\006 \001(\005BS\202\265\030OThe maximum"
      " number of transactions a user is allowe"
      "d to have in a calendar year\022W\n\017forms_re"
      "quested\030\007 \001(\010B>\202\265\030:Whether or not we\'ve "
      "requested the user fill out tax forms\022h\n"
      "\032forms_require_verification\030\010 \001(\010BD\202\265\030@T"
      "rue if we\'ve received forms but they req"
      "uire verification first\022\223\001\n\030new_device_c"
      "ooldown_days\030\t \001(\rBq\202\265\030mThe number of da"
      "ys after initial device authorization a "
      "user must wait before using the market o"
      "n that device2\356\001\n\nEconMarket\022\270\001\n\024IsMarke"
      "tplaceAllowed\022).CEconMarket_IsMarketplac"
      "eAllowed_Request\032*.CEconMarket_IsMarketp"
      "laceAllowed_Response\"I\202\265\030EChecks whether"
      " or not the authed account is allowed to"
      " use the market\032%\202\265\030!A service to use ma"
      "rket functionsB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_market.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fmarket_2esteamclient_2eproto

// ===================================================================

void CEconMarket_IsMarketplaceAllowed_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconMarket_IsMarketplaceAllowed_Request::kWebcookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconMarket_IsMarketplaceAllowed_Request::CEconMarket_IsMarketplaceAllowed_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fmarket_2esteamclient_2eproto::scc_info_CEconMarket_IsMarketplaceAllowed_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEconMarket_IsMarketplaceAllowed_Request)
}
CEconMarket_IsMarketplaceAllowed_Request::CEconMarket_IsMarketplaceAllowed_Request(const CEconMarket_IsMarketplaceAllowed_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webcookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webcookie()) {
    webcookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcookie_);
  }
  // @@protoc_insertion_point(copy_constructor:CEconMarket_IsMarketplaceAllowed_Request)
}

void CEconMarket_IsMarketplaceAllowed_Request::SharedCtor() {
  webcookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CEconMarket_IsMarketplaceAllowed_Request::~CEconMarket_IsMarketplaceAllowed_Request() {
  // @@protoc_insertion_point(destructor:CEconMarket_IsMarketplaceAllowed_Request)
  SharedDtor();
}

void CEconMarket_IsMarketplaceAllowed_Request::SharedDtor() {
  webcookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CEconMarket_IsMarketplaceAllowed_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CEconMarket_IsMarketplaceAllowed_Request::descriptor() {
  ::protobuf_steammessages_5fmarket_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fmarket_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEconMarket_IsMarketplaceAllowed_Request& CEconMarket_IsMarketplaceAllowed_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fmarket_2esteamclient_2eproto::scc_info_CEconMarket_IsMarketplaceAllowed_Request.base);
  return *internal_default_instance();
}


void CEconMarket_IsMarketplaceAllowed_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconMarket_IsMarketplaceAllowed_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    webcookie_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEconMarket_IsMarketplaceAllowed_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEconMarket_IsMarketplaceAllowed_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string webcookie = 1 [(.description) = "The user\'s Steam Guard machine auth cookie."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webcookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webcookie().data(), static_cast<int>(this->webcookie().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CEconMarket_IsMarketplaceAllowed_Request.webcookie");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEconMarket_IsMarketplaceAllowed_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEconMarket_IsMarketplaceAllowed_Request)
  return false;
#undef DO_
}

void CEconMarket_IsMarketplaceAllowed_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEconMarket_IsMarketplaceAllowed_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string webcookie = 1 [(.description) = "The user\'s Steam Guard machine auth cookie."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcookie().data(), static_cast<int>(this->webcookie().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CEconMarket_IsMarketplaceAllowed_Request.webcookie");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->webcookie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEconMarket_IsMarketplaceAllowed_Request)
}

::google::protobuf::uint8* CEconMarket_IsMarketplaceAllowed_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEconMarket_IsMarketplaceAllowed_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string webcookie = 1 [(.description) = "The user\'s Steam Guard machine auth cookie."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcookie().data(), static_cast<int>(this->webcookie().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CEconMarket_IsMarketplaceAllowed_Request.webcookie");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->webcookie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconMarket_IsMarketplaceAllowed_Request)
  return target;
}

size_t CEconMarket_IsMarketplaceAllowed_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconMarket_IsMarketplaceAllowed_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string webcookie = 1 [(.description) = "The user\'s Steam Guard machine auth cookie."];
  if (has_webcookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->webcookie());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconMarket_IsMarketplaceAllowed_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconMarket_IsMarketplaceAllowed_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconMarket_IsMarketplaceAllowed_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEconMarket_IsMarketplaceAllowed_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconMarket_IsMarketplaceAllowed_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconMarket_IsMarketplaceAllowed_Request)
    MergeFrom(*source);
  }
}

void CEconMarket_IsMarketplaceAllowed_Request::MergeFrom(const CEconMarket_IsMarketplaceAllowed_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconMarket_IsMarketplaceAllowed_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_webcookie()) {
    set_has_webcookie();
    webcookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcookie_);
  }
}

void CEconMarket_IsMarketplaceAllowed_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconMarket_IsMarketplaceAllowed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconMarket_IsMarketplaceAllowed_Request::CopyFrom(const CEconMarket_IsMarketplaceAllowed_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconMarket_IsMarketplaceAllowed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconMarket_IsMarketplaceAllowed_Request::IsInitialized() const {
  return true;
}

void CEconMarket_IsMarketplaceAllowed_Request::Swap(CEconMarket_IsMarketplaceAllowed_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconMarket_IsMarketplaceAllowed_Request::InternalSwap(CEconMarket_IsMarketplaceAllowed_Request* other) {
  using std::swap;
  webcookie_.Swap(&other->webcookie_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CEconMarket_IsMarketplaceAllowed_Request::GetMetadata() const {
  protobuf_steammessages_5fmarket_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fmarket_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CEconMarket_IsMarketplaceAllowed_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconMarket_IsMarketplaceAllowed_Response::kAllowedFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kReasonFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kAllowedAtTimeFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kSteamguardRequiredDaysFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kSalesThisYearFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kMaxSalesPerYearFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kFormsRequestedFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kFormsRequireVerificationFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kNewDeviceCooldownDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconMarket_IsMarketplaceAllowed_Response::CEconMarket_IsMarketplaceAllowed_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fmarket_2esteamclient_2eproto::scc_info_CEconMarket_IsMarketplaceAllowed_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEconMarket_IsMarketplaceAllowed_Response)
}
CEconMarket_IsMarketplaceAllowed_Response::CEconMarket_IsMarketplaceAllowed_Response(const CEconMarket_IsMarketplaceAllowed_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_device_cooldown_days_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(new_device_cooldown_days_));
  // @@protoc_insertion_point(copy_constructor:CEconMarket_IsMarketplaceAllowed_Response)
}

void CEconMarket_IsMarketplaceAllowed_Response::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_device_cooldown_days_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(new_device_cooldown_days_));
}

CEconMarket_IsMarketplaceAllowed_Response::~CEconMarket_IsMarketplaceAllowed_Response() {
  // @@protoc_insertion_point(destructor:CEconMarket_IsMarketplaceAllowed_Response)
  SharedDtor();
}

void CEconMarket_IsMarketplaceAllowed_Response::SharedDtor() {
}

void CEconMarket_IsMarketplaceAllowed_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CEconMarket_IsMarketplaceAllowed_Response::descriptor() {
  ::protobuf_steammessages_5fmarket_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fmarket_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEconMarket_IsMarketplaceAllowed_Response& CEconMarket_IsMarketplaceAllowed_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fmarket_2esteamclient_2eproto::scc_info_CEconMarket_IsMarketplaceAllowed_Response.base);
  return *internal_default_instance();
}


void CEconMarket_IsMarketplaceAllowed_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconMarket_IsMarketplaceAllowed_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_sales_per_year_) -
        reinterpret_cast<char*>(&reason_)) + sizeof(max_sales_per_year_));
  }
  new_device_cooldown_days_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEconMarket_IsMarketplaceAllowed_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEconMarket_IsMarketplaceAllowed_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allowed = 1 [(.description) = "Whether or not the user is allowed to use the market"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 2 [(.description) = "The reason the user can\'t use the market, if applicable"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 allowed_at_time = 3 [(.description) = "The time the user will be allowed to use the market"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_allowed_at_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_at_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamguard_required_days = 4 [(.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_steamguard_required_days();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_required_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sales_this_year = 5 [(.description) = "The number of sales this user has had or has pending this calendar year"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sales_this_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sales_this_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_sales_per_year = 6 [(.description) = "The maximum number of transactions a user is allowed to have in a calendar year"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_sales_per_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sales_per_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forms_requested = 7 [(.description) = "Whether or not we\'ve requested the user fill out tax forms"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_forms_requested();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forms_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forms_require_verification = 8 [(.description) = "True if we\'ve received forms but they require verification first"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_forms_require_verification();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forms_require_verification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_device_cooldown_days = 9 [(.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_new_device_cooldown_days();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_device_cooldown_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEconMarket_IsMarketplaceAllowed_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEconMarket_IsMarketplaceAllowed_Response)
  return false;
#undef DO_
}

void CEconMarket_IsMarketplaceAllowed_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEconMarket_IsMarketplaceAllowed_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1 [(.description) = "Whether or not the user is allowed to use the market"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allowed(), output);
  }

  // optional uint32 reason = 2 [(.description) = "The reason the user can\'t use the market, if applicable"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 allowed_at_time = 3 [(.description) = "The time the user will be allowed to use the market"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allowed_at_time(), output);
  }

  // optional uint32 steamguard_required_days = 4 [(.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steamguard_required_days(), output);
  }

  // optional int32 sales_this_year = 5 [(.description) = "The number of sales this user has had or has pending this calendar year"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sales_this_year(), output);
  }

  // optional int32 max_sales_per_year = 6 [(.description) = "The maximum number of transactions a user is allowed to have in a calendar year"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_sales_per_year(), output);
  }

  // optional bool forms_requested = 7 [(.description) = "Whether or not we\'ve requested the user fill out tax forms"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->forms_requested(), output);
  }

  // optional bool forms_require_verification = 8 [(.description) = "True if we\'ve received forms but they require verification first"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->forms_require_verification(), output);
  }

  // optional uint32 new_device_cooldown_days = 9 [(.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_device_cooldown_days(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEconMarket_IsMarketplaceAllowed_Response)
}

::google::protobuf::uint8* CEconMarket_IsMarketplaceAllowed_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEconMarket_IsMarketplaceAllowed_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1 [(.description) = "Whether or not the user is allowed to use the market"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allowed(), target);
  }

  // optional uint32 reason = 2 [(.description) = "The reason the user can\'t use the market, if applicable"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 allowed_at_time = 3 [(.description) = "The time the user will be allowed to use the market"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allowed_at_time(), target);
  }

  // optional uint32 steamguard_required_days = 4 [(.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steamguard_required_days(), target);
  }

  // optional int32 sales_this_year = 5 [(.description) = "The number of sales this user has had or has pending this calendar year"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sales_this_year(), target);
  }

  // optional int32 max_sales_per_year = 6 [(.description) = "The maximum number of transactions a user is allowed to have in a calendar year"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_sales_per_year(), target);
  }

  // optional bool forms_requested = 7 [(.description) = "Whether or not we\'ve requested the user fill out tax forms"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->forms_requested(), target);
  }

  // optional bool forms_require_verification = 8 [(.description) = "True if we\'ve received forms but they require verification first"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->forms_require_verification(), target);
  }

  // optional uint32 new_device_cooldown_days = 9 [(.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_device_cooldown_days(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconMarket_IsMarketplaceAllowed_Response)
  return target;
}

size_t CEconMarket_IsMarketplaceAllowed_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconMarket_IsMarketplaceAllowed_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 reason = 2 [(.description) = "The reason the user can\'t use the market, if applicable"];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 allowed_at_time = 3 [(.description) = "The time the user will be allowed to use the market"];
    if (has_allowed_at_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_at_time());
    }

    // optional uint32 steamguard_required_days = 4 [(.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
    if (has_steamguard_required_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_required_days());
    }

    // optional int32 sales_this_year = 5 [(.description) = "The number of sales this user has had or has pending this calendar year"];
    if (has_sales_this_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sales_this_year());
    }

    // optional bool allowed = 1 [(.description) = "Whether or not the user is allowed to use the market"];
    if (has_allowed()) {
      total_size += 1 + 1;
    }

    // optional bool forms_requested = 7 [(.description) = "Whether or not we\'ve requested the user fill out tax forms"];
    if (has_forms_requested()) {
      total_size += 1 + 1;
    }

    // optional bool forms_require_verification = 8 [(.description) = "True if we\'ve received forms but they require verification first"];
    if (has_forms_require_verification()) {
      total_size += 1 + 1;
    }

    // optional int32 max_sales_per_year = 6 [(.description) = "The maximum number of transactions a user is allowed to have in a calendar year"];
    if (has_max_sales_per_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_sales_per_year());
    }

  }
  // optional uint32 new_device_cooldown_days = 9 [(.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
  if (has_new_device_cooldown_days()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_device_cooldown_days());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconMarket_IsMarketplaceAllowed_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconMarket_IsMarketplaceAllowed_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconMarket_IsMarketplaceAllowed_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEconMarket_IsMarketplaceAllowed_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconMarket_IsMarketplaceAllowed_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconMarket_IsMarketplaceAllowed_Response)
    MergeFrom(*source);
  }
}

void CEconMarket_IsMarketplaceAllowed_Response::MergeFrom(const CEconMarket_IsMarketplaceAllowed_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconMarket_IsMarketplaceAllowed_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowed_at_time_ = from.allowed_at_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamguard_required_days_ = from.steamguard_required_days_;
    }
    if (cached_has_bits & 0x00000008u) {
      sales_this_year_ = from.sales_this_year_;
    }
    if (cached_has_bits & 0x00000010u) {
      allowed_ = from.allowed_;
    }
    if (cached_has_bits & 0x00000020u) {
      forms_requested_ = from.forms_requested_;
    }
    if (cached_has_bits & 0x00000040u) {
      forms_require_verification_ = from.forms_require_verification_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_sales_per_year_ = from.max_sales_per_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_new_device_cooldown_days(from.new_device_cooldown_days());
  }
}

void CEconMarket_IsMarketplaceAllowed_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconMarket_IsMarketplaceAllowed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconMarket_IsMarketplaceAllowed_Response::CopyFrom(const CEconMarket_IsMarketplaceAllowed_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconMarket_IsMarketplaceAllowed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconMarket_IsMarketplaceAllowed_Response::IsInitialized() const {
  return true;
}

void CEconMarket_IsMarketplaceAllowed_Response::Swap(CEconMarket_IsMarketplaceAllowed_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconMarket_IsMarketplaceAllowed_Response::InternalSwap(CEconMarket_IsMarketplaceAllowed_Response* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(allowed_at_time_, other->allowed_at_time_);
  swap(steamguard_required_days_, other->steamguard_required_days_);
  swap(sales_this_year_, other->sales_this_year_);
  swap(allowed_, other->allowed_);
  swap(forms_requested_, other->forms_requested_);
  swap(forms_require_verification_, other->forms_require_verification_);
  swap(max_sales_per_year_, other->max_sales_per_year_);
  swap(new_device_cooldown_days_, other->new_device_cooldown_days_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CEconMarket_IsMarketplaceAllowed_Response::GetMetadata() const {
  protobuf_steammessages_5fmarket_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fmarket_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EconMarket::~EconMarket() {}

const ::google::protobuf::ServiceDescriptor* EconMarket::descriptor() {
  protobuf_steammessages_5fmarket_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fmarket_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* EconMarket::GetDescriptor() {
  return descriptor();
}

void EconMarket::IsMarketplaceAllowed(::google::protobuf::RpcController* controller,
                         const ::CEconMarket_IsMarketplaceAllowed_Request*,
                         ::CEconMarket_IsMarketplaceAllowed_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsMarketplaceAllowed() not implemented.");
  done->Run();
}

void EconMarket::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fmarket_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      IsMarketplaceAllowed(controller,
             ::google::protobuf::down_cast<const ::CEconMarket_IsMarketplaceAllowed_Request*>(request),
             ::google::protobuf::down_cast< ::CEconMarket_IsMarketplaceAllowed_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& EconMarket::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CEconMarket_IsMarketplaceAllowed_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& EconMarket::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CEconMarket_IsMarketplaceAllowed_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EconMarket_Stub::EconMarket_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EconMarket_Stub::EconMarket_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
EconMarket_Stub::~EconMarket_Stub() {
  if (owns_channel_) delete channel_;
}

void EconMarket_Stub::IsMarketplaceAllowed(::google::protobuf::RpcController* controller,
                              const ::CEconMarket_IsMarketplaceAllowed_Request* request,
                              ::CEconMarket_IsMarketplaceAllowed_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CEconMarket_IsMarketplaceAllowed_Request* Arena::CreateMaybeMessage< ::CEconMarket_IsMarketplaceAllowed_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CEconMarket_IsMarketplaceAllowed_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CEconMarket_IsMarketplaceAllowed_Response* Arena::CreateMaybeMessage< ::CEconMarket_IsMarketplaceAllowed_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CEconMarket_IsMarketplaceAllowed_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
