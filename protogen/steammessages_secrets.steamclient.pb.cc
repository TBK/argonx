// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_secrets.steamclient.proto

#include "steammessages_secrets.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fsecrets_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CKeyEscrow_Ticket;
}  // namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto
class CKeyEscrow_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CKeyEscrow_Request>
      _instance;
} _CKeyEscrow_Request_default_instance_;
class CKeyEscrow_TicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CKeyEscrow_Ticket>
      _instance;
} _CKeyEscrow_Ticket_default_instance_;
class CKeyEscrow_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CKeyEscrow_Response>
      _instance;
} _CKeyEscrow_Response_default_instance_;
namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto {
static void InitDefaultsCKeyEscrow_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CKeyEscrow_Request_default_instance_;
    new (ptr) ::CKeyEscrow_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CKeyEscrow_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CKeyEscrow_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCKeyEscrow_Request}, {}};

static void InitDefaultsCKeyEscrow_Ticket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CKeyEscrow_Ticket_default_instance_;
    new (ptr) ::CKeyEscrow_Ticket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CKeyEscrow_Ticket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CKeyEscrow_Ticket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCKeyEscrow_Ticket}, {}};

static void InitDefaultsCKeyEscrow_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CKeyEscrow_Response_default_instance_;
    new (ptr) ::CKeyEscrow_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CKeyEscrow_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CKeyEscrow_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCKeyEscrow_Response}, {
      &protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Ticket.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CKeyEscrow_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CKeyEscrow_Ticket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CKeyEscrow_Response.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Request, rsa_oaep_sha_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Request, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Request, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Request, device_name_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, device_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, device_serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Ticket, device_provisioning_id_),
  0,
  5,
  1,
  6,
  7,
  2,
  3,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CKeyEscrow_Response, ticket_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CKeyEscrow_Request)},
  { 13, 27, sizeof(::CKeyEscrow_Ticket)},
  { 36, 42, sizeof(::CKeyEscrow_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CKeyEscrow_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CKeyEscrow_Ticket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CKeyEscrow_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_secrets.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'steammessages_secrets.steamclient.prot"
      "o\032,steammessages_unified_base.steamclien"
      "t.proto\"\233\001\n\022CKeyEscrow_Request\022\033\n\023rsa_oa"
      "ep_sha_ticket\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\022A\n"
      "\005usage\030\003 \001(\0162\020.EKeyEscrowUsage: k_EKeyEs"
      "crowUsageStreamingDevice\022\023\n\013device_name\030"
      "\004 \001(\t\"\202\002\n\021CKeyEscrow_Ticket\022\020\n\010password\030"
      "\001 \001(\014\022\022\n\nidentifier\030\002 \001(\004\022\017\n\007payload\030\003 \001"
      "(\014\022\021\n\ttimestamp\030\004 \001(\r\022A\n\005usage\030\005 \001(\0162\020.E"
      "KeyEscrowUsage: k_EKeyEscrowUsageStreami"
      "ngDevice\022\023\n\013device_name\030\006 \001(\t\022\024\n\014device_"
      "model\030\007 \001(\t\022\025\n\rdevice_serial\030\010 \001(\t\022\036\n\026de"
      "vice_provisioning_id\030\t \001(\r\"9\n\023CKeyEscrow"
      "_Response\022\"\n\006ticket\030\001 \001(\0132\022.CKeyEscrow_T"
      "icket*7\n\017EKeyEscrowUsage\022$\n k_EKeyEscrow"
      "UsageStreamingDevice\020\0002\310\001\n\007Secrets\022\200\001\n\tK"
      "eyEscrow\022\023.CKeyEscrow_Request\032\024.CKeyEscr"
      "ow_Response\"H\202\265\030DService to perform auth"
      "enticated key-exchange involving Steam C"
      "lient\032:\202\265\0306Service for accessing credent"
      "ials and guarding secretsB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 830);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_secrets.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto
const ::google::protobuf::EnumDescriptor* EKeyEscrowUsage_descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_enum_descriptors[0];
}
bool EKeyEscrowUsage_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CKeyEscrow_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CKeyEscrow_Request::kRsaOaepShaTicketFieldNumber;
const int CKeyEscrow_Request::kPasswordFieldNumber;
const int CKeyEscrow_Request::kUsageFieldNumber;
const int CKeyEscrow_Request::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeyEscrow_Request::CKeyEscrow_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CKeyEscrow_Request)
}
CKeyEscrow_Request::CKeyEscrow_Request(const CKeyEscrow_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsa_oaep_sha_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsa_oaep_sha_ticket()) {
    rsa_oaep_sha_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsa_oaep_sha_ticket_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  usage_ = from.usage_;
  // @@protoc_insertion_point(copy_constructor:CKeyEscrow_Request)
}

void CKeyEscrow_Request::SharedCtor() {
  rsa_oaep_sha_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usage_ = 0;
}

CKeyEscrow_Request::~CKeyEscrow_Request() {
  // @@protoc_insertion_point(destructor:CKeyEscrow_Request)
  SharedDtor();
}

void CKeyEscrow_Request::SharedDtor() {
  rsa_oaep_sha_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CKeyEscrow_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CKeyEscrow_Request::descriptor() {
  ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeyEscrow_Request& CKeyEscrow_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Request.base);
  return *internal_default_instance();
}


void CKeyEscrow_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeyEscrow_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      rsa_oaep_sha_ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  usage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeyEscrow_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CKeyEscrow_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rsa_oaep_sha_ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsa_oaep_sha_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EKeyEscrowUsage_IsValid(value)) {
            set_usage(static_cast< ::EKeyEscrowUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CKeyEscrow_Request.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CKeyEscrow_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CKeyEscrow_Request)
  return false;
#undef DO_
}

void CKeyEscrow_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CKeyEscrow_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes rsa_oaep_sha_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rsa_oaep_sha_ticket(), output);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usage(), output);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Request.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CKeyEscrow_Request)
}

::google::protobuf::uint8* CKeyEscrow_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CKeyEscrow_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes rsa_oaep_sha_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rsa_oaep_sha_ticket(), target);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->usage(), target);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Request.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeyEscrow_Request)
  return target;
}

size_t CKeyEscrow_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeyEscrow_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes rsa_oaep_sha_ticket = 1;
    if (has_rsa_oaep_sha_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsa_oaep_sha_ticket());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional string device_name = 4;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeyEscrow_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeyEscrow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeyEscrow_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeyEscrow_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeyEscrow_Request)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Request::MergeFrom(const CKeyEscrow_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeyEscrow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsa_oaep_sha_ticket();
      rsa_oaep_sha_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsa_oaep_sha_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CKeyEscrow_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeyEscrow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Request::CopyFrom(const CKeyEscrow_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeyEscrow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Request::IsInitialized() const {
  return true;
}

void CKeyEscrow_Request::Swap(CKeyEscrow_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeyEscrow_Request::InternalSwap(CKeyEscrow_Request* other) {
  using std::swap;
  rsa_oaep_sha_ticket_.Swap(&other->rsa_oaep_sha_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usage_, other->usage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CKeyEscrow_Request::GetMetadata() const {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CKeyEscrow_Ticket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CKeyEscrow_Ticket::kPasswordFieldNumber;
const int CKeyEscrow_Ticket::kIdentifierFieldNumber;
const int CKeyEscrow_Ticket::kPayloadFieldNumber;
const int CKeyEscrow_Ticket::kTimestampFieldNumber;
const int CKeyEscrow_Ticket::kUsageFieldNumber;
const int CKeyEscrow_Ticket::kDeviceNameFieldNumber;
const int CKeyEscrow_Ticket::kDeviceModelFieldNumber;
const int CKeyEscrow_Ticket::kDeviceSerialFieldNumber;
const int CKeyEscrow_Ticket::kDeviceProvisioningIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeyEscrow_Ticket::CKeyEscrow_Ticket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Ticket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CKeyEscrow_Ticket)
}
CKeyEscrow_Ticket::CKeyEscrow_Ticket(const CKeyEscrow_Ticket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_model()) {
    device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
  }
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_serial()) {
    device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
  }
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(device_provisioning_id_));
  // @@protoc_insertion_point(copy_constructor:CKeyEscrow_Ticket)
}

void CKeyEscrow_Ticket::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_provisioning_id_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(device_provisioning_id_));
}

CKeyEscrow_Ticket::~CKeyEscrow_Ticket() {
  // @@protoc_insertion_point(destructor:CKeyEscrow_Ticket)
  SharedDtor();
}

void CKeyEscrow_Ticket::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CKeyEscrow_Ticket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CKeyEscrow_Ticket::descriptor() {
  ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeyEscrow_Ticket& CKeyEscrow_Ticket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Ticket.base);
  return *internal_default_instance();
}


void CKeyEscrow_Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      device_model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      device_serial_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(usage_));
  }
  device_provisioning_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeyEscrow_Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CKeyEscrow_Ticket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EKeyEscrowUsage_IsValid(value)) {
            set_usage(static_cast< ::EKeyEscrowUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CKeyEscrow_Ticket.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_model = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_model().data(), static_cast<int>(this->device_model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CKeyEscrow_Ticket.device_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_serial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_serial().data(), static_cast<int>(this->device_serial().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CKeyEscrow_Ticket.device_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_provisioning_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_device_provisioning_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_provisioning_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CKeyEscrow_Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CKeyEscrow_Ticket)
  return false;
#undef DO_
}

void CKeyEscrow_Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->password(), output);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->identifier(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->usage(), output);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_name(), output);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), static_cast<int>(this->device_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_model(), output);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), static_cast<int>(this->device_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_serial(), output);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->device_provisioning_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CKeyEscrow_Ticket)
}

::google::protobuf::uint8* CKeyEscrow_Ticket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->password(), target);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->identifier(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->usage(), target);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_name(), target);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), static_cast<int>(this->device_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device_model(), target);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), static_cast<int>(this->device_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_serial(), target);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->device_provisioning_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeyEscrow_Ticket)
  return target;
}

size_t CKeyEscrow_Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeyEscrow_Ticket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes password = 1;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional string device_name = 6;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional string device_model = 7;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_serial = 8;
    if (has_device_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_serial());
    }

    // optional uint64 identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identifier());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

  }
  // optional uint32 device_provisioning_id = 9;
  if (has_device_provisioning_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_provisioning_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeyEscrow_Ticket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Ticket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeyEscrow_Ticket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeyEscrow_Ticket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeyEscrow_Ticket)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Ticket::MergeFrom(const CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_device_model();
      device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_device_serial();
      device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
    }
    if (cached_has_bits & 0x00000020u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_device_provisioning_id(from.device_provisioning_id());
  }
}

void CKeyEscrow_Ticket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Ticket::CopyFrom(const CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Ticket::IsInitialized() const {
  return true;
}

void CKeyEscrow_Ticket::Swap(CKeyEscrow_Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeyEscrow_Ticket::InternalSwap(CKeyEscrow_Ticket* other) {
  using std::swap;
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_model_.Swap(&other->device_model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_serial_.Swap(&other->device_serial_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identifier_, other->identifier_);
  swap(timestamp_, other->timestamp_);
  swap(usage_, other->usage_);
  swap(device_provisioning_id_, other->device_provisioning_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CKeyEscrow_Ticket::GetMetadata() const {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CKeyEscrow_Response::InitAsDefaultInstance() {
  ::_CKeyEscrow_Response_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::CKeyEscrow_Ticket*>(
      ::CKeyEscrow_Ticket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CKeyEscrow_Response::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeyEscrow_Response::CKeyEscrow_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CKeyEscrow_Response)
}
CKeyEscrow_Response::CKeyEscrow_Response(const CKeyEscrow_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::CKeyEscrow_Ticket(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CKeyEscrow_Response)
}

void CKeyEscrow_Response::SharedCtor() {
  ticket_ = NULL;
}

CKeyEscrow_Response::~CKeyEscrow_Response() {
  // @@protoc_insertion_point(destructor:CKeyEscrow_Response)
  SharedDtor();
}

void CKeyEscrow_Response::SharedDtor() {
  if (this != internal_default_instance()) delete ticket_;
}

void CKeyEscrow_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CKeyEscrow_Response::descriptor() {
  ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeyEscrow_Response& CKeyEscrow_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsecrets_2esteamclient_2eproto::scc_info_CKeyEscrow_Response.base);
  return *internal_default_instance();
}


void CKeyEscrow_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeyEscrow_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != NULL);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeyEscrow_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CKeyEscrow_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CKeyEscrow_Ticket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CKeyEscrow_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CKeyEscrow_Response)
  return false;
#undef DO_
}

void CKeyEscrow_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CKeyEscrow_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CKeyEscrow_Ticket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CKeyEscrow_Response)
}

::google::protobuf::uint8* CKeyEscrow_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CKeyEscrow_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CKeyEscrow_Ticket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ticket(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeyEscrow_Response)
  return target;
}

size_t CKeyEscrow_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeyEscrow_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CKeyEscrow_Ticket ticket = 1;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeyEscrow_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeyEscrow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeyEscrow_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeyEscrow_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeyEscrow_Response)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Response::MergeFrom(const CKeyEscrow_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeyEscrow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    mutable_ticket()->::CKeyEscrow_Ticket::MergeFrom(from.ticket());
  }
}

void CKeyEscrow_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeyEscrow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Response::CopyFrom(const CKeyEscrow_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeyEscrow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Response::IsInitialized() const {
  return true;
}

void CKeyEscrow_Response::Swap(CKeyEscrow_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeyEscrow_Response::InternalSwap(CKeyEscrow_Response* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CKeyEscrow_Response::GetMetadata() const {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Secrets::~Secrets() {}

const ::google::protobuf::ServiceDescriptor* Secrets::descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Secrets::GetDescriptor() {
  return descriptor();
}

void Secrets::KeyEscrow(::google::protobuf::RpcController* controller,
                         const ::CKeyEscrow_Request*,
                         ::CKeyEscrow_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KeyEscrow() not implemented.");
  done->Run();
}

void Secrets::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      KeyEscrow(controller,
             ::google::protobuf::down_cast<const ::CKeyEscrow_Request*>(request),
             ::google::protobuf::down_cast< ::CKeyEscrow_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Secrets::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CKeyEscrow_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Secrets::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CKeyEscrow_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Secrets_Stub::Secrets_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Secrets_Stub::Secrets_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Secrets_Stub::~Secrets_Stub() {
  if (owns_channel_) delete channel_;
}

void Secrets_Stub::KeyEscrow(::google::protobuf::RpcController* controller,
                              const ::CKeyEscrow_Request* request,
                              ::CKeyEscrow_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CKeyEscrow_Request* Arena::CreateMaybeMessage< ::CKeyEscrow_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CKeyEscrow_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CKeyEscrow_Ticket* Arena::CreateMaybeMessage< ::CKeyEscrow_Ticket >(Arena* arena) {
  return Arena::CreateInternal< ::CKeyEscrow_Ticket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CKeyEscrow_Response* Arena::CreateMaybeMessage< ::CKeyEscrow_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CKeyEscrow_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
