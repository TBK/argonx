// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_accounthardware.steamclient.proto

#include "steammessages_accounthardware.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5faccounthardware_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5faccounthardware_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5faccounthardware_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SteamControllerGetConfig_ControllerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5faccounthardware_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SteamControllerSetConfig_ControllerConfig;
}  // namespace protobuf_steammessages_5faccounthardware_2esteamclient_2eproto
class CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_RegisterSteamController_Request>
      _instance;
} _CAccountHardware_RegisterSteamController_Request_default_instance_;
class CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_RegisterSteamController_Response>
      _instance;
} _CAccountHardware_RegisterSteamController_Response_default_instance_;
class CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_CompleteSteamControllerRegistration_Request>
      _instance;
} _CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_;
class CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_CompleteSteamControllerRegistration_Response>
      _instance;
} _CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_;
class CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_QueryAccountsRegisteredToSerial_Request>
      _instance;
} _CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_;
class CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>
      _instance;
} _CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_;
class CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_QueryAccountsRegisteredToSerial_Response>
      _instance;
} _CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_;
class CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SteamControllerSetConfig_ControllerConfig>
      _instance;
} _CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_;
class CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SteamControllerSetConfig_Request>
      _instance;
} _CAccountHardware_SteamControllerSetConfig_Request_default_instance_;
class CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SteamControllerSetConfig_Response>
      _instance;
} _CAccountHardware_SteamControllerSetConfig_Response_default_instance_;
class CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SteamControllerGetConfig_Request>
      _instance;
} _CAccountHardware_SteamControllerGetConfig_Request_default_instance_;
class CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SteamControllerGetConfig_ControllerConfig>
      _instance;
} _CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_;
class CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SteamControllerGetConfig_Response>
      _instance;
} _CAccountHardware_SteamControllerGetConfig_Response_default_instance_;
class CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_DeRegisterSteamController_Request>
      _instance;
} _CAccountHardware_DeRegisterSteamController_Request_default_instance_;
class CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_DeRegisterSteamController_Response>
      _instance;
} _CAccountHardware_DeRegisterSteamController_Response_default_instance_;
class CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SetPersonalizationFile_Request>
      _instance;
} _CAccountHardware_SetPersonalizationFile_Request_default_instance_;
class CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_SetPersonalizationFile_Response>
      _instance;
} _CAccountHardware_SetPersonalizationFile_Response_default_instance_;
class CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_GetPersonalizationFile_Request>
      _instance;
} _CAccountHardware_GetPersonalizationFile_Request_default_instance_;
class CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAccountHardware_GetPersonalizationFile_Response>
      _instance;
} _CAccountHardware_GetPersonalizationFile_Response_default_instance_;
namespace protobuf_steammessages_5faccounthardware_2esteamclient_2eproto {
static void InitDefaultsCAccountHardware_RegisterSteamController_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_RegisterSteamController_Request_default_instance_;
    new (ptr) ::CAccountHardware_RegisterSteamController_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_RegisterSteamController_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_RegisterSteamController_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_RegisterSteamController_Request}, {}};

static void InitDefaultsCAccountHardware_RegisterSteamController_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_RegisterSteamController_Response_default_instance_;
    new (ptr) ::CAccountHardware_RegisterSteamController_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_RegisterSteamController_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_RegisterSteamController_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_RegisterSteamController_Response}, {}};

static void InitDefaultsCAccountHardware_CompleteSteamControllerRegistration_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_;
    new (ptr) ::CAccountHardware_CompleteSteamControllerRegistration_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_CompleteSteamControllerRegistration_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_CompleteSteamControllerRegistration_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_CompleteSteamControllerRegistration_Request}, {}};

static void InitDefaultsCAccountHardware_CompleteSteamControllerRegistration_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_;
    new (ptr) ::CAccountHardware_CompleteSteamControllerRegistration_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_CompleteSteamControllerRegistration_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_CompleteSteamControllerRegistration_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_CompleteSteamControllerRegistration_Response}, {}};

static void InitDefaultsCAccountHardware_QueryAccountsRegisteredToSerial_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_;
    new (ptr) ::CAccountHardware_QueryAccountsRegisteredToSerial_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_QueryAccountsRegisteredToSerial_Request}, {}};

static void InitDefaultsCAccountHardware_QueryAccountsRegisteredToSerial_Accounts() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_;
    new (ptr) ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_QueryAccountsRegisteredToSerial_Accounts}, {}};

static void InitDefaultsCAccountHardware_QueryAccountsRegisteredToSerial_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_;
    new (ptr) ::CAccountHardware_QueryAccountsRegisteredToSerial_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCAccountHardware_QueryAccountsRegisteredToSerial_Response}, {
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.base,}};

static void InitDefaultsCAccountHardware_SteamControllerSetConfig_ControllerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_;
    new (ptr) ::CAccountHardware_SteamControllerSetConfig_ControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SteamControllerSetConfig_ControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SteamControllerSetConfig_ControllerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_SteamControllerSetConfig_ControllerConfig}, {}};

static void InitDefaultsCAccountHardware_SteamControllerSetConfig_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SteamControllerSetConfig_Request_default_instance_;
    new (ptr) ::CAccountHardware_SteamControllerSetConfig_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SteamControllerSetConfig_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CAccountHardware_SteamControllerSetConfig_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCAccountHardware_SteamControllerSetConfig_Request}, {
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_ControllerConfig.base,}};

static void InitDefaultsCAccountHardware_SteamControllerSetConfig_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SteamControllerSetConfig_Response_default_instance_;
    new (ptr) ::CAccountHardware_SteamControllerSetConfig_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SteamControllerSetConfig_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SteamControllerSetConfig_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_SteamControllerSetConfig_Response}, {}};

static void InitDefaultsCAccountHardware_SteamControllerGetConfig_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SteamControllerGetConfig_Request_default_instance_;
    new (ptr) ::CAccountHardware_SteamControllerGetConfig_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SteamControllerGetConfig_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SteamControllerGetConfig_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_SteamControllerGetConfig_Request}, {}};

static void InitDefaultsCAccountHardware_SteamControllerGetConfig_ControllerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_;
    new (ptr) ::CAccountHardware_SteamControllerGetConfig_ControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SteamControllerGetConfig_ControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SteamControllerGetConfig_ControllerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_SteamControllerGetConfig_ControllerConfig}, {}};

static void InitDefaultsCAccountHardware_SteamControllerGetConfig_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SteamControllerGetConfig_Response_default_instance_;
    new (ptr) ::CAccountHardware_SteamControllerGetConfig_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SteamControllerGetConfig_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CAccountHardware_SteamControllerGetConfig_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCAccountHardware_SteamControllerGetConfig_Response}, {
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_ControllerConfig.base,}};

static void InitDefaultsCAccountHardware_DeRegisterSteamController_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_DeRegisterSteamController_Request_default_instance_;
    new (ptr) ::CAccountHardware_DeRegisterSteamController_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_DeRegisterSteamController_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_DeRegisterSteamController_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_DeRegisterSteamController_Request}, {}};

static void InitDefaultsCAccountHardware_DeRegisterSteamController_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_DeRegisterSteamController_Response_default_instance_;
    new (ptr) ::CAccountHardware_DeRegisterSteamController_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_DeRegisterSteamController_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_DeRegisterSteamController_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_DeRegisterSteamController_Response}, {}};

static void InitDefaultsCAccountHardware_SetPersonalizationFile_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SetPersonalizationFile_Request_default_instance_;
    new (ptr) ::CAccountHardware_SetPersonalizationFile_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SetPersonalizationFile_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SetPersonalizationFile_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_SetPersonalizationFile_Request}, {}};

static void InitDefaultsCAccountHardware_SetPersonalizationFile_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_SetPersonalizationFile_Response_default_instance_;
    new (ptr) ::CAccountHardware_SetPersonalizationFile_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_SetPersonalizationFile_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_SetPersonalizationFile_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_SetPersonalizationFile_Response}, {}};

static void InitDefaultsCAccountHardware_GetPersonalizationFile_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_GetPersonalizationFile_Request_default_instance_;
    new (ptr) ::CAccountHardware_GetPersonalizationFile_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_GetPersonalizationFile_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_GetPersonalizationFile_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_GetPersonalizationFile_Request}, {}};

static void InitDefaultsCAccountHardware_GetPersonalizationFile_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAccountHardware_GetPersonalizationFile_Response_default_instance_;
    new (ptr) ::CAccountHardware_GetPersonalizationFile_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAccountHardware_GetPersonalizationFile_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAccountHardware_GetPersonalizationFile_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAccountHardware_GetPersonalizationFile_Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_RegisterSteamController_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_RegisterSteamController_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_CompleteSteamControllerRegistration_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_CompleteSteamControllerRegistration_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SteamControllerSetConfig_ControllerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SteamControllerSetConfig_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SteamControllerSetConfig_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SteamControllerGetConfig_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SteamControllerGetConfig_ControllerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SteamControllerGetConfig_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_DeRegisterSteamController_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_DeRegisterSteamController_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SetPersonalizationFile_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_SetPersonalizationFile_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_GetPersonalizationFile_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAccountHardware_GetPersonalizationFile_Response.base);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, controller_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, controller_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, controller_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, registration_complete_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Response, accounts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, appidorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, templatename_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, controller_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, configurations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, controller_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, only_for_this_serial_),
  0,
  1,
  2,
  ~0u,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, controller_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, appidorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, controller_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, only_for_this_serial_),
  0,
  1,
  3,
  2,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, appidorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, templatename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, serial_number_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Response, configurations_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, controller_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, accountid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, accountid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, accountid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Response, publishedfileid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CAccountHardware_RegisterSteamController_Request)},
  { 9, 14, sizeof(::CAccountHardware_RegisterSteamController_Response)},
  { 14, 21, sizeof(::CAccountHardware_CompleteSteamControllerRegistration_Request)},
  { 23, 28, sizeof(::CAccountHardware_CompleteSteamControllerRegistration_Response)},
  { 28, 35, sizeof(::CAccountHardware_QueryAccountsRegisteredToSerial_Request)},
  { 37, 44, sizeof(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)},
  { 46, 52, sizeof(::CAccountHardware_QueryAccountsRegisteredToSerial_Response)},
  { 53, 61, sizeof(::CAccountHardware_SteamControllerSetConfig_ControllerConfig)},
  { 64, 75, sizeof(::CAccountHardware_SteamControllerSetConfig_Request)},
  { 81, 86, sizeof(::CAccountHardware_SteamControllerSetConfig_Response)},
  { 86, 97, sizeof(::CAccountHardware_SteamControllerGetConfig_Request)},
  { 103, 112, sizeof(::CAccountHardware_SteamControllerGetConfig_ControllerConfig)},
  { 116, 122, sizeof(::CAccountHardware_SteamControllerGetConfig_Response)},
  { 123, 131, sizeof(::CAccountHardware_DeRegisterSteamController_Request)},
  { 134, 139, sizeof(::CAccountHardware_DeRegisterSteamController_Response)},
  { 139, 147, sizeof(::CAccountHardware_SetPersonalizationFile_Request)},
  { 150, 155, sizeof(::CAccountHardware_SetPersonalizationFile_Response)},
  { 155, 162, sizeof(::CAccountHardware_GetPersonalizationFile_Request)},
  { 164, 170, sizeof(::CAccountHardware_GetPersonalizationFile_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_RegisterSteamController_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_RegisterSteamController_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SteamControllerSetConfig_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SteamControllerSetConfig_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SteamControllerGetConfig_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SteamControllerGetConfig_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_DeRegisterSteamController_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_DeRegisterSteamController_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SetPersonalizationFile_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_SetPersonalizationFile_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_GetPersonalizationFile_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAccountHardware_GetPersonalizationFile_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_accounthardware.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/steammessages_accounthardware.steamcli"
      "ent.proto\032,steammessages_unified_base.st"
      "eamclient.proto\"b\n0CAccountHardware_Regi"
      "sterSteamController_Request\022\025\n\rserial_nu"
      "mber\030\001 \001(\t\022\027\n\017controller_code\030\002 \001(\t\"3\n1C"
      "AccountHardware_RegisterSteamController_"
      "Response\"n\n<CAccountHardware_CompleteSte"
      "amControllerRegistration_Request\022\025\n\rseri"
      "al_number\030\001 \001(\t\022\027\n\017controller_code\030\002 \001(\t"
      "\"\?\n=CAccountHardware_CompleteSteamContro"
      "llerRegistration_Response\"j\n8CAccountHar"
      "dware_QueryAccountsRegisteredToSerial_Re"
      "quest\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017controll"
      "er_code\030\002 \001(\t\"m\n9CAccountHardware_QueryA"
      "ccountsRegisteredToSerial_Accounts\022\021\n\tac"
      "countid\030\001 \001(\r\022\035\n\025registration_complete\030\002"
      " \001(\010\"\211\001\n9CAccountHardware_QueryAccountsR"
      "egisteredToSerial_Response\022L\n\010accounts\030\001"
      " \003(\0132:.CAccountHardware_QueryAccountsReg"
      "isteredToSerial_Accounts\"\200\001\n:CAccountHar"
      "dware_SteamControllerSetConfig_Controlle"
      "rConfig\022\023\n\013appidorname\030\001 \001(\t\022\027\n\017publishe"
      "dfileid\030\002 \001(\004\022\024\n\014templatename\030\003 \001(\t\"\214\002\n1"
      "CAccountHardware_SteamControllerSetConfi"
      "g_Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017cont"
      "roller_code\030\002 \001(\t\022\021\n\taccountid\030\003 \001(\r\022S\n\016"
      "configurations\030\004 \003(\0132;.CAccountHardware_"
      "SteamControllerSetConfig_ControllerConfi"
      "g\022\032\n\017controller_type\030\005 \001(\005:\0012\022#\n\024only_fo"
      "r_this_serial\030\006 \001(\010:\005false\"4\n2CAccountHa"
      "rdware_SteamControllerSetConfig_Response"
      "\"\314\001\n1CAccountHardware_SteamControllerGet"
      "Config_Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n"
      "\017controller_code\030\002 \001(\t\022\021\n\taccountid\030\003 \001("
      "\r\022\023\n\013appidorname\030\004 \001(\t\022\032\n\017controller_typ"
      "e\030\005 \001(\005:\0012\022#\n\024only_for_this_serial\030\006 \001(\010"
      ":\005false\"\227\001\n:CAccountHardware_SteamContro"
      "llerGetConfig_ControllerConfig\022\023\n\013appido"
      "rname\030\001 \001(\t\022\027\n\017publishedfileid\030\002 \001(\004\022\024\n\014"
      "templatename\030\003 \001(\t\022\025\n\rserial_number\030\004 \001("
      "\t\"\211\001\n2CAccountHardware_SteamControllerGe"
      "tConfig_Response\022S\n\016configurations\030\001 \003(\013"
      "2;.CAccountHardware_SteamControllerGetCo"
      "nfig_ControllerConfig\"w\n2CAccountHardwar"
      "e_DeRegisterSteamController_Request\022\025\n\rs"
      "erial_number\030\001 \001(\t\022\027\n\017controller_code\030\002 "
      "\001(\t\022\021\n\taccountid\030\003 \001(\r\"5\n3CAccountHardwa"
      "re_DeRegisterSteamController_Response\"t\n"
      "/CAccountHardware_SetPersonalizationFile"
      "_Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017publi"
      "shedfileid\030\002 \001(\004\022\021\n\taccountid\030\003 \001(\r\"2\n0C"
      "AccountHardware_SetPersonalizationFile_R"
      "esponse\"[\n/CAccountHardware_GetPersonali"
      "zationFile_Request\022\025\n\rserial_number\030\001 \001("
      "\t\022\021\n\taccountid\030\002 \001(\r\"K\n0CAccountHardware"
      "_GetPersonalizationFile_Response\022\027\n\017publ"
      "ishedfileid\030\001 \001(\0042\373\014\n\017AccountHardware\022\330\001"
      "\n\027RegisterSteamController\0221.CAccountHard"
      "ware_RegisterSteamController_Request\0322.C"
      "AccountHardware_RegisterSteamController_"
      "Response\"V\202\265\030RRecords a serial number an"
      "d the calling user\'s account info for wa"
      "rranty purposes.\022\327\001\n#CompleteSteamContro"
      "llerRegistration\022=.CAccountHardware_Comp"
      "leteSteamControllerRegistration_Request\032"
      ">.CAccountHardware_CompleteSteamControll"
      "erRegistration_Response\"1\202\265\030-Marks a con"
      "troller\'s registration as complete\022\333\001\n#Q"
      "ueryAccountsRegisteredToController\0229.CAc"
      "countHardware_QueryAccountsRegisteredToS"
      "erial_Request\032:.CAccountHardware_QueryAc"
      "countsRegisteredToSerial_Response\"=\202\265\0309S"
      "ends back a list of accounts registered "
      "to a controller.\022\274\001\n SetDesiredControlle"
      "rConfigForApp\0222.CAccountHardware_SteamCo"
      "ntrollerSetConfig_Request\0323.CAccountHard"
      "ware_SteamControllerSetConfig_Response\"/"
      "\202\265\030+Sets a desired controller config for"
      " an app\022\274\001\n GetDesiredControllerConfigFo"
      "rApp\0222.CAccountHardware_SteamControllerG"
      "etConfig_Request\0323.CAccountHardware_Stea"
      "mControllerGetConfig_Response\"/\202\265\030+Gets "
      "a desired controller config for an app\022\245"
      "\001\n\031DeRegisterSteamController\0223.CAccountH"
      "ardware_DeRegisterSteamController_Reques"
      "t\0324.CAccountHardware_DeRegisterSteamCont"
      "roller_Response\"\035\202\265\030\031De registers a cont"
      "roller\022\273\001\n SetControllerPersonalizationF"
      "ile\0220.CAccountHardware_SetPersonalizatio"
      "nFile_Request\0321.CAccountHardware_SetPers"
      "onalizationFile_Response\"2\202\265\030.Stores the"
      " file ID of the personalization file\022\271\001\n"
      " GetControllerPersonalizationFile\0220.CAcc"
      "ountHardware_GetPersonalizationFile_Requ"
      "est\0321.CAccountHardware_GetPersonalizatio"
      "nFile_Response\"0\202\265\030,Gets the file ID of "
      "the personalization file\0325\202\265\0301A service "
      "to use account hardware related methodsB"
      "\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_accounthardware.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5faccounthardware_2esteamclient_2eproto

// ===================================================================

void CAccountHardware_RegisterSteamController_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_RegisterSteamController_Request::kSerialNumberFieldNumber;
const int CAccountHardware_RegisterSteamController_Request::kControllerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_RegisterSteamController_Request::CAccountHardware_RegisterSteamController_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_RegisterSteamController_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_RegisterSteamController_Request)
}
CAccountHardware_RegisterSteamController_Request::CAccountHardware_RegisterSteamController_Request(const CAccountHardware_RegisterSteamController_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_RegisterSteamController_Request)
}

void CAccountHardware_RegisterSteamController_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_RegisterSteamController_Request::~CAccountHardware_RegisterSteamController_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_RegisterSteamController_Request)
  SharedDtor();
}

void CAccountHardware_RegisterSteamController_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_RegisterSteamController_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_RegisterSteamController_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_RegisterSteamController_Request& CAccountHardware_RegisterSteamController_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_RegisterSteamController_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_RegisterSteamController_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_RegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_RegisterSteamController_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_RegisterSteamController_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_RegisterSteamController_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), static_cast<int>(this->controller_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_RegisterSteamController_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_RegisterSteamController_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_RegisterSteamController_Request)
  return false;
#undef DO_
}

void CAccountHardware_RegisterSteamController_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_RegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterSteamController_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterSteamController_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_RegisterSteamController_Request)
}

::google::protobuf::uint8* CAccountHardware_RegisterSteamController_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_RegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterSteamController_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterSteamController_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_RegisterSteamController_Request)
  return target;
}

size_t CAccountHardware_RegisterSteamController_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_RegisterSteamController_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_RegisterSteamController_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_RegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_RegisterSteamController_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_RegisterSteamController_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_RegisterSteamController_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_RegisterSteamController_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_RegisterSteamController_Request::MergeFrom(const CAccountHardware_RegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_RegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
  }
}

void CAccountHardware_RegisterSteamController_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_RegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_RegisterSteamController_Request::CopyFrom(const CAccountHardware_RegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_RegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_RegisterSteamController_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_RegisterSteamController_Request::Swap(CAccountHardware_RegisterSteamController_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_RegisterSteamController_Request::InternalSwap(CAccountHardware_RegisterSteamController_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_code_.Swap(&other->controller_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_RegisterSteamController_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_RegisterSteamController_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_RegisterSteamController_Response::CAccountHardware_RegisterSteamController_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_RegisterSteamController_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_RegisterSteamController_Response)
}
CAccountHardware_RegisterSteamController_Response::CAccountHardware_RegisterSteamController_Response(const CAccountHardware_RegisterSteamController_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_RegisterSteamController_Response)
}

void CAccountHardware_RegisterSteamController_Response::SharedCtor() {
}

CAccountHardware_RegisterSteamController_Response::~CAccountHardware_RegisterSteamController_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_RegisterSteamController_Response)
  SharedDtor();
}

void CAccountHardware_RegisterSteamController_Response::SharedDtor() {
}

void CAccountHardware_RegisterSteamController_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_RegisterSteamController_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_RegisterSteamController_Response& CAccountHardware_RegisterSteamController_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_RegisterSteamController_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_RegisterSteamController_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_RegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_RegisterSteamController_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_RegisterSteamController_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_RegisterSteamController_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_RegisterSteamController_Response)
  return false;
#undef DO_
}

void CAccountHardware_RegisterSteamController_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_RegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_RegisterSteamController_Response)
}

::google::protobuf::uint8* CAccountHardware_RegisterSteamController_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_RegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_RegisterSteamController_Response)
  return target;
}

size_t CAccountHardware_RegisterSteamController_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_RegisterSteamController_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_RegisterSteamController_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_RegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_RegisterSteamController_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_RegisterSteamController_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_RegisterSteamController_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_RegisterSteamController_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_RegisterSteamController_Response::MergeFrom(const CAccountHardware_RegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_RegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_RegisterSteamController_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_RegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_RegisterSteamController_Response::CopyFrom(const CAccountHardware_RegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_RegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_RegisterSteamController_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_RegisterSteamController_Response::Swap(CAccountHardware_RegisterSteamController_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_RegisterSteamController_Response::InternalSwap(CAccountHardware_RegisterSteamController_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_RegisterSteamController_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_CompleteSteamControllerRegistration_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_CompleteSteamControllerRegistration_Request::kSerialNumberFieldNumber;
const int CAccountHardware_CompleteSteamControllerRegistration_Request::kControllerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_CompleteSteamControllerRegistration_Request::CAccountHardware_CompleteSteamControllerRegistration_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_CompleteSteamControllerRegistration_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_CompleteSteamControllerRegistration_Request)
}
CAccountHardware_CompleteSteamControllerRegistration_Request::CAccountHardware_CompleteSteamControllerRegistration_Request(const CAccountHardware_CompleteSteamControllerRegistration_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_CompleteSteamControllerRegistration_Request)
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_CompleteSteamControllerRegistration_Request::~CAccountHardware_CompleteSteamControllerRegistration_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_CompleteSteamControllerRegistration_Request)
  SharedDtor();
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_CompleteSteamControllerRegistration_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_CompleteSteamControllerRegistration_Request& CAccountHardware_CompleteSteamControllerRegistration_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_CompleteSteamControllerRegistration_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_CompleteSteamControllerRegistration_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_CompleteSteamControllerRegistration_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), static_cast<int>(this->controller_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_CompleteSteamControllerRegistration_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_CompleteSteamControllerRegistration_Request)
  return false;
#undef DO_
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_CompleteSteamControllerRegistration_Request)
}

::google::protobuf::uint8* CAccountHardware_CompleteSteamControllerRegistration_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_CompleteSteamControllerRegistration_Request)
  return target;
}

size_t CAccountHardware_CompleteSteamControllerRegistration_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_CompleteSteamControllerRegistration_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_CompleteSteamControllerRegistration_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_CompleteSteamControllerRegistration_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_CompleteSteamControllerRegistration_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::MergeFrom(const CAccountHardware_CompleteSteamControllerRegistration_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
  }
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::CopyFrom(const CAccountHardware_CompleteSteamControllerRegistration_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_CompleteSteamControllerRegistration_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::Swap(CAccountHardware_CompleteSteamControllerRegistration_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_CompleteSteamControllerRegistration_Request::InternalSwap(CAccountHardware_CompleteSteamControllerRegistration_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_code_.Swap(&other->controller_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_CompleteSteamControllerRegistration_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_CompleteSteamControllerRegistration_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_CompleteSteamControllerRegistration_Response::CAccountHardware_CompleteSteamControllerRegistration_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_CompleteSteamControllerRegistration_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_CompleteSteamControllerRegistration_Response)
}
CAccountHardware_CompleteSteamControllerRegistration_Response::CAccountHardware_CompleteSteamControllerRegistration_Response(const CAccountHardware_CompleteSteamControllerRegistration_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_CompleteSteamControllerRegistration_Response)
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::SharedCtor() {
}

CAccountHardware_CompleteSteamControllerRegistration_Response::~CAccountHardware_CompleteSteamControllerRegistration_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_CompleteSteamControllerRegistration_Response)
  SharedDtor();
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::SharedDtor() {
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_CompleteSteamControllerRegistration_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_CompleteSteamControllerRegistration_Response& CAccountHardware_CompleteSteamControllerRegistration_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_CompleteSteamControllerRegistration_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_CompleteSteamControllerRegistration_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_CompleteSteamControllerRegistration_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_CompleteSteamControllerRegistration_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_CompleteSteamControllerRegistration_Response)
  return false;
#undef DO_
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_CompleteSteamControllerRegistration_Response)
}

::google::protobuf::uint8* CAccountHardware_CompleteSteamControllerRegistration_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_CompleteSteamControllerRegistration_Response)
  return target;
}

size_t CAccountHardware_CompleteSteamControllerRegistration_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_CompleteSteamControllerRegistration_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_CompleteSteamControllerRegistration_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_CompleteSteamControllerRegistration_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_CompleteSteamControllerRegistration_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::MergeFrom(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_CompleteSteamControllerRegistration_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::CopyFrom(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_CompleteSteamControllerRegistration_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::Swap(CAccountHardware_CompleteSteamControllerRegistration_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_CompleteSteamControllerRegistration_Response::InternalSwap(CAccountHardware_CompleteSteamControllerRegistration_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_CompleteSteamControllerRegistration_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_QueryAccountsRegisteredToSerial_Request::kSerialNumberFieldNumber;
const int CAccountHardware_QueryAccountsRegisteredToSerial_Request::kControllerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_QueryAccountsRegisteredToSerial_Request::CAccountHardware_QueryAccountsRegisteredToSerial_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
}
CAccountHardware_QueryAccountsRegisteredToSerial_Request::CAccountHardware_QueryAccountsRegisteredToSerial_Request(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_QueryAccountsRegisteredToSerial_Request::~CAccountHardware_QueryAccountsRegisteredToSerial_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  SharedDtor();
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_QueryAccountsRegisteredToSerial_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_QueryAccountsRegisteredToSerial_Request& CAccountHardware_QueryAccountsRegisteredToSerial_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_QueryAccountsRegisteredToSerial_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), static_cast<int>(this->controller_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  return false;
#undef DO_
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
}

::google::protobuf::uint8* CAccountHardware_QueryAccountsRegisteredToSerial_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  return target;
}

size_t CAccountHardware_QueryAccountsRegisteredToSerial_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_QueryAccountsRegisteredToSerial_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_QueryAccountsRegisteredToSerial_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::Swap(CAccountHardware_QueryAccountsRegisteredToSerial_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Request::InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_code_.Swap(&other->controller_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_QueryAccountsRegisteredToSerial_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::kAccountidFieldNumber;
const int CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::kRegistrationCompleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
}
CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&registration_complete_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(registration_complete_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&registration_complete_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(registration_complete_));
}

CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::~CAccountHardware_QueryAccountsRegisteredToSerial_Accounts() {
  // @@protoc_insertion_point(destructor:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  SharedDtor();
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SharedDtor() {
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.base);
  return *internal_default_instance();
}


void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&registration_complete_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(registration_complete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool registration_complete = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_registration_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registration_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  return false;
#undef DO_
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional bool registration_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->registration_complete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
}

::google::protobuf::uint8* CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional bool registration_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->registration_complete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  return target;
}

size_t CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool registration_complete = 2;
    if (has_registration_complete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
    MergeFrom(*source);
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      registration_complete_ = from.registration_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::IsInitialized() const {
  return true;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::Swap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(registration_complete_, other->registration_complete_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_QueryAccountsRegisteredToSerial_Response::kAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_QueryAccountsRegisteredToSerial_Response::CAccountHardware_QueryAccountsRegisteredToSerial_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
}
CAccountHardware_QueryAccountsRegisteredToSerial_Response::CAccountHardware_QueryAccountsRegisteredToSerial_Response(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SharedCtor() {
}

CAccountHardware_QueryAccountsRegisteredToSerial_Response::~CAccountHardware_QueryAccountsRegisteredToSerial_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  SharedDtor();
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SharedDtor() {
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_QueryAccountsRegisteredToSerial_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_QueryAccountsRegisteredToSerial_Response& CAccountHardware_QueryAccountsRegisteredToSerial_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_QueryAccountsRegisteredToSerial_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_QueryAccountsRegisteredToSerial_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  return false;
#undef DO_
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->accounts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
}

::google::protobuf::uint8* CAccountHardware_QueryAccountsRegisteredToSerial_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->accounts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  return target;
}

size_t CAccountHardware_QueryAccountsRegisteredToSerial_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accounts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_QueryAccountsRegisteredToSerial_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_QueryAccountsRegisteredToSerial_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::Swap(CAccountHardware_QueryAccountsRegisteredToSerial_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Response::InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Response* other) {
  using std::swap;
  CastToBase(&accounts_)->InternalSwap(CastToBase(&other->accounts_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_QueryAccountsRegisteredToSerial_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_SteamControllerSetConfig_ControllerConfig::kAppidornameFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_ControllerConfig::kPublishedfileidFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_ControllerConfig::kTemplatenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SteamControllerSetConfig_ControllerConfig::CAccountHardware_SteamControllerSetConfig_ControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_ControllerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
}
CAccountHardware_SteamControllerSetConfig_ControllerConfig::CAccountHardware_SteamControllerSetConfig_ControllerConfig(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appidorname()) {
    appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
  }
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_templatename()) {
    templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SharedCtor() {
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CAccountHardware_SteamControllerSetConfig_ControllerConfig::~CAccountHardware_SteamControllerSetConfig_ControllerConfig() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  SharedDtor();
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SharedDtor() {
  appidorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SteamControllerSetConfig_ControllerConfig::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SteamControllerSetConfig_ControllerConfig& CAccountHardware_SteamControllerSetConfig_ControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_ControllerConfig.base);
  return *internal_default_instance();
}


void CAccountHardware_SteamControllerSetConfig_ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appidorname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      templatename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appidorname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appidorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appidorname().data(), static_cast<int>(this->appidorname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string templatename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatename().data(), static_cast<int>(this->templatename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  return false;
#undef DO_
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), static_cast<int>(this->appidorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appidorname(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), static_cast<int>(this->templatename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->templatename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
}

::google::protobuf::uint8* CAccountHardware_SteamControllerSetConfig_ControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), static_cast<int>(this->appidorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appidorname(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), static_cast<int>(this->templatename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->templatename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  return target;
}

size_t CAccountHardware_SteamControllerSetConfig_ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string appidorname = 1;
    if (has_appidorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appidorname());
    }

    // optional string templatename = 3;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerSetConfig_ControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SteamControllerSetConfig_ControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::MergeFrom(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appidorname();
      appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_templatename();
      templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
    }
    if (cached_has_bits & 0x00000004u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::CopyFrom(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::Swap(CAccountHardware_SteamControllerSetConfig_ControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SteamControllerSetConfig_ControllerConfig::InternalSwap(CAccountHardware_SteamControllerSetConfig_ControllerConfig* other) {
  using std::swap;
  appidorname_.Swap(&other->appidorname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  templatename_.Swap(&other->templatename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publishedfileid_, other->publishedfileid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SteamControllerSetConfig_ControllerConfig::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SteamControllerSetConfig_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_SteamControllerSetConfig_Request::kSerialNumberFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_Request::kControllerCodeFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_Request::kAccountidFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_Request::kConfigurationsFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_Request::kControllerTypeFieldNumber;
const int CAccountHardware_SteamControllerSetConfig_Request::kOnlyForThisSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SteamControllerSetConfig_Request::CAccountHardware_SteamControllerSetConfig_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SteamControllerSetConfig_Request)
}
CAccountHardware_SteamControllerSetConfig_Request::CAccountHardware_SteamControllerSetConfig_Request(const CAccountHardware_SteamControllerSetConfig_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerSetConfig_Request)
}

void CAccountHardware_SteamControllerSetConfig_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_for_this_serial_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
  controller_type_ = 2;
}

CAccountHardware_SteamControllerSetConfig_Request::~CAccountHardware_SteamControllerSetConfig_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerSetConfig_Request)
  SharedDtor();
}

void CAccountHardware_SteamControllerSetConfig_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerSetConfig_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SteamControllerSetConfig_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SteamControllerSetConfig_Request& CAccountHardware_SteamControllerSetConfig_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_SteamControllerSetConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerSetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configurations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_for_this_serial_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
    controller_type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SteamControllerSetConfig_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SteamControllerSetConfig_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerSetConfig_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), static_cast<int>(this->controller_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerSetConfig_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 controller_type = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_controller_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_for_this_serial = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_only_for_this_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_for_this_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SteamControllerSetConfig_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SteamControllerSetConfig_Request)
  return false;
#undef DO_
}

void CAccountHardware_SteamControllerSetConfig_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SteamControllerSetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configurations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->configurations(static_cast<int>(i)),
      output);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->controller_type(), output);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_for_this_serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SteamControllerSetConfig_Request)
}

::google::protobuf::uint8* CAccountHardware_SteamControllerSetConfig_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerSetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configurations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->configurations(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->controller_type(), target);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_for_this_serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerSetConfig_Request)
  return target;
}

size_t CAccountHardware_SteamControllerSetConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerSetConfig_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->configurations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->configurations(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool only_for_this_serial = 6 [default = false];
    if (has_only_for_this_serial()) {
      total_size += 1 + 1;
    }

    // optional int32 controller_type = 5 [default = 2];
    if (has_controller_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerSetConfig_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerSetConfig_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SteamControllerSetConfig_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerSetConfig_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerSetConfig_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerSetConfig_Request::MergeFrom(const CAccountHardware_SteamControllerSetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_for_this_serial_ = from.only_for_this_serial_;
    }
    if (cached_has_bits & 0x00000010u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerSetConfig_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerSetConfig_Request::CopyFrom(const CAccountHardware_SteamControllerSetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerSetConfig_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerSetConfig_Request::Swap(CAccountHardware_SteamControllerSetConfig_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SteamControllerSetConfig_Request::InternalSwap(CAccountHardware_SteamControllerSetConfig_Request* other) {
  using std::swap;
  CastToBase(&configurations_)->InternalSwap(CastToBase(&other->configurations_));
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_code_.Swap(&other->controller_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(only_for_this_serial_, other->only_for_this_serial_);
  swap(controller_type_, other->controller_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SteamControllerSetConfig_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SteamControllerSetConfig_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SteamControllerSetConfig_Response::CAccountHardware_SteamControllerSetConfig_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SteamControllerSetConfig_Response)
}
CAccountHardware_SteamControllerSetConfig_Response::CAccountHardware_SteamControllerSetConfig_Response(const CAccountHardware_SteamControllerSetConfig_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerSetConfig_Response)
}

void CAccountHardware_SteamControllerSetConfig_Response::SharedCtor() {
}

CAccountHardware_SteamControllerSetConfig_Response::~CAccountHardware_SteamControllerSetConfig_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerSetConfig_Response)
  SharedDtor();
}

void CAccountHardware_SteamControllerSetConfig_Response::SharedDtor() {
}

void CAccountHardware_SteamControllerSetConfig_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SteamControllerSetConfig_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SteamControllerSetConfig_Response& CAccountHardware_SteamControllerSetConfig_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerSetConfig_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_SteamControllerSetConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerSetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SteamControllerSetConfig_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SteamControllerSetConfig_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SteamControllerSetConfig_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SteamControllerSetConfig_Response)
  return false;
#undef DO_
}

void CAccountHardware_SteamControllerSetConfig_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SteamControllerSetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SteamControllerSetConfig_Response)
}

::google::protobuf::uint8* CAccountHardware_SteamControllerSetConfig_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerSetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerSetConfig_Response)
  return target;
}

size_t CAccountHardware_SteamControllerSetConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerSetConfig_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerSetConfig_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerSetConfig_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SteamControllerSetConfig_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerSetConfig_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerSetConfig_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerSetConfig_Response::MergeFrom(const CAccountHardware_SteamControllerSetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_SteamControllerSetConfig_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerSetConfig_Response::CopyFrom(const CAccountHardware_SteamControllerSetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerSetConfig_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerSetConfig_Response::Swap(CAccountHardware_SteamControllerSetConfig_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SteamControllerSetConfig_Response::InternalSwap(CAccountHardware_SteamControllerSetConfig_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SteamControllerSetConfig_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SteamControllerGetConfig_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_SteamControllerGetConfig_Request::kSerialNumberFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_Request::kControllerCodeFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_Request::kAccountidFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_Request::kAppidornameFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_Request::kControllerTypeFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_Request::kOnlyForThisSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SteamControllerGetConfig_Request::CAccountHardware_SteamControllerGetConfig_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SteamControllerGetConfig_Request)
}
CAccountHardware_SteamControllerGetConfig_Request::CAccountHardware_SteamControllerGetConfig_Request(const CAccountHardware_SteamControllerGetConfig_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appidorname()) {
    appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerGetConfig_Request)
}

void CAccountHardware_SteamControllerGetConfig_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_for_this_serial_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
  controller_type_ = 2;
}

CAccountHardware_SteamControllerGetConfig_Request::~CAccountHardware_SteamControllerGetConfig_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerGetConfig_Request)
  SharedDtor();
}

void CAccountHardware_SteamControllerGetConfig_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appidorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerGetConfig_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SteamControllerGetConfig_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SteamControllerGetConfig_Request& CAccountHardware_SteamControllerGetConfig_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_SteamControllerGetConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerGetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      appidorname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_for_this_serial_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
    controller_type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SteamControllerGetConfig_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SteamControllerGetConfig_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerGetConfig_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), static_cast<int>(this->controller_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerGetConfig_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string appidorname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appidorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appidorname().data(), static_cast<int>(this->appidorname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerGetConfig_Request.appidorname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 controller_type = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_controller_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_for_this_serial = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_only_for_this_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_for_this_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SteamControllerGetConfig_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SteamControllerGetConfig_Request)
  return false;
#undef DO_
}

void CAccountHardware_SteamControllerGetConfig_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SteamControllerGetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  // optional string appidorname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), static_cast<int>(this->appidorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.appidorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->appidorname(), output);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->controller_type(), output);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_for_this_serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SteamControllerGetConfig_Request)
}

::google::protobuf::uint8* CAccountHardware_SteamControllerGetConfig_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerGetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  // optional string appidorname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), static_cast<int>(this->appidorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.appidorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appidorname(), target);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->controller_type(), target);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_for_this_serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerGetConfig_Request)
  return target;
}

size_t CAccountHardware_SteamControllerGetConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerGetConfig_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

    // optional string appidorname = 4;
    if (has_appidorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appidorname());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool only_for_this_serial = 6 [default = false];
    if (has_only_for_this_serial()) {
      total_size += 1 + 1;
    }

    // optional int32 controller_type = 5 [default = 2];
    if (has_controller_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerGetConfig_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerGetConfig_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SteamControllerGetConfig_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerGetConfig_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerGetConfig_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerGetConfig_Request::MergeFrom(const CAccountHardware_SteamControllerGetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_appidorname();
      appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
    }
    if (cached_has_bits & 0x00000008u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000010u) {
      only_for_this_serial_ = from.only_for_this_serial_;
    }
    if (cached_has_bits & 0x00000020u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerGetConfig_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerGetConfig_Request::CopyFrom(const CAccountHardware_SteamControllerGetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerGetConfig_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerGetConfig_Request::Swap(CAccountHardware_SteamControllerGetConfig_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SteamControllerGetConfig_Request::InternalSwap(CAccountHardware_SteamControllerGetConfig_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_code_.Swap(&other->controller_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appidorname_.Swap(&other->appidorname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(only_for_this_serial_, other->only_for_this_serial_);
  swap(controller_type_, other->controller_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SteamControllerGetConfig_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_SteamControllerGetConfig_ControllerConfig::kAppidornameFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_ControllerConfig::kPublishedfileidFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_ControllerConfig::kTemplatenameFieldNumber;
const int CAccountHardware_SteamControllerGetConfig_ControllerConfig::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SteamControllerGetConfig_ControllerConfig::CAccountHardware_SteamControllerGetConfig_ControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_ControllerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
}
CAccountHardware_SteamControllerGetConfig_ControllerConfig::CAccountHardware_SteamControllerGetConfig_ControllerConfig(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appidorname()) {
    appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
  }
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_templatename()) {
    templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SharedCtor() {
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CAccountHardware_SteamControllerGetConfig_ControllerConfig::~CAccountHardware_SteamControllerGetConfig_ControllerConfig() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  SharedDtor();
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SharedDtor() {
  appidorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SteamControllerGetConfig_ControllerConfig::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SteamControllerGetConfig_ControllerConfig& CAccountHardware_SteamControllerGetConfig_ControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_ControllerConfig.base);
  return *internal_default_instance();
}


void CAccountHardware_SteamControllerGetConfig_ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      appidorname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      templatename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
  }
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appidorname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appidorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appidorname().data(), static_cast<int>(this->appidorname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string templatename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatename().data(), static_cast<int>(this->templatename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  return false;
#undef DO_
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), static_cast<int>(this->appidorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appidorname(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), static_cast<int>(this->templatename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->templatename(), output);
  }

  // optional string serial_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
}

::google::protobuf::uint8* CAccountHardware_SteamControllerGetConfig_ControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), static_cast<int>(this->appidorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appidorname(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), static_cast<int>(this->templatename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->templatename(), target);
  }

  // optional string serial_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serial_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  return target;
}

size_t CAccountHardware_SteamControllerGetConfig_ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string appidorname = 1;
    if (has_appidorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appidorname());
    }

    // optional string templatename = 3;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }

    // optional string serial_number = 4;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerGetConfig_ControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SteamControllerGetConfig_ControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::MergeFrom(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appidorname();
      appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_templatename();
      templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000008u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::CopyFrom(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::Swap(CAccountHardware_SteamControllerGetConfig_ControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SteamControllerGetConfig_ControllerConfig::InternalSwap(CAccountHardware_SteamControllerGetConfig_ControllerConfig* other) {
  using std::swap;
  appidorname_.Swap(&other->appidorname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  templatename_.Swap(&other->templatename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publishedfileid_, other->publishedfileid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SteamControllerGetConfig_ControllerConfig::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SteamControllerGetConfig_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_SteamControllerGetConfig_Response::kConfigurationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SteamControllerGetConfig_Response::CAccountHardware_SteamControllerGetConfig_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SteamControllerGetConfig_Response)
}
CAccountHardware_SteamControllerGetConfig_Response::CAccountHardware_SteamControllerGetConfig_Response(const CAccountHardware_SteamControllerGetConfig_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerGetConfig_Response)
}

void CAccountHardware_SteamControllerGetConfig_Response::SharedCtor() {
}

CAccountHardware_SteamControllerGetConfig_Response::~CAccountHardware_SteamControllerGetConfig_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerGetConfig_Response)
  SharedDtor();
}

void CAccountHardware_SteamControllerGetConfig_Response::SharedDtor() {
}

void CAccountHardware_SteamControllerGetConfig_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SteamControllerGetConfig_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SteamControllerGetConfig_Response& CAccountHardware_SteamControllerGetConfig_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SteamControllerGetConfig_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_SteamControllerGetConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerGetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configurations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SteamControllerGetConfig_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SteamControllerGetConfig_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SteamControllerGetConfig_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SteamControllerGetConfig_Response)
  return false;
#undef DO_
}

void CAccountHardware_SteamControllerGetConfig_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SteamControllerGetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configurations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->configurations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SteamControllerGetConfig_Response)
}

::google::protobuf::uint8* CAccountHardware_SteamControllerGetConfig_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerGetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configurations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->configurations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerGetConfig_Response)
  return target;
}

size_t CAccountHardware_SteamControllerGetConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerGetConfig_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->configurations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->configurations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerGetConfig_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerGetConfig_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SteamControllerGetConfig_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerGetConfig_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerGetConfig_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerGetConfig_Response::MergeFrom(const CAccountHardware_SteamControllerGetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
}

void CAccountHardware_SteamControllerGetConfig_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerGetConfig_Response::CopyFrom(const CAccountHardware_SteamControllerGetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerGetConfig_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerGetConfig_Response::Swap(CAccountHardware_SteamControllerGetConfig_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SteamControllerGetConfig_Response::InternalSwap(CAccountHardware_SteamControllerGetConfig_Response* other) {
  using std::swap;
  CastToBase(&configurations_)->InternalSwap(CastToBase(&other->configurations_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SteamControllerGetConfig_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_DeRegisterSteamController_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_DeRegisterSteamController_Request::kSerialNumberFieldNumber;
const int CAccountHardware_DeRegisterSteamController_Request::kControllerCodeFieldNumber;
const int CAccountHardware_DeRegisterSteamController_Request::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_DeRegisterSteamController_Request::CAccountHardware_DeRegisterSteamController_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_DeRegisterSteamController_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_DeRegisterSteamController_Request)
}
CAccountHardware_DeRegisterSteamController_Request::CAccountHardware_DeRegisterSteamController_Request(const CAccountHardware_DeRegisterSteamController_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_DeRegisterSteamController_Request)
}

void CAccountHardware_DeRegisterSteamController_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CAccountHardware_DeRegisterSteamController_Request::~CAccountHardware_DeRegisterSteamController_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_DeRegisterSteamController_Request)
  SharedDtor();
}

void CAccountHardware_DeRegisterSteamController_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_DeRegisterSteamController_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_DeRegisterSteamController_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_DeRegisterSteamController_Request& CAccountHardware_DeRegisterSteamController_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_DeRegisterSteamController_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_DeRegisterSteamController_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_DeRegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_DeRegisterSteamController_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_DeRegisterSteamController_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_DeRegisterSteamController_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), static_cast<int>(this->controller_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_DeRegisterSteamController_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_DeRegisterSteamController_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_DeRegisterSteamController_Request)
  return false;
#undef DO_
}

void CAccountHardware_DeRegisterSteamController_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_DeRegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_DeRegisterSteamController_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_DeRegisterSteamController_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_DeRegisterSteamController_Request)
}

::google::protobuf::uint8* CAccountHardware_DeRegisterSteamController_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_DeRegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_DeRegisterSteamController_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), static_cast<int>(this->controller_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_DeRegisterSteamController_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_DeRegisterSteamController_Request)
  return target;
}

size_t CAccountHardware_DeRegisterSteamController_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_DeRegisterSteamController_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_DeRegisterSteamController_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_DeRegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_DeRegisterSteamController_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_DeRegisterSteamController_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_DeRegisterSteamController_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_DeRegisterSteamController_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_DeRegisterSteamController_Request::MergeFrom(const CAccountHardware_DeRegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_DeRegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_DeRegisterSteamController_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_DeRegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_DeRegisterSteamController_Request::CopyFrom(const CAccountHardware_DeRegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_DeRegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_DeRegisterSteamController_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_DeRegisterSteamController_Request::Swap(CAccountHardware_DeRegisterSteamController_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_DeRegisterSteamController_Request::InternalSwap(CAccountHardware_DeRegisterSteamController_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_code_.Swap(&other->controller_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_DeRegisterSteamController_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_DeRegisterSteamController_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_DeRegisterSteamController_Response::CAccountHardware_DeRegisterSteamController_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_DeRegisterSteamController_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_DeRegisterSteamController_Response)
}
CAccountHardware_DeRegisterSteamController_Response::CAccountHardware_DeRegisterSteamController_Response(const CAccountHardware_DeRegisterSteamController_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_DeRegisterSteamController_Response)
}

void CAccountHardware_DeRegisterSteamController_Response::SharedCtor() {
}

CAccountHardware_DeRegisterSteamController_Response::~CAccountHardware_DeRegisterSteamController_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_DeRegisterSteamController_Response)
  SharedDtor();
}

void CAccountHardware_DeRegisterSteamController_Response::SharedDtor() {
}

void CAccountHardware_DeRegisterSteamController_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_DeRegisterSteamController_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_DeRegisterSteamController_Response& CAccountHardware_DeRegisterSteamController_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_DeRegisterSteamController_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_DeRegisterSteamController_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_DeRegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_DeRegisterSteamController_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_DeRegisterSteamController_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_DeRegisterSteamController_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_DeRegisterSteamController_Response)
  return false;
#undef DO_
}

void CAccountHardware_DeRegisterSteamController_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_DeRegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_DeRegisterSteamController_Response)
}

::google::protobuf::uint8* CAccountHardware_DeRegisterSteamController_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_DeRegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_DeRegisterSteamController_Response)
  return target;
}

size_t CAccountHardware_DeRegisterSteamController_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_DeRegisterSteamController_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_DeRegisterSteamController_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_DeRegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_DeRegisterSteamController_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_DeRegisterSteamController_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_DeRegisterSteamController_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_DeRegisterSteamController_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_DeRegisterSteamController_Response::MergeFrom(const CAccountHardware_DeRegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_DeRegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_DeRegisterSteamController_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_DeRegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_DeRegisterSteamController_Response::CopyFrom(const CAccountHardware_DeRegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_DeRegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_DeRegisterSteamController_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_DeRegisterSteamController_Response::Swap(CAccountHardware_DeRegisterSteamController_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_DeRegisterSteamController_Response::InternalSwap(CAccountHardware_DeRegisterSteamController_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_DeRegisterSteamController_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SetPersonalizationFile_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_SetPersonalizationFile_Request::kSerialNumberFieldNumber;
const int CAccountHardware_SetPersonalizationFile_Request::kPublishedfileidFieldNumber;
const int CAccountHardware_SetPersonalizationFile_Request::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SetPersonalizationFile_Request::CAccountHardware_SetPersonalizationFile_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SetPersonalizationFile_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SetPersonalizationFile_Request)
}
CAccountHardware_SetPersonalizationFile_Request::CAccountHardware_SetPersonalizationFile_Request(const CAccountHardware_SetPersonalizationFile_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SetPersonalizationFile_Request)
}

void CAccountHardware_SetPersonalizationFile_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publishedfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&publishedfileid_)) + sizeof(accountid_));
}

CAccountHardware_SetPersonalizationFile_Request::~CAccountHardware_SetPersonalizationFile_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SetPersonalizationFile_Request)
  SharedDtor();
}

void CAccountHardware_SetPersonalizationFile_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SetPersonalizationFile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SetPersonalizationFile_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SetPersonalizationFile_Request& CAccountHardware_SetPersonalizationFile_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SetPersonalizationFile_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_SetPersonalizationFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serial_number_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SetPersonalizationFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SetPersonalizationFile_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_SetPersonalizationFile_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SetPersonalizationFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SetPersonalizationFile_Request)
  return false;
#undef DO_
}

void CAccountHardware_SetPersonalizationFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SetPersonalizationFile_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SetPersonalizationFile_Request)
}

::google::protobuf::uint8* CAccountHardware_SetPersonalizationFile_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SetPersonalizationFile_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SetPersonalizationFile_Request)
  return target;
}

size_t CAccountHardware_SetPersonalizationFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SetPersonalizationFile_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SetPersonalizationFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SetPersonalizationFile_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SetPersonalizationFile_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SetPersonalizationFile_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SetPersonalizationFile_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_SetPersonalizationFile_Request::MergeFrom(const CAccountHardware_SetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SetPersonalizationFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SetPersonalizationFile_Request::CopyFrom(const CAccountHardware_SetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SetPersonalizationFile_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_SetPersonalizationFile_Request::Swap(CAccountHardware_SetPersonalizationFile_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SetPersonalizationFile_Request::InternalSwap(CAccountHardware_SetPersonalizationFile_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publishedfileid_, other->publishedfileid_);
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SetPersonalizationFile_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_SetPersonalizationFile_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_SetPersonalizationFile_Response::CAccountHardware_SetPersonalizationFile_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SetPersonalizationFile_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_SetPersonalizationFile_Response)
}
CAccountHardware_SetPersonalizationFile_Response::CAccountHardware_SetPersonalizationFile_Response(const CAccountHardware_SetPersonalizationFile_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SetPersonalizationFile_Response)
}

void CAccountHardware_SetPersonalizationFile_Response::SharedCtor() {
}

CAccountHardware_SetPersonalizationFile_Response::~CAccountHardware_SetPersonalizationFile_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SetPersonalizationFile_Response)
  SharedDtor();
}

void CAccountHardware_SetPersonalizationFile_Response::SharedDtor() {
}

void CAccountHardware_SetPersonalizationFile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_SetPersonalizationFile_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_SetPersonalizationFile_Response& CAccountHardware_SetPersonalizationFile_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_SetPersonalizationFile_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_SetPersonalizationFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_SetPersonalizationFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_SetPersonalizationFile_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_SetPersonalizationFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_SetPersonalizationFile_Response)
  return false;
#undef DO_
}

void CAccountHardware_SetPersonalizationFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_SetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_SetPersonalizationFile_Response)
}

::google::protobuf::uint8* CAccountHardware_SetPersonalizationFile_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SetPersonalizationFile_Response)
  return target;
}

size_t CAccountHardware_SetPersonalizationFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SetPersonalizationFile_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SetPersonalizationFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SetPersonalizationFile_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_SetPersonalizationFile_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SetPersonalizationFile_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SetPersonalizationFile_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_SetPersonalizationFile_Response::MergeFrom(const CAccountHardware_SetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_SetPersonalizationFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SetPersonalizationFile_Response::CopyFrom(const CAccountHardware_SetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SetPersonalizationFile_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_SetPersonalizationFile_Response::Swap(CAccountHardware_SetPersonalizationFile_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_SetPersonalizationFile_Response::InternalSwap(CAccountHardware_SetPersonalizationFile_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_SetPersonalizationFile_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_GetPersonalizationFile_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_GetPersonalizationFile_Request::kSerialNumberFieldNumber;
const int CAccountHardware_GetPersonalizationFile_Request::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_GetPersonalizationFile_Request::CAccountHardware_GetPersonalizationFile_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_GetPersonalizationFile_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_GetPersonalizationFile_Request)
}
CAccountHardware_GetPersonalizationFile_Request::CAccountHardware_GetPersonalizationFile_Request(const CAccountHardware_GetPersonalizationFile_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_GetPersonalizationFile_Request)
}

void CAccountHardware_GetPersonalizationFile_Request::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CAccountHardware_GetPersonalizationFile_Request::~CAccountHardware_GetPersonalizationFile_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_GetPersonalizationFile_Request)
  SharedDtor();
}

void CAccountHardware_GetPersonalizationFile_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_GetPersonalizationFile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_GetPersonalizationFile_Request::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_GetPersonalizationFile_Request& CAccountHardware_GetPersonalizationFile_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_GetPersonalizationFile_Request.base);
  return *internal_default_instance();
}


void CAccountHardware_GetPersonalizationFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_GetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serial_number_.ClearNonDefaultToEmptyNoArena();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_GetPersonalizationFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_GetPersonalizationFile_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAccountHardware_GetPersonalizationFile_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_GetPersonalizationFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_GetPersonalizationFile_Request)
  return false;
#undef DO_
}

void CAccountHardware_GetPersonalizationFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_GetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_GetPersonalizationFile_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_GetPersonalizationFile_Request)
}

::google::protobuf::uint8* CAccountHardware_GetPersonalizationFile_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_GetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAccountHardware_GetPersonalizationFile_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_GetPersonalizationFile_Request)
  return target;
}

size_t CAccountHardware_GetPersonalizationFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_GetPersonalizationFile_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_GetPersonalizationFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_GetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_GetPersonalizationFile_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_GetPersonalizationFile_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_GetPersonalizationFile_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_GetPersonalizationFile_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_GetPersonalizationFile_Request::MergeFrom(const CAccountHardware_GetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_GetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_GetPersonalizationFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_GetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_GetPersonalizationFile_Request::CopyFrom(const CAccountHardware_GetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_GetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_GetPersonalizationFile_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_GetPersonalizationFile_Request::Swap(CAccountHardware_GetPersonalizationFile_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_GetPersonalizationFile_Request::InternalSwap(CAccountHardware_GetPersonalizationFile_Request* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_GetPersonalizationFile_Request::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAccountHardware_GetPersonalizationFile_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAccountHardware_GetPersonalizationFile_Response::kPublishedfileidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAccountHardware_GetPersonalizationFile_Response::CAccountHardware_GetPersonalizationFile_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_GetPersonalizationFile_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAccountHardware_GetPersonalizationFile_Response)
}
CAccountHardware_GetPersonalizationFile_Response::CAccountHardware_GetPersonalizationFile_Response(const CAccountHardware_GetPersonalizationFile_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_GetPersonalizationFile_Response)
}

void CAccountHardware_GetPersonalizationFile_Response::SharedCtor() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CAccountHardware_GetPersonalizationFile_Response::~CAccountHardware_GetPersonalizationFile_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_GetPersonalizationFile_Response)
  SharedDtor();
}

void CAccountHardware_GetPersonalizationFile_Response::SharedDtor() {
}

void CAccountHardware_GetPersonalizationFile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAccountHardware_GetPersonalizationFile_Response::descriptor() {
  ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAccountHardware_GetPersonalizationFile_Response& CAccountHardware_GetPersonalizationFile_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::scc_info_CAccountHardware_GetPersonalizationFile_Response.base);
  return *internal_default_instance();
}


void CAccountHardware_GetPersonalizationFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_GetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAccountHardware_GetPersonalizationFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAccountHardware_GetPersonalizationFile_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAccountHardware_GetPersonalizationFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAccountHardware_GetPersonalizationFile_Response)
  return false;
#undef DO_
}

void CAccountHardware_GetPersonalizationFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAccountHardware_GetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAccountHardware_GetPersonalizationFile_Response)
}

::google::protobuf::uint8* CAccountHardware_GetPersonalizationFile_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_GetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_GetPersonalizationFile_Response)
  return target;
}

size_t CAccountHardware_GetPersonalizationFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_GetPersonalizationFile_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->publishedfileid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_GetPersonalizationFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_GetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_GetPersonalizationFile_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAccountHardware_GetPersonalizationFile_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_GetPersonalizationFile_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_GetPersonalizationFile_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_GetPersonalizationFile_Response::MergeFrom(const CAccountHardware_GetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_GetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_publishedfileid()) {
    set_publishedfileid(from.publishedfileid());
  }
}

void CAccountHardware_GetPersonalizationFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_GetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_GetPersonalizationFile_Response::CopyFrom(const CAccountHardware_GetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_GetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_GetPersonalizationFile_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_GetPersonalizationFile_Response::Swap(CAccountHardware_GetPersonalizationFile_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAccountHardware_GetPersonalizationFile_Response::InternalSwap(CAccountHardware_GetPersonalizationFile_Response* other) {
  using std::swap;
  swap(publishedfileid_, other->publishedfileid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAccountHardware_GetPersonalizationFile_Response::GetMetadata() const {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

AccountHardware::~AccountHardware() {}

const ::google::protobuf::ServiceDescriptor* AccountHardware::descriptor() {
  protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* AccountHardware::GetDescriptor() {
  return descriptor();
}

void AccountHardware::RegisterSteamController(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_RegisterSteamController_Request*,
                         ::CAccountHardware_RegisterSteamController_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterSteamController() not implemented.");
  done->Run();
}

void AccountHardware::CompleteSteamControllerRegistration(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_CompleteSteamControllerRegistration_Request*,
                         ::CAccountHardware_CompleteSteamControllerRegistration_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CompleteSteamControllerRegistration() not implemented.");
  done->Run();
}

void AccountHardware::QueryAccountsRegisteredToController(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request*,
                         ::CAccountHardware_QueryAccountsRegisteredToSerial_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryAccountsRegisteredToController() not implemented.");
  done->Run();
}

void AccountHardware::SetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_SteamControllerSetConfig_Request*,
                         ::CAccountHardware_SteamControllerSetConfig_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetDesiredControllerConfigForApp() not implemented.");
  done->Run();
}

void AccountHardware::GetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_SteamControllerGetConfig_Request*,
                         ::CAccountHardware_SteamControllerGetConfig_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDesiredControllerConfigForApp() not implemented.");
  done->Run();
}

void AccountHardware::DeRegisterSteamController(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_DeRegisterSteamController_Request*,
                         ::CAccountHardware_DeRegisterSteamController_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeRegisterSteamController() not implemented.");
  done->Run();
}

void AccountHardware::SetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_SetPersonalizationFile_Request*,
                         ::CAccountHardware_SetPersonalizationFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetControllerPersonalizationFile() not implemented.");
  done->Run();
}

void AccountHardware::GetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                         const ::CAccountHardware_GetPersonalizationFile_Request*,
                         ::CAccountHardware_GetPersonalizationFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetControllerPersonalizationFile() not implemented.");
  done->Run();
}

void AccountHardware::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5faccounthardware_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      RegisterSteamController(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_RegisterSteamController_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_RegisterSteamController_Response*>(response),
             done);
      break;
    case 1:
      CompleteSteamControllerRegistration(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_CompleteSteamControllerRegistration_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_CompleteSteamControllerRegistration_Response*>(response),
             done);
      break;
    case 2:
      QueryAccountsRegisteredToController(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_QueryAccountsRegisteredToSerial_Response*>(response),
             done);
      break;
    case 3:
      SetDesiredControllerConfigForApp(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_SteamControllerSetConfig_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_SteamControllerSetConfig_Response*>(response),
             done);
      break;
    case 4:
      GetDesiredControllerConfigForApp(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_SteamControllerGetConfig_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_SteamControllerGetConfig_Response*>(response),
             done);
      break;
    case 5:
      DeRegisterSteamController(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_DeRegisterSteamController_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_DeRegisterSteamController_Response*>(response),
             done);
      break;
    case 6:
      SetControllerPersonalizationFile(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_SetPersonalizationFile_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_SetPersonalizationFile_Response*>(response),
             done);
      break;
    case 7:
      GetControllerPersonalizationFile(controller,
             ::google::protobuf::down_cast<const ::CAccountHardware_GetPersonalizationFile_Request*>(request),
             ::google::protobuf::down_cast< ::CAccountHardware_GetPersonalizationFile_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AccountHardware::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAccountHardware_RegisterSteamController_Request::default_instance();
    case 1:
      return ::CAccountHardware_CompleteSteamControllerRegistration_Request::default_instance();
    case 2:
      return ::CAccountHardware_QueryAccountsRegisteredToSerial_Request::default_instance();
    case 3:
      return ::CAccountHardware_SteamControllerSetConfig_Request::default_instance();
    case 4:
      return ::CAccountHardware_SteamControllerGetConfig_Request::default_instance();
    case 5:
      return ::CAccountHardware_DeRegisterSteamController_Request::default_instance();
    case 6:
      return ::CAccountHardware_SetPersonalizationFile_Request::default_instance();
    case 7:
      return ::CAccountHardware_GetPersonalizationFile_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& AccountHardware::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAccountHardware_RegisterSteamController_Response::default_instance();
    case 1:
      return ::CAccountHardware_CompleteSteamControllerRegistration_Response::default_instance();
    case 2:
      return ::CAccountHardware_QueryAccountsRegisteredToSerial_Response::default_instance();
    case 3:
      return ::CAccountHardware_SteamControllerSetConfig_Response::default_instance();
    case 4:
      return ::CAccountHardware_SteamControllerGetConfig_Response::default_instance();
    case 5:
      return ::CAccountHardware_DeRegisterSteamController_Response::default_instance();
    case 6:
      return ::CAccountHardware_SetPersonalizationFile_Response::default_instance();
    case 7:
      return ::CAccountHardware_GetPersonalizationFile_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

AccountHardware_Stub::AccountHardware_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AccountHardware_Stub::AccountHardware_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AccountHardware_Stub::~AccountHardware_Stub() {
  if (owns_channel_) delete channel_;
}

void AccountHardware_Stub::RegisterSteamController(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_RegisterSteamController_Request* request,
                              ::CAccountHardware_RegisterSteamController_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AccountHardware_Stub::CompleteSteamControllerRegistration(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_CompleteSteamControllerRegistration_Request* request,
                              ::CAccountHardware_CompleteSteamControllerRegistration_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AccountHardware_Stub::QueryAccountsRegisteredToController(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* request,
                              ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AccountHardware_Stub::SetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_SteamControllerSetConfig_Request* request,
                              ::CAccountHardware_SteamControllerSetConfig_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void AccountHardware_Stub::GetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_SteamControllerGetConfig_Request* request,
                              ::CAccountHardware_SteamControllerGetConfig_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void AccountHardware_Stub::DeRegisterSteamController(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_DeRegisterSteamController_Request* request,
                              ::CAccountHardware_DeRegisterSteamController_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void AccountHardware_Stub::SetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_SetPersonalizationFile_Request* request,
                              ::CAccountHardware_SetPersonalizationFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void AccountHardware_Stub::GetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                              const ::CAccountHardware_GetPersonalizationFile_Request* request,
                              ::CAccountHardware_GetPersonalizationFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_RegisterSteamController_Request* Arena::CreateMaybeMessage< ::CAccountHardware_RegisterSteamController_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_RegisterSteamController_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_RegisterSteamController_Response* Arena::CreateMaybeMessage< ::CAccountHardware_RegisterSteamController_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_RegisterSteamController_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_CompleteSteamControllerRegistration_Request* Arena::CreateMaybeMessage< ::CAccountHardware_CompleteSteamControllerRegistration_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_CompleteSteamControllerRegistration_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_CompleteSteamControllerRegistration_Response* Arena::CreateMaybeMessage< ::CAccountHardware_CompleteSteamControllerRegistration_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_CompleteSteamControllerRegistration_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* Arena::CreateMaybeMessage< ::CAccountHardware_QueryAccountsRegisteredToSerial_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_QueryAccountsRegisteredToSerial_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* Arena::CreateMaybeMessage< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* Arena::CreateMaybeMessage< ::CAccountHardware_QueryAccountsRegisteredToSerial_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_QueryAccountsRegisteredToSerial_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SteamControllerSetConfig_Request* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerSetConfig_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SteamControllerSetConfig_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SteamControllerSetConfig_Response* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerSetConfig_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SteamControllerSetConfig_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SteamControllerGetConfig_Request* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerGetConfig_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SteamControllerGetConfig_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SteamControllerGetConfig_Response* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerGetConfig_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SteamControllerGetConfig_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_DeRegisterSteamController_Request* Arena::CreateMaybeMessage< ::CAccountHardware_DeRegisterSteamController_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_DeRegisterSteamController_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_DeRegisterSteamController_Response* Arena::CreateMaybeMessage< ::CAccountHardware_DeRegisterSteamController_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_DeRegisterSteamController_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SetPersonalizationFile_Request* Arena::CreateMaybeMessage< ::CAccountHardware_SetPersonalizationFile_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SetPersonalizationFile_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_SetPersonalizationFile_Response* Arena::CreateMaybeMessage< ::CAccountHardware_SetPersonalizationFile_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_SetPersonalizationFile_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_GetPersonalizationFile_Request* Arena::CreateMaybeMessage< ::CAccountHardware_GetPersonalizationFile_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_GetPersonalizationFile_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAccountHardware_GetPersonalizationFile_Response* Arena::CreateMaybeMessage< ::CAccountHardware_GetPersonalizationFile_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CAccountHardware_GetPersonalizationFile_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
