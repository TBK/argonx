// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_secrets.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fsecrets_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fsecrets_2esteamclient_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fsecrets_2esteamclient_2eproto 

namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto
class CKeyEscrow_Request;
class CKeyEscrow_RequestDefaultTypeInternal;
extern CKeyEscrow_RequestDefaultTypeInternal _CKeyEscrow_Request_default_instance_;
class CKeyEscrow_Response;
class CKeyEscrow_ResponseDefaultTypeInternal;
extern CKeyEscrow_ResponseDefaultTypeInternal _CKeyEscrow_Response_default_instance_;
class CKeyEscrow_Ticket;
class CKeyEscrow_TicketDefaultTypeInternal;
extern CKeyEscrow_TicketDefaultTypeInternal _CKeyEscrow_Ticket_default_instance_;
namespace google {
namespace protobuf {
template<> ::CKeyEscrow_Request* Arena::CreateMaybeMessage<::CKeyEscrow_Request>(Arena*);
template<> ::CKeyEscrow_Response* Arena::CreateMaybeMessage<::CKeyEscrow_Response>(Arena*);
template<> ::CKeyEscrow_Ticket* Arena::CreateMaybeMessage<::CKeyEscrow_Ticket>(Arena*);
}  // namespace protobuf
}  // namespace google

enum EKeyEscrowUsage {
  k_EKeyEscrowUsageStreamingDevice = 0
};
bool EKeyEscrowUsage_IsValid(int value);
const EKeyEscrowUsage EKeyEscrowUsage_MIN = k_EKeyEscrowUsageStreamingDevice;
const EKeyEscrowUsage EKeyEscrowUsage_MAX = k_EKeyEscrowUsageStreamingDevice;
const int EKeyEscrowUsage_ARRAYSIZE = EKeyEscrowUsage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EKeyEscrowUsage_descriptor();
inline const ::std::string& EKeyEscrowUsage_Name(EKeyEscrowUsage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EKeyEscrowUsage_descriptor(), value);
}
inline bool EKeyEscrowUsage_Parse(
    const ::std::string& name, EKeyEscrowUsage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EKeyEscrowUsage>(
    EKeyEscrowUsage_descriptor(), name, value);
}
// ===================================================================

class CKeyEscrow_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CKeyEscrow_Request) */ {
 public:
  CKeyEscrow_Request();
  virtual ~CKeyEscrow_Request();

  CKeyEscrow_Request(const CKeyEscrow_Request& from);

  inline CKeyEscrow_Request& operator=(const CKeyEscrow_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CKeyEscrow_Request(CKeyEscrow_Request&& from) noexcept
    : CKeyEscrow_Request() {
    *this = ::std::move(from);
  }

  inline CKeyEscrow_Request& operator=(CKeyEscrow_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CKeyEscrow_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CKeyEscrow_Request* internal_default_instance() {
    return reinterpret_cast<const CKeyEscrow_Request*>(
               &_CKeyEscrow_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CKeyEscrow_Request* other);
  friend void swap(CKeyEscrow_Request& a, CKeyEscrow_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CKeyEscrow_Request* New() const final {
    return CreateMaybeMessage<CKeyEscrow_Request>(NULL);
  }

  CKeyEscrow_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CKeyEscrow_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CKeyEscrow_Request& from);
  void MergeFrom(const CKeyEscrow_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CKeyEscrow_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes rsa_oaep_sha_ticket = 1;
  bool has_rsa_oaep_sha_ticket() const;
  void clear_rsa_oaep_sha_ticket();
  static const int kRsaOaepShaTicketFieldNumber = 1;
  const ::std::string& rsa_oaep_sha_ticket() const;
  void set_rsa_oaep_sha_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_rsa_oaep_sha_ticket(::std::string&& value);
  #endif
  void set_rsa_oaep_sha_ticket(const char* value);
  void set_rsa_oaep_sha_ticket(const void* value, size_t size);
  ::std::string* mutable_rsa_oaep_sha_ticket();
  ::std::string* release_rsa_oaep_sha_ticket();
  void set_allocated_rsa_oaep_sha_ticket(::std::string* rsa_oaep_sha_ticket);

  // optional bytes password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string device_name = 4;
  bool has_device_name() const;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 4;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
  bool has_usage() const;
  void clear_usage();
  static const int kUsageFieldNumber = 3;
  ::EKeyEscrowUsage usage() const;
  void set_usage(::EKeyEscrowUsage value);

  // @@protoc_insertion_point(class_scope:CKeyEscrow_Request)
 private:
  void set_has_rsa_oaep_sha_ticket();
  void clear_has_rsa_oaep_sha_ticket();
  void set_has_password();
  void clear_has_password();
  void set_has_usage();
  void clear_has_usage();
  void set_has_device_name();
  void clear_has_device_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rsa_oaep_sha_ticket_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  int usage_;
  friend struct ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CKeyEscrow_Ticket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CKeyEscrow_Ticket) */ {
 public:
  CKeyEscrow_Ticket();
  virtual ~CKeyEscrow_Ticket();

  CKeyEscrow_Ticket(const CKeyEscrow_Ticket& from);

  inline CKeyEscrow_Ticket& operator=(const CKeyEscrow_Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CKeyEscrow_Ticket(CKeyEscrow_Ticket&& from) noexcept
    : CKeyEscrow_Ticket() {
    *this = ::std::move(from);
  }

  inline CKeyEscrow_Ticket& operator=(CKeyEscrow_Ticket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CKeyEscrow_Ticket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CKeyEscrow_Ticket* internal_default_instance() {
    return reinterpret_cast<const CKeyEscrow_Ticket*>(
               &_CKeyEscrow_Ticket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CKeyEscrow_Ticket* other);
  friend void swap(CKeyEscrow_Ticket& a, CKeyEscrow_Ticket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CKeyEscrow_Ticket* New() const final {
    return CreateMaybeMessage<CKeyEscrow_Ticket>(NULL);
  }

  CKeyEscrow_Ticket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CKeyEscrow_Ticket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CKeyEscrow_Ticket& from);
  void MergeFrom(const CKeyEscrow_Ticket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CKeyEscrow_Ticket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes password = 1;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 1;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional bytes payload = 3;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // optional string device_name = 6;
  bool has_device_name() const;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 6;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // optional string device_model = 7;
  bool has_device_model() const;
  void clear_device_model();
  static const int kDeviceModelFieldNumber = 7;
  const ::std::string& device_model() const;
  void set_device_model(const ::std::string& value);
  #if LANG_CXX11
  void set_device_model(::std::string&& value);
  #endif
  void set_device_model(const char* value);
  void set_device_model(const char* value, size_t size);
  ::std::string* mutable_device_model();
  ::std::string* release_device_model();
  void set_allocated_device_model(::std::string* device_model);

  // optional string device_serial = 8;
  bool has_device_serial() const;
  void clear_device_serial();
  static const int kDeviceSerialFieldNumber = 8;
  const ::std::string& device_serial() const;
  void set_device_serial(const ::std::string& value);
  #if LANG_CXX11
  void set_device_serial(::std::string&& value);
  #endif
  void set_device_serial(const char* value);
  void set_device_serial(const char* value, size_t size);
  ::std::string* mutable_device_serial();
  ::std::string* release_device_serial();
  void set_allocated_device_serial(::std::string* device_serial);

  // optional uint64 identifier = 2;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  ::google::protobuf::uint64 identifier() const;
  void set_identifier(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  bool has_usage() const;
  void clear_usage();
  static const int kUsageFieldNumber = 5;
  ::EKeyEscrowUsage usage() const;
  void set_usage(::EKeyEscrowUsage value);

  // optional uint32 device_provisioning_id = 9;
  bool has_device_provisioning_id() const;
  void clear_device_provisioning_id();
  static const int kDeviceProvisioningIdFieldNumber = 9;
  ::google::protobuf::uint32 device_provisioning_id() const;
  void set_device_provisioning_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CKeyEscrow_Ticket)
 private:
  void set_has_password();
  void clear_has_password();
  void set_has_identifier();
  void clear_has_identifier();
  void set_has_payload();
  void clear_has_payload();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_usage();
  void clear_has_usage();
  void set_has_device_name();
  void clear_has_device_name();
  void set_has_device_model();
  void clear_has_device_model();
  void set_has_device_serial();
  void clear_has_device_serial();
  void set_has_device_provisioning_id();
  void clear_has_device_provisioning_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr device_model_;
  ::google::protobuf::internal::ArenaStringPtr device_serial_;
  ::google::protobuf::uint64 identifier_;
  ::google::protobuf::uint32 timestamp_;
  int usage_;
  ::google::protobuf::uint32 device_provisioning_id_;
  friend struct ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CKeyEscrow_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CKeyEscrow_Response) */ {
 public:
  CKeyEscrow_Response();
  virtual ~CKeyEscrow_Response();

  CKeyEscrow_Response(const CKeyEscrow_Response& from);

  inline CKeyEscrow_Response& operator=(const CKeyEscrow_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CKeyEscrow_Response(CKeyEscrow_Response&& from) noexcept
    : CKeyEscrow_Response() {
    *this = ::std::move(from);
  }

  inline CKeyEscrow_Response& operator=(CKeyEscrow_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CKeyEscrow_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CKeyEscrow_Response* internal_default_instance() {
    return reinterpret_cast<const CKeyEscrow_Response*>(
               &_CKeyEscrow_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CKeyEscrow_Response* other);
  friend void swap(CKeyEscrow_Response& a, CKeyEscrow_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CKeyEscrow_Response* New() const final {
    return CreateMaybeMessage<CKeyEscrow_Response>(NULL);
  }

  CKeyEscrow_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CKeyEscrow_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CKeyEscrow_Response& from);
  void MergeFrom(const CKeyEscrow_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CKeyEscrow_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CKeyEscrow_Ticket ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  private:
  const ::CKeyEscrow_Ticket& _internal_ticket() const;
  public:
  const ::CKeyEscrow_Ticket& ticket() const;
  ::CKeyEscrow_Ticket* release_ticket();
  ::CKeyEscrow_Ticket* mutable_ticket();
  void set_allocated_ticket(::CKeyEscrow_Ticket* ticket);

  // @@protoc_insertion_point(class_scope:CKeyEscrow_Response)
 private:
  void set_has_ticket();
  void clear_has_ticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CKeyEscrow_Ticket* ticket_;
  friend struct ::protobuf_steammessages_5fsecrets_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class Secrets_Stub;

class Secrets : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Secrets() {};
 public:
  virtual ~Secrets();

  typedef Secrets_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void KeyEscrow(::google::protobuf::RpcController* controller,
                       const ::CKeyEscrow_Request* request,
                       ::CKeyEscrow_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Secrets);
};

class Secrets_Stub : public Secrets {
 public:
  Secrets_Stub(::google::protobuf::RpcChannel* channel);
  Secrets_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Secrets_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Secrets ------------------------------------------

  void KeyEscrow(::google::protobuf::RpcController* controller,
                       const ::CKeyEscrow_Request* request,
                       ::CKeyEscrow_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Secrets_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CKeyEscrow_Request

// optional bytes rsa_oaep_sha_ticket = 1;
inline bool CKeyEscrow_Request::has_rsa_oaep_sha_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CKeyEscrow_Request::set_has_rsa_oaep_sha_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CKeyEscrow_Request::clear_has_rsa_oaep_sha_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CKeyEscrow_Request::clear_rsa_oaep_sha_ticket() {
  rsa_oaep_sha_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsa_oaep_sha_ticket();
}
inline const ::std::string& CKeyEscrow_Request::rsa_oaep_sha_ticket() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.rsa_oaep_sha_ticket)
  return rsa_oaep_sha_ticket_.GetNoArena();
}
inline void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(const ::std::string& value) {
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
#if LANG_CXX11
inline void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(::std::string&& value) {
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
#endif
inline void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
inline void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(const void* value, size_t size) {
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
inline ::std::string* CKeyEscrow_Request::mutable_rsa_oaep_sha_ticket() {
  set_has_rsa_oaep_sha_ticket();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Request.rsa_oaep_sha_ticket)
  return rsa_oaep_sha_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Request::release_rsa_oaep_sha_ticket() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Request.rsa_oaep_sha_ticket)
  if (!has_rsa_oaep_sha_ticket()) {
    return NULL;
  }
  clear_has_rsa_oaep_sha_ticket();
  return rsa_oaep_sha_ticket_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Request::set_allocated_rsa_oaep_sha_ticket(::std::string* rsa_oaep_sha_ticket) {
  if (rsa_oaep_sha_ticket != NULL) {
    set_has_rsa_oaep_sha_ticket();
  } else {
    clear_has_rsa_oaep_sha_ticket();
  }
  rsa_oaep_sha_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsa_oaep_sha_ticket);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}

// optional bytes password = 2;
inline bool CKeyEscrow_Request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CKeyEscrow_Request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CKeyEscrow_Request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CKeyEscrow_Request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CKeyEscrow_Request::password() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.password)
  return password_.GetNoArena();
}
inline void CKeyEscrow_Request::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.password)
}
#if LANG_CXX11
inline void CKeyEscrow_Request::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Request.password)
}
#endif
inline void CKeyEscrow_Request::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Request.password)
}
inline void CKeyEscrow_Request::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Request.password)
}
inline ::std::string* CKeyEscrow_Request::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Request.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Request::release_password() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Request.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Request::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Request.password)
}

// optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
inline bool CKeyEscrow_Request::has_usage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CKeyEscrow_Request::set_has_usage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CKeyEscrow_Request::clear_has_usage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CKeyEscrow_Request::clear_usage() {
  usage_ = 0;
  clear_has_usage();
}
inline ::EKeyEscrowUsage CKeyEscrow_Request::usage() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.usage)
  return static_cast< ::EKeyEscrowUsage >(usage_);
}
inline void CKeyEscrow_Request::set_usage(::EKeyEscrowUsage value) {
  assert(::EKeyEscrowUsage_IsValid(value));
  set_has_usage();
  usage_ = value;
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.usage)
}

// optional string device_name = 4;
inline bool CKeyEscrow_Request::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CKeyEscrow_Request::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CKeyEscrow_Request::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CKeyEscrow_Request::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
inline const ::std::string& CKeyEscrow_Request::device_name() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.device_name)
  return device_name_.GetNoArena();
}
inline void CKeyEscrow_Request::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.device_name)
}
#if LANG_CXX11
inline void CKeyEscrow_Request::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Request.device_name)
}
#endif
inline void CKeyEscrow_Request::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Request.device_name)
}
inline void CKeyEscrow_Request::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Request.device_name)
}
inline ::std::string* CKeyEscrow_Request::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Request.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Request::release_device_name() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Request.device_name)
  if (!has_device_name()) {
    return NULL;
  }
  clear_has_device_name();
  return device_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Request::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Request.device_name)
}

// -------------------------------------------------------------------

// CKeyEscrow_Ticket

// optional bytes password = 1;
inline bool CKeyEscrow_Ticket::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CKeyEscrow_Ticket::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CKeyEscrow_Ticket::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CKeyEscrow_Ticket::password() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.password)
  return password_.GetNoArena();
}
inline void CKeyEscrow_Ticket::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.password)
}
#if LANG_CXX11
inline void CKeyEscrow_Ticket::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Ticket.password)
}
#endif
inline void CKeyEscrow_Ticket::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Ticket.password)
}
inline void CKeyEscrow_Ticket::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Ticket.password)
}
inline ::std::string* CKeyEscrow_Ticket::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Ticket::release_password() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Ticket::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.password)
}

// optional uint64 identifier = 2;
inline bool CKeyEscrow_Ticket::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CKeyEscrow_Ticket::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CKeyEscrow_Ticket::clear_identifier() {
  identifier_ = GOOGLE_ULONGLONG(0);
  clear_has_identifier();
}
inline ::google::protobuf::uint64 CKeyEscrow_Ticket::identifier() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.identifier)
  return identifier_;
}
inline void CKeyEscrow_Ticket::set_identifier(::google::protobuf::uint64 value) {
  set_has_identifier();
  identifier_ = value;
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.identifier)
}

// optional bytes payload = 3;
inline bool CKeyEscrow_Ticket::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CKeyEscrow_Ticket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CKeyEscrow_Ticket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string& CKeyEscrow_Ticket::payload() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.payload)
  return payload_.GetNoArena();
}
inline void CKeyEscrow_Ticket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.payload)
}
#if LANG_CXX11
inline void CKeyEscrow_Ticket::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Ticket.payload)
}
#endif
inline void CKeyEscrow_Ticket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Ticket.payload)
}
inline void CKeyEscrow_Ticket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Ticket.payload)
}
inline ::std::string* CKeyEscrow_Ticket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Ticket::release_payload() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.payload)
  if (!has_payload()) {
    return NULL;
  }
  clear_has_payload();
  return payload_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Ticket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.payload)
}

// optional uint32 timestamp = 4;
inline bool CKeyEscrow_Ticket::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CKeyEscrow_Ticket::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CKeyEscrow_Ticket::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CKeyEscrow_Ticket::timestamp() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.timestamp)
  return timestamp_;
}
inline void CKeyEscrow_Ticket::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.timestamp)
}

// optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
inline bool CKeyEscrow_Ticket::has_usage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_usage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CKeyEscrow_Ticket::clear_has_usage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CKeyEscrow_Ticket::clear_usage() {
  usage_ = 0;
  clear_has_usage();
}
inline ::EKeyEscrowUsage CKeyEscrow_Ticket::usage() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.usage)
  return static_cast< ::EKeyEscrowUsage >(usage_);
}
inline void CKeyEscrow_Ticket::set_usage(::EKeyEscrowUsage value) {
  assert(::EKeyEscrowUsage_IsValid(value));
  set_has_usage();
  usage_ = value;
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.usage)
}

// optional string device_name = 6;
inline bool CKeyEscrow_Ticket::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CKeyEscrow_Ticket::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CKeyEscrow_Ticket::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
inline const ::std::string& CKeyEscrow_Ticket::device_name() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_name)
  return device_name_.GetNoArena();
}
inline void CKeyEscrow_Ticket::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_name)
}
#if LANG_CXX11
inline void CKeyEscrow_Ticket::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Ticket.device_name)
}
#endif
inline void CKeyEscrow_Ticket::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Ticket.device_name)
}
inline void CKeyEscrow_Ticket::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Ticket.device_name)
}
inline ::std::string* CKeyEscrow_Ticket::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Ticket::release_device_name() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.device_name)
  if (!has_device_name()) {
    return NULL;
  }
  clear_has_device_name();
  return device_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Ticket::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.device_name)
}

// optional string device_model = 7;
inline bool CKeyEscrow_Ticket::has_device_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_device_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CKeyEscrow_Ticket::clear_has_device_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CKeyEscrow_Ticket::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_model();
}
inline const ::std::string& CKeyEscrow_Ticket::device_model() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_model)
  return device_model_.GetNoArena();
}
inline void CKeyEscrow_Ticket::set_device_model(const ::std::string& value) {
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_model)
}
#if LANG_CXX11
inline void CKeyEscrow_Ticket::set_device_model(::std::string&& value) {
  set_has_device_model();
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Ticket.device_model)
}
#endif
inline void CKeyEscrow_Ticket::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Ticket.device_model)
}
inline void CKeyEscrow_Ticket::set_device_model(const char* value, size_t size) {
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Ticket.device_model)
}
inline ::std::string* CKeyEscrow_Ticket::mutable_device_model() {
  set_has_device_model();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Ticket::release_device_model() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.device_model)
  if (!has_device_model()) {
    return NULL;
  }
  clear_has_device_model();
  return device_model_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Ticket::set_allocated_device_model(::std::string* device_model) {
  if (device_model != NULL) {
    set_has_device_model();
  } else {
    clear_has_device_model();
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.device_model)
}

// optional string device_serial = 8;
inline bool CKeyEscrow_Ticket::has_device_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_device_serial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CKeyEscrow_Ticket::clear_has_device_serial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CKeyEscrow_Ticket::clear_device_serial() {
  device_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_serial();
}
inline const ::std::string& CKeyEscrow_Ticket::device_serial() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_serial)
  return device_serial_.GetNoArena();
}
inline void CKeyEscrow_Ticket::set_device_serial(const ::std::string& value) {
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_serial)
}
#if LANG_CXX11
inline void CKeyEscrow_Ticket::set_device_serial(::std::string&& value) {
  set_has_device_serial();
  device_serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CKeyEscrow_Ticket.device_serial)
}
#endif
inline void CKeyEscrow_Ticket::set_device_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CKeyEscrow_Ticket.device_serial)
}
inline void CKeyEscrow_Ticket::set_device_serial(const char* value, size_t size) {
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CKeyEscrow_Ticket.device_serial)
}
inline ::std::string* CKeyEscrow_Ticket::mutable_device_serial() {
  set_has_device_serial();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.device_serial)
  return device_serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CKeyEscrow_Ticket::release_device_serial() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.device_serial)
  if (!has_device_serial()) {
    return NULL;
  }
  clear_has_device_serial();
  return device_serial_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CKeyEscrow_Ticket::set_allocated_device_serial(::std::string* device_serial) {
  if (device_serial != NULL) {
    set_has_device_serial();
  } else {
    clear_has_device_serial();
  }
  device_serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_serial);
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.device_serial)
}

// optional uint32 device_provisioning_id = 9;
inline bool CKeyEscrow_Ticket::has_device_provisioning_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CKeyEscrow_Ticket::set_has_device_provisioning_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CKeyEscrow_Ticket::clear_has_device_provisioning_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CKeyEscrow_Ticket::clear_device_provisioning_id() {
  device_provisioning_id_ = 0u;
  clear_has_device_provisioning_id();
}
inline ::google::protobuf::uint32 CKeyEscrow_Ticket::device_provisioning_id() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_provisioning_id)
  return device_provisioning_id_;
}
inline void CKeyEscrow_Ticket::set_device_provisioning_id(::google::protobuf::uint32 value) {
  set_has_device_provisioning_id();
  device_provisioning_id_ = value;
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_provisioning_id)
}

// -------------------------------------------------------------------

// CKeyEscrow_Response

// optional .CKeyEscrow_Ticket ticket = 1;
inline bool CKeyEscrow_Response::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CKeyEscrow_Response::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CKeyEscrow_Response::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CKeyEscrow_Response::clear_ticket() {
  if (ticket_ != NULL) ticket_->Clear();
  clear_has_ticket();
}
inline const ::CKeyEscrow_Ticket& CKeyEscrow_Response::_internal_ticket() const {
  return *ticket_;
}
inline const ::CKeyEscrow_Ticket& CKeyEscrow_Response::ticket() const {
  const ::CKeyEscrow_Ticket* p = ticket_;
  // @@protoc_insertion_point(field_get:CKeyEscrow_Response.ticket)
  return p != NULL ? *p : *reinterpret_cast<const ::CKeyEscrow_Ticket*>(
      &::_CKeyEscrow_Ticket_default_instance_);
}
inline ::CKeyEscrow_Ticket* CKeyEscrow_Response::release_ticket() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Response.ticket)
  clear_has_ticket();
  ::CKeyEscrow_Ticket* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
inline ::CKeyEscrow_Ticket* CKeyEscrow_Response::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) {
    auto* p = CreateMaybeMessage<::CKeyEscrow_Ticket>(GetArenaNoVirtual());
    ticket_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Response.ticket)
  return ticket_;
}
inline void CKeyEscrow_Response::set_allocated_ticket(::CKeyEscrow_Ticket* ticket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ticket_;
  }
  if (ticket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ticket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Response.ticket)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EKeyEscrowUsage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EKeyEscrowUsage>() {
  return ::EKeyEscrowUsage_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fsecrets_2esteamclient_2eproto
