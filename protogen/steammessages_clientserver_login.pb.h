// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fclientserver_5flogin_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fclientserver_5flogin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fclientserver_5flogin_2eproto 

namespace protobuf_steammessages_5fclientserver_5flogin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fclientserver_5flogin_2eproto
class CMsgClientAccountInfo;
class CMsgClientAccountInfoDefaultTypeInternal;
extern CMsgClientAccountInfoDefaultTypeInternal _CMsgClientAccountInfo_default_instance_;
class CMsgClientHeartBeat;
class CMsgClientHeartBeatDefaultTypeInternal;
extern CMsgClientHeartBeatDefaultTypeInternal _CMsgClientHeartBeat_default_instance_;
class CMsgClientLogOff;
class CMsgClientLogOffDefaultTypeInternal;
extern CMsgClientLogOffDefaultTypeInternal _CMsgClientLogOff_default_instance_;
class CMsgClientLoggedOff;
class CMsgClientLoggedOffDefaultTypeInternal;
extern CMsgClientLoggedOffDefaultTypeInternal _CMsgClientLoggedOff_default_instance_;
class CMsgClientLogon;
class CMsgClientLogonDefaultTypeInternal;
extern CMsgClientLogonDefaultTypeInternal _CMsgClientLogon_default_instance_;
class CMsgClientLogonResponse;
class CMsgClientLogonResponseDefaultTypeInternal;
extern CMsgClientLogonResponseDefaultTypeInternal _CMsgClientLogonResponse_default_instance_;
class CMsgClientNewLoginKey;
class CMsgClientNewLoginKeyDefaultTypeInternal;
extern CMsgClientNewLoginKeyDefaultTypeInternal _CMsgClientNewLoginKey_default_instance_;
class CMsgClientNewLoginKeyAccepted;
class CMsgClientNewLoginKeyAcceptedDefaultTypeInternal;
extern CMsgClientNewLoginKeyAcceptedDefaultTypeInternal _CMsgClientNewLoginKeyAccepted_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonce;
class CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal;
extern CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonceResponse;
class CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal;
extern CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
class CMsgClientServerTimestampRequest;
class CMsgClientServerTimestampRequestDefaultTypeInternal;
extern CMsgClientServerTimestampRequestDefaultTypeInternal _CMsgClientServerTimestampRequest_default_instance_;
class CMsgClientServerTimestampResponse;
class CMsgClientServerTimestampResponseDefaultTypeInternal;
extern CMsgClientServerTimestampResponseDefaultTypeInternal _CMsgClientServerTimestampResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::CMsgClientAccountInfo* Arena::CreateMaybeMessage<::CMsgClientAccountInfo>(Arena*);
template<> ::CMsgClientHeartBeat* Arena::CreateMaybeMessage<::CMsgClientHeartBeat>(Arena*);
template<> ::CMsgClientLogOff* Arena::CreateMaybeMessage<::CMsgClientLogOff>(Arena*);
template<> ::CMsgClientLoggedOff* Arena::CreateMaybeMessage<::CMsgClientLoggedOff>(Arena*);
template<> ::CMsgClientLogon* Arena::CreateMaybeMessage<::CMsgClientLogon>(Arena*);
template<> ::CMsgClientLogonResponse* Arena::CreateMaybeMessage<::CMsgClientLogonResponse>(Arena*);
template<> ::CMsgClientNewLoginKey* Arena::CreateMaybeMessage<::CMsgClientNewLoginKey>(Arena*);
template<> ::CMsgClientNewLoginKeyAccepted* Arena::CreateMaybeMessage<::CMsgClientNewLoginKeyAccepted>(Arena*);
template<> ::CMsgClientRequestWebAPIAuthenticateUserNonce* Arena::CreateMaybeMessage<::CMsgClientRequestWebAPIAuthenticateUserNonce>(Arena*);
template<> ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse* Arena::CreateMaybeMessage<::CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(Arena*);
template<> ::CMsgClientServerTimestampRequest* Arena::CreateMaybeMessage<::CMsgClientServerTimestampRequest>(Arena*);
template<> ::CMsgClientServerTimestampResponse* Arena::CreateMaybeMessage<::CMsgClientServerTimestampResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CMsgClientHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientHeartBeat) */ {
 public:
  CMsgClientHeartBeat();
  virtual ~CMsgClientHeartBeat();

  CMsgClientHeartBeat(const CMsgClientHeartBeat& from);

  inline CMsgClientHeartBeat& operator=(const CMsgClientHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientHeartBeat(CMsgClientHeartBeat&& from) noexcept
    : CMsgClientHeartBeat() {
    *this = ::std::move(from);
  }

  inline CMsgClientHeartBeat& operator=(CMsgClientHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CMsgClientHeartBeat*>(
               &_CMsgClientHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgClientHeartBeat* other);
  friend void swap(CMsgClientHeartBeat& a, CMsgClientHeartBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientHeartBeat* New() const final {
    return CreateMaybeMessage<CMsgClientHeartBeat>(NULL);
  }

  CMsgClientHeartBeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientHeartBeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientHeartBeat& from);
  void MergeFrom(const CMsgClientHeartBeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientServerTimestampRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientServerTimestampRequest) */ {
 public:
  CMsgClientServerTimestampRequest();
  virtual ~CMsgClientServerTimestampRequest();

  CMsgClientServerTimestampRequest(const CMsgClientServerTimestampRequest& from);

  inline CMsgClientServerTimestampRequest& operator=(const CMsgClientServerTimestampRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientServerTimestampRequest(CMsgClientServerTimestampRequest&& from) noexcept
    : CMsgClientServerTimestampRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientServerTimestampRequest& operator=(CMsgClientServerTimestampRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientServerTimestampRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientServerTimestampRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServerTimestampRequest*>(
               &_CMsgClientServerTimestampRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgClientServerTimestampRequest* other);
  friend void swap(CMsgClientServerTimestampRequest& a, CMsgClientServerTimestampRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientServerTimestampRequest* New() const final {
    return CreateMaybeMessage<CMsgClientServerTimestampRequest>(NULL);
  }

  CMsgClientServerTimestampRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientServerTimestampRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientServerTimestampRequest& from);
  void MergeFrom(const CMsgClientServerTimestampRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServerTimestampRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 client_request_timestamp = 1;
  bool has_client_request_timestamp() const;
  void clear_client_request_timestamp();
  static const int kClientRequestTimestampFieldNumber = 1;
  ::google::protobuf::uint64 client_request_timestamp() const;
  void set_client_request_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientServerTimestampRequest)
 private:
  void set_has_client_request_timestamp();
  void clear_has_client_request_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 client_request_timestamp_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientServerTimestampResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientServerTimestampResponse) */ {
 public:
  CMsgClientServerTimestampResponse();
  virtual ~CMsgClientServerTimestampResponse();

  CMsgClientServerTimestampResponse(const CMsgClientServerTimestampResponse& from);

  inline CMsgClientServerTimestampResponse& operator=(const CMsgClientServerTimestampResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientServerTimestampResponse(CMsgClientServerTimestampResponse&& from) noexcept
    : CMsgClientServerTimestampResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientServerTimestampResponse& operator=(CMsgClientServerTimestampResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientServerTimestampResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientServerTimestampResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServerTimestampResponse*>(
               &_CMsgClientServerTimestampResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgClientServerTimestampResponse* other);
  friend void swap(CMsgClientServerTimestampResponse& a, CMsgClientServerTimestampResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientServerTimestampResponse* New() const final {
    return CreateMaybeMessage<CMsgClientServerTimestampResponse>(NULL);
  }

  CMsgClientServerTimestampResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientServerTimestampResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientServerTimestampResponse& from);
  void MergeFrom(const CMsgClientServerTimestampResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServerTimestampResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 client_request_timestamp = 1;
  bool has_client_request_timestamp() const;
  void clear_client_request_timestamp();
  static const int kClientRequestTimestampFieldNumber = 1;
  ::google::protobuf::uint64 client_request_timestamp() const;
  void set_client_request_timestamp(::google::protobuf::uint64 value);

  // optional uint64 server_timestamp_ms = 2;
  bool has_server_timestamp_ms() const;
  void clear_server_timestamp_ms();
  static const int kServerTimestampMsFieldNumber = 2;
  ::google::protobuf::uint64 server_timestamp_ms() const;
  void set_server_timestamp_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientServerTimestampResponse)
 private:
  void set_has_client_request_timestamp();
  void clear_has_client_request_timestamp();
  void set_has_server_timestamp_ms();
  void clear_has_server_timestamp_ms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 client_request_timestamp_;
  ::google::protobuf::uint64 server_timestamp_ms_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLogon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientLogon) */ {
 public:
  CMsgClientLogon();
  virtual ~CMsgClientLogon();

  CMsgClientLogon(const CMsgClientLogon& from);

  inline CMsgClientLogon& operator=(const CMsgClientLogon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientLogon(CMsgClientLogon&& from) noexcept
    : CMsgClientLogon() {
    *this = ::std::move(from);
  }

  inline CMsgClientLogon& operator=(CMsgClientLogon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLogon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientLogon* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLogon*>(
               &_CMsgClientLogon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgClientLogon* other);
  friend void swap(CMsgClientLogon& a, CMsgClientLogon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLogon* New() const final {
    return CreateMaybeMessage<CMsgClientLogon>(NULL);
  }

  CMsgClientLogon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLogon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientLogon& from);
  void MergeFrom(const CMsgClientLogon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLogon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_language = 6;
  bool has_client_language() const;
  void clear_client_language();
  static const int kClientLanguageFieldNumber = 6;
  const ::std::string& client_language() const;
  void set_client_language(const ::std::string& value);
  #if LANG_CXX11
  void set_client_language(::std::string&& value);
  #endif
  void set_client_language(const char* value);
  void set_client_language(const char* value, size_t size);
  ::std::string* mutable_client_language();
  ::std::string* release_client_language();
  void set_allocated_client_language(::std::string* client_language);

  // optional string wine_version = 9;
  bool has_wine_version() const;
  void clear_wine_version();
  static const int kWineVersionFieldNumber = 9;
  const ::std::string& wine_version() const;
  void set_wine_version(const ::std::string& value);
  #if LANG_CXX11
  void set_wine_version(::std::string&& value);
  #endif
  void set_wine_version(const char* value);
  void set_wine_version(const char* value, size_t size);
  ::std::string* mutable_wine_version();
  ::std::string* release_wine_version();
  void set_allocated_wine_version(::std::string* wine_version);

  // optional bytes machine_id = 30;
  bool has_machine_id() const;
  void clear_machine_id();
  static const int kMachineIdFieldNumber = 30;
  const ::std::string& machine_id() const;
  void set_machine_id(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_id(::std::string&& value);
  #endif
  void set_machine_id(const char* value);
  void set_machine_id(const void* value, size_t size);
  ::std::string* mutable_machine_id();
  ::std::string* release_machine_id();
  void set_allocated_machine_id(::std::string* machine_id);

  // optional bytes steam2_auth_ticket = 41;
  bool has_steam2_auth_ticket() const;
  void clear_steam2_auth_ticket();
  static const int kSteam2AuthTicketFieldNumber = 41;
  const ::std::string& steam2_auth_ticket() const;
  void set_steam2_auth_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_steam2_auth_ticket(::std::string&& value);
  #endif
  void set_steam2_auth_ticket(const char* value);
  void set_steam2_auth_ticket(const void* value, size_t size);
  ::std::string* mutable_steam2_auth_ticket();
  ::std::string* release_steam2_auth_ticket();
  void set_allocated_steam2_auth_ticket(::std::string* steam2_auth_ticket);

  // optional string email_address = 42;
  bool has_email_address() const;
  void clear_email_address();
  static const int kEmailAddressFieldNumber = 42;
  const ::std::string& email_address() const;
  void set_email_address(const ::std::string& value);
  #if LANG_CXX11
  void set_email_address(::std::string&& value);
  #endif
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  ::std::string* mutable_email_address();
  ::std::string* release_email_address();
  void set_allocated_email_address(::std::string* email_address);

  // optional string account_name = 50;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 50;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string password = 51;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 51;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string game_server_token = 52;
  bool has_game_server_token() const;
  void clear_game_server_token();
  static const int kGameServerTokenFieldNumber = 52;
  const ::std::string& game_server_token() const;
  void set_game_server_token(const ::std::string& value);
  #if LANG_CXX11
  void set_game_server_token(::std::string&& value);
  #endif
  void set_game_server_token(const char* value);
  void set_game_server_token(const char* value, size_t size);
  ::std::string* mutable_game_server_token();
  ::std::string* release_game_server_token();
  void set_allocated_game_server_token(::std::string* game_server_token);

  // optional string login_key = 60;
  bool has_login_key() const;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 60;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // optional string anon_user_target_account_name = 80;
  bool has_anon_user_target_account_name() const;
  void clear_anon_user_target_account_name();
  static const int kAnonUserTargetAccountNameFieldNumber = 80;
  const ::std::string& anon_user_target_account_name() const;
  void set_anon_user_target_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_anon_user_target_account_name(::std::string&& value);
  #endif
  void set_anon_user_target_account_name(const char* value);
  void set_anon_user_target_account_name(const char* value, size_t size);
  ::std::string* mutable_anon_user_target_account_name();
  ::std::string* release_anon_user_target_account_name();
  void set_allocated_anon_user_target_account_name(::std::string* anon_user_target_account_name);

  // optional bytes sha_sentryfile = 83;
  bool has_sha_sentryfile() const;
  void clear_sha_sentryfile();
  static const int kShaSentryfileFieldNumber = 83;
  const ::std::string& sha_sentryfile() const;
  void set_sha_sentryfile(const ::std::string& value);
  #if LANG_CXX11
  void set_sha_sentryfile(::std::string&& value);
  #endif
  void set_sha_sentryfile(const char* value);
  void set_sha_sentryfile(const void* value, size_t size);
  ::std::string* mutable_sha_sentryfile();
  ::std::string* release_sha_sentryfile();
  void set_allocated_sha_sentryfile(::std::string* sha_sentryfile);

  // optional string auth_code = 84;
  bool has_auth_code() const;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 84;
  const ::std::string& auth_code() const;
  void set_auth_code(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_code(::std::string&& value);
  #endif
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  ::std::string* mutable_auth_code();
  ::std::string* release_auth_code();
  void set_allocated_auth_code(::std::string* auth_code);

  // optional string otp_identifier = 87;
  bool has_otp_identifier() const;
  void clear_otp_identifier();
  static const int kOtpIdentifierFieldNumber = 87;
  const ::std::string& otp_identifier() const;
  void set_otp_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_otp_identifier(::std::string&& value);
  #endif
  void set_otp_identifier(const char* value);
  void set_otp_identifier(const char* value, size_t size);
  ::std::string* mutable_otp_identifier();
  ::std::string* release_otp_identifier();
  void set_allocated_otp_identifier(::std::string* otp_identifier);

  // optional bytes sony_psn_ticket = 90;
  bool has_sony_psn_ticket() const;
  void clear_sony_psn_ticket();
  static const int kSonyPsnTicketFieldNumber = 90;
  const ::std::string& sony_psn_ticket() const;
  void set_sony_psn_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_sony_psn_ticket(::std::string&& value);
  #endif
  void set_sony_psn_ticket(const char* value);
  void set_sony_psn_ticket(const void* value, size_t size);
  ::std::string* mutable_sony_psn_ticket();
  ::std::string* release_sony_psn_ticket();
  void set_allocated_sony_psn_ticket(::std::string* sony_psn_ticket);

  // optional string sony_psn_service_id = 91;
  bool has_sony_psn_service_id() const;
  void clear_sony_psn_service_id();
  static const int kSonyPsnServiceIdFieldNumber = 91;
  const ::std::string& sony_psn_service_id() const;
  void set_sony_psn_service_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sony_psn_service_id(::std::string&& value);
  #endif
  void set_sony_psn_service_id(const char* value);
  void set_sony_psn_service_id(const char* value, size_t size);
  ::std::string* mutable_sony_psn_service_id();
  ::std::string* release_sony_psn_service_id();
  void set_allocated_sony_psn_service_id(::std::string* sony_psn_service_id);

  // optional string sony_psn_name = 93;
  bool has_sony_psn_name() const;
  void clear_sony_psn_name();
  static const int kSonyPsnNameFieldNumber = 93;
  const ::std::string& sony_psn_name() const;
  void set_sony_psn_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sony_psn_name(::std::string&& value);
  #endif
  void set_sony_psn_name(const char* value);
  void set_sony_psn_name(const char* value, size_t size);
  ::std::string* mutable_sony_psn_name();
  ::std::string* release_sony_psn_name();
  void set_allocated_sony_psn_name(::std::string* sony_psn_name);

  // optional string machine_name = 96;
  bool has_machine_name() const;
  void clear_machine_name();
  static const int kMachineNameFieldNumber = 96;
  const ::std::string& machine_name() const;
  void set_machine_name(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_name(::std::string&& value);
  #endif
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  ::std::string* mutable_machine_name();
  ::std::string* release_machine_name();
  void set_allocated_machine_name(::std::string* machine_name);

  // optional string machine_name_userchosen = 97;
  bool has_machine_name_userchosen() const;
  void clear_machine_name_userchosen();
  static const int kMachineNameUserchosenFieldNumber = 97;
  const ::std::string& machine_name_userchosen() const;
  void set_machine_name_userchosen(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_name_userchosen(::std::string&& value);
  #endif
  void set_machine_name_userchosen(const char* value);
  void set_machine_name_userchosen(const char* value, size_t size);
  ::std::string* mutable_machine_name_userchosen();
  ::std::string* release_machine_name_userchosen();
  void set_allocated_machine_name_userchosen(::std::string* machine_name_userchosen);

  // optional string country_override = 98;
  bool has_country_override() const;
  void clear_country_override();
  static const int kCountryOverrideFieldNumber = 98;
  const ::std::string& country_override() const;
  void set_country_override(const ::std::string& value);
  #if LANG_CXX11
  void set_country_override(::std::string&& value);
  #endif
  void set_country_override(const char* value);
  void set_country_override(const char* value, size_t size);
  ::std::string* mutable_country_override();
  ::std::string* release_country_override();
  void set_allocated_country_override(::std::string* country_override);

  // optional string two_factor_code = 101;
  bool has_two_factor_code() const;
  void clear_two_factor_code();
  static const int kTwoFactorCodeFieldNumber = 101;
  const ::std::string& two_factor_code() const;
  void set_two_factor_code(const ::std::string& value);
  #if LANG_CXX11
  void set_two_factor_code(::std::string&& value);
  #endif
  void set_two_factor_code(const char* value);
  void set_two_factor_code(const char* value, size_t size);
  ::std::string* mutable_two_factor_code();
  ::std::string* release_two_factor_code();
  void set_allocated_two_factor_code(::std::string* two_factor_code);

  // optional string web_logon_nonce = 103;
  bool has_web_logon_nonce() const;
  void clear_web_logon_nonce();
  static const int kWebLogonNonceFieldNumber = 103;
  const ::std::string& web_logon_nonce() const;
  void set_web_logon_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_web_logon_nonce(::std::string&& value);
  #endif
  void set_web_logon_nonce(const char* value);
  void set_web_logon_nonce(const char* value, size_t size);
  ::std::string* mutable_web_logon_nonce();
  ::std::string* release_web_logon_nonce();
  void set_allocated_web_logon_nonce(::std::string* web_logon_nonce);

  // optional uint32 protocol_version = 1;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // optional uint32 obfustucated_private_ip = 2;
  bool has_obfustucated_private_ip() const;
  void clear_obfustucated_private_ip();
  static const int kObfustucatedPrivateIpFieldNumber = 2;
  ::google::protobuf::uint32 obfustucated_private_ip() const;
  void set_obfustucated_private_ip(::google::protobuf::uint32 value);

  // optional uint32 cell_id = 3;
  bool has_cell_id() const;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 3;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // optional uint32 last_session_id = 4;
  bool has_last_session_id() const;
  void clear_last_session_id();
  static const int kLastSessionIdFieldNumber = 4;
  ::google::protobuf::uint32 last_session_id() const;
  void set_last_session_id(::google::protobuf::uint32 value);

  // optional uint32 client_package_version = 5;
  bool has_client_package_version() const;
  void clear_client_package_version();
  static const int kClientPackageVersionFieldNumber = 5;
  ::google::protobuf::uint32 client_package_version() const;
  void set_client_package_version(::google::protobuf::uint32 value);

  // optional uint32 client_os_type = 7;
  bool has_client_os_type() const;
  void clear_client_os_type();
  static const int kClientOsTypeFieldNumber = 7;
  ::google::protobuf::uint32 client_os_type() const;
  void set_client_os_type(::google::protobuf::uint32 value);

  // optional uint32 ping_ms_from_cell_search = 10;
  bool has_ping_ms_from_cell_search() const;
  void clear_ping_ms_from_cell_search();
  static const int kPingMsFromCellSearchFieldNumber = 10;
  ::google::protobuf::uint32 ping_ms_from_cell_search() const;
  void set_ping_ms_from_cell_search(::google::protobuf::uint32 value);

  // optional uint32 public_ip = 20;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 20;
  ::google::protobuf::uint32 public_ip() const;
  void set_public_ip(::google::protobuf::uint32 value);

  // optional fixed64 client_supplied_steam_id = 22;
  bool has_client_supplied_steam_id() const;
  void clear_client_supplied_steam_id();
  static const int kClientSuppliedSteamIdFieldNumber = 22;
  ::google::protobuf::uint64 client_supplied_steam_id() const;
  void set_client_supplied_steam_id(::google::protobuf::uint64 value);

  // optional uint32 qos_level = 21;
  bool has_qos_level() const;
  void clear_qos_level();
  static const int kQosLevelFieldNumber = 21;
  ::google::protobuf::uint32 qos_level() const;
  void set_qos_level(::google::protobuf::uint32 value);

  // optional uint32 launcher_type = 31 [default = 0];
  bool has_launcher_type() const;
  void clear_launcher_type();
  static const int kLauncherTypeFieldNumber = 31;
  ::google::protobuf::uint32 launcher_type() const;
  void set_launcher_type(::google::protobuf::uint32 value);

  // optional uint32 ui_mode = 32 [default = 0];
  bool has_ui_mode() const;
  void clear_ui_mode();
  static const int kUiModeFieldNumber = 32;
  ::google::protobuf::uint32 ui_mode() const;
  void set_ui_mode(::google::protobuf::uint32 value);

  // optional uint32 chat_mode = 33 [default = 0];
  bool has_chat_mode() const;
  void clear_chat_mode();
  static const int kChatModeFieldNumber = 33;
  ::google::protobuf::uint32 chat_mode() const;
  void set_chat_mode(::google::protobuf::uint32 value);

  // optional fixed32 rtime32_account_creation = 43;
  bool has_rtime32_account_creation() const;
  void clear_rtime32_account_creation();
  static const int kRtime32AccountCreationFieldNumber = 43;
  ::google::protobuf::uint32 rtime32_account_creation() const;
  void set_rtime32_account_creation(::google::protobuf::uint32 value);

  // optional bool should_remember_password = 8 [default = false];
  bool has_should_remember_password() const;
  void clear_should_remember_password();
  static const int kShouldRememberPasswordFieldNumber = 8;
  bool should_remember_password() const;
  void set_should_remember_password(bool value);

  // optional bool was_converted_deprecated_msg = 70 [default = false];
  bool has_was_converted_deprecated_msg() const;
  void clear_was_converted_deprecated_msg();
  static const int kWasConvertedDeprecatedMsgFieldNumber = 70;
  bool was_converted_deprecated_msg() const;
  void set_was_converted_deprecated_msg(bool value);

  // optional bool steam2_ticket_request = 88;
  bool has_steam2_ticket_request() const;
  void clear_steam2_ticket_request();
  static const int kSteam2TicketRequestFieldNumber = 88;
  bool steam2_ticket_request() const;
  void set_steam2_ticket_request(bool value);

  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  bool has_create_new_psn_linked_account_if_needed() const;
  void clear_create_new_psn_linked_account_if_needed();
  static const int kCreateNewPsnLinkedAccountIfNeededFieldNumber = 92;
  bool create_new_psn_linked_account_if_needed() const;
  void set_create_new_psn_linked_account_if_needed(bool value);

  // optional fixed64 resolved_user_steam_id = 81;
  bool has_resolved_user_steam_id() const;
  void clear_resolved_user_steam_id();
  static const int kResolvedUserSteamIdFieldNumber = 81;
  ::google::protobuf::uint64 resolved_user_steam_id() const;
  void set_resolved_user_steam_id(::google::protobuf::uint64 value);

  // optional int32 eresult_sentryfile = 82;
  bool has_eresult_sentryfile() const;
  void clear_eresult_sentryfile();
  static const int kEresultSentryfileFieldNumber = 82;
  ::google::protobuf::int32 eresult_sentryfile() const;
  void set_eresult_sentryfile(::google::protobuf::int32 value);

  // optional int32 otp_type = 85;
  bool has_otp_type() const;
  void clear_otp_type();
  static const int kOtpTypeFieldNumber = 85;
  ::google::protobuf::int32 otp_type() const;
  void set_otp_type(::google::protobuf::int32 value);

  // optional uint32 otp_value = 86;
  bool has_otp_value() const;
  void clear_otp_value();
  static const int kOtpValueFieldNumber = 86;
  ::google::protobuf::uint32 otp_value() const;
  void set_otp_value(::google::protobuf::uint32 value);

  // optional int32 game_server_app_id = 94;
  bool has_game_server_app_id() const;
  void clear_game_server_app_id();
  static const int kGameServerAppIdFieldNumber = 94;
  ::google::protobuf::int32 game_server_app_id() const;
  void set_game_server_app_id(::google::protobuf::int32 value);

  // optional uint64 client_instance_id = 100;
  bool has_client_instance_id() const;
  void clear_client_instance_id();
  static const int kClientInstanceIdFieldNumber = 100;
  ::google::protobuf::uint64 client_instance_id() const;
  void set_client_instance_id(::google::protobuf::uint64 value);

  // optional bool steamguard_dont_remember_computer = 95;
  bool has_steamguard_dont_remember_computer() const;
  void clear_steamguard_dont_remember_computer();
  static const int kSteamguardDontRememberComputerFieldNumber = 95;
  bool steamguard_dont_remember_computer() const;
  void set_steamguard_dont_remember_computer(bool value);

  // optional bool is_steam_box = 99;
  bool has_is_steam_box() const;
  void clear_is_steam_box();
  static const int kIsSteamBoxFieldNumber = 99;
  bool is_steam_box() const;
  void set_is_steam_box(bool value);

  // optional bool supports_rate_limit_response = 102;
  bool has_supports_rate_limit_response() const;
  void clear_supports_rate_limit_response();
  static const int kSupportsRateLimitResponseFieldNumber = 102;
  bool supports_rate_limit_response() const;
  void set_supports_rate_limit_response(bool value);

  // optional int32 priority_reason = 104;
  bool has_priority_reason() const;
  void clear_priority_reason();
  static const int kPriorityReasonFieldNumber = 104;
  ::google::protobuf::int32 priority_reason() const;
  void set_priority_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientLogon)
 private:
  void set_has_protocol_version();
  void clear_has_protocol_version();
  void set_has_obfustucated_private_ip();
  void clear_has_obfustucated_private_ip();
  void set_has_cell_id();
  void clear_has_cell_id();
  void set_has_last_session_id();
  void clear_has_last_session_id();
  void set_has_client_package_version();
  void clear_has_client_package_version();
  void set_has_client_language();
  void clear_has_client_language();
  void set_has_client_os_type();
  void clear_has_client_os_type();
  void set_has_should_remember_password();
  void clear_has_should_remember_password();
  void set_has_wine_version();
  void clear_has_wine_version();
  void set_has_ping_ms_from_cell_search();
  void clear_has_ping_ms_from_cell_search();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_qos_level();
  void clear_has_qos_level();
  void set_has_client_supplied_steam_id();
  void clear_has_client_supplied_steam_id();
  void set_has_machine_id();
  void clear_has_machine_id();
  void set_has_launcher_type();
  void clear_has_launcher_type();
  void set_has_ui_mode();
  void clear_has_ui_mode();
  void set_has_chat_mode();
  void clear_has_chat_mode();
  void set_has_steam2_auth_ticket();
  void clear_has_steam2_auth_ticket();
  void set_has_email_address();
  void clear_has_email_address();
  void set_has_rtime32_account_creation();
  void clear_has_rtime32_account_creation();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_password();
  void clear_has_password();
  void set_has_game_server_token();
  void clear_has_game_server_token();
  void set_has_login_key();
  void clear_has_login_key();
  void set_has_was_converted_deprecated_msg();
  void clear_has_was_converted_deprecated_msg();
  void set_has_anon_user_target_account_name();
  void clear_has_anon_user_target_account_name();
  void set_has_resolved_user_steam_id();
  void clear_has_resolved_user_steam_id();
  void set_has_eresult_sentryfile();
  void clear_has_eresult_sentryfile();
  void set_has_sha_sentryfile();
  void clear_has_sha_sentryfile();
  void set_has_auth_code();
  void clear_has_auth_code();
  void set_has_otp_type();
  void clear_has_otp_type();
  void set_has_otp_value();
  void clear_has_otp_value();
  void set_has_otp_identifier();
  void clear_has_otp_identifier();
  void set_has_steam2_ticket_request();
  void clear_has_steam2_ticket_request();
  void set_has_sony_psn_ticket();
  void clear_has_sony_psn_ticket();
  void set_has_sony_psn_service_id();
  void clear_has_sony_psn_service_id();
  void set_has_create_new_psn_linked_account_if_needed();
  void clear_has_create_new_psn_linked_account_if_needed();
  void set_has_sony_psn_name();
  void clear_has_sony_psn_name();
  void set_has_game_server_app_id();
  void clear_has_game_server_app_id();
  void set_has_steamguard_dont_remember_computer();
  void clear_has_steamguard_dont_remember_computer();
  void set_has_machine_name();
  void clear_has_machine_name();
  void set_has_machine_name_userchosen();
  void clear_has_machine_name_userchosen();
  void set_has_country_override();
  void clear_has_country_override();
  void set_has_is_steam_box();
  void clear_has_is_steam_box();
  void set_has_client_instance_id();
  void clear_has_client_instance_id();
  void set_has_two_factor_code();
  void clear_has_two_factor_code();
  void set_has_supports_rate_limit_response();
  void clear_has_supports_rate_limit_response();
  void set_has_web_logon_nonce();
  void clear_has_web_logon_nonce();
  void set_has_priority_reason();
  void clear_has_priority_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr client_language_;
  ::google::protobuf::internal::ArenaStringPtr wine_version_;
  ::google::protobuf::internal::ArenaStringPtr machine_id_;
  ::google::protobuf::internal::ArenaStringPtr steam2_auth_ticket_;
  ::google::protobuf::internal::ArenaStringPtr email_address_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr game_server_token_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::google::protobuf::internal::ArenaStringPtr anon_user_target_account_name_;
  ::google::protobuf::internal::ArenaStringPtr sha_sentryfile_;
  ::google::protobuf::internal::ArenaStringPtr auth_code_;
  ::google::protobuf::internal::ArenaStringPtr otp_identifier_;
  ::google::protobuf::internal::ArenaStringPtr sony_psn_ticket_;
  ::google::protobuf::internal::ArenaStringPtr sony_psn_service_id_;
  ::google::protobuf::internal::ArenaStringPtr sony_psn_name_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_userchosen_;
  ::google::protobuf::internal::ArenaStringPtr country_override_;
  ::google::protobuf::internal::ArenaStringPtr two_factor_code_;
  ::google::protobuf::internal::ArenaStringPtr web_logon_nonce_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint32 obfustucated_private_ip_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::uint32 last_session_id_;
  ::google::protobuf::uint32 client_package_version_;
  ::google::protobuf::uint32 client_os_type_;
  ::google::protobuf::uint32 ping_ms_from_cell_search_;
  ::google::protobuf::uint32 public_ip_;
  ::google::protobuf::uint64 client_supplied_steam_id_;
  ::google::protobuf::uint32 qos_level_;
  ::google::protobuf::uint32 launcher_type_;
  ::google::protobuf::uint32 ui_mode_;
  ::google::protobuf::uint32 chat_mode_;
  ::google::protobuf::uint32 rtime32_account_creation_;
  bool should_remember_password_;
  bool was_converted_deprecated_msg_;
  bool steam2_ticket_request_;
  bool create_new_psn_linked_account_if_needed_;
  ::google::protobuf::uint64 resolved_user_steam_id_;
  ::google::protobuf::int32 eresult_sentryfile_;
  ::google::protobuf::int32 otp_type_;
  ::google::protobuf::uint32 otp_value_;
  ::google::protobuf::int32 game_server_app_id_;
  ::google::protobuf::uint64 client_instance_id_;
  bool steamguard_dont_remember_computer_;
  bool is_steam_box_;
  bool supports_rate_limit_response_;
  ::google::protobuf::int32 priority_reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLogonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientLogonResponse) */ {
 public:
  CMsgClientLogonResponse();
  virtual ~CMsgClientLogonResponse();

  CMsgClientLogonResponse(const CMsgClientLogonResponse& from);

  inline CMsgClientLogonResponse& operator=(const CMsgClientLogonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientLogonResponse(CMsgClientLogonResponse&& from) noexcept
    : CMsgClientLogonResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientLogonResponse& operator=(CMsgClientLogonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLogonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientLogonResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLogonResponse*>(
               &_CMsgClientLogonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgClientLogonResponse* other);
  friend void swap(CMsgClientLogonResponse& a, CMsgClientLogonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLogonResponse* New() const final {
    return CreateMaybeMessage<CMsgClientLogonResponse>(NULL);
  }

  CMsgClientLogonResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLogonResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientLogonResponse& from);
  void MergeFrom(const CMsgClientLogonResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLogonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email_domain = 8;
  bool has_email_domain() const;
  void clear_email_domain();
  static const int kEmailDomainFieldNumber = 8;
  const ::std::string& email_domain() const;
  void set_email_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_email_domain(::std::string&& value);
  #endif
  void set_email_domain(const char* value);
  void set_email_domain(const char* value, size_t size);
  ::std::string* mutable_email_domain();
  ::std::string* release_email_domain();
  void set_allocated_email_domain(::std::string* email_domain);

  // optional bytes steam2_ticket = 9;
  bool has_steam2_ticket() const;
  void clear_steam2_ticket();
  static const int kSteam2TicketFieldNumber = 9;
  const ::std::string& steam2_ticket() const;
  void set_steam2_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_steam2_ticket(::std::string&& value);
  #endif
  void set_steam2_ticket(const char* value);
  void set_steam2_ticket(const void* value, size_t size);
  ::std::string* mutable_steam2_ticket();
  ::std::string* release_steam2_ticket();
  void set_allocated_steam2_ticket(::std::string* steam2_ticket);

  // optional string webapi_authenticate_user_nonce = 11;
  bool has_webapi_authenticate_user_nonce() const;
  void clear_webapi_authenticate_user_nonce();
  static const int kWebapiAuthenticateUserNonceFieldNumber = 11;
  const ::std::string& webapi_authenticate_user_nonce() const;
  void set_webapi_authenticate_user_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_webapi_authenticate_user_nonce(::std::string&& value);
  #endif
  void set_webapi_authenticate_user_nonce(const char* value);
  void set_webapi_authenticate_user_nonce(const char* value, size_t size);
  ::std::string* mutable_webapi_authenticate_user_nonce();
  ::std::string* release_webapi_authenticate_user_nonce();
  void set_allocated_webapi_authenticate_user_nonce(::std::string* webapi_authenticate_user_nonce);

  // optional string vanity_url = 14;
  bool has_vanity_url() const;
  void clear_vanity_url();
  static const int kVanityUrlFieldNumber = 14;
  const ::std::string& vanity_url() const;
  void set_vanity_url(const ::std::string& value);
  #if LANG_CXX11
  void set_vanity_url(::std::string&& value);
  #endif
  void set_vanity_url(const char* value);
  void set_vanity_url(const char* value, size_t size);
  ::std::string* mutable_vanity_url();
  ::std::string* release_vanity_url();
  void set_allocated_vanity_url(::std::string* vanity_url);

  // optional string ip_country_code = 21;
  bool has_ip_country_code() const;
  void clear_ip_country_code();
  static const int kIpCountryCodeFieldNumber = 21;
  const ::std::string& ip_country_code() const;
  void set_ip_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_country_code(::std::string&& value);
  #endif
  void set_ip_country_code(const char* value);
  void set_ip_country_code(const char* value, size_t size);
  ::std::string* mutable_ip_country_code();
  ::std::string* release_ip_country_code();
  void set_allocated_ip_country_code(::std::string* ip_country_code);

  // optional bytes parental_settings = 22;
  bool has_parental_settings() const;
  void clear_parental_settings();
  static const int kParentalSettingsFieldNumber = 22;
  const ::std::string& parental_settings() const;
  void set_parental_settings(const ::std::string& value);
  #if LANG_CXX11
  void set_parental_settings(::std::string&& value);
  #endif
  void set_parental_settings(const char* value);
  void set_parental_settings(const void* value, size_t size);
  ::std::string* mutable_parental_settings();
  ::std::string* release_parental_settings();
  void set_allocated_parental_settings(::std::string* parental_settings);

  // optional bytes parental_setting_signature = 23;
  bool has_parental_setting_signature() const;
  void clear_parental_setting_signature();
  static const int kParentalSettingSignatureFieldNumber = 23;
  const ::std::string& parental_setting_signature() const;
  void set_parental_setting_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_parental_setting_signature(::std::string&& value);
  #endif
  void set_parental_setting_signature(const char* value);
  void set_parental_setting_signature(const void* value, size_t size);
  ::std::string* mutable_parental_setting_signature();
  ::std::string* release_parental_setting_signature();
  void set_allocated_parental_setting_signature(::std::string* parental_setting_signature);

  // optional int32 out_of_game_heartbeat_seconds = 2;
  bool has_out_of_game_heartbeat_seconds() const;
  void clear_out_of_game_heartbeat_seconds();
  static const int kOutOfGameHeartbeatSecondsFieldNumber = 2;
  ::google::protobuf::int32 out_of_game_heartbeat_seconds() const;
  void set_out_of_game_heartbeat_seconds(::google::protobuf::int32 value);

  // optional int32 in_game_heartbeat_seconds = 3;
  bool has_in_game_heartbeat_seconds() const;
  void clear_in_game_heartbeat_seconds();
  static const int kInGameHeartbeatSecondsFieldNumber = 3;
  ::google::protobuf::int32 in_game_heartbeat_seconds() const;
  void set_in_game_heartbeat_seconds(::google::protobuf::int32 value);

  // optional uint32 public_ip = 4;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 4;
  ::google::protobuf::uint32 public_ip() const;
  void set_public_ip(::google::protobuf::uint32 value);

  // optional fixed32 rtime32_server_time = 5;
  bool has_rtime32_server_time() const;
  void clear_rtime32_server_time();
  static const int kRtime32ServerTimeFieldNumber = 5;
  ::google::protobuf::uint32 rtime32_server_time() const;
  void set_rtime32_server_time(::google::protobuf::uint32 value);

  // optional uint32 account_flags = 6;
  bool has_account_flags() const;
  void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 6;
  ::google::protobuf::uint32 account_flags() const;
  void set_account_flags(::google::protobuf::uint32 value);

  // optional uint32 cell_id = 7;
  bool has_cell_id() const;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 7;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // optional int32 eresult_extended = 10;
  bool has_eresult_extended() const;
  void clear_eresult_extended();
  static const int kEresultExtendedFieldNumber = 10;
  ::google::protobuf::int32 eresult_extended() const;
  void set_eresult_extended(::google::protobuf::int32 value);

  // optional uint32 cell_id_ping_threshold = 12;
  bool has_cell_id_ping_threshold() const;
  void clear_cell_id_ping_threshold();
  static const int kCellIdPingThresholdFieldNumber = 12;
  ::google::protobuf::uint32 cell_id_ping_threshold() const;
  void set_cell_id_ping_threshold(::google::protobuf::uint32 value);

  // optional fixed64 client_supplied_steamid = 20;
  bool has_client_supplied_steamid() const;
  void clear_client_supplied_steamid();
  static const int kClientSuppliedSteamidFieldNumber = 20;
  ::google::protobuf::uint64 client_supplied_steamid() const;
  void set_client_supplied_steamid(::google::protobuf::uint64 value);

  // optional bool use_pics = 13;
  bool has_use_pics() const;
  void clear_use_pics();
  static const int kUsePicsFieldNumber = 13;
  bool use_pics() const;
  void set_use_pics(bool value);

  // optional bool force_client_update_check = 28;
  bool has_force_client_update_check() const;
  void clear_force_client_update_check();
  static const int kForceClientUpdateCheckFieldNumber = 28;
  bool force_client_update_check() const;
  void set_force_client_update_check(bool value);

  // optional int32 count_loginfailures_to_migrate = 24;
  bool has_count_loginfailures_to_migrate() const;
  void clear_count_loginfailures_to_migrate();
  static const int kCountLoginfailuresToMigrateFieldNumber = 24;
  ::google::protobuf::int32 count_loginfailures_to_migrate() const;
  void set_count_loginfailures_to_migrate(::google::protobuf::int32 value);

  // optional int32 count_disconnects_to_migrate = 25;
  bool has_count_disconnects_to_migrate() const;
  void clear_count_disconnects_to_migrate();
  static const int kCountDisconnectsToMigrateFieldNumber = 25;
  ::google::protobuf::int32 count_disconnects_to_migrate() const;
  void set_count_disconnects_to_migrate(::google::protobuf::int32 value);

  // optional int32 ogs_data_report_time_window = 26;
  bool has_ogs_data_report_time_window() const;
  void clear_ogs_data_report_time_window();
  static const int kOgsDataReportTimeWindowFieldNumber = 26;
  ::google::protobuf::int32 ogs_data_report_time_window() const;
  void set_ogs_data_report_time_window(::google::protobuf::int32 value);

  // optional uint64 client_instance_id = 27;
  bool has_client_instance_id() const;
  void clear_client_instance_id();
  static const int kClientInstanceIdFieldNumber = 27;
  ::google::protobuf::uint64 client_instance_id() const;
  void set_client_instance_id(::google::protobuf::uint64 value);

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::int32 eresult() const;
  void set_eresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientLogonResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_out_of_game_heartbeat_seconds();
  void clear_has_out_of_game_heartbeat_seconds();
  void set_has_in_game_heartbeat_seconds();
  void clear_has_in_game_heartbeat_seconds();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_rtime32_server_time();
  void clear_has_rtime32_server_time();
  void set_has_account_flags();
  void clear_has_account_flags();
  void set_has_cell_id();
  void clear_has_cell_id();
  void set_has_email_domain();
  void clear_has_email_domain();
  void set_has_steam2_ticket();
  void clear_has_steam2_ticket();
  void set_has_eresult_extended();
  void clear_has_eresult_extended();
  void set_has_webapi_authenticate_user_nonce();
  void clear_has_webapi_authenticate_user_nonce();
  void set_has_cell_id_ping_threshold();
  void clear_has_cell_id_ping_threshold();
  void set_has_use_pics();
  void clear_has_use_pics();
  void set_has_vanity_url();
  void clear_has_vanity_url();
  void set_has_client_supplied_steamid();
  void clear_has_client_supplied_steamid();
  void set_has_ip_country_code();
  void clear_has_ip_country_code();
  void set_has_parental_settings();
  void clear_has_parental_settings();
  void set_has_parental_setting_signature();
  void clear_has_parental_setting_signature();
  void set_has_count_loginfailures_to_migrate();
  void clear_has_count_loginfailures_to_migrate();
  void set_has_count_disconnects_to_migrate();
  void clear_has_count_disconnects_to_migrate();
  void set_has_ogs_data_report_time_window();
  void clear_has_ogs_data_report_time_window();
  void set_has_client_instance_id();
  void clear_has_client_instance_id();
  void set_has_force_client_update_check();
  void clear_has_force_client_update_check();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr email_domain_;
  ::google::protobuf::internal::ArenaStringPtr steam2_ticket_;
  ::google::protobuf::internal::ArenaStringPtr webapi_authenticate_user_nonce_;
  ::google::protobuf::internal::ArenaStringPtr vanity_url_;
  ::google::protobuf::internal::ArenaStringPtr ip_country_code_;
  ::google::protobuf::internal::ArenaStringPtr parental_settings_;
  ::google::protobuf::internal::ArenaStringPtr parental_setting_signature_;
  ::google::protobuf::int32 out_of_game_heartbeat_seconds_;
  ::google::protobuf::int32 in_game_heartbeat_seconds_;
  ::google::protobuf::uint32 public_ip_;
  ::google::protobuf::uint32 rtime32_server_time_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::int32 eresult_extended_;
  ::google::protobuf::uint32 cell_id_ping_threshold_;
  ::google::protobuf::uint64 client_supplied_steamid_;
  bool use_pics_;
  bool force_client_update_check_;
  ::google::protobuf::int32 count_loginfailures_to_migrate_;
  ::google::protobuf::int32 count_disconnects_to_migrate_;
  ::google::protobuf::int32 ogs_data_report_time_window_;
  ::google::protobuf::uint64 client_instance_id_;
  ::google::protobuf::int32 eresult_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientRequestWebAPIAuthenticateUserNonce : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestWebAPIAuthenticateUserNonce) */ {
 public:
  CMsgClientRequestWebAPIAuthenticateUserNonce();
  virtual ~CMsgClientRequestWebAPIAuthenticateUserNonce();

  CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from);

  inline CMsgClientRequestWebAPIAuthenticateUserNonce& operator=(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientRequestWebAPIAuthenticateUserNonce(CMsgClientRequestWebAPIAuthenticateUserNonce&& from) noexcept
    : CMsgClientRequestWebAPIAuthenticateUserNonce() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestWebAPIAuthenticateUserNonce& operator=(CMsgClientRequestWebAPIAuthenticateUserNonce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestWebAPIAuthenticateUserNonce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientRequestWebAPIAuthenticateUserNonce* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestWebAPIAuthenticateUserNonce*>(
               &_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgClientRequestWebAPIAuthenticateUserNonce* other);
  friend void swap(CMsgClientRequestWebAPIAuthenticateUserNonce& a, CMsgClientRequestWebAPIAuthenticateUserNonce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientRequestWebAPIAuthenticateUserNonce* New() const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonce>(NULL);
  }

  CMsgClientRequestWebAPIAuthenticateUserNonce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from);
  void MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 token_type = 1 [default = -1];
  bool has_token_type() const;
  void clear_token_type();
  static const int kTokenTypeFieldNumber = 1;
  ::google::protobuf::int32 token_type() const;
  void set_token_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRequestWebAPIAuthenticateUserNonce)
 private:
  void set_has_token_type();
  void clear_has_token_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 token_type_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientRequestWebAPIAuthenticateUserNonceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestWebAPIAuthenticateUserNonceResponse) */ {
 public:
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse();
  virtual ~CMsgClientRequestWebAPIAuthenticateUserNonceResponse();

  CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from);

  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse& operator=(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse(CMsgClientRequestWebAPIAuthenticateUserNonceResponse&& from) noexcept
    : CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse& operator=(CMsgClientRequestWebAPIAuthenticateUserNonceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientRequestWebAPIAuthenticateUserNonceResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestWebAPIAuthenticateUserNonceResponse*>(
               &_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other);
  friend void swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse& a, CMsgClientRequestWebAPIAuthenticateUserNonceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse* New() const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(NULL);
  }

  CMsgClientRequestWebAPIAuthenticateUserNonceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from);
  void MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string webapi_authenticate_user_nonce = 11;
  bool has_webapi_authenticate_user_nonce() const;
  void clear_webapi_authenticate_user_nonce();
  static const int kWebapiAuthenticateUserNonceFieldNumber = 11;
  const ::std::string& webapi_authenticate_user_nonce() const;
  void set_webapi_authenticate_user_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_webapi_authenticate_user_nonce(::std::string&& value);
  #endif
  void set_webapi_authenticate_user_nonce(const char* value);
  void set_webapi_authenticate_user_nonce(const char* value, size_t size);
  ::std::string* mutable_webapi_authenticate_user_nonce();
  ::std::string* release_webapi_authenticate_user_nonce();
  void set_allocated_webapi_authenticate_user_nonce(::std::string* webapi_authenticate_user_nonce);

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::int32 eresult() const;
  void set_eresult(::google::protobuf::int32 value);

  // optional int32 token_type = 3 [default = -1];
  bool has_token_type() const;
  void clear_token_type();
  static const int kTokenTypeFieldNumber = 3;
  ::google::protobuf::int32 token_type() const;
  void set_token_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_webapi_authenticate_user_nonce();
  void clear_has_webapi_authenticate_user_nonce();
  void set_has_token_type();
  void clear_has_token_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr webapi_authenticate_user_nonce_;
  ::google::protobuf::int32 eresult_;
  ::google::protobuf::int32 token_type_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLogOff : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientLogOff) */ {
 public:
  CMsgClientLogOff();
  virtual ~CMsgClientLogOff();

  CMsgClientLogOff(const CMsgClientLogOff& from);

  inline CMsgClientLogOff& operator=(const CMsgClientLogOff& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientLogOff(CMsgClientLogOff&& from) noexcept
    : CMsgClientLogOff() {
    *this = ::std::move(from);
  }

  inline CMsgClientLogOff& operator=(CMsgClientLogOff&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLogOff& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientLogOff* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLogOff*>(
               &_CMsgClientLogOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CMsgClientLogOff* other);
  friend void swap(CMsgClientLogOff& a, CMsgClientLogOff& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLogOff* New() const final {
    return CreateMaybeMessage<CMsgClientLogOff>(NULL);
  }

  CMsgClientLogOff* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLogOff>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientLogOff& from);
  void MergeFrom(const CMsgClientLogOff& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLogOff* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientLogOff)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLoggedOff : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientLoggedOff) */ {
 public:
  CMsgClientLoggedOff();
  virtual ~CMsgClientLoggedOff();

  CMsgClientLoggedOff(const CMsgClientLoggedOff& from);

  inline CMsgClientLoggedOff& operator=(const CMsgClientLoggedOff& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientLoggedOff(CMsgClientLoggedOff&& from) noexcept
    : CMsgClientLoggedOff() {
    *this = ::std::move(from);
  }

  inline CMsgClientLoggedOff& operator=(CMsgClientLoggedOff&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLoggedOff& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientLoggedOff* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLoggedOff*>(
               &_CMsgClientLoggedOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CMsgClientLoggedOff* other);
  friend void swap(CMsgClientLoggedOff& a, CMsgClientLoggedOff& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLoggedOff* New() const final {
    return CreateMaybeMessage<CMsgClientLoggedOff>(NULL);
  }

  CMsgClientLoggedOff* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLoggedOff>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientLoggedOff& from);
  void MergeFrom(const CMsgClientLoggedOff& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLoggedOff* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::int32 eresult() const;
  void set_eresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientLoggedOff)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 eresult_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientNewLoginKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientNewLoginKey) */ {
 public:
  CMsgClientNewLoginKey();
  virtual ~CMsgClientNewLoginKey();

  CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from);

  inline CMsgClientNewLoginKey& operator=(const CMsgClientNewLoginKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientNewLoginKey(CMsgClientNewLoginKey&& from) noexcept
    : CMsgClientNewLoginKey() {
    *this = ::std::move(from);
  }

  inline CMsgClientNewLoginKey& operator=(CMsgClientNewLoginKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientNewLoginKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientNewLoginKey* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNewLoginKey*>(
               &_CMsgClientNewLoginKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CMsgClientNewLoginKey* other);
  friend void swap(CMsgClientNewLoginKey& a, CMsgClientNewLoginKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientNewLoginKey* New() const final {
    return CreateMaybeMessage<CMsgClientNewLoginKey>(NULL);
  }

  CMsgClientNewLoginKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientNewLoginKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientNewLoginKey& from);
  void MergeFrom(const CMsgClientNewLoginKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNewLoginKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string login_key = 2;
  bool has_login_key() const;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 2;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // optional uint32 unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::uint32 unique_id() const;
  void set_unique_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientNewLoginKey)
 private:
  void set_has_unique_id();
  void clear_has_unique_id();
  void set_has_login_key();
  void clear_has_login_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::google::protobuf::uint32 unique_id_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientNewLoginKeyAccepted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientNewLoginKeyAccepted) */ {
 public:
  CMsgClientNewLoginKeyAccepted();
  virtual ~CMsgClientNewLoginKeyAccepted();

  CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from);

  inline CMsgClientNewLoginKeyAccepted& operator=(const CMsgClientNewLoginKeyAccepted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientNewLoginKeyAccepted(CMsgClientNewLoginKeyAccepted&& from) noexcept
    : CMsgClientNewLoginKeyAccepted() {
    *this = ::std::move(from);
  }

  inline CMsgClientNewLoginKeyAccepted& operator=(CMsgClientNewLoginKeyAccepted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientNewLoginKeyAccepted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientNewLoginKeyAccepted* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNewLoginKeyAccepted*>(
               &_CMsgClientNewLoginKeyAccepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CMsgClientNewLoginKeyAccepted* other);
  friend void swap(CMsgClientNewLoginKeyAccepted& a, CMsgClientNewLoginKeyAccepted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientNewLoginKeyAccepted* New() const final {
    return CreateMaybeMessage<CMsgClientNewLoginKeyAccepted>(NULL);
  }

  CMsgClientNewLoginKeyAccepted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientNewLoginKeyAccepted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientNewLoginKeyAccepted& from);
  void MergeFrom(const CMsgClientNewLoginKeyAccepted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNewLoginKeyAccepted* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::uint32 unique_id() const;
  void set_unique_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientNewLoginKeyAccepted)
 private:
  void set_has_unique_id();
  void clear_has_unique_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 unique_id_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientAccountInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientAccountInfo) */ {
 public:
  CMsgClientAccountInfo();
  virtual ~CMsgClientAccountInfo();

  CMsgClientAccountInfo(const CMsgClientAccountInfo& from);

  inline CMsgClientAccountInfo& operator=(const CMsgClientAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientAccountInfo(CMsgClientAccountInfo&& from) noexcept
    : CMsgClientAccountInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientAccountInfo& operator=(CMsgClientAccountInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientAccountInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAccountInfo*>(
               &_CMsgClientAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CMsgClientAccountInfo* other);
  friend void swap(CMsgClientAccountInfo& a, CMsgClientAccountInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientAccountInfo* New() const final {
    return CreateMaybeMessage<CMsgClientAccountInfo>(NULL);
  }

  CMsgClientAccountInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientAccountInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientAccountInfo& from);
  void MergeFrom(const CMsgClientAccountInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAccountInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 1;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 1;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional string ip_country = 2;
  bool has_ip_country() const;
  void clear_ip_country();
  static const int kIpCountryFieldNumber = 2;
  const ::std::string& ip_country() const;
  void set_ip_country(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_country(::std::string&& value);
  #endif
  void set_ip_country(const char* value);
  void set_ip_country(const char* value, size_t size);
  ::std::string* mutable_ip_country();
  ::std::string* release_ip_country();
  void set_allocated_ip_country(::std::string* ip_country);

  // optional string facebook_name = 9;
  bool has_facebook_name() const;
  void clear_facebook_name();
  static const int kFacebookNameFieldNumber = 9;
  const ::std::string& facebook_name() const;
  void set_facebook_name(const ::std::string& value);
  #if LANG_CXX11
  void set_facebook_name(::std::string&& value);
  #endif
  void set_facebook_name(const char* value);
  void set_facebook_name(const char* value, size_t size);
  ::std::string* mutable_facebook_name();
  ::std::string* release_facebook_name();
  void set_allocated_facebook_name(::std::string* facebook_name);

  // optional string steamguard_machine_name_user_chosen = 15;
  bool has_steamguard_machine_name_user_chosen() const;
  void clear_steamguard_machine_name_user_chosen();
  static const int kSteamguardMachineNameUserChosenFieldNumber = 15;
  const ::std::string& steamguard_machine_name_user_chosen() const;
  void set_steamguard_machine_name_user_chosen(const ::std::string& value);
  #if LANG_CXX11
  void set_steamguard_machine_name_user_chosen(::std::string&& value);
  #endif
  void set_steamguard_machine_name_user_chosen(const char* value);
  void set_steamguard_machine_name_user_chosen(const char* value, size_t size);
  ::std::string* mutable_steamguard_machine_name_user_chosen();
  ::std::string* release_steamguard_machine_name_user_chosen();
  void set_allocated_steamguard_machine_name_user_chosen(::std::string* steamguard_machine_name_user_chosen);

  // optional int32 count_authed_computers = 5;
  bool has_count_authed_computers() const;
  void clear_count_authed_computers();
  static const int kCountAuthedComputersFieldNumber = 5;
  ::google::protobuf::int32 count_authed_computers() const;
  void set_count_authed_computers(::google::protobuf::int32 value);

  // optional uint32 account_flags = 7;
  bool has_account_flags() const;
  void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 7;
  ::google::protobuf::uint32 account_flags() const;
  void set_account_flags(::google::protobuf::uint32 value);

  // optional uint64 facebook_id = 8;
  bool has_facebook_id() const;
  void clear_facebook_id();
  static const int kFacebookIdFieldNumber = 8;
  ::google::protobuf::uint64 facebook_id() const;
  void set_facebook_id(::google::protobuf::uint64 value);

  // optional bool steamguard_notify_newmachines = 14;
  bool has_steamguard_notify_newmachines() const;
  void clear_steamguard_notify_newmachines();
  static const int kSteamguardNotifyNewmachinesFieldNumber = 14;
  bool steamguard_notify_newmachines() const;
  void set_steamguard_notify_newmachines(bool value);

  // optional bool is_phone_verified = 16;
  bool has_is_phone_verified() const;
  void clear_is_phone_verified();
  static const int kIsPhoneVerifiedFieldNumber = 16;
  bool is_phone_verified() const;
  void set_is_phone_verified(bool value);

  // optional bool is_phone_identifying = 18;
  bool has_is_phone_identifying() const;
  void clear_is_phone_identifying();
  static const int kIsPhoneIdentifyingFieldNumber = 18;
  bool is_phone_identifying() const;
  void set_is_phone_identifying(bool value);

  // optional bool is_phone_needing_reverify = 19;
  bool has_is_phone_needing_reverify() const;
  void clear_is_phone_needing_reverify();
  static const int kIsPhoneNeedingReverifyFieldNumber = 19;
  bool is_phone_needing_reverify() const;
  void set_is_phone_needing_reverify(bool value);

  // optional uint32 two_factor_state = 17;
  bool has_two_factor_state() const;
  void clear_two_factor_state();
  static const int kTwoFactorStateFieldNumber = 17;
  ::google::protobuf::uint32 two_factor_state() const;
  void set_two_factor_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAccountInfo)
 private:
  void set_has_persona_name();
  void clear_has_persona_name();
  void set_has_ip_country();
  void clear_has_ip_country();
  void set_has_count_authed_computers();
  void clear_has_count_authed_computers();
  void set_has_account_flags();
  void clear_has_account_flags();
  void set_has_facebook_id();
  void clear_has_facebook_id();
  void set_has_facebook_name();
  void clear_has_facebook_name();
  void set_has_steamguard_notify_newmachines();
  void clear_has_steamguard_notify_newmachines();
  void set_has_steamguard_machine_name_user_chosen();
  void clear_has_steamguard_machine_name_user_chosen();
  void set_has_is_phone_verified();
  void clear_has_is_phone_verified();
  void set_has_two_factor_state();
  void clear_has_two_factor_state();
  void set_has_is_phone_identifying();
  void clear_has_is_phone_identifying();
  void set_has_is_phone_needing_reverify();
  void clear_has_is_phone_needing_reverify();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_country_;
  ::google::protobuf::internal::ArenaStringPtr facebook_name_;
  ::google::protobuf::internal::ArenaStringPtr steamguard_machine_name_user_chosen_;
  ::google::protobuf::int32 count_authed_computers_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::uint64 facebook_id_;
  bool steamguard_notify_newmachines_;
  bool is_phone_verified_;
  bool is_phone_identifying_;
  bool is_phone_needing_reverify_;
  ::google::protobuf::uint32 two_factor_state_;
  friend struct ::protobuf_steammessages_5fclientserver_5flogin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientHeartBeat

// -------------------------------------------------------------------

// CMsgClientServerTimestampRequest

// optional uint64 client_request_timestamp = 1;
inline bool CMsgClientServerTimestampRequest::has_client_request_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientServerTimestampRequest::set_has_client_request_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientServerTimestampRequest::clear_has_client_request_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientServerTimestampRequest::clear_client_request_timestamp() {
  client_request_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_client_request_timestamp();
}
inline ::google::protobuf::uint64 CMsgClientServerTimestampRequest::client_request_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerTimestampRequest.client_request_timestamp)
  return client_request_timestamp_;
}
inline void CMsgClientServerTimestampRequest::set_client_request_timestamp(::google::protobuf::uint64 value) {
  set_has_client_request_timestamp();
  client_request_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientServerTimestampRequest.client_request_timestamp)
}

// -------------------------------------------------------------------

// CMsgClientServerTimestampResponse

// optional uint64 client_request_timestamp = 1;
inline bool CMsgClientServerTimestampResponse::has_client_request_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientServerTimestampResponse::set_has_client_request_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientServerTimestampResponse::clear_has_client_request_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientServerTimestampResponse::clear_client_request_timestamp() {
  client_request_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_client_request_timestamp();
}
inline ::google::protobuf::uint64 CMsgClientServerTimestampResponse::client_request_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerTimestampResponse.client_request_timestamp)
  return client_request_timestamp_;
}
inline void CMsgClientServerTimestampResponse::set_client_request_timestamp(::google::protobuf::uint64 value) {
  set_has_client_request_timestamp();
  client_request_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientServerTimestampResponse.client_request_timestamp)
}

// optional uint64 server_timestamp_ms = 2;
inline bool CMsgClientServerTimestampResponse::has_server_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientServerTimestampResponse::set_has_server_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientServerTimestampResponse::clear_has_server_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientServerTimestampResponse::clear_server_timestamp_ms() {
  server_timestamp_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_server_timestamp_ms();
}
inline ::google::protobuf::uint64 CMsgClientServerTimestampResponse::server_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerTimestampResponse.server_timestamp_ms)
  return server_timestamp_ms_;
}
inline void CMsgClientServerTimestampResponse::set_server_timestamp_ms(::google::protobuf::uint64 value) {
  set_has_server_timestamp_ms();
  server_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientServerTimestampResponse.server_timestamp_ms)
}

// -------------------------------------------------------------------

// CMsgClientLogon

// optional uint32 protocol_version = 1;
inline bool CMsgClientLogon::has_protocol_version() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgClientLogon::set_has_protocol_version() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgClientLogon::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgClientLogon::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgClientLogon::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.protocol_version)
  return protocol_version_;
}
inline void CMsgClientLogon::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.protocol_version)
}

// optional uint32 obfustucated_private_ip = 2;
inline bool CMsgClientLogon::has_obfustucated_private_ip() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgClientLogon::set_has_obfustucated_private_ip() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgClientLogon::clear_has_obfustucated_private_ip() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgClientLogon::clear_obfustucated_private_ip() {
  obfustucated_private_ip_ = 0u;
  clear_has_obfustucated_private_ip();
}
inline ::google::protobuf::uint32 CMsgClientLogon::obfustucated_private_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.obfustucated_private_ip)
  return obfustucated_private_ip_;
}
inline void CMsgClientLogon::set_obfustucated_private_ip(::google::protobuf::uint32 value) {
  set_has_obfustucated_private_ip();
  obfustucated_private_ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.obfustucated_private_ip)
}

// optional uint32 cell_id = 3;
inline bool CMsgClientLogon::has_cell_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgClientLogon::set_has_cell_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgClientLogon::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgClientLogon::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
inline ::google::protobuf::uint32 CMsgClientLogon::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.cell_id)
  return cell_id_;
}
inline void CMsgClientLogon::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.cell_id)
}

// optional uint32 last_session_id = 4;
inline bool CMsgClientLogon::has_last_session_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgClientLogon::set_has_last_session_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgClientLogon::clear_has_last_session_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgClientLogon::clear_last_session_id() {
  last_session_id_ = 0u;
  clear_has_last_session_id();
}
inline ::google::protobuf::uint32 CMsgClientLogon::last_session_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.last_session_id)
  return last_session_id_;
}
inline void CMsgClientLogon::set_last_session_id(::google::protobuf::uint32 value) {
  set_has_last_session_id();
  last_session_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.last_session_id)
}

// optional uint32 client_package_version = 5;
inline bool CMsgClientLogon::has_client_package_version() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgClientLogon::set_has_client_package_version() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgClientLogon::clear_has_client_package_version() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgClientLogon::clear_client_package_version() {
  client_package_version_ = 0u;
  clear_has_client_package_version();
}
inline ::google::protobuf::uint32 CMsgClientLogon::client_package_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_package_version)
  return client_package_version_;
}
inline void CMsgClientLogon::set_client_package_version(::google::protobuf::uint32 value) {
  set_has_client_package_version();
  client_package_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_package_version)
}

// optional string client_language = 6;
inline bool CMsgClientLogon::has_client_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLogon::set_has_client_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLogon::clear_has_client_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLogon::clear_client_language() {
  client_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_language();
}
inline const ::std::string& CMsgClientLogon::client_language() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_language)
  return client_language_.GetNoArena();
}
inline void CMsgClientLogon::set_client_language(const ::std::string& value) {
  set_has_client_language();
  client_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_language)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_client_language(::std::string&& value) {
  set_has_client_language();
  client_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.client_language)
}
#endif
inline void CMsgClientLogon::set_client_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_language();
  client_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.client_language)
}
inline void CMsgClientLogon::set_client_language(const char* value, size_t size) {
  set_has_client_language();
  client_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.client_language)
}
inline ::std::string* CMsgClientLogon::mutable_client_language() {
  set_has_client_language();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.client_language)
  return client_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_client_language() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.client_language)
  if (!has_client_language()) {
    return NULL;
  }
  clear_has_client_language();
  return client_language_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_client_language(::std::string* client_language) {
  if (client_language != NULL) {
    set_has_client_language();
  } else {
    clear_has_client_language();
  }
  client_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_language);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.client_language)
}

// optional uint32 client_os_type = 7;
inline bool CMsgClientLogon::has_client_os_type() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgClientLogon::set_has_client_os_type() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgClientLogon::clear_has_client_os_type() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgClientLogon::clear_client_os_type() {
  client_os_type_ = 0u;
  clear_has_client_os_type();
}
inline ::google::protobuf::uint32 CMsgClientLogon::client_os_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_os_type)
  return client_os_type_;
}
inline void CMsgClientLogon::set_client_os_type(::google::protobuf::uint32 value) {
  set_has_client_os_type();
  client_os_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_os_type)
}

// optional bool should_remember_password = 8 [default = false];
inline bool CMsgClientLogon::has_should_remember_password() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgClientLogon::set_has_should_remember_password() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgClientLogon::clear_has_should_remember_password() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgClientLogon::clear_should_remember_password() {
  should_remember_password_ = false;
  clear_has_should_remember_password();
}
inline bool CMsgClientLogon::should_remember_password() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.should_remember_password)
  return should_remember_password_;
}
inline void CMsgClientLogon::set_should_remember_password(bool value) {
  set_has_should_remember_password();
  should_remember_password_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.should_remember_password)
}

// optional string wine_version = 9;
inline bool CMsgClientLogon::has_wine_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientLogon::set_has_wine_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientLogon::clear_has_wine_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientLogon::clear_wine_version() {
  wine_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wine_version();
}
inline const ::std::string& CMsgClientLogon::wine_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.wine_version)
  return wine_version_.GetNoArena();
}
inline void CMsgClientLogon::set_wine_version(const ::std::string& value) {
  set_has_wine_version();
  wine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.wine_version)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_wine_version(::std::string&& value) {
  set_has_wine_version();
  wine_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.wine_version)
}
#endif
inline void CMsgClientLogon::set_wine_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wine_version();
  wine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.wine_version)
}
inline void CMsgClientLogon::set_wine_version(const char* value, size_t size) {
  set_has_wine_version();
  wine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.wine_version)
}
inline ::std::string* CMsgClientLogon::mutable_wine_version() {
  set_has_wine_version();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.wine_version)
  return wine_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_wine_version() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.wine_version)
  if (!has_wine_version()) {
    return NULL;
  }
  clear_has_wine_version();
  return wine_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_wine_version(::std::string* wine_version) {
  if (wine_version != NULL) {
    set_has_wine_version();
  } else {
    clear_has_wine_version();
  }
  wine_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wine_version);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.wine_version)
}

// optional uint32 ping_ms_from_cell_search = 10;
inline bool CMsgClientLogon::has_ping_ms_from_cell_search() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgClientLogon::set_has_ping_ms_from_cell_search() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgClientLogon::clear_has_ping_ms_from_cell_search() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgClientLogon::clear_ping_ms_from_cell_search() {
  ping_ms_from_cell_search_ = 0u;
  clear_has_ping_ms_from_cell_search();
}
inline ::google::protobuf::uint32 CMsgClientLogon::ping_ms_from_cell_search() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.ping_ms_from_cell_search)
  return ping_ms_from_cell_search_;
}
inline void CMsgClientLogon::set_ping_ms_from_cell_search(::google::protobuf::uint32 value) {
  set_has_ping_ms_from_cell_search();
  ping_ms_from_cell_search_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.ping_ms_from_cell_search)
}

// optional uint32 public_ip = 20;
inline bool CMsgClientLogon::has_public_ip() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgClientLogon::set_has_public_ip() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgClientLogon::clear_has_public_ip() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgClientLogon::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
inline ::google::protobuf::uint32 CMsgClientLogon::public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.public_ip)
  return public_ip_;
}
inline void CMsgClientLogon::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.public_ip)
}

// optional uint32 qos_level = 21;
inline bool CMsgClientLogon::has_qos_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgClientLogon::set_has_qos_level() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgClientLogon::clear_has_qos_level() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgClientLogon::clear_qos_level() {
  qos_level_ = 0u;
  clear_has_qos_level();
}
inline ::google::protobuf::uint32 CMsgClientLogon::qos_level() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.qos_level)
  return qos_level_;
}
inline void CMsgClientLogon::set_qos_level(::google::protobuf::uint32 value) {
  set_has_qos_level();
  qos_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.qos_level)
}

// optional fixed64 client_supplied_steam_id = 22;
inline bool CMsgClientLogon::has_client_supplied_steam_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgClientLogon::set_has_client_supplied_steam_id() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgClientLogon::clear_has_client_supplied_steam_id() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgClientLogon::clear_client_supplied_steam_id() {
  client_supplied_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_supplied_steam_id();
}
inline ::google::protobuf::uint64 CMsgClientLogon::client_supplied_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_supplied_steam_id)
  return client_supplied_steam_id_;
}
inline void CMsgClientLogon::set_client_supplied_steam_id(::google::protobuf::uint64 value) {
  set_has_client_supplied_steam_id();
  client_supplied_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_supplied_steam_id)
}

// optional bytes machine_id = 30;
inline bool CMsgClientLogon::has_machine_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientLogon::set_has_machine_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientLogon::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientLogon::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
inline const ::std::string& CMsgClientLogon::machine_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.machine_id)
  return machine_id_.GetNoArena();
}
inline void CMsgClientLogon::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.machine_id)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_machine_id(::std::string&& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.machine_id)
}
#endif
inline void CMsgClientLogon::set_machine_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.machine_id)
}
inline void CMsgClientLogon::set_machine_id(const void* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.machine_id)
}
inline ::std::string* CMsgClientLogon::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_machine_id() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.machine_id)
  if (!has_machine_id()) {
    return NULL;
  }
  clear_has_machine_id();
  return machine_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.machine_id)
}

// optional uint32 launcher_type = 31 [default = 0];
inline bool CMsgClientLogon::has_launcher_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgClientLogon::set_has_launcher_type() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgClientLogon::clear_has_launcher_type() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgClientLogon::clear_launcher_type() {
  launcher_type_ = 0u;
  clear_has_launcher_type();
}
inline ::google::protobuf::uint32 CMsgClientLogon::launcher_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.launcher_type)
  return launcher_type_;
}
inline void CMsgClientLogon::set_launcher_type(::google::protobuf::uint32 value) {
  set_has_launcher_type();
  launcher_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.launcher_type)
}

// optional uint32 ui_mode = 32 [default = 0];
inline bool CMsgClientLogon::has_ui_mode() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgClientLogon::set_has_ui_mode() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgClientLogon::clear_has_ui_mode() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgClientLogon::clear_ui_mode() {
  ui_mode_ = 0u;
  clear_has_ui_mode();
}
inline ::google::protobuf::uint32 CMsgClientLogon::ui_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.ui_mode)
  return ui_mode_;
}
inline void CMsgClientLogon::set_ui_mode(::google::protobuf::uint32 value) {
  set_has_ui_mode();
  ui_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.ui_mode)
}

// optional uint32 chat_mode = 33 [default = 0];
inline bool CMsgClientLogon::has_chat_mode() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgClientLogon::set_has_chat_mode() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgClientLogon::clear_has_chat_mode() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgClientLogon::clear_chat_mode() {
  chat_mode_ = 0u;
  clear_has_chat_mode();
}
inline ::google::protobuf::uint32 CMsgClientLogon::chat_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.chat_mode)
  return chat_mode_;
}
inline void CMsgClientLogon::set_chat_mode(::google::protobuf::uint32 value) {
  set_has_chat_mode();
  chat_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.chat_mode)
}

// optional bytes steam2_auth_ticket = 41;
inline bool CMsgClientLogon::has_steam2_auth_ticket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientLogon::set_has_steam2_auth_ticket() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientLogon::clear_has_steam2_auth_ticket() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientLogon::clear_steam2_auth_ticket() {
  steam2_auth_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steam2_auth_ticket();
}
inline const ::std::string& CMsgClientLogon::steam2_auth_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.steam2_auth_ticket)
  return steam2_auth_ticket_.GetNoArena();
}
inline void CMsgClientLogon::set_steam2_auth_ticket(const ::std::string& value) {
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.steam2_auth_ticket)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_steam2_auth_ticket(::std::string&& value) {
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.steam2_auth_ticket)
}
#endif
inline void CMsgClientLogon::set_steam2_auth_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.steam2_auth_ticket)
}
inline void CMsgClientLogon::set_steam2_auth_ticket(const void* value, size_t size) {
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.steam2_auth_ticket)
}
inline ::std::string* CMsgClientLogon::mutable_steam2_auth_ticket() {
  set_has_steam2_auth_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.steam2_auth_ticket)
  return steam2_auth_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_steam2_auth_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.steam2_auth_ticket)
  if (!has_steam2_auth_ticket()) {
    return NULL;
  }
  clear_has_steam2_auth_ticket();
  return steam2_auth_ticket_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_steam2_auth_ticket(::std::string* steam2_auth_ticket) {
  if (steam2_auth_ticket != NULL) {
    set_has_steam2_auth_ticket();
  } else {
    clear_has_steam2_auth_ticket();
  }
  steam2_auth_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam2_auth_ticket);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.steam2_auth_ticket)
}

// optional string email_address = 42;
inline bool CMsgClientLogon::has_email_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientLogon::set_has_email_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientLogon::clear_has_email_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientLogon::clear_email_address() {
  email_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email_address();
}
inline const ::std::string& CMsgClientLogon::email_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.email_address)
  return email_address_.GetNoArena();
}
inline void CMsgClientLogon::set_email_address(const ::std::string& value) {
  set_has_email_address();
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.email_address)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_email_address(::std::string&& value) {
  set_has_email_address();
  email_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.email_address)
}
#endif
inline void CMsgClientLogon::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email_address();
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.email_address)
}
inline void CMsgClientLogon::set_email_address(const char* value, size_t size) {
  set_has_email_address();
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.email_address)
}
inline ::std::string* CMsgClientLogon::mutable_email_address() {
  set_has_email_address();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.email_address)
  return email_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_email_address() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.email_address)
  if (!has_email_address()) {
    return NULL;
  }
  clear_has_email_address();
  return email_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_email_address(::std::string* email_address) {
  if (email_address != NULL) {
    set_has_email_address();
  } else {
    clear_has_email_address();
  }
  email_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_address);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.email_address)
}

// optional fixed32 rtime32_account_creation = 43;
inline bool CMsgClientLogon::has_rtime32_account_creation() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgClientLogon::set_has_rtime32_account_creation() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgClientLogon::clear_has_rtime32_account_creation() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgClientLogon::clear_rtime32_account_creation() {
  rtime32_account_creation_ = 0u;
  clear_has_rtime32_account_creation();
}
inline ::google::protobuf::uint32 CMsgClientLogon::rtime32_account_creation() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.rtime32_account_creation)
  return rtime32_account_creation_;
}
inline void CMsgClientLogon::set_rtime32_account_creation(::google::protobuf::uint32 value) {
  set_has_rtime32_account_creation();
  rtime32_account_creation_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.rtime32_account_creation)
}

// optional string account_name = 50;
inline bool CMsgClientLogon::has_account_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientLogon::set_has_account_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientLogon::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientLogon::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& CMsgClientLogon::account_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.account_name)
  return account_name_.GetNoArena();
}
inline void CMsgClientLogon::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.account_name)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.account_name)
}
#endif
inline void CMsgClientLogon::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.account_name)
}
inline void CMsgClientLogon::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.account_name)
}
inline ::std::string* CMsgClientLogon::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_account_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.account_name)
}

// optional string password = 51;
inline bool CMsgClientLogon::has_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientLogon::set_has_password() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientLogon::clear_has_password() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientLogon::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CMsgClientLogon::password() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.password)
  return password_.GetNoArena();
}
inline void CMsgClientLogon::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.password)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.password)
}
#endif
inline void CMsgClientLogon::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.password)
}
inline void CMsgClientLogon::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.password)
}
inline ::std::string* CMsgClientLogon::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_password() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.password)
}

// optional string game_server_token = 52;
inline bool CMsgClientLogon::has_game_server_token() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientLogon::set_has_game_server_token() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientLogon::clear_has_game_server_token() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientLogon::clear_game_server_token() {
  game_server_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_server_token();
}
inline const ::std::string& CMsgClientLogon::game_server_token() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.game_server_token)
  return game_server_token_.GetNoArena();
}
inline void CMsgClientLogon::set_game_server_token(const ::std::string& value) {
  set_has_game_server_token();
  game_server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.game_server_token)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_game_server_token(::std::string&& value) {
  set_has_game_server_token();
  game_server_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.game_server_token)
}
#endif
inline void CMsgClientLogon::set_game_server_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_server_token();
  game_server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.game_server_token)
}
inline void CMsgClientLogon::set_game_server_token(const char* value, size_t size) {
  set_has_game_server_token();
  game_server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.game_server_token)
}
inline ::std::string* CMsgClientLogon::mutable_game_server_token() {
  set_has_game_server_token();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.game_server_token)
  return game_server_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_game_server_token() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.game_server_token)
  if (!has_game_server_token()) {
    return NULL;
  }
  clear_has_game_server_token();
  return game_server_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_game_server_token(::std::string* game_server_token) {
  if (game_server_token != NULL) {
    set_has_game_server_token();
  } else {
    clear_has_game_server_token();
  }
  game_server_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_server_token);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.game_server_token)
}

// optional string login_key = 60;
inline bool CMsgClientLogon::has_login_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientLogon::set_has_login_key() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientLogon::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientLogon::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_key();
}
inline const ::std::string& CMsgClientLogon::login_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.login_key)
  return login_key_.GetNoArena();
}
inline void CMsgClientLogon::set_login_key(const ::std::string& value) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.login_key)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_login_key(::std::string&& value) {
  set_has_login_key();
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.login_key)
}
#endif
inline void CMsgClientLogon::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.login_key)
}
inline void CMsgClientLogon::set_login_key(const char* value, size_t size) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.login_key)
}
inline ::std::string* CMsgClientLogon::mutable_login_key() {
  set_has_login_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_login_key() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.login_key)
  if (!has_login_key()) {
    return NULL;
  }
  clear_has_login_key();
  return login_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_login_key(::std::string* login_key) {
  if (login_key != NULL) {
    set_has_login_key();
  } else {
    clear_has_login_key();
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.login_key)
}

// optional bool was_converted_deprecated_msg = 70 [default = false];
inline bool CMsgClientLogon::has_was_converted_deprecated_msg() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgClientLogon::set_has_was_converted_deprecated_msg() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgClientLogon::clear_has_was_converted_deprecated_msg() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgClientLogon::clear_was_converted_deprecated_msg() {
  was_converted_deprecated_msg_ = false;
  clear_has_was_converted_deprecated_msg();
}
inline bool CMsgClientLogon::was_converted_deprecated_msg() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.was_converted_deprecated_msg)
  return was_converted_deprecated_msg_;
}
inline void CMsgClientLogon::set_was_converted_deprecated_msg(bool value) {
  set_has_was_converted_deprecated_msg();
  was_converted_deprecated_msg_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.was_converted_deprecated_msg)
}

// optional string anon_user_target_account_name = 80;
inline bool CMsgClientLogon::has_anon_user_target_account_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientLogon::set_has_anon_user_target_account_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientLogon::clear_has_anon_user_target_account_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientLogon::clear_anon_user_target_account_name() {
  anon_user_target_account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anon_user_target_account_name();
}
inline const ::std::string& CMsgClientLogon::anon_user_target_account_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.anon_user_target_account_name)
  return anon_user_target_account_name_.GetNoArena();
}
inline void CMsgClientLogon::set_anon_user_target_account_name(const ::std::string& value) {
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.anon_user_target_account_name)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_anon_user_target_account_name(::std::string&& value) {
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.anon_user_target_account_name)
}
#endif
inline void CMsgClientLogon::set_anon_user_target_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.anon_user_target_account_name)
}
inline void CMsgClientLogon::set_anon_user_target_account_name(const char* value, size_t size) {
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.anon_user_target_account_name)
}
inline ::std::string* CMsgClientLogon::mutable_anon_user_target_account_name() {
  set_has_anon_user_target_account_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.anon_user_target_account_name)
  return anon_user_target_account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_anon_user_target_account_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.anon_user_target_account_name)
  if (!has_anon_user_target_account_name()) {
    return NULL;
  }
  clear_has_anon_user_target_account_name();
  return anon_user_target_account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_anon_user_target_account_name(::std::string* anon_user_target_account_name) {
  if (anon_user_target_account_name != NULL) {
    set_has_anon_user_target_account_name();
  } else {
    clear_has_anon_user_target_account_name();
  }
  anon_user_target_account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anon_user_target_account_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.anon_user_target_account_name)
}

// optional fixed64 resolved_user_steam_id = 81;
inline bool CMsgClientLogon::has_resolved_user_steam_id() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgClientLogon::set_has_resolved_user_steam_id() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgClientLogon::clear_has_resolved_user_steam_id() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgClientLogon::clear_resolved_user_steam_id() {
  resolved_user_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_resolved_user_steam_id();
}
inline ::google::protobuf::uint64 CMsgClientLogon::resolved_user_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.resolved_user_steam_id)
  return resolved_user_steam_id_;
}
inline void CMsgClientLogon::set_resolved_user_steam_id(::google::protobuf::uint64 value) {
  set_has_resolved_user_steam_id();
  resolved_user_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.resolved_user_steam_id)
}

// optional int32 eresult_sentryfile = 82;
inline bool CMsgClientLogon::has_eresult_sentryfile() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgClientLogon::set_has_eresult_sentryfile() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgClientLogon::clear_has_eresult_sentryfile() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgClientLogon::clear_eresult_sentryfile() {
  eresult_sentryfile_ = 0;
  clear_has_eresult_sentryfile();
}
inline ::google::protobuf::int32 CMsgClientLogon::eresult_sentryfile() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.eresult_sentryfile)
  return eresult_sentryfile_;
}
inline void CMsgClientLogon::set_eresult_sentryfile(::google::protobuf::int32 value) {
  set_has_eresult_sentryfile();
  eresult_sentryfile_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.eresult_sentryfile)
}

// optional bytes sha_sentryfile = 83;
inline bool CMsgClientLogon::has_sha_sentryfile() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientLogon::set_has_sha_sentryfile() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientLogon::clear_has_sha_sentryfile() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientLogon::clear_sha_sentryfile() {
  sha_sentryfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_sentryfile();
}
inline const ::std::string& CMsgClientLogon::sha_sentryfile() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sha_sentryfile)
  return sha_sentryfile_.GetNoArena();
}
inline void CMsgClientLogon::set_sha_sentryfile(const ::std::string& value) {
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sha_sentryfile)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_sha_sentryfile(::std::string&& value) {
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sha_sentryfile)
}
#endif
inline void CMsgClientLogon::set_sha_sentryfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sha_sentryfile)
}
inline void CMsgClientLogon::set_sha_sentryfile(const void* value, size_t size) {
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sha_sentryfile)
}
inline ::std::string* CMsgClientLogon::mutable_sha_sentryfile() {
  set_has_sha_sentryfile();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sha_sentryfile)
  return sha_sentryfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_sha_sentryfile() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sha_sentryfile)
  if (!has_sha_sentryfile()) {
    return NULL;
  }
  clear_has_sha_sentryfile();
  return sha_sentryfile_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_sha_sentryfile(::std::string* sha_sentryfile) {
  if (sha_sentryfile != NULL) {
    set_has_sha_sentryfile();
  } else {
    clear_has_sha_sentryfile();
  }
  sha_sentryfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_sentryfile);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sha_sentryfile)
}

// optional string auth_code = 84;
inline bool CMsgClientLogon::has_auth_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientLogon::set_has_auth_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientLogon::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientLogon::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
inline const ::std::string& CMsgClientLogon::auth_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.auth_code)
  return auth_code_.GetNoArena();
}
inline void CMsgClientLogon::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.auth_code)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.auth_code)
}
#endif
inline void CMsgClientLogon::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.auth_code)
}
inline void CMsgClientLogon::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.auth_code)
}
inline ::std::string* CMsgClientLogon::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_auth_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.auth_code)
  if (!has_auth_code()) {
    return NULL;
  }
  clear_has_auth_code();
  return auth_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.auth_code)
}

// optional int32 otp_type = 85;
inline bool CMsgClientLogon::has_otp_type() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgClientLogon::set_has_otp_type() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgClientLogon::clear_has_otp_type() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgClientLogon::clear_otp_type() {
  otp_type_ = 0;
  clear_has_otp_type();
}
inline ::google::protobuf::int32 CMsgClientLogon::otp_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.otp_type)
  return otp_type_;
}
inline void CMsgClientLogon::set_otp_type(::google::protobuf::int32 value) {
  set_has_otp_type();
  otp_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.otp_type)
}

// optional uint32 otp_value = 86;
inline bool CMsgClientLogon::has_otp_value() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgClientLogon::set_has_otp_value() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgClientLogon::clear_has_otp_value() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgClientLogon::clear_otp_value() {
  otp_value_ = 0u;
  clear_has_otp_value();
}
inline ::google::protobuf::uint32 CMsgClientLogon::otp_value() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.otp_value)
  return otp_value_;
}
inline void CMsgClientLogon::set_otp_value(::google::protobuf::uint32 value) {
  set_has_otp_value();
  otp_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.otp_value)
}

// optional string otp_identifier = 87;
inline bool CMsgClientLogon::has_otp_identifier() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgClientLogon::set_has_otp_identifier() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgClientLogon::clear_has_otp_identifier() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgClientLogon::clear_otp_identifier() {
  otp_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_otp_identifier();
}
inline const ::std::string& CMsgClientLogon::otp_identifier() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.otp_identifier)
  return otp_identifier_.GetNoArena();
}
inline void CMsgClientLogon::set_otp_identifier(const ::std::string& value) {
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.otp_identifier)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_otp_identifier(::std::string&& value) {
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.otp_identifier)
}
#endif
inline void CMsgClientLogon::set_otp_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.otp_identifier)
}
inline void CMsgClientLogon::set_otp_identifier(const char* value, size_t size) {
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.otp_identifier)
}
inline ::std::string* CMsgClientLogon::mutable_otp_identifier() {
  set_has_otp_identifier();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.otp_identifier)
  return otp_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_otp_identifier() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.otp_identifier)
  if (!has_otp_identifier()) {
    return NULL;
  }
  clear_has_otp_identifier();
  return otp_identifier_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_otp_identifier(::std::string* otp_identifier) {
  if (otp_identifier != NULL) {
    set_has_otp_identifier();
  } else {
    clear_has_otp_identifier();
  }
  otp_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otp_identifier);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.otp_identifier)
}

// optional bool steam2_ticket_request = 88;
inline bool CMsgClientLogon::has_steam2_ticket_request() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgClientLogon::set_has_steam2_ticket_request() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgClientLogon::clear_has_steam2_ticket_request() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgClientLogon::clear_steam2_ticket_request() {
  steam2_ticket_request_ = false;
  clear_has_steam2_ticket_request();
}
inline bool CMsgClientLogon::steam2_ticket_request() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.steam2_ticket_request)
  return steam2_ticket_request_;
}
inline void CMsgClientLogon::set_steam2_ticket_request(bool value) {
  set_has_steam2_ticket_request();
  steam2_ticket_request_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.steam2_ticket_request)
}

// optional bytes sony_psn_ticket = 90;
inline bool CMsgClientLogon::has_sony_psn_ticket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgClientLogon::set_has_sony_psn_ticket() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgClientLogon::clear_has_sony_psn_ticket() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgClientLogon::clear_sony_psn_ticket() {
  sony_psn_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sony_psn_ticket();
}
inline const ::std::string& CMsgClientLogon::sony_psn_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sony_psn_ticket)
  return sony_psn_ticket_.GetNoArena();
}
inline void CMsgClientLogon::set_sony_psn_ticket(const ::std::string& value) {
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sony_psn_ticket)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_sony_psn_ticket(::std::string&& value) {
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sony_psn_ticket)
}
#endif
inline void CMsgClientLogon::set_sony_psn_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sony_psn_ticket)
}
inline void CMsgClientLogon::set_sony_psn_ticket(const void* value, size_t size) {
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sony_psn_ticket)
}
inline ::std::string* CMsgClientLogon::mutable_sony_psn_ticket() {
  set_has_sony_psn_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sony_psn_ticket)
  return sony_psn_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_sony_psn_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sony_psn_ticket)
  if (!has_sony_psn_ticket()) {
    return NULL;
  }
  clear_has_sony_psn_ticket();
  return sony_psn_ticket_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_sony_psn_ticket(::std::string* sony_psn_ticket) {
  if (sony_psn_ticket != NULL) {
    set_has_sony_psn_ticket();
  } else {
    clear_has_sony_psn_ticket();
  }
  sony_psn_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sony_psn_ticket);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sony_psn_ticket)
}

// optional string sony_psn_service_id = 91;
inline bool CMsgClientLogon::has_sony_psn_service_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgClientLogon::set_has_sony_psn_service_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgClientLogon::clear_has_sony_psn_service_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgClientLogon::clear_sony_psn_service_id() {
  sony_psn_service_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sony_psn_service_id();
}
inline const ::std::string& CMsgClientLogon::sony_psn_service_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sony_psn_service_id)
  return sony_psn_service_id_.GetNoArena();
}
inline void CMsgClientLogon::set_sony_psn_service_id(const ::std::string& value) {
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sony_psn_service_id)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_sony_psn_service_id(::std::string&& value) {
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sony_psn_service_id)
}
#endif
inline void CMsgClientLogon::set_sony_psn_service_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sony_psn_service_id)
}
inline void CMsgClientLogon::set_sony_psn_service_id(const char* value, size_t size) {
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sony_psn_service_id)
}
inline ::std::string* CMsgClientLogon::mutable_sony_psn_service_id() {
  set_has_sony_psn_service_id();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sony_psn_service_id)
  return sony_psn_service_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_sony_psn_service_id() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sony_psn_service_id)
  if (!has_sony_psn_service_id()) {
    return NULL;
  }
  clear_has_sony_psn_service_id();
  return sony_psn_service_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_sony_psn_service_id(::std::string* sony_psn_service_id) {
  if (sony_psn_service_id != NULL) {
    set_has_sony_psn_service_id();
  } else {
    clear_has_sony_psn_service_id();
  }
  sony_psn_service_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sony_psn_service_id);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sony_psn_service_id)
}

// optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
inline bool CMsgClientLogon::has_create_new_psn_linked_account_if_needed() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgClientLogon::set_has_create_new_psn_linked_account_if_needed() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgClientLogon::clear_has_create_new_psn_linked_account_if_needed() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgClientLogon::clear_create_new_psn_linked_account_if_needed() {
  create_new_psn_linked_account_if_needed_ = false;
  clear_has_create_new_psn_linked_account_if_needed();
}
inline bool CMsgClientLogon::create_new_psn_linked_account_if_needed() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.create_new_psn_linked_account_if_needed)
  return create_new_psn_linked_account_if_needed_;
}
inline void CMsgClientLogon::set_create_new_psn_linked_account_if_needed(bool value) {
  set_has_create_new_psn_linked_account_if_needed();
  create_new_psn_linked_account_if_needed_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.create_new_psn_linked_account_if_needed)
}

// optional string sony_psn_name = 93;
inline bool CMsgClientLogon::has_sony_psn_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgClientLogon::set_has_sony_psn_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgClientLogon::clear_has_sony_psn_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgClientLogon::clear_sony_psn_name() {
  sony_psn_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sony_psn_name();
}
inline const ::std::string& CMsgClientLogon::sony_psn_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sony_psn_name)
  return sony_psn_name_.GetNoArena();
}
inline void CMsgClientLogon::set_sony_psn_name(const ::std::string& value) {
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sony_psn_name)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_sony_psn_name(::std::string&& value) {
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sony_psn_name)
}
#endif
inline void CMsgClientLogon::set_sony_psn_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sony_psn_name)
}
inline void CMsgClientLogon::set_sony_psn_name(const char* value, size_t size) {
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sony_psn_name)
}
inline ::std::string* CMsgClientLogon::mutable_sony_psn_name() {
  set_has_sony_psn_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sony_psn_name)
  return sony_psn_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_sony_psn_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sony_psn_name)
  if (!has_sony_psn_name()) {
    return NULL;
  }
  clear_has_sony_psn_name();
  return sony_psn_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_sony_psn_name(::std::string* sony_psn_name) {
  if (sony_psn_name != NULL) {
    set_has_sony_psn_name();
  } else {
    clear_has_sony_psn_name();
  }
  sony_psn_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sony_psn_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sony_psn_name)
}

// optional int32 game_server_app_id = 94;
inline bool CMsgClientLogon::has_game_server_app_id() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgClientLogon::set_has_game_server_app_id() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgClientLogon::clear_has_game_server_app_id() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgClientLogon::clear_game_server_app_id() {
  game_server_app_id_ = 0;
  clear_has_game_server_app_id();
}
inline ::google::protobuf::int32 CMsgClientLogon::game_server_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.game_server_app_id)
  return game_server_app_id_;
}
inline void CMsgClientLogon::set_game_server_app_id(::google::protobuf::int32 value) {
  set_has_game_server_app_id();
  game_server_app_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.game_server_app_id)
}

// optional bool steamguard_dont_remember_computer = 95;
inline bool CMsgClientLogon::has_steamguard_dont_remember_computer() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgClientLogon::set_has_steamguard_dont_remember_computer() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgClientLogon::clear_has_steamguard_dont_remember_computer() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgClientLogon::clear_steamguard_dont_remember_computer() {
  steamguard_dont_remember_computer_ = false;
  clear_has_steamguard_dont_remember_computer();
}
inline bool CMsgClientLogon::steamguard_dont_remember_computer() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.steamguard_dont_remember_computer)
  return steamguard_dont_remember_computer_;
}
inline void CMsgClientLogon::set_steamguard_dont_remember_computer(bool value) {
  set_has_steamguard_dont_remember_computer();
  steamguard_dont_remember_computer_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.steamguard_dont_remember_computer)
}

// optional string machine_name = 96;
inline bool CMsgClientLogon::has_machine_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgClientLogon::set_has_machine_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgClientLogon::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgClientLogon::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
inline const ::std::string& CMsgClientLogon::machine_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.machine_name)
  return machine_name_.GetNoArena();
}
inline void CMsgClientLogon::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.machine_name)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.machine_name)
}
#endif
inline void CMsgClientLogon::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.machine_name)
}
inline void CMsgClientLogon::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.machine_name)
}
inline ::std::string* CMsgClientLogon::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_machine_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.machine_name)
  if (!has_machine_name()) {
    return NULL;
  }
  clear_has_machine_name();
  return machine_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.machine_name)
}

// optional string machine_name_userchosen = 97;
inline bool CMsgClientLogon::has_machine_name_userchosen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgClientLogon::set_has_machine_name_userchosen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgClientLogon::clear_has_machine_name_userchosen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgClientLogon::clear_machine_name_userchosen() {
  machine_name_userchosen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name_userchosen();
}
inline const ::std::string& CMsgClientLogon::machine_name_userchosen() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.machine_name_userchosen)
  return machine_name_userchosen_.GetNoArena();
}
inline void CMsgClientLogon::set_machine_name_userchosen(const ::std::string& value) {
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.machine_name_userchosen)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_machine_name_userchosen(::std::string&& value) {
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.machine_name_userchosen)
}
#endif
inline void CMsgClientLogon::set_machine_name_userchosen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.machine_name_userchosen)
}
inline void CMsgClientLogon::set_machine_name_userchosen(const char* value, size_t size) {
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.machine_name_userchosen)
}
inline ::std::string* CMsgClientLogon::mutable_machine_name_userchosen() {
  set_has_machine_name_userchosen();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.machine_name_userchosen)
  return machine_name_userchosen_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_machine_name_userchosen() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.machine_name_userchosen)
  if (!has_machine_name_userchosen()) {
    return NULL;
  }
  clear_has_machine_name_userchosen();
  return machine_name_userchosen_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_machine_name_userchosen(::std::string* machine_name_userchosen) {
  if (machine_name_userchosen != NULL) {
    set_has_machine_name_userchosen();
  } else {
    clear_has_machine_name_userchosen();
  }
  machine_name_userchosen_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name_userchosen);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.machine_name_userchosen)
}

// optional string country_override = 98;
inline bool CMsgClientLogon::has_country_override() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgClientLogon::set_has_country_override() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgClientLogon::clear_has_country_override() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgClientLogon::clear_country_override() {
  country_override_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_override();
}
inline const ::std::string& CMsgClientLogon::country_override() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.country_override)
  return country_override_.GetNoArena();
}
inline void CMsgClientLogon::set_country_override(const ::std::string& value) {
  set_has_country_override();
  country_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.country_override)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_country_override(::std::string&& value) {
  set_has_country_override();
  country_override_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.country_override)
}
#endif
inline void CMsgClientLogon::set_country_override(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_override();
  country_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.country_override)
}
inline void CMsgClientLogon::set_country_override(const char* value, size_t size) {
  set_has_country_override();
  country_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.country_override)
}
inline ::std::string* CMsgClientLogon::mutable_country_override() {
  set_has_country_override();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.country_override)
  return country_override_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_country_override() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.country_override)
  if (!has_country_override()) {
    return NULL;
  }
  clear_has_country_override();
  return country_override_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_country_override(::std::string* country_override) {
  if (country_override != NULL) {
    set_has_country_override();
  } else {
    clear_has_country_override();
  }
  country_override_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_override);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.country_override)
}

// optional bool is_steam_box = 99;
inline bool CMsgClientLogon::has_is_steam_box() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgClientLogon::set_has_is_steam_box() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgClientLogon::clear_has_is_steam_box() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgClientLogon::clear_is_steam_box() {
  is_steam_box_ = false;
  clear_has_is_steam_box();
}
inline bool CMsgClientLogon::is_steam_box() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.is_steam_box)
  return is_steam_box_;
}
inline void CMsgClientLogon::set_is_steam_box(bool value) {
  set_has_is_steam_box();
  is_steam_box_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.is_steam_box)
}

// optional uint64 client_instance_id = 100;
inline bool CMsgClientLogon::has_client_instance_id() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgClientLogon::set_has_client_instance_id() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgClientLogon::clear_has_client_instance_id() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgClientLogon::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
inline ::google::protobuf::uint64 CMsgClientLogon::client_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_instance_id)
  return client_instance_id_;
}
inline void CMsgClientLogon::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_instance_id)
}

// optional string two_factor_code = 101;
inline bool CMsgClientLogon::has_two_factor_code() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgClientLogon::set_has_two_factor_code() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgClientLogon::clear_has_two_factor_code() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgClientLogon::clear_two_factor_code() {
  two_factor_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_two_factor_code();
}
inline const ::std::string& CMsgClientLogon::two_factor_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.two_factor_code)
  return two_factor_code_.GetNoArena();
}
inline void CMsgClientLogon::set_two_factor_code(const ::std::string& value) {
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.two_factor_code)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_two_factor_code(::std::string&& value) {
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.two_factor_code)
}
#endif
inline void CMsgClientLogon::set_two_factor_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.two_factor_code)
}
inline void CMsgClientLogon::set_two_factor_code(const char* value, size_t size) {
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.two_factor_code)
}
inline ::std::string* CMsgClientLogon::mutable_two_factor_code() {
  set_has_two_factor_code();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.two_factor_code)
  return two_factor_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_two_factor_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.two_factor_code)
  if (!has_two_factor_code()) {
    return NULL;
  }
  clear_has_two_factor_code();
  return two_factor_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_two_factor_code(::std::string* two_factor_code) {
  if (two_factor_code != NULL) {
    set_has_two_factor_code();
  } else {
    clear_has_two_factor_code();
  }
  two_factor_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), two_factor_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.two_factor_code)
}

// optional bool supports_rate_limit_response = 102;
inline bool CMsgClientLogon::has_supports_rate_limit_response() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgClientLogon::set_has_supports_rate_limit_response() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgClientLogon::clear_has_supports_rate_limit_response() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgClientLogon::clear_supports_rate_limit_response() {
  supports_rate_limit_response_ = false;
  clear_has_supports_rate_limit_response();
}
inline bool CMsgClientLogon::supports_rate_limit_response() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.supports_rate_limit_response)
  return supports_rate_limit_response_;
}
inline void CMsgClientLogon::set_supports_rate_limit_response(bool value) {
  set_has_supports_rate_limit_response();
  supports_rate_limit_response_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.supports_rate_limit_response)
}

// optional string web_logon_nonce = 103;
inline bool CMsgClientLogon::has_web_logon_nonce() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgClientLogon::set_has_web_logon_nonce() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgClientLogon::clear_has_web_logon_nonce() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgClientLogon::clear_web_logon_nonce() {
  web_logon_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_web_logon_nonce();
}
inline const ::std::string& CMsgClientLogon::web_logon_nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.web_logon_nonce)
  return web_logon_nonce_.GetNoArena();
}
inline void CMsgClientLogon::set_web_logon_nonce(const ::std::string& value) {
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.web_logon_nonce)
}
#if LANG_CXX11
inline void CMsgClientLogon::set_web_logon_nonce(::std::string&& value) {
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.web_logon_nonce)
}
#endif
inline void CMsgClientLogon::set_web_logon_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.web_logon_nonce)
}
inline void CMsgClientLogon::set_web_logon_nonce(const char* value, size_t size) {
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.web_logon_nonce)
}
inline ::std::string* CMsgClientLogon::mutable_web_logon_nonce() {
  set_has_web_logon_nonce();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.web_logon_nonce)
  return web_logon_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogon::release_web_logon_nonce() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.web_logon_nonce)
  if (!has_web_logon_nonce()) {
    return NULL;
  }
  clear_has_web_logon_nonce();
  return web_logon_nonce_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogon::set_allocated_web_logon_nonce(::std::string* web_logon_nonce) {
  if (web_logon_nonce != NULL) {
    set_has_web_logon_nonce();
  } else {
    clear_has_web_logon_nonce();
  }
  web_logon_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), web_logon_nonce);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.web_logon_nonce)
}

// optional int32 priority_reason = 104;
inline bool CMsgClientLogon::has_priority_reason() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgClientLogon::set_has_priority_reason() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgClientLogon::clear_has_priority_reason() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgClientLogon::clear_priority_reason() {
  priority_reason_ = 0;
  clear_has_priority_reason();
}
inline ::google::protobuf::int32 CMsgClientLogon::priority_reason() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.priority_reason)
  return priority_reason_;
}
inline void CMsgClientLogon::set_priority_reason(::google::protobuf::int32 value) {
  set_has_priority_reason();
  priority_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogon.priority_reason)
}

// -------------------------------------------------------------------

// CMsgClientLogonResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientLogonResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgClientLogonResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgClientLogonResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.eresult)
  return eresult_;
}
inline void CMsgClientLogonResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.eresult)
}

// optional int32 out_of_game_heartbeat_seconds = 2;
inline bool CMsgClientLogonResponse::has_out_of_game_heartbeat_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientLogonResponse::set_has_out_of_game_heartbeat_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientLogonResponse::clear_has_out_of_game_heartbeat_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientLogonResponse::clear_out_of_game_heartbeat_seconds() {
  out_of_game_heartbeat_seconds_ = 0;
  clear_has_out_of_game_heartbeat_seconds();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::out_of_game_heartbeat_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.out_of_game_heartbeat_seconds)
  return out_of_game_heartbeat_seconds_;
}
inline void CMsgClientLogonResponse::set_out_of_game_heartbeat_seconds(::google::protobuf::int32 value) {
  set_has_out_of_game_heartbeat_seconds();
  out_of_game_heartbeat_seconds_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.out_of_game_heartbeat_seconds)
}

// optional int32 in_game_heartbeat_seconds = 3;
inline bool CMsgClientLogonResponse::has_in_game_heartbeat_seconds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientLogonResponse::set_has_in_game_heartbeat_seconds() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientLogonResponse::clear_has_in_game_heartbeat_seconds() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientLogonResponse::clear_in_game_heartbeat_seconds() {
  in_game_heartbeat_seconds_ = 0;
  clear_has_in_game_heartbeat_seconds();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::in_game_heartbeat_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.in_game_heartbeat_seconds)
  return in_game_heartbeat_seconds_;
}
inline void CMsgClientLogonResponse::set_in_game_heartbeat_seconds(::google::protobuf::int32 value) {
  set_has_in_game_heartbeat_seconds();
  in_game_heartbeat_seconds_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.in_game_heartbeat_seconds)
}

// optional uint32 public_ip = 4;
inline bool CMsgClientLogonResponse::has_public_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientLogonResponse::set_has_public_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientLogonResponse::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientLogonResponse::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
inline ::google::protobuf::uint32 CMsgClientLogonResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.public_ip)
  return public_ip_;
}
inline void CMsgClientLogonResponse::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.public_ip)
}

// optional fixed32 rtime32_server_time = 5;
inline bool CMsgClientLogonResponse::has_rtime32_server_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientLogonResponse::set_has_rtime32_server_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientLogonResponse::clear_has_rtime32_server_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientLogonResponse::clear_rtime32_server_time() {
  rtime32_server_time_ = 0u;
  clear_has_rtime32_server_time();
}
inline ::google::protobuf::uint32 CMsgClientLogonResponse::rtime32_server_time() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.rtime32_server_time)
  return rtime32_server_time_;
}
inline void CMsgClientLogonResponse::set_rtime32_server_time(::google::protobuf::uint32 value) {
  set_has_rtime32_server_time();
  rtime32_server_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.rtime32_server_time)
}

// optional uint32 account_flags = 6;
inline bool CMsgClientLogonResponse::has_account_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientLogonResponse::set_has_account_flags() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientLogonResponse::clear_has_account_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientLogonResponse::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
inline ::google::protobuf::uint32 CMsgClientLogonResponse::account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.account_flags)
  return account_flags_;
}
inline void CMsgClientLogonResponse::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.account_flags)
}

// optional uint32 cell_id = 7;
inline bool CMsgClientLogonResponse::has_cell_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_cell_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgClientLogonResponse::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgClientLogonResponse::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
inline ::google::protobuf::uint32 CMsgClientLogonResponse::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.cell_id)
  return cell_id_;
}
inline void CMsgClientLogonResponse::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.cell_id)
}

// optional string email_domain = 8;
inline bool CMsgClientLogonResponse::has_email_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLogonResponse::set_has_email_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLogonResponse::clear_has_email_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLogonResponse::clear_email_domain() {
  email_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email_domain();
}
inline const ::std::string& CMsgClientLogonResponse::email_domain() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.email_domain)
  return email_domain_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_email_domain(const ::std::string& value) {
  set_has_email_domain();
  email_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.email_domain)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_email_domain(::std::string&& value) {
  set_has_email_domain();
  email_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.email_domain)
}
#endif
inline void CMsgClientLogonResponse::set_email_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email_domain();
  email_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.email_domain)
}
inline void CMsgClientLogonResponse::set_email_domain(const char* value, size_t size) {
  set_has_email_domain();
  email_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.email_domain)
}
inline ::std::string* CMsgClientLogonResponse::mutable_email_domain() {
  set_has_email_domain();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.email_domain)
  return email_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_email_domain() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.email_domain)
  if (!has_email_domain()) {
    return NULL;
  }
  clear_has_email_domain();
  return email_domain_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_email_domain(::std::string* email_domain) {
  if (email_domain != NULL) {
    set_has_email_domain();
  } else {
    clear_has_email_domain();
  }
  email_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_domain);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.email_domain)
}

// optional bytes steam2_ticket = 9;
inline bool CMsgClientLogonResponse::has_steam2_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientLogonResponse::set_has_steam2_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientLogonResponse::clear_has_steam2_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientLogonResponse::clear_steam2_ticket() {
  steam2_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steam2_ticket();
}
inline const ::std::string& CMsgClientLogonResponse::steam2_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.steam2_ticket)
  return steam2_ticket_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_steam2_ticket(const ::std::string& value) {
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.steam2_ticket)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_steam2_ticket(::std::string&& value) {
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.steam2_ticket)
}
#endif
inline void CMsgClientLogonResponse::set_steam2_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.steam2_ticket)
}
inline void CMsgClientLogonResponse::set_steam2_ticket(const void* value, size_t size) {
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.steam2_ticket)
}
inline ::std::string* CMsgClientLogonResponse::mutable_steam2_ticket() {
  set_has_steam2_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.steam2_ticket)
  return steam2_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_steam2_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.steam2_ticket)
  if (!has_steam2_ticket()) {
    return NULL;
  }
  clear_has_steam2_ticket();
  return steam2_ticket_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_steam2_ticket(::std::string* steam2_ticket) {
  if (steam2_ticket != NULL) {
    set_has_steam2_ticket();
  } else {
    clear_has_steam2_ticket();
  }
  steam2_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam2_ticket);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.steam2_ticket)
}

// optional int32 eresult_extended = 10;
inline bool CMsgClientLogonResponse::has_eresult_extended() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_eresult_extended() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgClientLogonResponse::clear_has_eresult_extended() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgClientLogonResponse::clear_eresult_extended() {
  eresult_extended_ = 0;
  clear_has_eresult_extended();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::eresult_extended() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.eresult_extended)
  return eresult_extended_;
}
inline void CMsgClientLogonResponse::set_eresult_extended(::google::protobuf::int32 value) {
  set_has_eresult_extended();
  eresult_extended_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.eresult_extended)
}

// optional string webapi_authenticate_user_nonce = 11;
inline bool CMsgClientLogonResponse::has_webapi_authenticate_user_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientLogonResponse::set_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientLogonResponse::clear_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientLogonResponse::clear_webapi_authenticate_user_nonce() {
  webapi_authenticate_user_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_webapi_authenticate_user_nonce();
}
inline const ::std::string& CMsgClientLogonResponse::webapi_authenticate_user_nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const ::std::string& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(::std::string&& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
#endif
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const char* value, size_t size) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
inline ::std::string* CMsgClientLogonResponse::mutable_webapi_authenticate_user_nonce() {
  set_has_webapi_authenticate_user_nonce();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  if (!has_webapi_authenticate_user_nonce()) {
    return NULL;
  }
  clear_has_webapi_authenticate_user_nonce();
  return webapi_authenticate_user_nonce_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_webapi_authenticate_user_nonce(::std::string* webapi_authenticate_user_nonce) {
  if (webapi_authenticate_user_nonce != NULL) {
    set_has_webapi_authenticate_user_nonce();
  } else {
    clear_has_webapi_authenticate_user_nonce();
  }
  webapi_authenticate_user_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webapi_authenticate_user_nonce);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}

// optional uint32 cell_id_ping_threshold = 12;
inline bool CMsgClientLogonResponse::has_cell_id_ping_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_cell_id_ping_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgClientLogonResponse::clear_has_cell_id_ping_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgClientLogonResponse::clear_cell_id_ping_threshold() {
  cell_id_ping_threshold_ = 0u;
  clear_has_cell_id_ping_threshold();
}
inline ::google::protobuf::uint32 CMsgClientLogonResponse::cell_id_ping_threshold() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.cell_id_ping_threshold)
  return cell_id_ping_threshold_;
}
inline void CMsgClientLogonResponse::set_cell_id_ping_threshold(::google::protobuf::uint32 value) {
  set_has_cell_id_ping_threshold();
  cell_id_ping_threshold_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.cell_id_ping_threshold)
}

// optional bool use_pics = 13;
inline bool CMsgClientLogonResponse::has_use_pics() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_use_pics() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgClientLogonResponse::clear_has_use_pics() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgClientLogonResponse::clear_use_pics() {
  use_pics_ = false;
  clear_has_use_pics();
}
inline bool CMsgClientLogonResponse::use_pics() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.use_pics)
  return use_pics_;
}
inline void CMsgClientLogonResponse::set_use_pics(bool value) {
  set_has_use_pics();
  use_pics_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.use_pics)
}

// optional string vanity_url = 14;
inline bool CMsgClientLogonResponse::has_vanity_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientLogonResponse::set_has_vanity_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientLogonResponse::clear_has_vanity_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientLogonResponse::clear_vanity_url() {
  vanity_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vanity_url();
}
inline const ::std::string& CMsgClientLogonResponse::vanity_url() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.vanity_url)
  return vanity_url_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_vanity_url(const ::std::string& value) {
  set_has_vanity_url();
  vanity_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.vanity_url)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_vanity_url(::std::string&& value) {
  set_has_vanity_url();
  vanity_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.vanity_url)
}
#endif
inline void CMsgClientLogonResponse::set_vanity_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vanity_url();
  vanity_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.vanity_url)
}
inline void CMsgClientLogonResponse::set_vanity_url(const char* value, size_t size) {
  set_has_vanity_url();
  vanity_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.vanity_url)
}
inline ::std::string* CMsgClientLogonResponse::mutable_vanity_url() {
  set_has_vanity_url();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.vanity_url)
  return vanity_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_vanity_url() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.vanity_url)
  if (!has_vanity_url()) {
    return NULL;
  }
  clear_has_vanity_url();
  return vanity_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_vanity_url(::std::string* vanity_url) {
  if (vanity_url != NULL) {
    set_has_vanity_url();
  } else {
    clear_has_vanity_url();
  }
  vanity_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vanity_url);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.vanity_url)
}

// optional fixed64 client_supplied_steamid = 20;
inline bool CMsgClientLogonResponse::has_client_supplied_steamid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_client_supplied_steamid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgClientLogonResponse::clear_has_client_supplied_steamid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgClientLogonResponse::clear_client_supplied_steamid() {
  client_supplied_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_supplied_steamid();
}
inline ::google::protobuf::uint64 CMsgClientLogonResponse::client_supplied_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.client_supplied_steamid)
  return client_supplied_steamid_;
}
inline void CMsgClientLogonResponse::set_client_supplied_steamid(::google::protobuf::uint64 value) {
  set_has_client_supplied_steamid();
  client_supplied_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.client_supplied_steamid)
}

// optional string ip_country_code = 21;
inline bool CMsgClientLogonResponse::has_ip_country_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientLogonResponse::set_has_ip_country_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientLogonResponse::clear_has_ip_country_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientLogonResponse::clear_ip_country_code() {
  ip_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country_code();
}
inline const ::std::string& CMsgClientLogonResponse::ip_country_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.ip_country_code)
  return ip_country_code_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_ip_country_code(const ::std::string& value) {
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.ip_country_code)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_ip_country_code(::std::string&& value) {
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.ip_country_code)
}
#endif
inline void CMsgClientLogonResponse::set_ip_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.ip_country_code)
}
inline void CMsgClientLogonResponse::set_ip_country_code(const char* value, size_t size) {
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.ip_country_code)
}
inline ::std::string* CMsgClientLogonResponse::mutable_ip_country_code() {
  set_has_ip_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.ip_country_code)
  return ip_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_ip_country_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.ip_country_code)
  if (!has_ip_country_code()) {
    return NULL;
  }
  clear_has_ip_country_code();
  return ip_country_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_ip_country_code(::std::string* ip_country_code) {
  if (ip_country_code != NULL) {
    set_has_ip_country_code();
  } else {
    clear_has_ip_country_code();
  }
  ip_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.ip_country_code)
}

// optional bytes parental_settings = 22;
inline bool CMsgClientLogonResponse::has_parental_settings() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientLogonResponse::set_has_parental_settings() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientLogonResponse::clear_has_parental_settings() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientLogonResponse::clear_parental_settings() {
  parental_settings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parental_settings();
}
inline const ::std::string& CMsgClientLogonResponse::parental_settings() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.parental_settings)
  return parental_settings_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_parental_settings(const ::std::string& value) {
  set_has_parental_settings();
  parental_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.parental_settings)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_parental_settings(::std::string&& value) {
  set_has_parental_settings();
  parental_settings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.parental_settings)
}
#endif
inline void CMsgClientLogonResponse::set_parental_settings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parental_settings();
  parental_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.parental_settings)
}
inline void CMsgClientLogonResponse::set_parental_settings(const void* value, size_t size) {
  set_has_parental_settings();
  parental_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.parental_settings)
}
inline ::std::string* CMsgClientLogonResponse::mutable_parental_settings() {
  set_has_parental_settings();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.parental_settings)
  return parental_settings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_parental_settings() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.parental_settings)
  if (!has_parental_settings()) {
    return NULL;
  }
  clear_has_parental_settings();
  return parental_settings_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_parental_settings(::std::string* parental_settings) {
  if (parental_settings != NULL) {
    set_has_parental_settings();
  } else {
    clear_has_parental_settings();
  }
  parental_settings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parental_settings);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.parental_settings)
}

// optional bytes parental_setting_signature = 23;
inline bool CMsgClientLogonResponse::has_parental_setting_signature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientLogonResponse::set_has_parental_setting_signature() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientLogonResponse::clear_has_parental_setting_signature() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientLogonResponse::clear_parental_setting_signature() {
  parental_setting_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parental_setting_signature();
}
inline const ::std::string& CMsgClientLogonResponse::parental_setting_signature() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.parental_setting_signature)
  return parental_setting_signature_.GetNoArena();
}
inline void CMsgClientLogonResponse::set_parental_setting_signature(const ::std::string& value) {
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.parental_setting_signature)
}
#if LANG_CXX11
inline void CMsgClientLogonResponse::set_parental_setting_signature(::std::string&& value) {
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.parental_setting_signature)
}
#endif
inline void CMsgClientLogonResponse::set_parental_setting_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.parental_setting_signature)
}
inline void CMsgClientLogonResponse::set_parental_setting_signature(const void* value, size_t size) {
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.parental_setting_signature)
}
inline ::std::string* CMsgClientLogonResponse::mutable_parental_setting_signature() {
  set_has_parental_setting_signature();
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.parental_setting_signature)
  return parental_setting_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLogonResponse::release_parental_setting_signature() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.parental_setting_signature)
  if (!has_parental_setting_signature()) {
    return NULL;
  }
  clear_has_parental_setting_signature();
  return parental_setting_signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLogonResponse::set_allocated_parental_setting_signature(::std::string* parental_setting_signature) {
  if (parental_setting_signature != NULL) {
    set_has_parental_setting_signature();
  } else {
    clear_has_parental_setting_signature();
  }
  parental_setting_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parental_setting_signature);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.parental_setting_signature)
}

// optional int32 count_loginfailures_to_migrate = 24;
inline bool CMsgClientLogonResponse::has_count_loginfailures_to_migrate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_count_loginfailures_to_migrate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgClientLogonResponse::clear_has_count_loginfailures_to_migrate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgClientLogonResponse::clear_count_loginfailures_to_migrate() {
  count_loginfailures_to_migrate_ = 0;
  clear_has_count_loginfailures_to_migrate();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::count_loginfailures_to_migrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.count_loginfailures_to_migrate)
  return count_loginfailures_to_migrate_;
}
inline void CMsgClientLogonResponse::set_count_loginfailures_to_migrate(::google::protobuf::int32 value) {
  set_has_count_loginfailures_to_migrate();
  count_loginfailures_to_migrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.count_loginfailures_to_migrate)
}

// optional int32 count_disconnects_to_migrate = 25;
inline bool CMsgClientLogonResponse::has_count_disconnects_to_migrate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_count_disconnects_to_migrate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgClientLogonResponse::clear_has_count_disconnects_to_migrate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgClientLogonResponse::clear_count_disconnects_to_migrate() {
  count_disconnects_to_migrate_ = 0;
  clear_has_count_disconnects_to_migrate();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::count_disconnects_to_migrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.count_disconnects_to_migrate)
  return count_disconnects_to_migrate_;
}
inline void CMsgClientLogonResponse::set_count_disconnects_to_migrate(::google::protobuf::int32 value) {
  set_has_count_disconnects_to_migrate();
  count_disconnects_to_migrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.count_disconnects_to_migrate)
}

// optional int32 ogs_data_report_time_window = 26;
inline bool CMsgClientLogonResponse::has_ogs_data_report_time_window() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_ogs_data_report_time_window() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgClientLogonResponse::clear_has_ogs_data_report_time_window() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgClientLogonResponse::clear_ogs_data_report_time_window() {
  ogs_data_report_time_window_ = 0;
  clear_has_ogs_data_report_time_window();
}
inline ::google::protobuf::int32 CMsgClientLogonResponse::ogs_data_report_time_window() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.ogs_data_report_time_window)
  return ogs_data_report_time_window_;
}
inline void CMsgClientLogonResponse::set_ogs_data_report_time_window(::google::protobuf::int32 value) {
  set_has_ogs_data_report_time_window();
  ogs_data_report_time_window_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.ogs_data_report_time_window)
}

// optional uint64 client_instance_id = 27;
inline bool CMsgClientLogonResponse::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_client_instance_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgClientLogonResponse::clear_has_client_instance_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgClientLogonResponse::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
inline ::google::protobuf::uint64 CMsgClientLogonResponse::client_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.client_instance_id)
  return client_instance_id_;
}
inline void CMsgClientLogonResponse::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.client_instance_id)
}

// optional bool force_client_update_check = 28;
inline bool CMsgClientLogonResponse::has_force_client_update_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgClientLogonResponse::set_has_force_client_update_check() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgClientLogonResponse::clear_has_force_client_update_check() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgClientLogonResponse::clear_force_client_update_check() {
  force_client_update_check_ = false;
  clear_has_force_client_update_check();
}
inline bool CMsgClientLogonResponse::force_client_update_check() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.force_client_update_check)
  return force_client_update_check_;
}
inline void CMsgClientLogonResponse::set_force_client_update_check(bool value) {
  set_has_force_client_update_check();
  force_client_update_check_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.force_client_update_check)
}

// -------------------------------------------------------------------

// CMsgClientRequestWebAPIAuthenticateUserNonce

// optional int32 token_type = 1 [default = -1];
inline bool CMsgClientRequestWebAPIAuthenticateUserNonce::has_token_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::set_has_token_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::clear_has_token_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::clear_token_type() {
  token_type_ = -1;
  clear_has_token_type();
}
inline ::google::protobuf::int32 CMsgClientRequestWebAPIAuthenticateUserNonce::token_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonce.token_type)
  return token_type_;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::set_token_type(::google::protobuf::int32 value) {
  set_has_token_type();
  token_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonce.token_type)
}

// -------------------------------------------------------------------

// CMsgClientRequestWebAPIAuthenticateUserNonceResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.eresult)
  return eresult_;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.eresult)
}

// optional string webapi_authenticate_user_nonce = 11;
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_webapi_authenticate_user_nonce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_webapi_authenticate_user_nonce() {
  webapi_authenticate_user_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_webapi_authenticate_user_nonce();
}
inline const ::std::string& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::webapi_authenticate_user_nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.GetNoArena();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const ::std::string& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
#if LANG_CXX11
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(::std::string&& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
#endif
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const char* value, size_t size) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
inline ::std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::mutable_webapi_authenticate_user_nonce() {
  set_has_webapi_authenticate_user_nonce();
  // @@protoc_insertion_point(field_mutable:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::release_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_release:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  if (!has_webapi_authenticate_user_nonce()) {
    return NULL;
  }
  clear_has_webapi_authenticate_user_nonce();
  return webapi_authenticate_user_nonce_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_allocated_webapi_authenticate_user_nonce(::std::string* webapi_authenticate_user_nonce) {
  if (webapi_authenticate_user_nonce != NULL) {
    set_has_webapi_authenticate_user_nonce();
  } else {
    clear_has_webapi_authenticate_user_nonce();
  }
  webapi_authenticate_user_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webapi_authenticate_user_nonce);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}

// optional int32 token_type = 3 [default = -1];
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_token_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_has_token_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_has_token_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_token_type() {
  token_type_ = -1;
  clear_has_token_type();
}
inline ::google::protobuf::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::token_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.token_type)
  return token_type_;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_token_type(::google::protobuf::int32 value) {
  set_has_token_type();
  token_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.token_type)
}

// -------------------------------------------------------------------

// CMsgClientLogOff

// -------------------------------------------------------------------

// CMsgClientLoggedOff

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientLoggedOff::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLoggedOff::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLoggedOff::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLoggedOff::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientLoggedOff::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientLoggedOff.eresult)
  return eresult_;
}
inline void CMsgClientLoggedOff::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientLoggedOff.eresult)
}

// -------------------------------------------------------------------

// CMsgClientNewLoginKey

// optional uint32 unique_id = 1;
inline bool CMsgClientNewLoginKey::has_unique_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientNewLoginKey::set_has_unique_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientNewLoginKey::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientNewLoginKey::clear_unique_id() {
  unique_id_ = 0u;
  clear_has_unique_id();
}
inline ::google::protobuf::uint32 CMsgClientNewLoginKey::unique_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNewLoginKey.unique_id)
  return unique_id_;
}
inline void CMsgClientNewLoginKey::set_unique_id(::google::protobuf::uint32 value) {
  set_has_unique_id();
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientNewLoginKey.unique_id)
}

// optional string login_key = 2;
inline bool CMsgClientNewLoginKey::has_login_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientNewLoginKey::set_has_login_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientNewLoginKey::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientNewLoginKey::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_key();
}
inline const ::std::string& CMsgClientNewLoginKey::login_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientNewLoginKey.login_key)
  return login_key_.GetNoArena();
}
inline void CMsgClientNewLoginKey::set_login_key(const ::std::string& value) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientNewLoginKey.login_key)
}
#if LANG_CXX11
inline void CMsgClientNewLoginKey::set_login_key(::std::string&& value) {
  set_has_login_key();
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientNewLoginKey.login_key)
}
#endif
inline void CMsgClientNewLoginKey::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientNewLoginKey.login_key)
}
inline void CMsgClientNewLoginKey::set_login_key(const char* value, size_t size) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientNewLoginKey.login_key)
}
inline ::std::string* CMsgClientNewLoginKey::mutable_login_key() {
  set_has_login_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientNewLoginKey.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientNewLoginKey::release_login_key() {
  // @@protoc_insertion_point(field_release:CMsgClientNewLoginKey.login_key)
  if (!has_login_key()) {
    return NULL;
  }
  clear_has_login_key();
  return login_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientNewLoginKey::set_allocated_login_key(::std::string* login_key) {
  if (login_key != NULL) {
    set_has_login_key();
  } else {
    clear_has_login_key();
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientNewLoginKey.login_key)
}

// -------------------------------------------------------------------

// CMsgClientNewLoginKeyAccepted

// optional uint32 unique_id = 1;
inline bool CMsgClientNewLoginKeyAccepted::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientNewLoginKeyAccepted::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientNewLoginKeyAccepted::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientNewLoginKeyAccepted::clear_unique_id() {
  unique_id_ = 0u;
  clear_has_unique_id();
}
inline ::google::protobuf::uint32 CMsgClientNewLoginKeyAccepted::unique_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNewLoginKeyAccepted.unique_id)
  return unique_id_;
}
inline void CMsgClientNewLoginKeyAccepted::set_unique_id(::google::protobuf::uint32 value) {
  set_has_unique_id();
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientNewLoginKeyAccepted.unique_id)
}

// -------------------------------------------------------------------

// CMsgClientAccountInfo

// optional string persona_name = 1;
inline bool CMsgClientAccountInfo::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAccountInfo::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAccountInfo::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAccountInfo::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
inline const ::std::string& CMsgClientAccountInfo::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgClientAccountInfo::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.persona_name)
}
#if LANG_CXX11
inline void CMsgClientAccountInfo::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.persona_name)
}
#endif
inline void CMsgClientAccountInfo::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.persona_name)
}
inline void CMsgClientAccountInfo::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.persona_name)
}
inline ::std::string* CMsgClientAccountInfo::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientAccountInfo::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.persona_name)
  if (!has_persona_name()) {
    return NULL;
  }
  clear_has_persona_name();
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientAccountInfo::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.persona_name)
}

// optional string ip_country = 2;
inline bool CMsgClientAccountInfo::has_ip_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAccountInfo::set_has_ip_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAccountInfo::clear_has_ip_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAccountInfo::clear_ip_country() {
  ip_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country();
}
inline const ::std::string& CMsgClientAccountInfo::ip_country() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.ip_country)
  return ip_country_.GetNoArena();
}
inline void CMsgClientAccountInfo::set_ip_country(const ::std::string& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.ip_country)
}
#if LANG_CXX11
inline void CMsgClientAccountInfo::set_ip_country(::std::string&& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.ip_country)
}
#endif
inline void CMsgClientAccountInfo::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.ip_country)
}
inline void CMsgClientAccountInfo::set_ip_country(const char* value, size_t size) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.ip_country)
}
inline ::std::string* CMsgClientAccountInfo::mutable_ip_country() {
  set_has_ip_country();
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.ip_country)
  return ip_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientAccountInfo::release_ip_country() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.ip_country)
  if (!has_ip_country()) {
    return NULL;
  }
  clear_has_ip_country();
  return ip_country_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientAccountInfo::set_allocated_ip_country(::std::string* ip_country) {
  if (ip_country != NULL) {
    set_has_ip_country();
  } else {
    clear_has_ip_country();
  }
  ip_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.ip_country)
}

// optional int32 count_authed_computers = 5;
inline bool CMsgClientAccountInfo::has_count_authed_computers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientAccountInfo::set_has_count_authed_computers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientAccountInfo::clear_has_count_authed_computers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientAccountInfo::clear_count_authed_computers() {
  count_authed_computers_ = 0;
  clear_has_count_authed_computers();
}
inline ::google::protobuf::int32 CMsgClientAccountInfo::count_authed_computers() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.count_authed_computers)
  return count_authed_computers_;
}
inline void CMsgClientAccountInfo::set_count_authed_computers(::google::protobuf::int32 value) {
  set_has_count_authed_computers();
  count_authed_computers_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.count_authed_computers)
}

// optional uint32 account_flags = 7;
inline bool CMsgClientAccountInfo::has_account_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientAccountInfo::set_has_account_flags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientAccountInfo::clear_has_account_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientAccountInfo::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
inline ::google::protobuf::uint32 CMsgClientAccountInfo::account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.account_flags)
  return account_flags_;
}
inline void CMsgClientAccountInfo::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.account_flags)
}

// optional uint64 facebook_id = 8;
inline bool CMsgClientAccountInfo::has_facebook_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientAccountInfo::set_has_facebook_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientAccountInfo::clear_has_facebook_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientAccountInfo::clear_facebook_id() {
  facebook_id_ = GOOGLE_ULONGLONG(0);
  clear_has_facebook_id();
}
inline ::google::protobuf::uint64 CMsgClientAccountInfo::facebook_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.facebook_id)
  return facebook_id_;
}
inline void CMsgClientAccountInfo::set_facebook_id(::google::protobuf::uint64 value) {
  set_has_facebook_id();
  facebook_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.facebook_id)
}

// optional string facebook_name = 9;
inline bool CMsgClientAccountInfo::has_facebook_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientAccountInfo::set_has_facebook_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientAccountInfo::clear_has_facebook_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientAccountInfo::clear_facebook_name() {
  facebook_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_facebook_name();
}
inline const ::std::string& CMsgClientAccountInfo::facebook_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.facebook_name)
  return facebook_name_.GetNoArena();
}
inline void CMsgClientAccountInfo::set_facebook_name(const ::std::string& value) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.facebook_name)
}
#if LANG_CXX11
inline void CMsgClientAccountInfo::set_facebook_name(::std::string&& value) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.facebook_name)
}
#endif
inline void CMsgClientAccountInfo::set_facebook_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.facebook_name)
}
inline void CMsgClientAccountInfo::set_facebook_name(const char* value, size_t size) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.facebook_name)
}
inline ::std::string* CMsgClientAccountInfo::mutable_facebook_name() {
  set_has_facebook_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.facebook_name)
  return facebook_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientAccountInfo::release_facebook_name() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.facebook_name)
  if (!has_facebook_name()) {
    return NULL;
  }
  clear_has_facebook_name();
  return facebook_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientAccountInfo::set_allocated_facebook_name(::std::string* facebook_name) {
  if (facebook_name != NULL) {
    set_has_facebook_name();
  } else {
    clear_has_facebook_name();
  }
  facebook_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facebook_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.facebook_name)
}

// optional bool steamguard_notify_newmachines = 14;
inline bool CMsgClientAccountInfo::has_steamguard_notify_newmachines() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientAccountInfo::set_has_steamguard_notify_newmachines() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientAccountInfo::clear_has_steamguard_notify_newmachines() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientAccountInfo::clear_steamguard_notify_newmachines() {
  steamguard_notify_newmachines_ = false;
  clear_has_steamguard_notify_newmachines();
}
inline bool CMsgClientAccountInfo::steamguard_notify_newmachines() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.steamguard_notify_newmachines)
  return steamguard_notify_newmachines_;
}
inline void CMsgClientAccountInfo::set_steamguard_notify_newmachines(bool value) {
  set_has_steamguard_notify_newmachines();
  steamguard_notify_newmachines_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.steamguard_notify_newmachines)
}

// optional string steamguard_machine_name_user_chosen = 15;
inline bool CMsgClientAccountInfo::has_steamguard_machine_name_user_chosen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientAccountInfo::set_has_steamguard_machine_name_user_chosen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientAccountInfo::clear_has_steamguard_machine_name_user_chosen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientAccountInfo::clear_steamguard_machine_name_user_chosen() {
  steamguard_machine_name_user_chosen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steamguard_machine_name_user_chosen();
}
inline const ::std::string& CMsgClientAccountInfo::steamguard_machine_name_user_chosen() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  return steamguard_machine_name_user_chosen_.GetNoArena();
}
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const ::std::string& value) {
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
#if LANG_CXX11
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(::std::string&& value) {
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
#endif
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const char* value, size_t size) {
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
inline ::std::string* CMsgClientAccountInfo::mutable_steamguard_machine_name_user_chosen() {
  set_has_steamguard_machine_name_user_chosen();
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  return steamguard_machine_name_user_chosen_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientAccountInfo::release_steamguard_machine_name_user_chosen() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  if (!has_steamguard_machine_name_user_chosen()) {
    return NULL;
  }
  clear_has_steamguard_machine_name_user_chosen();
  return steamguard_machine_name_user_chosen_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientAccountInfo::set_allocated_steamguard_machine_name_user_chosen(::std::string* steamguard_machine_name_user_chosen) {
  if (steamguard_machine_name_user_chosen != NULL) {
    set_has_steamguard_machine_name_user_chosen();
  } else {
    clear_has_steamguard_machine_name_user_chosen();
  }
  steamguard_machine_name_user_chosen_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steamguard_machine_name_user_chosen);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}

// optional bool is_phone_verified = 16;
inline bool CMsgClientAccountInfo::has_is_phone_verified() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientAccountInfo::set_has_is_phone_verified() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientAccountInfo::clear_has_is_phone_verified() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientAccountInfo::clear_is_phone_verified() {
  is_phone_verified_ = false;
  clear_has_is_phone_verified();
}
inline bool CMsgClientAccountInfo::is_phone_verified() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.is_phone_verified)
  return is_phone_verified_;
}
inline void CMsgClientAccountInfo::set_is_phone_verified(bool value) {
  set_has_is_phone_verified();
  is_phone_verified_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.is_phone_verified)
}

// optional uint32 two_factor_state = 17;
inline bool CMsgClientAccountInfo::has_two_factor_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientAccountInfo::set_has_two_factor_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientAccountInfo::clear_has_two_factor_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientAccountInfo::clear_two_factor_state() {
  two_factor_state_ = 0u;
  clear_has_two_factor_state();
}
inline ::google::protobuf::uint32 CMsgClientAccountInfo::two_factor_state() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.two_factor_state)
  return two_factor_state_;
}
inline void CMsgClientAccountInfo::set_two_factor_state(::google::protobuf::uint32 value) {
  set_has_two_factor_state();
  two_factor_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.two_factor_state)
}

// optional bool is_phone_identifying = 18;
inline bool CMsgClientAccountInfo::has_is_phone_identifying() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientAccountInfo::set_has_is_phone_identifying() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientAccountInfo::clear_has_is_phone_identifying() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientAccountInfo::clear_is_phone_identifying() {
  is_phone_identifying_ = false;
  clear_has_is_phone_identifying();
}
inline bool CMsgClientAccountInfo::is_phone_identifying() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.is_phone_identifying)
  return is_phone_identifying_;
}
inline void CMsgClientAccountInfo::set_is_phone_identifying(bool value) {
  set_has_is_phone_identifying();
  is_phone_identifying_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.is_phone_identifying)
}

// optional bool is_phone_needing_reverify = 19;
inline bool CMsgClientAccountInfo::has_is_phone_needing_reverify() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientAccountInfo::set_has_is_phone_needing_reverify() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientAccountInfo::clear_has_is_phone_needing_reverify() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientAccountInfo::clear_is_phone_needing_reverify() {
  is_phone_needing_reverify_ = false;
  clear_has_is_phone_needing_reverify();
}
inline bool CMsgClientAccountInfo::is_phone_needing_reverify() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.is_phone_needing_reverify)
  return is_phone_needing_reverify_;
}
inline void CMsgClientAccountInfo::set_is_phone_needing_reverify(bool value) {
  set_has_is_phone_needing_reverify();
  is_phone_needing_reverify_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.is_phone_needing_reverify)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fclientserver_5flogin_2eproto
