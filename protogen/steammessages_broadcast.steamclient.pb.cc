// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#include "steammessages_broadcast.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fbroadcast_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName;
}  // namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto
class CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BeginBroadcastSession_Request>
      _instance;
} _CBroadcast_BeginBroadcastSession_Request_default_instance_;
class CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BeginBroadcastSession_Response>
      _instance;
} _CBroadcast_BeginBroadcastSession_Response_default_instance_;
class CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_EndBroadcastSession_Request>
      _instance;
} _CBroadcast_EndBroadcastSession_Request_default_instance_;
class CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_EndBroadcastSession_Response>
      _instance;
} _CBroadcast_EndBroadcastSession_Response_default_instance_;
class CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StartBroadcastUpload_Request>
      _instance;
} _CBroadcast_StartBroadcastUpload_Request_default_instance_;
class CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StartBroadcastUpload_Response>
      _instance;
} _CBroadcast_StartBroadcastUpload_Response_default_instance_;
class CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_NotifyBroadcastUploadStop_Notification>
      _instance;
} _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
class CBroadcast_WatchBroadcast_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WatchBroadcast_Request>
      _instance;
} _CBroadcast_WatchBroadcast_Request_default_instance_;
class CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WatchBroadcast_Response>
      _instance;
} _CBroadcast_WatchBroadcast_Response_default_instance_;
class CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_HeartbeatBroadcast_Notification>
      _instance;
} _CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
class CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StopWatchingBroadcast_Notification>
      _instance;
} _CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
class CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastStatus_Request>
      _instance;
} _CBroadcast_GetBroadcastStatus_Request_default_instance_;
class CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastStatus_Response>
      _instance;
} _CBroadcast_GetBroadcastStatus_Response_default_instance_;
class CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastThumbnail_Request>
      _instance;
} _CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
class CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastThumbnail_Response>
      _instance;
} _CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
class CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_InviteToBroadcast_Request>
      _instance;
} _CBroadcast_InviteToBroadcast_Request_default_instance_;
class CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_InviteToBroadcast_Response>
      _instance;
} _CBroadcast_InviteToBroadcast_Response_default_instance_;
class CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendBroadcastStateToServer_Request>
      _instance;
} _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
class CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendBroadcastStateToServer_Response>
      _instance;
} _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
class CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>
      _instance;
} _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
class CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatInfo_Request>
      _instance;
} _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
class CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatInfo_Response>
      _instance;
} _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
class CBroadcast_PostChatMessage_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostChatMessage_Request>
      _instance;
} _CBroadcast_PostChatMessage_Request_default_instance_;
class CBroadcast_PostChatMessage_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostChatMessage_Response>
      _instance;
} _CBroadcast_PostChatMessage_Response_default_instance_;
class CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_MuteBroadcastChatUser_Request>
      _instance;
} _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
class CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_MuteBroadcastChatUser_Response>
      _instance;
} _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
class CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_RemoveUserChatText_Request>
      _instance;
} _CBroadcast_RemoveUserChatText_Request_default_instance_;
class CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_RemoveUserChatText_Response>
      _instance;
} _CBroadcast_RemoveUserChatText_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Request>
      _instance;
} _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>
      _instance;
} _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Response>
      _instance;
} _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
class CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BroadcastViewerState_Notification>
      _instance;
} _CBroadcast_BroadcastViewerState_Notification_default_instance_;
class CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WaitingBroadcastViewer_Notification>
      _instance;
} _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
class CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StopBroadcastUpload_Notification>
      _instance;
} _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
class CBroadcast_SessionClosed_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SessionClosed_Notification>
      _instance;
} _CBroadcast_SessionClosed_Notification_default_instance_;
class CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_ViewerBroadcastInvite_Notification>
      _instance;
} _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
class CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BroadcastStatus_Notification>
      _instance;
} _CBroadcast_BroadcastStatus_Notification_default_instance_;
class CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendThumbnailToRelay_Notification>
      _instance;
} _CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto {
static void InitDefaultsCBroadcast_BeginBroadcastSession_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_BeginBroadcastSession_Request_default_instance_;
    new (ptr) ::CBroadcast_BeginBroadcastSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_BeginBroadcastSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BeginBroadcastSession_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BeginBroadcastSession_Request}, {}};

static void InitDefaultsCBroadcast_BeginBroadcastSession_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_BeginBroadcastSession_Response_default_instance_;
    new (ptr) ::CBroadcast_BeginBroadcastSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_BeginBroadcastSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BeginBroadcastSession_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BeginBroadcastSession_Response}, {}};

static void InitDefaultsCBroadcast_EndBroadcastSession_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_EndBroadcastSession_Request_default_instance_;
    new (ptr) ::CBroadcast_EndBroadcastSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_EndBroadcastSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_EndBroadcastSession_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_EndBroadcastSession_Request}, {}};

static void InitDefaultsCBroadcast_EndBroadcastSession_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_EndBroadcastSession_Response_default_instance_;
    new (ptr) ::CBroadcast_EndBroadcastSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_EndBroadcastSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_EndBroadcastSession_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_EndBroadcastSession_Response}, {}};

static void InitDefaultsCBroadcast_StartBroadcastUpload_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_StartBroadcastUpload_Request_default_instance_;
    new (ptr) ::CBroadcast_StartBroadcastUpload_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_StartBroadcastUpload_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StartBroadcastUpload_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StartBroadcastUpload_Request}, {}};

static void InitDefaultsCBroadcast_StartBroadcastUpload_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_StartBroadcastUpload_Response_default_instance_;
    new (ptr) ::CBroadcast_StartBroadcastUpload_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_StartBroadcastUpload_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StartBroadcastUpload_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StartBroadcastUpload_Response}, {}};

static void InitDefaultsCBroadcast_NotifyBroadcastUploadStop_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
    new (ptr) ::CBroadcast_NotifyBroadcastUploadStop_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_NotifyBroadcastUploadStop_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_NotifyBroadcastUploadStop_Notification}, {}};

static void InitDefaultsCBroadcast_WatchBroadcast_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_WatchBroadcast_Request_default_instance_;
    new (ptr) ::CBroadcast_WatchBroadcast_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_WatchBroadcast_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WatchBroadcast_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WatchBroadcast_Request}, {}};

static void InitDefaultsCBroadcast_WatchBroadcast_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_WatchBroadcast_Response_default_instance_;
    new (ptr) ::CBroadcast_WatchBroadcast_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_WatchBroadcast_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WatchBroadcast_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WatchBroadcast_Response}, {}};

static void InitDefaultsCBroadcast_HeartbeatBroadcast_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
    new (ptr) ::CBroadcast_HeartbeatBroadcast_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_HeartbeatBroadcast_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_HeartbeatBroadcast_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_HeartbeatBroadcast_Notification}, {}};

static void InitDefaultsCBroadcast_StopWatchingBroadcast_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
    new (ptr) ::CBroadcast_StopWatchingBroadcast_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_StopWatchingBroadcast_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StopWatchingBroadcast_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StopWatchingBroadcast_Notification}, {}};

static void InitDefaultsCBroadcast_GetBroadcastStatus_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastStatus_Request_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastStatus_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastStatus_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastStatus_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastStatus_Request}, {}};

static void InitDefaultsCBroadcast_GetBroadcastStatus_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastStatus_Response_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastStatus_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastStatus_Response}, {}};

static void InitDefaultsCBroadcast_GetBroadcastThumbnail_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastThumbnail_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastThumbnail_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastThumbnail_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastThumbnail_Request}, {}};

static void InitDefaultsCBroadcast_GetBroadcastThumbnail_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastThumbnail_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastThumbnail_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastThumbnail_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastThumbnail_Response}, {}};

static void InitDefaultsCBroadcast_InviteToBroadcast_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_InviteToBroadcast_Request_default_instance_;
    new (ptr) ::CBroadcast_InviteToBroadcast_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_InviteToBroadcast_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_InviteToBroadcast_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_InviteToBroadcast_Request}, {}};

static void InitDefaultsCBroadcast_InviteToBroadcast_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_InviteToBroadcast_Response_default_instance_;
    new (ptr) ::CBroadcast_InviteToBroadcast_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_InviteToBroadcast_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_InviteToBroadcast_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_InviteToBroadcast_Response}, {}};

static void InitDefaultsCBroadcast_SendBroadcastStateToServer_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
    new (ptr) ::CBroadcast_SendBroadcastStateToServer_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_SendBroadcastStateToServer_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SendBroadcastStateToServer_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SendBroadcastStateToServer_Request}, {}};

static void InitDefaultsCBroadcast_SendBroadcastStateToServer_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
    new (ptr) ::CBroadcast_SendBroadcastStateToServer_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_SendBroadcastStateToServer_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SendBroadcastStateToServer_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SendBroadcastStateToServer_Response}, {}};

static void InitDefaultsCBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
    new (ptr) ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_NotifyBroadcastSessionHeartbeat_Notification}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatInfo_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastChatInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastChatInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatInfo_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatInfo_Request}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatInfo_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastChatInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastChatInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatInfo_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatInfo_Response}, {}};

static void InitDefaultsCBroadcast_PostChatMessage_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_PostChatMessage_Request_default_instance_;
    new (ptr) ::CBroadcast_PostChatMessage_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_PostChatMessage_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_PostChatMessage_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_PostChatMessage_Request}, {}};

static void InitDefaultsCBroadcast_PostChatMessage_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_PostChatMessage_Response_default_instance_;
    new (ptr) ::CBroadcast_PostChatMessage_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_PostChatMessage_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_PostChatMessage_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_PostChatMessage_Response}, {}};

static void InitDefaultsCBroadcast_MuteBroadcastChatUser_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
    new (ptr) ::CBroadcast_MuteBroadcastChatUser_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_MuteBroadcastChatUser_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_MuteBroadcastChatUser_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_MuteBroadcastChatUser_Request}, {}};

static void InitDefaultsCBroadcast_MuteBroadcastChatUser_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
    new (ptr) ::CBroadcast_MuteBroadcastChatUser_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_MuteBroadcastChatUser_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_MuteBroadcastChatUser_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_MuteBroadcastChatUser_Response}, {}};

static void InitDefaultsCBroadcast_RemoveUserChatText_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_RemoveUserChatText_Request_default_instance_;
    new (ptr) ::CBroadcast_RemoveUserChatText_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_RemoveUserChatText_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_RemoveUserChatText_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_RemoveUserChatText_Request}, {}};

static void InitDefaultsCBroadcast_RemoveUserChatText_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_RemoveUserChatText_Response_default_instance_;
    new (ptr) ::CBroadcast_RemoveUserChatText_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_RemoveUserChatText_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_RemoveUserChatText_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_RemoveUserChatText_Response}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatUserNames_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastChatUserNames_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastChatUserNames_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatUserNames_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatUserNames_Request}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response_PersonaName}, {}};

static void InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
    new (ptr) ::CBroadcast_GetBroadcastChatUserNames_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_GetBroadcastChatUserNames_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CBroadcast_GetBroadcastChatUserNames_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCBroadcast_GetBroadcastChatUserNames_Response}, {
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName.base,}};

static void InitDefaultsCBroadcast_BroadcastViewerState_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_BroadcastViewerState_Notification_default_instance_;
    new (ptr) ::CBroadcast_BroadcastViewerState_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_BroadcastViewerState_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BroadcastViewerState_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BroadcastViewerState_Notification}, {}};

static void InitDefaultsCBroadcast_WaitingBroadcastViewer_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
    new (ptr) ::CBroadcast_WaitingBroadcastViewer_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_WaitingBroadcastViewer_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_WaitingBroadcastViewer_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_WaitingBroadcastViewer_Notification}, {}};

static void InitDefaultsCBroadcast_StopBroadcastUpload_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_StopBroadcastUpload_Notification_default_instance_;
    new (ptr) ::CBroadcast_StopBroadcastUpload_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_StopBroadcastUpload_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_StopBroadcastUpload_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_StopBroadcastUpload_Notification}, {}};

static void InitDefaultsCBroadcast_SessionClosed_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_SessionClosed_Notification_default_instance_;
    new (ptr) ::CBroadcast_SessionClosed_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_SessionClosed_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SessionClosed_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SessionClosed_Notification}, {}};

static void InitDefaultsCBroadcast_ViewerBroadcastInvite_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
    new (ptr) ::CBroadcast_ViewerBroadcastInvite_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_ViewerBroadcastInvite_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_ViewerBroadcastInvite_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_ViewerBroadcastInvite_Notification}, {}};

static void InitDefaultsCBroadcast_BroadcastStatus_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_BroadcastStatus_Notification_default_instance_;
    new (ptr) ::CBroadcast_BroadcastStatus_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_BroadcastStatus_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_BroadcastStatus_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_BroadcastStatus_Notification}, {}};

static void InitDefaultsCBroadcast_SendThumbnailToRelay_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
    new (ptr) ::CBroadcast_SendThumbnailToRelay_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CBroadcast_SendThumbnailToRelay_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_SendThumbnailToRelay_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_SendThumbnailToRelay_Notification}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BeginBroadcastSession_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BeginBroadcastSession_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_EndBroadcastSession_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_EndBroadcastSession_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StartBroadcastUpload_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StartBroadcastUpload_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WatchBroadcast_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WatchBroadcast_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_HeartbeatBroadcast_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StopWatchingBroadcast_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastStatus_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastStatus_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastThumbnail_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastThumbnail_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_InviteToBroadcast_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_InviteToBroadcast_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SendBroadcastStateToServer_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SendBroadcastStateToServer_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatInfo_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatInfo_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_PostChatMessage_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_PostChatMessage_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_MuteBroadcastChatUser_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_MuteBroadcastChatUser_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_RemoveUserChatText_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_RemoveUserChatText_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatUserNames_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_GetBroadcastChatUserNames_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BroadcastViewerState_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_WaitingBroadcastViewer_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_StopBroadcastUpload_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SessionClosed_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_ViewerBroadcastInvite_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_BroadcastStatus_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_SendThumbnailToRelay_Notification.base);
}

::google::protobuf::Metadata file_level_metadata[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, client_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, rtmp_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, thumbnail_upload_),
  3,
  1,
  2,
  0,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, thumbnail_upload_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, thumbnail_upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, thumbnail_interval_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, heartbeat_interval_seconds_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Request, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, as_rtmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, delay_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, rtmp_token_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, upload_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, upload_relay_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, thumbnail_upload_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, thumbnail_interval_seconds_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, broadcast_relay_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, upload_result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, existing_broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, viewer_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, client_cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, watch_location_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, mpd_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, num_viewers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, is_rtmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, seconds_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, viewer_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, hls_m3u8_master_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, heartbeat_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, thumbnail_url_),
  12,
  0,
  4,
  5,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  11,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, viewer_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, representation_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, viewer_token_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, broadcast_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, num_viewers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_rtmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, seconds_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_publisher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, update_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_uploading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, duration_),
  2,
  0,
  3,
  4,
  6,
  5,
  7,
  1,
  9,
  8,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, broadcast_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, update_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, num_viewers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, approval_response_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Response, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, game_data_config_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, client_cell_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, view_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, view_url_template_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, instance_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, in_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, cooldown_time_seconds_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, user_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, muted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, user_steamid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, user_steamid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, persona_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response, persona_names_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WaitingBroadcastViewer_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WaitingBroadcastViewer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_WaitingBroadcastViewer_Notification, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, broadcast_relay_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, upload_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, too_many_poor_uploads_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SessionClosed_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SessionClosed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SessionClosed_Notification, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_ViewerBroadcastInvite_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_ViewerBroadcastInvite_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_ViewerBroadcastInvite_Notification, broadcaster_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, num_viewers_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_broadcast_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_height_),
  0,
  2,
  1,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::CBroadcast_BeginBroadcastSession_Request)},
  { 19, 29, sizeof(::CBroadcast_BeginBroadcastSession_Response)},
  { 34, 40, sizeof(::CBroadcast_EndBroadcastSession_Request)},
  { 41, 46, sizeof(::CBroadcast_EndBroadcastSession_Response)},
  { 46, 56, sizeof(::CBroadcast_StartBroadcastUpload_Request)},
  { 61, 71, sizeof(::CBroadcast_StartBroadcastUpload_Response)},
  { 76, 83, sizeof(::CBroadcast_NotifyBroadcastUploadStop_Notification)},
  { 85, 96, sizeof(::CBroadcast_WatchBroadcast_Request)},
  { 102, 120, sizeof(::CBroadcast_WatchBroadcast_Response)},
  { 133, 142, sizeof(::CBroadcast_HeartbeatBroadcast_Notification)},
  { 146, 154, sizeof(::CBroadcast_StopWatchingBroadcast_Notification)},
  { 157, 164, sizeof(::CBroadcast_GetBroadcastStatus_Request)},
  { 166, 182, sizeof(::CBroadcast_GetBroadcastStatus_Response)},
  { 193, 200, sizeof(::CBroadcast_GetBroadcastThumbnail_Request)},
  { 202, 210, sizeof(::CBroadcast_GetBroadcastThumbnail_Response)},
  { 213, 220, sizeof(::CBroadcast_InviteToBroadcast_Request)},
  { 222, 228, sizeof(::CBroadcast_InviteToBroadcast_Response)},
  { 229, 238, sizeof(::CBroadcast_SendBroadcastStateToServer_Request)},
  { 242, 247, sizeof(::CBroadcast_SendBroadcastStateToServer_Response)},
  { 247, 253, sizeof(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)},
  { 254, 263, sizeof(::CBroadcast_GetBroadcastChatInfo_Request)},
  { 267, 275, sizeof(::CBroadcast_GetBroadcastChatInfo_Response)},
  { 278, 286, sizeof(::CBroadcast_PostChatMessage_Request)},
  { 289, 298, sizeof(::CBroadcast_PostChatMessage_Response)},
  { 302, 310, sizeof(::CBroadcast_MuteBroadcastChatUser_Request)},
  { 313, 318, sizeof(::CBroadcast_MuteBroadcastChatUser_Response)},
  { 318, 325, sizeof(::CBroadcast_RemoveUserChatText_Request)},
  { 327, 332, sizeof(::CBroadcast_RemoveUserChatText_Response)},
  { 332, 339, sizeof(::CBroadcast_GetBroadcastChatUserNames_Request)},
  { 341, 348, sizeof(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName)},
  { 350, 356, sizeof(::CBroadcast_GetBroadcastChatUserNames_Response)},
  { 357, 364, sizeof(::CBroadcast_BroadcastViewerState_Notification)},
  { 366, 372, sizeof(::CBroadcast_WaitingBroadcastViewer_Notification)},
  { 373, 382, sizeof(::CBroadcast_StopBroadcastUpload_Notification)},
  { 386, 392, sizeof(::CBroadcast_SessionClosed_Notification)},
  { 393, 399, sizeof(::CBroadcast_ViewerBroadcastInvite_Notification)},
  { 400, 407, sizeof(::CBroadcast_BroadcastStatus_Notification)},
  { 409, 419, sizeof(::CBroadcast_SendThumbnailToRelay_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_BeginBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_BeginBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_EndBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_EndBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_StartBroadcastUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_StartBroadcastUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_WatchBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_WatchBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_HeartbeatBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_StopWatchingBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastThumbnail_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastThumbnail_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_InviteToBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_InviteToBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_SendBroadcastStateToServer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_SendBroadcastStateToServer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastChatInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastChatInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_PostChatMessage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_PostChatMessage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_MuteBroadcastChatUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_MuteBroadcastChatUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_RemoveUserChatText_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_RemoveUserChatText_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_BroadcastViewerState_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_StopBroadcastUpload_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_SessionClosed_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_BroadcastStatus_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CBroadcast_SendThumbnailToRelay_Notification_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_broadcast.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)steammessages_broadcast.steamclient.pr"
      "oto\032,steammessages_unified_base.steamcli"
      "ent.proto\"\267\001\n(CBroadcast_BeginBroadcastS"
      "ession_Request\022\022\n\npermission\030\001 \001(\005\022\016\n\006ga"
      "meid\030\002 \001(\004\022\032\n\022client_instance_id\030\003 \001(\004\022\r"
      "\n\005title\030\004 \001(\t\022\016\n\006cellid\030\005 \001(\r\022\022\n\nrtmp_to"
      "ken\030\006 \001(\004\022\030\n\020thumbnail_upload\030\007 \001(\010\"\234\003\n)"
      "CBroadcast_BeginBroadcastSession_Respons"
      "e\022\024\n\014broadcast_id\030\001 \001(\006\022P\n\030thumbnail_upl"
      "oad_address\030\002 \001(\tB.\202\265\030*Http address to u"
      "pload the thumbnail data.\022e\n\026thumbnail_u"
      "pload_token\030\003 \001(\tBE\202\265\030Atoken to authoriz"
      "e as broadcaster to upload content to th"
      "e relay.\022K\n\032thumbnail_interval_seconds\030\004"
      " \001(\rB\'\202\265\030#how many seconds between thumb"
      "nails\022S\n\032heartbeat_interval_seconds\030\005 \001("
      "\rB/\202\265\030+how many seconds between session "
      "heartbeats\">\n&CBroadcast_EndBroadcastSes"
      "sion_Request\022\024\n\014broadcast_id\030\001 \001(\006\")\n\'CB"
      "roadcast_EndBroadcastSession_Response\"\313\001"
      "\n\'CBroadcast_StartBroadcastUpload_Reques"
      "t\022\024\n\014broadcast_id\030\001 \001(\006\022\016\n\006cellid\030\002 \001(\r\022"
      "\017\n\007as_rtmp\030\003 \001(\010\022\025\n\rdelay_seconds\030\004 \001(\r\022"
      "R\n\nrtmp_token\030\005 \001(\004:\0010B;\202\265\0307Only set dur"
      "ing RTMP uploads; secret key from the us"
      "er.\"\267\001\n(CBroadcast_StartBroadcastUpload_"
      "Response\022\024\n\014upload_token\030\001 \001(\t\022\026\n\016upload"
      "_address\030\002 \001(\t\022\027\n\017upload_relay_id\030\003 \001(\006\022"
      " \n\030thumbnail_upload_address\030\004 \001(\t\022\"\n\032thu"
      "mbnail_interval_seconds\030\005 \001(\r\"f\n1CBroadc"
      "ast_NotifyBroadcastUploadStop_Notificati"
      "on\022\032\n\022broadcast_relay_id\030\001 \001(\006\022\025\n\rupload"
      "_result\030\002 \001(\r\"\211\003\n!CBroadcast_WatchBroadc"
      "ast_Request\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024broadc"
      "aster steamID.\022X\n\025existing_broadcast_id\030"
      "\002 \001(\006B9\202\265\0305broadcast session ID (optiona"
      "l, rejoin if specified).\022b\n\014viewer_token"
      "\030\003 \001(\006BL\202\265\030Hviewer token received from l"
      "ast WatchRequest call, from browser stor"
      "age.\022\021\n\tclient_ip\030\004 \001(\r\022\023\n\013client_cell\030\005"
      " \001(\r\022S\n\016watch_location\030\006 \001(\0162\030.EBroadcas"
      "tWatchLocation:!k_EBroadcastWatchLocatio"
      "n_Invalid\"\320\006\n\"CBroadcast_WatchBroadcast_"
      "Response\022[\n\010response\030\001 \001(\01622.CBroadcast_"
      "WatchBroadcast_Response.EWatchResponse:\025"
      "k_EWatchResponseReady\022\017\n\007mpd_url\030\002 \001(\t\022\024"
      "\n\014broadcast_id\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\004\022\r\n\005"
      "title\030\005 \001(\t\022\023\n\013num_viewers\030\006 \001(\r\022\022\n\nperm"
      "ission\030\007 \001(\005\022\017\n\007is_rtmp\030\010 \001(\010\022\025\n\rseconds"
      "_delay\030\t \001(\005\022\024\n\014viewer_token\030\n \001(\006\022\033\n\023hl"
      "s_m3u8_master_url\030\013 \001(\t\022\032\n\022heartbeat_int"
      "erval\030\014 \001(\005\022\025\n\rthumbnail_url\030\r \001(\t\"\317\003\n\016E"
      "WatchResponse\022\031\n\025k_EWatchResponseReady\020\001"
      "\022 \n\034k_EWatchResponseNotAvailable\020\002\022&\n\"k_"
      "EWatchResponseWaitingForApproval\020\003\022#\n\037k_"
      "EWatchResponseWaitingForStart\020\004\022\"\n\036k_EWa"
      "tchResponseInvalidSession\020\005\022%\n!k_EWatchR"
      "esponseTooManyBroadcasts\020\006\022\'\n#k_EWatchRe"
      "sponseWaitingForReconnect\020\007\022&\n\"k_EWatchR"
      "esponseSystemNotSupported\020\010\022\"\n\036k_EWatchR"
      "esponseUserRestricted\020\t\022#\n\037k_EWatchRespo"
      "nseClientOutOfDate\020\n\022%\n!k_EWatchResponse"
      "PoorUploadQuality\020\013\022\'\n#k_EWatchResponseM"
      "issingSubscription\020\014\"\256\002\n*CBroadcast_Hear"
      "tbeatBroadcast_Notification\022)\n\007steamid\030\001"
      " \001(\006B\030\202\265\030\024broadcaster steamID.\022/\n\014broadc"
      "ast_id\030\002 \001(\006B\031\202\265\030\025broadcast session ID.\022"
      "b\n\014viewer_token\030\003 \001(\006BL\202\265\030Hviewer token "
      "received from last WatchRequest call, fr"
      "om browser storage.\022@\n\016representation\030\004 "
      "\001(\rB(\202\265\030$video stream representation wat"
      "ching\"\357\001\n-CBroadcast_StopWatchingBroadca"
      "st_Notification\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024br"
      "oadcaster steamID.\022/\n\014broadcast_id\030\002 \001(\006"
      "B\031\202\265\030\025broadcast session ID.\022b\n\014viewer_to"
      "ken\030\003 \001(\006BL\202\265\030Hviewer token received fro"
      "m last WatchRequest call, from browser s"
      "torage.\"\260\001\n%CBroadcast_GetBroadcastStatu"
      "s_Request\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024broadcas"
      "ter steamID.\022\\\n\014broadcast_id\030\002 \001(\006BF\202\265\030B"
      "broadcast session ID to proof that user "
      "is allowed to see details.\"\206\002\n&CBroadcas"
      "t_GetBroadcastStatus_Response\022\016\n\006gameid\030"
      "\001 \001(\004\022\r\n\005title\030\002 \001(\t\022\023\n\013num_viewers\030\003 \001("
      "\r\022\022\n\npermission\030\004 \001(\005\022\017\n\007is_rtmp\030\005 \001(\010\022\025"
      "\n\rseconds_delay\030\006 \001(\005\022\024\n\014is_publisher\030\007 "
      "\001(\010\022\025\n\rthumbnail_url\030\010 \001(\t\022\027\n\017update_int"
      "erval\030\t \001(\005\022\024\n\014is_uploading\030\n \001(\010\022\020\n\010dur"
      "ation\030\013 \001(\r\"Q\n(CBroadcast_GetBroadcastTh"
      "umbnail_Request\022\017\n\007steamid\030\001 \001(\006\022\024\n\014broa"
      "dcast_id\030\002 \001(\006\"p\n)CBroadcast_GetBroadcas"
      "tThumbnail_Response\022\025\n\rthumbnail_url\030\001 \001"
      "(\t\022\027\n\017update_interval\030\002 \001(\005\022\023\n\013num_viewe"
      "rs\030\003 \001(\005\"R\n$CBroadcast_InviteToBroadcast"
      "_Request\022\017\n\007steamid\030\001 \001(\006\022\031\n\021approval_re"
      "sponse\030\002 \001(\010\"8\n%CBroadcast_InviteToBroad"
      "cast_Response\022\017\n\007success\030\001 \001(\010\"|\n-CBroad"
      "cast_SendBroadcastStateToServer_Request\022"
      "\022\n\npermission\030\001 \001(\005\022\016\n\006gameid\030\002 \001(\004\022\r\n\005t"
      "itle\030\003 \001(\t\022\030\n\020game_data_config\030\004 \001(\t\"0\n."
      "CBroadcast_SendBroadcastStateToServer_Re"
      "sponse\"O\n7CBroadcast_NotifyBroadcastSess"
      "ionHeartbeat_Notification\022\024\n\014broadcast_i"
      "d\030\001 \001(\006\"x\n\'CBroadcast_GetBroadcastChatIn"
      "fo_Request\022\017\n\007steamid\030\001 \001(\006\022\024\n\014broadcast"
      "_id\030\002 \001(\006\022\021\n\tclient_ip\030\003 \001(\r\022\023\n\013client_c"
      "ell\030\004 \001(\r\"h\n(CBroadcast_GetBroadcastChat"
      "Info_Response\022\017\n\007chat_id\030\001 \001(\006\022\020\n\010view_u"
      "rl\030\002 \001(\t\022\031\n\021view_url_template\030\003 \001(\t\"[\n\"C"
      "Broadcast_PostChatMessage_Request\022\017\n\007cha"
      "t_id\030\001 \001(\006\022\017\n\007message\030\002 \001(\t\022\023\n\013instance_"
      "id\030\003 \001(\r\"{\n#CBroadcast_PostChatMessage_R"
      "esponse\022\024\n\014persona_name\030\001 \001(\t\022\017\n\007in_game"
      "\030\002 \001(\010\022\016\n\006result\030\003 \001(\005\022\035\n\025cooldown_time_"
      "seconds\030\004 \001(\005\"`\n(CBroadcast_MuteBroadcas"
      "tChatUser_Request\022\017\n\007chat_id\030\001 \001(\006\022\024\n\014us"
      "er_steamid\030\002 \001(\006\022\r\n\005muted\030\003 \001(\010\"+\n)CBroa"
      "dcast_MuteBroadcastChatUser_Response\"N\n%"
      "CBroadcast_RemoveUserChatText_Request\022\017\n"
      "\007chat_id\030\001 \001(\006\022\024\n\014user_steamid\030\002 \001(\006\"(\n&"
      "CBroadcast_RemoveUserChatText_Response\"U"
      "\n,CBroadcast_GetBroadcastChatUserNames_R"
      "equest\022\017\n\007chat_id\030\001 \001(\006\022\024\n\014user_steamid\030"
      "\002 \003(\006\"\264\001\n-CBroadcast_GetBroadcastChatUse"
      "rNames_Response\022Q\n\rpersona_names\030\001 \003(\0132:"
      ".CBroadcast_GetBroadcastChatUserNames_Re"
      "sponse.PersonaName\0320\n\013PersonaName\022\020\n\010ste"
      "am_id\030\001 \001(\006\022\017\n\007persona\030\002 \001(\t\"\370\001\n,CBroadc"
      "ast_BroadcastViewerState_Notification\022\017\n"
      "\007steamid\030\001 \001(\006\022a\n\005state\030\002 \001(\0162:.CBroadca"
      "st_BroadcastViewerState_Notification.EVi"
      "ewerState:\026k_EViewerNeedsApproval\"T\n\014EVi"
      "ewerState\022\032\n\026k_EViewerNeedsApproval\020\001\022\025\n"
      "\021k_EViewerWatching\020\002\022\021\n\rk_EViewerLeft\020\003\""
      "F\n.CBroadcast_WaitingBroadcastViewer_Not"
      "ification\022\024\n\014broadcast_id\030\001 \001(\006\"\225\001\n+CBro"
      "adcast_StopBroadcastUpload_Notification\022"
      "\024\n\014broadcast_id\030\001 \001(\006\022\032\n\022broadcast_relay"
      "_id\030\002 \001(\006\022\025\n\rupload_result\030\003 \001(\r\022\035\n\025too_"
      "many_poor_uploads\030\004 \001(\010\"=\n%CBroadcast_Se"
      "ssionClosed_Notification\022\024\n\014broadcast_id"
      "\030\001 \001(\006\"L\n-CBroadcast_ViewerBroadcastInvi"
      "te_Notification\022\033\n\023broadcaster_steamid\030\001"
      " \001(\006\"T\n\'CBroadcast_BroadcastStatus_Notif"
      "ication\022\024\n\014broadcast_id\030\001 \001(\006\022\023\n\013num_vie"
      "wers\030\002 \001(\005\"\301\001\n,CBroadcast_SendThumbnailT"
      "oRelay_Notification\022\036\n\026thumbnail_upload_"
      "token\030\001 \001(\t\022&\n\036thumbnail_broadcast_sessi"
      "on_id\030\002 \001(\006\022\026\n\016thumbnail_data\030\003 \001(\014\022\027\n\017t"
      "humbnail_width\030\004 \001(\r\022\030\n\020thumbnail_height"
      "\030\005 \001(\r*\363\002\n\027EBroadcastWatchLocation\022%\n!k_"
      "EBroadcastWatchLocation_Invalid\020\000\022)\n%k_E"
      "BroadcastWatchLocation_SteamTV_Tab\020\001\0220\n,"
      "k_EBroadcastWatchLocation_SteamTV_WatchP"
      "arty\020\002\022&\n\"k_EBroadcastWatchLocation_Chat"
      "_Tab\020\003\022-\n)k_EBroadcastWatchLocation_Chat"
      "_WatchParty\020\004\022+\n\'k_EBroadcastWatchLocati"
      "on_CommunityPage\020\005\022*\n&k_EBroadcastWatchL"
      "ocation_StoreAppPage\020\006\022$\n k_EBroadcastWa"
      "tchLocation_InGame\020\0072\303\026\n\tBroadcast\022\355\001\n\025B"
      "eginBroadcastSession\022).CBroadcast_BeginB"
      "roadcastSession_Request\032*.CBroadcast_Beg"
      "inBroadcastSession_Response\"}\202\265\030yRequest"
      " from client to directory to begin a bro"
      "adcast session. No data being sent to re"
      "lay; just available for broadcast.\022\272\001\n\023E"
      "ndBroadcastSession\022\'.CBroadcast_EndBroad"
      "castSession_Request\032(.CBroadcast_EndBroa"
      "dcastSession_Response\"P\202\265\030LRequest from "
      "client to stop a broadcast session. Any "
      "uploads will terminate.\022\254\001\n\024StartBroadca"
      "stUpload\022(.CBroadcast_StartBroadcastUplo"
      "ad_Request\032).CBroadcast_StartBroadcastUp"
      "load_Response\"\?\202\265\030;Request from client t"
      "o begin sending video for a broadcast.\022\231"
      "\001\n\031NotifyBroadcastUploadStop\0222.CBroadcas"
      "t_NotifyBroadcastUploadStop_Notification"
      "\032\013.NoResponse\";\202\265\0307Tells directory that "
      "client stopped uploading broadcast\022\207\001\n\016W"
      "atchBroadcast\022\".CBroadcast_WatchBroadcas"
      "t_Request\032#.CBroadcast_WatchBroadcast_Re"
      "sponse\",\202\265\030(Request from viewer to watch"
      " a broadcast\022\201\001\n\022HeartbeatBroadcast\022+.CB"
      "roadcast_HeartbeatBroadcast_Notification"
      "\032\013.NoResponse\"1\202\265\030-Notify directory that"
      " user is still watching.\022\301\001\n\025StopWatchin"
      "gBroadcast\022..CBroadcast_StopWatchingBroa"
      "dcast_Notification\032\013.NoResponse\"k\202\265\030gReq"
      "uest to immediately stop watching a broa"
      "dcast. Optional Method, if not called, v"
      "iewer will time out.\022\226\001\n\022GetBroadcastSta"
      "tus\022&.CBroadcast_GetBroadcastStatus_Requ"
      "est\032\'.CBroadcast_GetBroadcastStatus_Resp"
      "onse\"/\202\265\030+Request from viewer about broa"
      "dcast details\022\227\001\n\025GetBroadcastThumbnail\022"
      ").CBroadcast_GetBroadcastThumbnail_Reque"
      "st\032*.CBroadcast_GetBroadcastThumbnail_Re"
      "sponse\"\'\202\265\030#Request thumbnail URL for br"
      "oadcast\022\242\001\n\021InviteToBroadcast\022%.CBroadca"
      "st_InviteToBroadcast_Request\032&.CBroadcas"
      "t_InviteToBroadcast_Response\">\202\265\030:Invite"
      "s another steam user to watch the caller"
      "\'s broadcast\022\310\001\n\032SendBroadcastStateToSer"
      "ver\022..CBroadcast_SendBroadcastStateToSer"
      "ver_Request\032/.CBroadcast_SendBroadcastSt"
      "ateToServer_Response\"I\202\265\030ESends users cu"
      "rrent broadcast state (permissions, game"
      ") to the server\022\242\001\n\037NotifyBroadcastSessi"
      "onHeartbeat\0228.CBroadcast_NotifyBroadcast"
      "SessionHeartbeat_Notification\032\013.NoRespon"
      "se\"8\202\265\0304Tells directory broadcast sessio"
      "n is still available\022\224\001\n\024GetBroadcastCha"
      "tInfo\022(.CBroadcast_GetBroadcastChatInfo_"
      "Request\032).CBroadcast_GetBroadcastChatInf"
      "o_Response\"\'\202\265\030#Gets chat room info for "
      "a broadcast\022\212\001\n\017PostChatMessage\022#.CBroad"
      "cast_PostChatMessage_Request\032$.CBroadcas"
      "t_PostChatMessage_Response\",\202\265\030(Post cha"
      "t message to specified chat room\022\226\001\n\025Mut"
      "eBroadcastChatUser\022).CBroadcast_MuteBroa"
      "dcastChatUser_Request\032*.CBroadcast_MuteB"
      "roadcastChatUser_Response\"&\202\265\030\"Mute a us"
      "er in your broadcast chat\022\224\001\n\022RemoveUser"
      "ChatText\022&.CBroadcast_RemoveUserChatText"
      "_Request\032\'.CBroadcast_RemoveUserChatText"
      "_Response\"-\202\265\030)Tell all viewers to remov"
      "e user chat text\022\243\001\n\031GetBroadcastChatUse"
      "rNames\022-.CBroadcast_GetBroadcastChatUser"
      "Names_Request\032..CBroadcast_GetBroadcastC"
      "hatUserNames_Response\"\'\202\265\030#Get names for"
      " list of users in chat\032*\202\265\030&Methods for "
      "Steam broadcast operations2\334\t\n\017Broadcast"
      "Client\022\241\001\n\032NotifyBroadcastViewerState\022-."
      "CBroadcast_BroadcastViewerState_Notifica"
      "tion\032\013.NoResponse\"G\202\265\030CNotification from"
      " server to client that a viewers state h"
      "as changed\022\275\001\n\034NotifyWaitingBroadcastVie"
      "wer\022/.CBroadcast_WaitingBroadcastViewer_"
      "Notification\032\013.NoResponse\"_\202\265\030[Notificat"
      "ion from server to client one or more us"
      "ers is waiting for user to start broadca"
      "st\022\326\001\n\031NotifyStopBroadcastUpload\022,.CBroa"
      "dcast_StopBroadcastUpload_Notification\032\013"
      ".NoResponse\"~\202\265\030zNotification from serve"
      "r to client telling it to stop uploading"
      " when the last viewer has disconnected f"
      "rom their broadcast\022\265\001\n\023NotifySessionClo"
      "sed\022&.CBroadcast_SessionClosed_Notificat"
      "ion\032\013.NoResponse\"i\202\265\030eNotification from "
      "server to client telling it a session ha"
      "s been closed unexpectedly by the direct"
      "ory\022\303\001\n\033NotifyViewerBroadcastInvite\022..CB"
      "roadcast_ViewerBroadcastInvite_Notificat"
      "ion\032\013.NoResponse\"g\202\265\030cNotification from "
      "server to client that a broadcaster is i"
      "nviting a viewer to watch their broadcas"
      "t\022\225\001\n\025NotifyBroadcastStatus\022(.CBroadcast"
      "_BroadcastStatus_Notification\032\013.NoRespon"
      "se\"E\202\265\030ANotification from server to clie"
      "nt about current broadcast status\022p\n\024Sen"
      "dThumbnailToRelay\022-.CBroadcast_SendThumb"
      "nailToRelay_Notification\032\013.NoResponse\"\034\202"
      "\265\030\030Send thumbnails to relay\032\004\300\265\030\002B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_broadcast.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto
const ::google::protobuf::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_enum_descriptors[0];
}
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseReady;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseNotAvailable;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForApproval;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForStart;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseInvalidSession;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseTooManyBroadcasts;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForReconnect;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseSystemNotSupported;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseUserRestricted;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseClientOutOfDate;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponsePoorUploadQuality;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseMissingSubscription;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MIN;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MAX;
const int CBroadcast_WatchBroadcast_Response::EWatchResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_enum_descriptors[1];
}
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerNeedsApproval;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerWatching;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerLeft;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MIN;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MAX;
const int CBroadcast_BroadcastViewerState_Notification::EViewerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EBroadcastWatchLocation_descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_enum_descriptors[2];
}
bool EBroadcastWatchLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CBroadcast_BeginBroadcastSession_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BeginBroadcastSession_Request::kPermissionFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kGameidFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kClientInstanceIdFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kTitleFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kCellidFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kRtmpTokenFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kThumbnailUploadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BeginBroadcastSession_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_BeginBroadcastSession_Request)
}
CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_upload_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BeginBroadcastSession_Request)
}

void CBroadcast_BeginBroadcastSession_Request::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_upload_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
}

CBroadcast_BeginBroadcastSession_Request::~CBroadcast_BeginBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_BeginBroadcastSession_Request)
  SharedDtor();
}

void CBroadcast_BeginBroadcastSession_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_BeginBroadcastSession_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BeginBroadcastSession_Request& CBroadcast_BeginBroadcastSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BeginBroadcastSession_Request.base);
  return *internal_default_instance();
}


void CBroadcast_BeginBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_upload_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BeginBroadcastSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_BeginBroadcastSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_client_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_BeginBroadcastSession_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rtmp_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rtmp_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtmp_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool thumbnail_upload = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_thumbnail_upload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thumbnail_upload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_BeginBroadcastSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_BeginBroadcastSession_Request)
  return false;
#undef DO_
}

void CBroadcast_BeginBroadcastSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->permission(), output);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gameid(), output);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->client_instance_id(), output);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cellid(), output);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rtmp_token(), output);
  }

  // optional bool thumbnail_upload = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->thumbnail_upload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_BeginBroadcastSession_Request)
}

::google::protobuf::uint8* CBroadcast_BeginBroadcastSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gameid(), target);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->client_instance_id(), target);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cellid(), target);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rtmp_token(), target);
  }

  // optional bool thumbnail_upload = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->thumbnail_upload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BeginBroadcastSession_Request)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BeginBroadcastSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint64 client_instance_id = 3;
    if (has_client_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional int32 permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional uint32 cellid = 5;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional uint64 rtmp_token = 6;
    if (has_rtmp_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtmp_token());
    }

    // optional bool thumbnail_upload = 7;
    if (has_thumbnail_upload()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BeginBroadcastSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BeginBroadcastSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_BeginBroadcastSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_BeginBroadcastSession_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000010u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtmp_token_ = from.rtmp_token_;
    }
    if (cached_has_bits & 0x00000040u) {
      thumbnail_upload_ = from.thumbnail_upload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Request::Swap(CBroadcast_BeginBroadcastSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BeginBroadcastSession_Request::InternalSwap(CBroadcast_BeginBroadcastSession_Request* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(client_instance_id_, other->client_instance_id_);
  swap(permission_, other->permission_);
  swap(cellid_, other->cellid_);
  swap(rtmp_token_, other->rtmp_token_);
  swap(thumbnail_upload_, other->thumbnail_upload_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_BeginBroadcastSession_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_BeginBroadcastSession_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BeginBroadcastSession_Response::kBroadcastIdFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kThumbnailUploadAddressFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kThumbnailUploadTokenFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kThumbnailIntervalSecondsFieldNumber;
const int CBroadcast_BeginBroadcastSession_Response::kHeartbeatIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BeginBroadcastSession_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_BeginBroadcastSession_Response)
}
CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_address()) {
    thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
  }
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_token()) {
    thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BeginBroadcastSession_Response)
}

void CBroadcast_BeginBroadcastSession_Response::SharedCtor() {
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
}

CBroadcast_BeginBroadcastSession_Response::~CBroadcast_BeginBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_BeginBroadcastSession_Response)
  SharedDtor();
}

void CBroadcast_BeginBroadcastSession_Response::SharedDtor() {
  thumbnail_upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_BeginBroadcastSession_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BeginBroadcastSession_Response& CBroadcast_BeginBroadcastSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BeginBroadcastSession_Response.base);
  return *internal_default_instance();
}


void CBroadcast_BeginBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_upload_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_upload_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BeginBroadcastSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_BeginBroadcastSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_thumbnail_interval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_heartbeat_interval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_BeginBroadcastSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_BeginBroadcastSession_Response)
  return false;
#undef DO_
}

void CBroadcast_BeginBroadcastSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thumbnail_upload_address(), output);
  }

  // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->thumbnail_upload_token(), output);
  }

  // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbnail_interval_seconds(), output);
  }

  // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heartbeat_interval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_BeginBroadcastSession_Response)
}

::google::protobuf::uint8* CBroadcast_BeginBroadcastSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thumbnail_upload_address(), target);
  }

  // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thumbnail_upload_token(), target);
  }

  // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbnail_interval_seconds(), target);
  }

  // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heartbeat_interval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BeginBroadcastSession_Response)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BeginBroadcastSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
    if (has_thumbnail_upload_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_address());
    }

    // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
    if (has_thumbnail_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_token());
    }

    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
    if (has_thumbnail_interval_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_interval_seconds());
    }

    // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
    if (has_heartbeat_interval_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BeginBroadcastSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BeginBroadcastSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_BeginBroadcastSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_BeginBroadcastSession_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_thumbnail_upload_address();
      thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_thumbnail_upload_token();
      thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_interval_seconds_ = from.thumbnail_interval_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      heartbeat_interval_seconds_ = from.heartbeat_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Response::Swap(CBroadcast_BeginBroadcastSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BeginBroadcastSession_Response::InternalSwap(CBroadcast_BeginBroadcastSession_Response* other) {
  using std::swap;
  thumbnail_upload_address_.Swap(&other->thumbnail_upload_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_upload_token_.Swap(&other->thumbnail_upload_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_id_, other->broadcast_id_);
  swap(thumbnail_interval_seconds_, other->thumbnail_interval_seconds_);
  swap(heartbeat_interval_seconds_, other->heartbeat_interval_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_BeginBroadcastSession_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_EndBroadcastSession_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_EndBroadcastSession_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_EndBroadcastSession_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_EndBroadcastSession_Request)
}
CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_EndBroadcastSession_Request)
}

void CBroadcast_EndBroadcastSession_Request::SharedCtor() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_EndBroadcastSession_Request::~CBroadcast_EndBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_EndBroadcastSession_Request)
  SharedDtor();
}

void CBroadcast_EndBroadcastSession_Request::SharedDtor() {
}

void CBroadcast_EndBroadcastSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_EndBroadcastSession_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_EndBroadcastSession_Request& CBroadcast_EndBroadcastSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_EndBroadcastSession_Request.base);
  return *internal_default_instance();
}


void CBroadcast_EndBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_EndBroadcastSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_EndBroadcastSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_EndBroadcastSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_EndBroadcastSession_Request)
  return false;
#undef DO_
}

void CBroadcast_EndBroadcastSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_EndBroadcastSession_Request)
}

::google::protobuf::uint8* CBroadcast_EndBroadcastSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_EndBroadcastSession_Request)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_EndBroadcastSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_EndBroadcastSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_EndBroadcastSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_EndBroadcastSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_EndBroadcastSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_EndBroadcastSession_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_EndBroadcastSession_Request::MergeFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Request::Swap(CBroadcast_EndBroadcastSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_EndBroadcastSession_Request::InternalSwap(CBroadcast_EndBroadcastSession_Request* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_EndBroadcastSession_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_EndBroadcastSession_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_EndBroadcastSession_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_EndBroadcastSession_Response)
}
CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_EndBroadcastSession_Response)
}

void CBroadcast_EndBroadcastSession_Response::SharedCtor() {
}

CBroadcast_EndBroadcastSession_Response::~CBroadcast_EndBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_EndBroadcastSession_Response)
  SharedDtor();
}

void CBroadcast_EndBroadcastSession_Response::SharedDtor() {
}

void CBroadcast_EndBroadcastSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_EndBroadcastSession_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_EndBroadcastSession_Response& CBroadcast_EndBroadcastSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_EndBroadcastSession_Response.base);
  return *internal_default_instance();
}


void CBroadcast_EndBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_EndBroadcastSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_EndBroadcastSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_EndBroadcastSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_EndBroadcastSession_Response)
  return false;
#undef DO_
}

void CBroadcast_EndBroadcastSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_EndBroadcastSession_Response)
}

::google::protobuf::uint8* CBroadcast_EndBroadcastSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_EndBroadcastSession_Response)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_EndBroadcastSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_EndBroadcastSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_EndBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_EndBroadcastSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_EndBroadcastSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_EndBroadcastSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_EndBroadcastSession_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_EndBroadcastSession_Response::MergeFrom(const CBroadcast_EndBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_EndBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_EndBroadcastSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_EndBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_EndBroadcastSession_Response::CopyFrom(const CBroadcast_EndBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_EndBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Response::Swap(CBroadcast_EndBroadcastSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_EndBroadcastSession_Response::InternalSwap(CBroadcast_EndBroadcastSession_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_EndBroadcastSession_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StartBroadcastUpload_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StartBroadcastUpload_Request::kBroadcastIdFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kCellidFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kAsRtmpFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kDelaySecondsFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kRtmpTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StartBroadcastUpload_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_StartBroadcastUpload_Request)
}
CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StartBroadcastUpload_Request)
}

void CBroadcast_StartBroadcastUpload_Request::SharedCtor() {
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_seconds_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(delay_seconds_));
}

CBroadcast_StartBroadcastUpload_Request::~CBroadcast_StartBroadcastUpload_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_StartBroadcastUpload_Request)
  SharedDtor();
}

void CBroadcast_StartBroadcastUpload_Request::SharedDtor() {
}

void CBroadcast_StartBroadcastUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_StartBroadcastUpload_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StartBroadcastUpload_Request& CBroadcast_StartBroadcastUpload_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StartBroadcastUpload_Request.base);
  return *internal_default_instance();
}


void CBroadcast_StartBroadcastUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_seconds_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StartBroadcastUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_StartBroadcastUpload_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_rtmp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_as_rtmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_delay_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rtmp_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtmp_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_StartBroadcastUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_StartBroadcastUpload_Request)
  return false;
#undef DO_
}

void CBroadcast_StartBroadcastUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->as_rtmp(), output);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_seconds(), output);
  }

  // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rtmp_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_StartBroadcastUpload_Request)
}

::google::protobuf::uint8* CBroadcast_StartBroadcastUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->as_rtmp(), target);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_seconds(), target);
  }

  // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rtmp_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StartBroadcastUpload_Request)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StartBroadcastUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional bool as_rtmp = 3;
    if (has_as_rtmp()) {
      total_size += 1 + 1;
    }

    // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
    if (has_rtmp_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtmp_token());
    }

    // optional uint32 delay_seconds = 4;
    if (has_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StartBroadcastUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StartBroadcastUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_StartBroadcastUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_StartBroadcastUpload_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000004u) {
      as_rtmp_ = from.as_rtmp_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtmp_token_ = from.rtmp_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      delay_seconds_ = from.delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Request::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Request::Swap(CBroadcast_StartBroadcastUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StartBroadcastUpload_Request::InternalSwap(CBroadcast_StartBroadcastUpload_Request* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(cellid_, other->cellid_);
  swap(as_rtmp_, other->as_rtmp_);
  swap(rtmp_token_, other->rtmp_token_);
  swap(delay_seconds_, other->delay_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_StartBroadcastUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StartBroadcastUpload_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StartBroadcastUpload_Response::kUploadTokenFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kUploadAddressFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kUploadRelayIdFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kThumbnailUploadAddressFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kThumbnailIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StartBroadcastUpload_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_StartBroadcastUpload_Response)
}
CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_token()) {
    upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_token_);
  }
  upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_address()) {
    upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_address_);
  }
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_address()) {
    thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
  }
  ::memcpy(&upload_relay_id_, &from.upload_relay_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_interval_seconds_) -
    reinterpret_cast<char*>(&upload_relay_id_)) + sizeof(thumbnail_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StartBroadcastUpload_Response)
}

void CBroadcast_StartBroadcastUpload_Response::SharedCtor() {
  upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upload_relay_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_interval_seconds_) -
      reinterpret_cast<char*>(&upload_relay_id_)) + sizeof(thumbnail_interval_seconds_));
}

CBroadcast_StartBroadcastUpload_Response::~CBroadcast_StartBroadcastUpload_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_StartBroadcastUpload_Response)
  SharedDtor();
}

void CBroadcast_StartBroadcastUpload_Response::SharedDtor() {
  upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_StartBroadcastUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_StartBroadcastUpload_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StartBroadcastUpload_Response& CBroadcast_StartBroadcastUpload_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StartBroadcastUpload_Response.base);
  return *internal_default_instance();
}


void CBroadcast_StartBroadcastUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      upload_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnail_upload_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&upload_relay_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_interval_seconds_) -
        reinterpret_cast<char*>(&upload_relay_id_)) + sizeof(thumbnail_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StartBroadcastUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_StartBroadcastUpload_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_token().data(), static_cast<int>(this->upload_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_StartBroadcastUpload_Response.upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string upload_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_address().data(), static_cast<int>(this->upload_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_StartBroadcastUpload_Response.upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 upload_relay_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_upload_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &upload_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_upload_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_interval_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_thumbnail_interval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_StartBroadcastUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_StartBroadcastUpload_Response)
  return false;
#undef DO_
}

void CBroadcast_StartBroadcastUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_token().data(), static_cast<int>(this->upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->upload_token(), output);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_address().data(), static_cast<int>(this->upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->upload_address(), output);
  }

  // optional fixed64 upload_relay_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->upload_relay_id(), output);
  }

  // optional string thumbnail_upload_address = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thumbnail_upload_address(), output);
  }

  // optional uint32 thumbnail_interval_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thumbnail_interval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_StartBroadcastUpload_Response)
}

::google::protobuf::uint8* CBroadcast_StartBroadcastUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_token().data(), static_cast<int>(this->upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->upload_token(), target);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_address().data(), static_cast<int>(this->upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->upload_address(), target);
  }

  // optional fixed64 upload_relay_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->upload_relay_id(), target);
  }

  // optional string thumbnail_upload_address = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_address().data(), static_cast<int>(this->thumbnail_upload_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.thumbnail_upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->thumbnail_upload_address(), target);
  }

  // optional uint32 thumbnail_interval_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thumbnail_interval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StartBroadcastUpload_Response)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StartBroadcastUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string upload_token = 1;
    if (has_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_token());
    }

    // optional string upload_address = 2;
    if (has_upload_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_address());
    }

    // optional string thumbnail_upload_address = 4;
    if (has_thumbnail_upload_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_address());
    }

    // optional fixed64 upload_relay_id = 3;
    if (has_upload_relay_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_interval_seconds = 5;
    if (has_thumbnail_interval_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_interval_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StartBroadcastUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StartBroadcastUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_StartBroadcastUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_StartBroadcastUpload_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_upload_token();
      upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_upload_address();
      upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_thumbnail_upload_address();
      thumbnail_upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_address_);
    }
    if (cached_has_bits & 0x00000008u) {
      upload_relay_id_ = from.upload_relay_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_interval_seconds_ = from.thumbnail_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Response::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Response::Swap(CBroadcast_StartBroadcastUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StartBroadcastUpload_Response::InternalSwap(CBroadcast_StartBroadcastUpload_Response* other) {
  using std::swap;
  upload_token_.Swap(&other->upload_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  upload_address_.Swap(&other->upload_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_upload_address_.Swap(&other->thumbnail_upload_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upload_relay_id_, other->upload_relay_id_);
  swap(thumbnail_interval_seconds_, other->thumbnail_interval_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_StartBroadcastUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_NotifyBroadcastUploadStop_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_NotifyBroadcastUploadStop_Notification::kBroadcastRelayIdFieldNumber;
const int CBroadcast_NotifyBroadcastUploadStop_Notification::kUploadResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_NotifyBroadcastUploadStop_Notification)
}
CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_relay_id_, &from.broadcast_relay_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&broadcast_relay_id_)) + sizeof(upload_result_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_NotifyBroadcastUploadStop_Notification)
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedCtor() {
  ::memset(&broadcast_relay_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_result_) -
      reinterpret_cast<char*>(&broadcast_relay_id_)) + sizeof(upload_result_));
}

CBroadcast_NotifyBroadcastUploadStop_Notification::~CBroadcast_NotifyBroadcastUploadStop_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_NotifyBroadcastUploadStop_Notification)
  SharedDtor();
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedDtor() {
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_NotifyBroadcastUploadStop_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_NotifyBroadcastUploadStop_Notification& CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_NotifyBroadcastUploadStop_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_NotifyBroadcastUploadStop_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&broadcast_relay_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_result_) -
        reinterpret_cast<char*>(&broadcast_relay_id_)) + sizeof(upload_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_NotifyBroadcastUploadStop_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_relay_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_upload_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_NotifyBroadcastUploadStop_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_NotifyBroadcastUploadStop_Notification)
  return false;
#undef DO_
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_relay_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_relay_id(), output);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upload_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_NotifyBroadcastUploadStop_Notification)
}

::google::protobuf::uint8* CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_relay_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_relay_id(), target);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upload_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_NotifyBroadcastUploadStop_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastUploadStop_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 broadcast_relay_id = 1;
    if (has_broadcast_relay_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 2;
    if (has_upload_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_NotifyBroadcastUploadStop_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_NotifyBroadcastUploadStop_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_NotifyBroadcastUploadStop_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_NotifyBroadcastUploadStop_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_relay_id_ = from.broadcast_relay_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      upload_result_ = from.upload_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastUploadStop_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::Swap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  using std::swap;
  swap(broadcast_relay_id_, other->broadcast_relay_id_);
  swap(upload_result_, other->upload_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_NotifyBroadcastUploadStop_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WatchBroadcast_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WatchBroadcast_Request::kSteamidFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kExistingBroadcastIdFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kViewerTokenFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kClientIpFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kClientCellFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kWatchLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_WatchBroadcast_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_WatchBroadcast_Request)
}
CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&watch_location_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(watch_location_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WatchBroadcast_Request)
}

void CBroadcast_WatchBroadcast_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watch_location_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(watch_location_));
}

CBroadcast_WatchBroadcast_Request::~CBroadcast_WatchBroadcast_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WatchBroadcast_Request)
  SharedDtor();
}

void CBroadcast_WatchBroadcast_Request::SharedDtor() {
}

void CBroadcast_WatchBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_WatchBroadcast_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_WatchBroadcast_Request& CBroadcast_WatchBroadcast_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_WatchBroadcast_Request.base);
  return *internal_default_instance();
}


void CBroadcast_WatchBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watch_location_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(watch_location_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_WatchBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_WatchBroadcast_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_existing_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &existing_broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_viewer_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_client_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cell = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_client_cell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EBroadcastWatchLocation_IsValid(value)) {
            set_watch_location(static_cast< ::EBroadcastWatchLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_WatchBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_WatchBroadcast_Request)
  return false;
#undef DO_
}

void CBroadcast_WatchBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->existing_broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  // optional uint32 client_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_ip(), output);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_cell(), output);
  }

  // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->watch_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_WatchBroadcast_Request)
}

::google::protobuf::uint8* CBroadcast_WatchBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->existing_broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  // optional uint32 client_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_ip(), target);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_cell(), target);
  }

  // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->watch_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WatchBroadcast_Request)
  return target;
}

size_t CBroadcast_WatchBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WatchBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
    if (has_existing_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (has_viewer_token()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 4;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_cell = 5;
    if (has_client_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cell());
    }

    // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
    if (has_watch_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_location());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WatchBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WatchBroadcast_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_WatchBroadcast_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_WatchBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_WatchBroadcast_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WatchBroadcast_Request::MergeFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      existing_broadcast_id_ = from.existing_broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_cell_ = from.client_cell_;
    }
    if (cached_has_bits & 0x00000020u) {
      watch_location_ = from.watch_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Request::Swap(CBroadcast_WatchBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WatchBroadcast_Request::InternalSwap(CBroadcast_WatchBroadcast_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(existing_broadcast_id_, other->existing_broadcast_id_);
  swap(viewer_token_, other->viewer_token_);
  swap(client_ip_, other->client_ip_);
  swap(client_cell_, other->client_cell_);
  swap(watch_location_, other->watch_location_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_WatchBroadcast_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WatchBroadcast_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WatchBroadcast_Response::kResponseFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kMpdUrlFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kBroadcastIdFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kGameidFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kTitleFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kNumViewersFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kPermissionFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kIsRtmpFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kSecondsDelayFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kViewerTokenFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kHlsM3U8MasterUrlFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kHeartbeatIntervalFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kThumbnailUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_WatchBroadcast_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_WatchBroadcast_Response)
}
CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mpd_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mpd_url()) {
    mpd_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpd_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  hls_m3u8_master_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hls_m3u8_master_url()) {
    hls_m3u8_master_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hls_m3u8_master_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_url()) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WatchBroadcast_Response)
}

void CBroadcast_WatchBroadcast_Response::SharedCtor() {
  mpd_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_));
  response_ = 1;
}

CBroadcast_WatchBroadcast_Response::~CBroadcast_WatchBroadcast_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_WatchBroadcast_Response)
  SharedDtor();
}

void CBroadcast_WatchBroadcast_Response::SharedDtor() {
  mpd_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WatchBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_WatchBroadcast_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_WatchBroadcast_Response& CBroadcast_WatchBroadcast_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_WatchBroadcast_Response.base);
  return *internal_default_instance();
}


void CBroadcast_WatchBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mpd_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hls_m3u8_master_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(permission_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&is_rtmp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heartbeat_interval_) -
        reinterpret_cast<char*>(&is_rtmp_)) + sizeof(heartbeat_interval_));
    response_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_WatchBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_WatchBroadcast_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value)) {
            set_response(static_cast< ::CBroadcast_WatchBroadcast_Response_EWatchResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mpd_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpd_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mpd_url().data(), static_cast<int>(this->mpd_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_WatchBroadcast_Response.mpd_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_WatchBroadcast_Response.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_viewers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permission = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rtmp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_rtmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds_delay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_seconds_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_viewer_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hls_m3u8_master_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hls_m3u8_master_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hls_m3u8_master_url().data(), static_cast<int>(this->hls_m3u8_master_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heartbeat_interval = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_heartbeat_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeat_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_WatchBroadcast_Response.thumbnail_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_WatchBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_WatchBroadcast_Response)
  return false;
#undef DO_
}

void CBroadcast_WatchBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpd_url().data(), static_cast<int>(this->mpd_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.mpd_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mpd_url(), output);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->broadcast_id(), output);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gameid(), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_viewers(), output);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->permission(), output);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_rtmp(), output);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds_delay(), output);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->viewer_token(), output);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hls_m3u8_master_url().data(), static_cast<int>(this->hls_m3u8_master_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hls_m3u8_master_url(), output);
  }

  // optional int32 heartbeat_interval = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->heartbeat_interval(), output);
  }

  // optional string thumbnail_url = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->thumbnail_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_WatchBroadcast_Response)
}

::google::protobuf::uint8* CBroadcast_WatchBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpd_url().data(), static_cast<int>(this->mpd_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.mpd_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpd_url(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->broadcast_id(), target);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gameid(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_viewers(), target);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->permission(), target);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_rtmp(), target);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds_delay(), target);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->viewer_token(), target);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hls_m3u8_master_url().data(), static_cast<int>(this->hls_m3u8_master_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hls_m3u8_master_url(), target);
  }

  // optional int32 heartbeat_interval = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->heartbeat_interval(), target);
  }

  // optional string thumbnail_url = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->thumbnail_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WatchBroadcast_Response)
  return target;
}

size_t CBroadcast_WatchBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WatchBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string mpd_url = 2;
    if (has_mpd_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpd_url());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string hls_m3u8_master_url = 11;
    if (has_hls_m3u8_master_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hls_m3u8_master_url());
    }

    // optional string thumbnail_url = 13;
    if (has_thumbnail_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }

    // optional fixed64 broadcast_id = 3;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 num_viewers = 6;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_viewers());
    }

    // optional int32 permission = 7;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool is_rtmp = 8;
    if (has_is_rtmp()) {
      total_size += 1 + 1;
    }

    // optional int32 seconds_delay = 9;
    if (has_seconds_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_delay());
    }

    // optional fixed64 viewer_token = 10;
    if (has_viewer_token()) {
      total_size += 1 + 8;
    }

    // optional int32 heartbeat_interval = 12;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeat_interval());
    }

    // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WatchBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WatchBroadcast_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_WatchBroadcast_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_WatchBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_WatchBroadcast_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WatchBroadcast_Response::MergeFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mpd_url();
      mpd_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpd_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hls_m3u8_master_url();
      hls_m3u8_master_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hls_m3u8_master_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_thumbnail_url();
      thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000080u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00000200u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00000400u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000800u) {
      heartbeat_interval_ = from.heartbeat_interval_;
    }
    if (cached_has_bits & 0x00001000u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Response::Swap(CBroadcast_WatchBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WatchBroadcast_Response::InternalSwap(CBroadcast_WatchBroadcast_Response* other) {
  using std::swap;
  mpd_url_.Swap(&other->mpd_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hls_m3u8_master_url_.Swap(&other->hls_m3u8_master_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_id_, other->broadcast_id_);
  swap(gameid_, other->gameid_);
  swap(num_viewers_, other->num_viewers_);
  swap(permission_, other->permission_);
  swap(is_rtmp_, other->is_rtmp_);
  swap(seconds_delay_, other->seconds_delay_);
  swap(viewer_token_, other->viewer_token_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
  swap(response_, other->response_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_WatchBroadcast_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_HeartbeatBroadcast_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_HeartbeatBroadcast_Notification::kSteamidFieldNumber;
const int CBroadcast_HeartbeatBroadcast_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_HeartbeatBroadcast_Notification::kViewerTokenFieldNumber;
const int CBroadcast_HeartbeatBroadcast_Notification::kRepresentationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_HeartbeatBroadcast_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_HeartbeatBroadcast_Notification)
}
CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification(const CBroadcast_HeartbeatBroadcast_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&representation_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_HeartbeatBroadcast_Notification)
}

void CBroadcast_HeartbeatBroadcast_Notification::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&representation_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
}

CBroadcast_HeartbeatBroadcast_Notification::~CBroadcast_HeartbeatBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_HeartbeatBroadcast_Notification)
  SharedDtor();
}

void CBroadcast_HeartbeatBroadcast_Notification::SharedDtor() {
}

void CBroadcast_HeartbeatBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_HeartbeatBroadcast_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_HeartbeatBroadcast_Notification& CBroadcast_HeartbeatBroadcast_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_HeartbeatBroadcast_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_HeartbeatBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_HeartbeatBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&representation_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_HeartbeatBroadcast_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_HeartbeatBroadcast_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_viewer_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_representation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &representation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_HeartbeatBroadcast_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_HeartbeatBroadcast_Notification)
  return false;
#undef DO_
}

void CBroadcast_HeartbeatBroadcast_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_HeartbeatBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->representation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_HeartbeatBroadcast_Notification)
}

::google::protobuf::uint8* CBroadcast_HeartbeatBroadcast_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_HeartbeatBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->representation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_HeartbeatBroadcast_Notification)
  return target;
}

size_t CBroadcast_HeartbeatBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_HeartbeatBroadcast_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (has_viewer_token()) {
      total_size += 1 + 8;
    }

    // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
    if (has_representation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->representation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_HeartbeatBroadcast_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_HeartbeatBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_HeartbeatBroadcast_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_HeartbeatBroadcast_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_HeartbeatBroadcast_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_HeartbeatBroadcast_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_HeartbeatBroadcast_Notification::MergeFrom(const CBroadcast_HeartbeatBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_HeartbeatBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      representation_ = from.representation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_HeartbeatBroadcast_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_HeartbeatBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_HeartbeatBroadcast_Notification::CopyFrom(const CBroadcast_HeartbeatBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_HeartbeatBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_HeartbeatBroadcast_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_HeartbeatBroadcast_Notification::Swap(CBroadcast_HeartbeatBroadcast_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_HeartbeatBroadcast_Notification::InternalSwap(CBroadcast_HeartbeatBroadcast_Notification* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(viewer_token_, other->viewer_token_);
  swap(representation_, other->representation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_HeartbeatBroadcast_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StopWatchingBroadcast_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StopWatchingBroadcast_Notification::kSteamidFieldNumber;
const int CBroadcast_StopWatchingBroadcast_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_StopWatchingBroadcast_Notification::kViewerTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StopWatchingBroadcast_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_StopWatchingBroadcast_Notification)
}
CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification(const CBroadcast_StopWatchingBroadcast_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StopWatchingBroadcast_Notification)
}

void CBroadcast_StopWatchingBroadcast_Notification::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewer_token_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
}

CBroadcast_StopWatchingBroadcast_Notification::~CBroadcast_StopWatchingBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_StopWatchingBroadcast_Notification)
  SharedDtor();
}

void CBroadcast_StopWatchingBroadcast_Notification::SharedDtor() {
}

void CBroadcast_StopWatchingBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_StopWatchingBroadcast_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StopWatchingBroadcast_Notification& CBroadcast_StopWatchingBroadcast_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StopWatchingBroadcast_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_StopWatchingBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StopWatchingBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewer_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StopWatchingBroadcast_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_StopWatchingBroadcast_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_viewer_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_StopWatchingBroadcast_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_StopWatchingBroadcast_Notification)
  return false;
#undef DO_
}

void CBroadcast_StopWatchingBroadcast_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_StopWatchingBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_StopWatchingBroadcast_Notification)
}

::google::protobuf::uint8* CBroadcast_StopWatchingBroadcast_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StopWatchingBroadcast_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StopWatchingBroadcast_Notification)
  return target;
}

size_t CBroadcast_StopWatchingBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StopWatchingBroadcast_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (has_viewer_token()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StopWatchingBroadcast_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_StopWatchingBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StopWatchingBroadcast_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StopWatchingBroadcast_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_StopWatchingBroadcast_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_StopWatchingBroadcast_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_StopWatchingBroadcast_Notification::MergeFrom(const CBroadcast_StopWatchingBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StopWatchingBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StopWatchingBroadcast_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_StopWatchingBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StopWatchingBroadcast_Notification::CopyFrom(const CBroadcast_StopWatchingBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StopWatchingBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopWatchingBroadcast_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopWatchingBroadcast_Notification::Swap(CBroadcast_StopWatchingBroadcast_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StopWatchingBroadcast_Notification::InternalSwap(CBroadcast_StopWatchingBroadcast_Notification* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(viewer_token_, other->viewer_token_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_StopWatchingBroadcast_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastStatus_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastStatus_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastStatus_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastStatus_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastStatus_Request)
}
CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastStatus_Request)
}

void CBroadcast_GetBroadcastStatus_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastStatus_Request::~CBroadcast_GetBroadcastStatus_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastStatus_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastStatus_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastStatus_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastStatus_Request& CBroadcast_GetBroadcastStatus_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastStatus_Request.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastStatus_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastStatus_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastStatus_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastStatus_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastStatus_Request)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastStatus_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastStatus_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastStatus_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Request::Swap(CBroadcast_GetBroadcastStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastStatus_Request::InternalSwap(CBroadcast_GetBroadcastStatus_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastStatus_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastStatus_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastStatus_Response::kGameidFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kTitleFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kNumViewersFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kPermissionFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsRtmpFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kSecondsDelayFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsPublisherFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kThumbnailUrlFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kUpdateIntervalFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsUploadingFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastStatus_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastStatus_Response)
}
CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_url()) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastStatus_Response)
}

void CBroadcast_GetBroadcastStatus_Response::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(duration_));
}

CBroadcast_GetBroadcastStatus_Response::~CBroadcast_GetBroadcastStatus_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastStatus_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastStatus_Response::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastStatus_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastStatus_Response& CBroadcast_GetBroadcastStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastStatus_Response.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_publisher_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(is_publisher_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&is_uploading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&is_uploading_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_GetBroadcastStatus_Response.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_viewers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permission = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rtmp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_rtmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds_delay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_seconds_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_publisher = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_publisher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_publisher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_interval = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_update_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_uploading = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_uploading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_uploading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastStatus_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastStatus_Response.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_viewers(), output);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->permission(), output);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_rtmp(), output);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seconds_delay(), output);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_publisher(), output);
  }

  // optional string thumbnail_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->thumbnail_url(), output);
  }

  // optional int32 update_interval = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->update_interval(), output);
  }

  // optional bool is_uploading = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_uploading(), output);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastStatus_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastStatus_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastStatus_Response.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_viewers(), target);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->permission(), target);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_rtmp(), target);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seconds_delay(), target);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_publisher(), target);
  }

  // optional string thumbnail_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->thumbnail_url(), target);
  }

  // optional int32 update_interval = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->update_interval(), target);
  }

  // optional bool is_uploading = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_uploading(), target);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastStatus_Response)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string thumbnail_url = 8;
    if (has_thumbnail_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }

    // optional uint64 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 num_viewers = 3;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_viewers());
    }

    // optional int32 permission = 4;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional int32 seconds_delay = 6;
    if (has_seconds_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_delay());
    }

    // optional bool is_rtmp = 5;
    if (has_is_rtmp()) {
      total_size += 1 + 1;
    }

    // optional bool is_publisher = 7;
    if (has_is_publisher()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool is_uploading = 10;
    if (has_is_uploading()) {
      total_size += 1 + 1;
    }

    // optional int32 update_interval = 9;
    if (has_update_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_interval());
    }

    // optional uint32 duration = 11;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastStatus_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastStatus_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastStatus_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_thumbnail_url();
      thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000010u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_publisher_ = from.is_publisher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_uploading_ = from.is_uploading_;
    }
    if (cached_has_bits & 0x00000200u) {
      update_interval_ = from.update_interval_;
    }
    if (cached_has_bits & 0x00000400u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Response::Swap(CBroadcast_GetBroadcastStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastStatus_Response::InternalSwap(CBroadcast_GetBroadcastStatus_Response* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(num_viewers_, other->num_viewers_);
  swap(permission_, other->permission_);
  swap(seconds_delay_, other->seconds_delay_);
  swap(is_rtmp_, other->is_rtmp_);
  swap(is_publisher_, other->is_publisher_);
  swap(is_uploading_, other->is_uploading_);
  swap(update_interval_, other->update_interval_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastStatus_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastThumbnail_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastThumbnail_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastThumbnail_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastThumbnail_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastThumbnail_Request)
}
CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request(const CBroadcast_GetBroadcastThumbnail_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastThumbnail_Request)
}

void CBroadcast_GetBroadcastThumbnail_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastThumbnail_Request::~CBroadcast_GetBroadcastThumbnail_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastThumbnail_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastThumbnail_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastThumbnail_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastThumbnail_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastThumbnail_Request& CBroadcast_GetBroadcastThumbnail_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastThumbnail_Request.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastThumbnail_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastThumbnail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastThumbnail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastThumbnail_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastThumbnail_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastThumbnail_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastThumbnail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastThumbnail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastThumbnail_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastThumbnail_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastThumbnail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastThumbnail_Request)
  return target;
}

size_t CBroadcast_GetBroadcastThumbnail_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastThumbnail_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastThumbnail_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastThumbnail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastThumbnail_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastThumbnail_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastThumbnail_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastThumbnail_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastThumbnail_Request::MergeFrom(const CBroadcast_GetBroadcastThumbnail_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastThumbnail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastThumbnail_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastThumbnail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastThumbnail_Request::CopyFrom(const CBroadcast_GetBroadcastThumbnail_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastThumbnail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastThumbnail_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastThumbnail_Request::Swap(CBroadcast_GetBroadcastThumbnail_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastThumbnail_Request::InternalSwap(CBroadcast_GetBroadcastThumbnail_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastThumbnail_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastThumbnail_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastThumbnail_Response::kThumbnailUrlFieldNumber;
const int CBroadcast_GetBroadcastThumbnail_Response::kUpdateIntervalFieldNumber;
const int CBroadcast_GetBroadcastThumbnail_Response::kNumViewersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastThumbnail_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastThumbnail_Response)
}
CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response(const CBroadcast_GetBroadcastThumbnail_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_url()) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ::memcpy(&update_interval_, &from.update_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&update_interval_)) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastThumbnail_Response)
}

void CBroadcast_GetBroadcastThumbnail_Response::SharedCtor() {
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_viewers_) -
      reinterpret_cast<char*>(&update_interval_)) + sizeof(num_viewers_));
}

CBroadcast_GetBroadcastThumbnail_Response::~CBroadcast_GetBroadcastThumbnail_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastThumbnail_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastThumbnail_Response::SharedDtor() {
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastThumbnail_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastThumbnail_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastThumbnail_Response& CBroadcast_GetBroadcastThumbnail_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastThumbnail_Response.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastThumbnail_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastThumbnail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thumbnail_url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&update_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_viewers_) -
        reinterpret_cast<char*>(&update_interval_)) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastThumbnail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastThumbnail_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string thumbnail_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_update_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_viewers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastThumbnail_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastThumbnail_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastThumbnail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastThumbnail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thumbnail_url(), output);
  }

  // optional int32 update_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->update_interval(), output);
  }

  // optional int32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_viewers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastThumbnail_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastThumbnail_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastThumbnail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thumbnail_url(), target);
  }

  // optional int32 update_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->update_interval(), target);
  }

  // optional int32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_viewers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastThumbnail_Response)
  return target;
}

size_t CBroadcast_GetBroadcastThumbnail_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastThumbnail_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string thumbnail_url = 1;
    if (has_thumbnail_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }

    // optional int32 update_interval = 2;
    if (has_update_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_interval());
    }

    // optional int32 num_viewers = 3;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_viewers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastThumbnail_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastThumbnail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastThumbnail_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastThumbnail_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastThumbnail_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastThumbnail_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastThumbnail_Response::MergeFrom(const CBroadcast_GetBroadcastThumbnail_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastThumbnail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_thumbnail_url();
      thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      update_interval_ = from.update_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastThumbnail_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastThumbnail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastThumbnail_Response::CopyFrom(const CBroadcast_GetBroadcastThumbnail_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastThumbnail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastThumbnail_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastThumbnail_Response::Swap(CBroadcast_GetBroadcastThumbnail_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastThumbnail_Response::InternalSwap(CBroadcast_GetBroadcastThumbnail_Response* other) {
  using std::swap;
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_interval_, other->update_interval_);
  swap(num_viewers_, other->num_viewers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastThumbnail_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_InviteToBroadcast_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_InviteToBroadcast_Request::kSteamidFieldNumber;
const int CBroadcast_InviteToBroadcast_Request::kApprovalResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_InviteToBroadcast_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_InviteToBroadcast_Request)
}
CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&approval_response_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_InviteToBroadcast_Request)
}

void CBroadcast_InviteToBroadcast_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approval_response_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
}

CBroadcast_InviteToBroadcast_Request::~CBroadcast_InviteToBroadcast_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_InviteToBroadcast_Request)
  SharedDtor();
}

void CBroadcast_InviteToBroadcast_Request::SharedDtor() {
}

void CBroadcast_InviteToBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_InviteToBroadcast_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_InviteToBroadcast_Request& CBroadcast_InviteToBroadcast_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_InviteToBroadcast_Request.base);
  return *internal_default_instance();
}


void CBroadcast_InviteToBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&approval_response_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_InviteToBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_InviteToBroadcast_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool approval_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_approval_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approval_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_InviteToBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_InviteToBroadcast_Request)
  return false;
#undef DO_
}

void CBroadcast_InviteToBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->approval_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_InviteToBroadcast_Request)
}

::google::protobuf::uint8* CBroadcast_InviteToBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->approval_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_InviteToBroadcast_Request)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_InviteToBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool approval_response = 2;
    if (has_approval_response()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_InviteToBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_InviteToBroadcast_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_InviteToBroadcast_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_InviteToBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_InviteToBroadcast_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_InviteToBroadcast_Request::MergeFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      approval_response_ = from.approval_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Request::Swap(CBroadcast_InviteToBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_InviteToBroadcast_Request::InternalSwap(CBroadcast_InviteToBroadcast_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(approval_response_, other->approval_response_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_InviteToBroadcast_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_InviteToBroadcast_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_InviteToBroadcast_Response::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_InviteToBroadcast_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_InviteToBroadcast_Response)
}
CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_InviteToBroadcast_Response)
}

void CBroadcast_InviteToBroadcast_Response::SharedCtor() {
  success_ = false;
}

CBroadcast_InviteToBroadcast_Response::~CBroadcast_InviteToBroadcast_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_InviteToBroadcast_Response)
  SharedDtor();
}

void CBroadcast_InviteToBroadcast_Response::SharedDtor() {
}

void CBroadcast_InviteToBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_InviteToBroadcast_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_InviteToBroadcast_Response& CBroadcast_InviteToBroadcast_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_InviteToBroadcast_Response.base);
  return *internal_default_instance();
}


void CBroadcast_InviteToBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_InviteToBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_InviteToBroadcast_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_InviteToBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_InviteToBroadcast_Response)
  return false;
#undef DO_
}

void CBroadcast_InviteToBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_InviteToBroadcast_Response)
}

::google::protobuf::uint8* CBroadcast_InviteToBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_InviteToBroadcast_Response)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_InviteToBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_InviteToBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_InviteToBroadcast_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_InviteToBroadcast_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_InviteToBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_InviteToBroadcast_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_InviteToBroadcast_Response::MergeFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Response::Swap(CBroadcast_InviteToBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_InviteToBroadcast_Response::InternalSwap(CBroadcast_InviteToBroadcast_Response* other) {
  using std::swap;
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_InviteToBroadcast_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SendBroadcastStateToServer_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SendBroadcastStateToServer_Request::kPermissionFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kGameidFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kTitleFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kGameDataConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SendBroadcastStateToServer_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_SendBroadcastStateToServer_Request)
}
CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  game_data_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_config()) {
    game_data_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_config_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SendBroadcastStateToServer_Request)
}

void CBroadcast_SendBroadcastStateToServer_Request::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
}

CBroadcast_SendBroadcastStateToServer_Request::~CBroadcast_SendBroadcastStateToServer_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_SendBroadcastStateToServer_Request)
  SharedDtor();
}

void CBroadcast_SendBroadcastStateToServer_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendBroadcastStateToServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_SendBroadcastStateToServer_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SendBroadcastStateToServer_Request& CBroadcast_SendBroadcastStateToServer_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SendBroadcastStateToServer_Request.base);
  return *internal_default_instance();
}


void CBroadcast_SendBroadcastStateToServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_data_config_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SendBroadcastStateToServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_SendBroadcastStateToServer_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_SendBroadcastStateToServer_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_data_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_data_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_data_config().data(), static_cast<int>(this->game_data_config().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_SendBroadcastStateToServer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_SendBroadcastStateToServer_Request)
  return false;
#undef DO_
}

void CBroadcast_SendBroadcastStateToServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->permission(), output);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gameid(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendBroadcastStateToServer_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_data_config().data(), static_cast<int>(this->game_data_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_data_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_SendBroadcastStateToServer_Request)
}

::google::protobuf::uint8* CBroadcast_SendBroadcastStateToServer_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gameid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendBroadcastStateToServer_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_data_config().data(), static_cast<int>(this->game_data_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_data_config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SendBroadcastStateToServer_Request)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SendBroadcastStateToServer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string game_data_config = 4;
    if (has_game_data_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_data_config());
    }

    // optional uint64 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional int32 permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendBroadcastStateToServer_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SendBroadcastStateToServer_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_SendBroadcastStateToServer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_SendBroadcastStateToServer_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_data_config();
      game_data_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_config_);
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Request::Swap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendBroadcastStateToServer_Request::InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_data_config_.Swap(&other->game_data_config_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(permission_, other->permission_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_SendBroadcastStateToServer_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SendBroadcastStateToServer_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SendBroadcastStateToServer_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_SendBroadcastStateToServer_Response)
}
CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SendBroadcastStateToServer_Response)
}

void CBroadcast_SendBroadcastStateToServer_Response::SharedCtor() {
}

CBroadcast_SendBroadcastStateToServer_Response::~CBroadcast_SendBroadcastStateToServer_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_SendBroadcastStateToServer_Response)
  SharedDtor();
}

void CBroadcast_SendBroadcastStateToServer_Response::SharedDtor() {
}

void CBroadcast_SendBroadcastStateToServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_SendBroadcastStateToServer_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SendBroadcastStateToServer_Response& CBroadcast_SendBroadcastStateToServer_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SendBroadcastStateToServer_Response.base);
  return *internal_default_instance();
}


void CBroadcast_SendBroadcastStateToServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SendBroadcastStateToServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_SendBroadcastStateToServer_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_SendBroadcastStateToServer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_SendBroadcastStateToServer_Response)
  return false;
#undef DO_
}

void CBroadcast_SendBroadcastStateToServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_SendBroadcastStateToServer_Response)
}

::google::protobuf::uint8* CBroadcast_SendBroadcastStateToServer_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SendBroadcastStateToServer_Response)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SendBroadcastStateToServer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SendBroadcastStateToServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_SendBroadcastStateToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendBroadcastStateToServer_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SendBroadcastStateToServer_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_SendBroadcastStateToServer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_SendBroadcastStateToServer_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_SendBroadcastStateToServer_Response::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SendBroadcastStateToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_SendBroadcastStateToServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_SendBroadcastStateToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendBroadcastStateToServer_Response::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SendBroadcastStateToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Response::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Response::Swap(CBroadcast_SendBroadcastStateToServer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendBroadcastStateToServer_Response::InternalSwap(CBroadcast_SendBroadcastStateToServer_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_SendBroadcastStateToServer_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}
CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedCtor() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  SharedDtor();
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedDtor() {
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return false;
#undef DO_
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

::google::protobuf::uint8* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatInfo_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatInfo_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kBroadcastIdFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kClientIpFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kClientCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatInfo_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastChatInfo_Request)
}
CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatInfo_Request)
}

void CBroadcast_GetBroadcastChatInfo_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_cell_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
}

CBroadcast_GetBroadcastChatInfo_Request::~CBroadcast_GetBroadcastChatInfo_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatInfo_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatInfo_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastChatInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatInfo_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatInfo_Request& CBroadcast_GetBroadcastChatInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatInfo_Request.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cell_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastChatInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_client_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cell = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_client_cell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastChatInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastChatInfo_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_ip(), output);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_cell(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastChatInfo_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_ip(), target);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_cell(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatInfo_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 3;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_cell = 4;
    if (has_client_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cell());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastChatInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastChatInfo_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cell_ = from.client_cell_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Request::Swap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatInfo_Request::InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(client_ip_, other->client_ip_);
  swap(client_cell_, other->client_cell_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatInfo_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatInfo_Response::kChatIdFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Response::kViewUrlFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Response::kViewUrlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatInfo_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastChatInfo_Response)
}
CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_url()) {
    view_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_);
  }
  view_url_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_url_template()) {
    view_url_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_template_);
  }
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatInfo_Response)
}

void CBroadcast_GetBroadcastChatInfo_Response::SharedCtor() {
  view_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_url_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatInfo_Response::~CBroadcast_GetBroadcastChatInfo_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatInfo_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatInfo_Response::SharedDtor() {
  view_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_url_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatInfo_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatInfo_Response& CBroadcast_GetBroadcastChatInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatInfo_Response.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      view_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      view_url_template_.ClearNonDefaultToEmptyNoArena();
    }
  }
  chat_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastChatInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_url().data(), static_cast<int>(this->view_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_GetBroadcastChatInfo_Response.view_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_url_template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_url_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_url_template().data(), static_cast<int>(this->view_url_template().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastChatInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastChatInfo_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional string view_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url().data(), static_cast<int>(this->view_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatInfo_Response.view_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->view_url(), output);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url_template().data(), static_cast<int>(this->view_url_template().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->view_url_template(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastChatInfo_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional string view_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url().data(), static_cast<int>(this->view_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatInfo_Response.view_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->view_url(), target);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url_template().data(), static_cast<int>(this->view_url_template().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->view_url_template(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatInfo_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string view_url = 2;
    if (has_view_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_url());
    }

    // optional string view_url_template = 3;
    if (has_view_url_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_url_template());
    }

    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastChatInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastChatInfo_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_view_url();
      view_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_view_url_template();
      view_url_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_template_);
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Response::Swap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatInfo_Response::InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  using std::swap;
  view_url_.Swap(&other->view_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  view_url_template_.Swap(&other->view_url_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_PostChatMessage_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostChatMessage_Request::kChatIdFieldNumber;
const int CBroadcast_PostChatMessage_Request::kMessageFieldNumber;
const int CBroadcast_PostChatMessage_Request::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_PostChatMessage_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_PostChatMessage_Request)
}
CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_PostChatMessage_Request)
}

void CBroadcast_PostChatMessage_Request::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(instance_id_));
}

CBroadcast_PostChatMessage_Request::~CBroadcast_PostChatMessage_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_PostChatMessage_Request)
  SharedDtor();
}

void CBroadcast_PostChatMessage_Request::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_PostChatMessage_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_PostChatMessage_Request& CBroadcast_PostChatMessage_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_PostChatMessage_Request.base);
  return *internal_default_instance();
}


void CBroadcast_PostChatMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instance_id_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_PostChatMessage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_PostChatMessage_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_PostChatMessage_Request.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_PostChatMessage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_PostChatMessage_Request)
  return false;
#undef DO_
}

void CBroadcast_PostChatMessage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Request.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_PostChatMessage_Request)
}

::google::protobuf::uint8* CBroadcast_PostChatMessage_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Request.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_PostChatMessage_Request)
  return target;
}

size_t CBroadcast_PostChatMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_PostChatMessage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_PostChatMessage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostChatMessage_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_PostChatMessage_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_PostChatMessage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_PostChatMessage_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_PostChatMessage_Request::MergeFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Request::Swap(CBroadcast_PostChatMessage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostChatMessage_Request::InternalSwap(CBroadcast_PostChatMessage_Request* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(instance_id_, other->instance_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_PostChatMessage_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_PostChatMessage_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostChatMessage_Response::kPersonaNameFieldNumber;
const int CBroadcast_PostChatMessage_Response::kInGameFieldNumber;
const int CBroadcast_PostChatMessage_Response::kResultFieldNumber;
const int CBroadcast_PostChatMessage_Response::kCooldownTimeSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_PostChatMessage_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_PostChatMessage_Response)
}
CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&in_game_, &from.in_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_time_seconds_) -
    reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_PostChatMessage_Response)
}

void CBroadcast_PostChatMessage_Response::SharedCtor() {
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cooldown_time_seconds_) -
      reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
}

CBroadcast_PostChatMessage_Response::~CBroadcast_PostChatMessage_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_PostChatMessage_Response)
  SharedDtor();
}

void CBroadcast_PostChatMessage_Response::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_PostChatMessage_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_PostChatMessage_Response& CBroadcast_PostChatMessage_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_PostChatMessage_Response.base);
  return *internal_default_instance();
}


void CBroadcast_PostChatMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&in_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_time_seconds_) -
        reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_PostChatMessage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_PostChatMessage_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_PostChatMessage_Response.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_in_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cooldown_time_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cooldown_time_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooldown_time_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_PostChatMessage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_PostChatMessage_Response)
  return false;
#undef DO_
}

void CBroadcast_PostChatMessage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Response.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona_name(), output);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_game(), output);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 cooldown_time_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cooldown_time_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_PostChatMessage_Response)
}

::google::protobuf::uint8* CBroadcast_PostChatMessage_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Response.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_game(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 cooldown_time_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cooldown_time_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_PostChatMessage_Response)
  return target;
}

size_t CBroadcast_PostChatMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_PostChatMessage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 1;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bool in_game = 2;
    if (has_in_game()) {
      total_size += 1 + 1;
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 cooldown_time_seconds = 4;
    if (has_cooldown_time_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooldown_time_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_PostChatMessage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostChatMessage_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_PostChatMessage_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_PostChatMessage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_PostChatMessage_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_PostChatMessage_Response::MergeFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_ = from.in_game_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_time_seconds_ = from.cooldown_time_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Response::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Response::Swap(CBroadcast_PostChatMessage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostChatMessage_Response::InternalSwap(CBroadcast_PostChatMessage_Response* other) {
  using std::swap;
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(in_game_, other->in_game_);
  swap(result_, other->result_);
  swap(cooldown_time_seconds_, other->cooldown_time_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_PostChatMessage_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_MuteBroadcastChatUser_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_MuteBroadcastChatUser_Request::kChatIdFieldNumber;
const int CBroadcast_MuteBroadcastChatUser_Request::kUserSteamidFieldNumber;
const int CBroadcast_MuteBroadcastChatUser_Request::kMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_MuteBroadcastChatUser_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_MuteBroadcastChatUser_Request)
}
CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_MuteBroadcastChatUser_Request)
}

void CBroadcast_MuteBroadcastChatUser_Request::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&muted_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
}

CBroadcast_MuteBroadcastChatUser_Request::~CBroadcast_MuteBroadcastChatUser_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_MuteBroadcastChatUser_Request)
  SharedDtor();
}

void CBroadcast_MuteBroadcastChatUser_Request::SharedDtor() {
}

void CBroadcast_MuteBroadcastChatUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_MuteBroadcastChatUser_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_MuteBroadcastChatUser_Request& CBroadcast_MuteBroadcastChatUser_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_MuteBroadcastChatUser_Request.base);
  return *internal_default_instance();
}


void CBroadcast_MuteBroadcastChatUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&muted_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_MuteBroadcastChatUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_MuteBroadcastChatUser_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_user_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool muted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_MuteBroadcastChatUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_MuteBroadcastChatUser_Request)
  return false;
#undef DO_
}

void CBroadcast_MuteBroadcastChatUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_MuteBroadcastChatUser_Request)
}

::google::protobuf::uint8* CBroadcast_MuteBroadcastChatUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_MuteBroadcastChatUser_Request)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_MuteBroadcastChatUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (has_user_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool muted = 3;
    if (has_muted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_MuteBroadcastChatUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_MuteBroadcastChatUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_MuteBroadcastChatUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_MuteBroadcastChatUser_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      muted_ = from.muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Request::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Request::Swap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_MuteBroadcastChatUser_Request::InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  using std::swap;
  swap(chat_id_, other->chat_id_);
  swap(user_steamid_, other->user_steamid_);
  swap(muted_, other->muted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_MuteBroadcastChatUser_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_MuteBroadcastChatUser_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_MuteBroadcastChatUser_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_MuteBroadcastChatUser_Response)
}
CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_MuteBroadcastChatUser_Response)
}

void CBroadcast_MuteBroadcastChatUser_Response::SharedCtor() {
}

CBroadcast_MuteBroadcastChatUser_Response::~CBroadcast_MuteBroadcastChatUser_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_MuteBroadcastChatUser_Response)
  SharedDtor();
}

void CBroadcast_MuteBroadcastChatUser_Response::SharedDtor() {
}

void CBroadcast_MuteBroadcastChatUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_MuteBroadcastChatUser_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_MuteBroadcastChatUser_Response& CBroadcast_MuteBroadcastChatUser_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_MuteBroadcastChatUser_Response.base);
  return *internal_default_instance();
}


void CBroadcast_MuteBroadcastChatUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_MuteBroadcastChatUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_MuteBroadcastChatUser_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_MuteBroadcastChatUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_MuteBroadcastChatUser_Response)
  return false;
#undef DO_
}

void CBroadcast_MuteBroadcastChatUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_MuteBroadcastChatUser_Response)
}

::google::protobuf::uint8* CBroadcast_MuteBroadcastChatUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_MuteBroadcastChatUser_Response)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_MuteBroadcastChatUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_MuteBroadcastChatUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_MuteBroadcastChatUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_MuteBroadcastChatUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_MuteBroadcastChatUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_MuteBroadcastChatUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_MuteBroadcastChatUser_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_MuteBroadcastChatUser_Response::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_MuteBroadcastChatUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_MuteBroadcastChatUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_MuteBroadcastChatUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_MuteBroadcastChatUser_Response::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_MuteBroadcastChatUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Response::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Response::Swap(CBroadcast_MuteBroadcastChatUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_MuteBroadcastChatUser_Response::InternalSwap(CBroadcast_MuteBroadcastChatUser_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_MuteBroadcastChatUser_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_RemoveUserChatText_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_RemoveUserChatText_Request::kChatIdFieldNumber;
const int CBroadcast_RemoveUserChatText_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_RemoveUserChatText_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_RemoveUserChatText_Request)
}
CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_RemoveUserChatText_Request)
}

void CBroadcast_RemoveUserChatText_Request::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_steamid_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
}

CBroadcast_RemoveUserChatText_Request::~CBroadcast_RemoveUserChatText_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_RemoveUserChatText_Request)
  SharedDtor();
}

void CBroadcast_RemoveUserChatText_Request::SharedDtor() {
}

void CBroadcast_RemoveUserChatText_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_RemoveUserChatText_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_RemoveUserChatText_Request& CBroadcast_RemoveUserChatText_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_RemoveUserChatText_Request.base);
  return *internal_default_instance();
}


void CBroadcast_RemoveUserChatText_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_RemoveUserChatText_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_RemoveUserChatText_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_user_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_RemoveUserChatText_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_RemoveUserChatText_Request)
  return false;
#undef DO_
}

void CBroadcast_RemoveUserChatText_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_RemoveUserChatText_Request)
}

::google::protobuf::uint8* CBroadcast_RemoveUserChatText_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_RemoveUserChatText_Request)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_RemoveUserChatText_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (has_user_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_RemoveUserChatText_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_RemoveUserChatText_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_RemoveUserChatText_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_RemoveUserChatText_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_RemoveUserChatText_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_RemoveUserChatText_Request::MergeFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Request::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Request::Swap(CBroadcast_RemoveUserChatText_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_RemoveUserChatText_Request::InternalSwap(CBroadcast_RemoveUserChatText_Request* other) {
  using std::swap;
  swap(chat_id_, other->chat_id_);
  swap(user_steamid_, other->user_steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_RemoveUserChatText_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_RemoveUserChatText_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_RemoveUserChatText_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_RemoveUserChatText_Response)
}
CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_RemoveUserChatText_Response)
}

void CBroadcast_RemoveUserChatText_Response::SharedCtor() {
}

CBroadcast_RemoveUserChatText_Response::~CBroadcast_RemoveUserChatText_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_RemoveUserChatText_Response)
  SharedDtor();
}

void CBroadcast_RemoveUserChatText_Response::SharedDtor() {
}

void CBroadcast_RemoveUserChatText_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_RemoveUserChatText_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_RemoveUserChatText_Response& CBroadcast_RemoveUserChatText_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_RemoveUserChatText_Response.base);
  return *internal_default_instance();
}


void CBroadcast_RemoveUserChatText_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_RemoveUserChatText_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_RemoveUserChatText_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_RemoveUserChatText_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_RemoveUserChatText_Response)
  return false;
#undef DO_
}

void CBroadcast_RemoveUserChatText_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_RemoveUserChatText_Response)
}

::google::protobuf::uint8* CBroadcast_RemoveUserChatText_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_RemoveUserChatText_Response)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_RemoveUserChatText_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_RemoveUserChatText_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_RemoveUserChatText_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_RemoveUserChatText_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_RemoveUserChatText_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_RemoveUserChatText_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_RemoveUserChatText_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_RemoveUserChatText_Response::MergeFrom(const CBroadcast_RemoveUserChatText_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_RemoveUserChatText_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_RemoveUserChatText_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_RemoveUserChatText_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_RemoveUserChatText_Response::CopyFrom(const CBroadcast_RemoveUserChatText_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_RemoveUserChatText_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Response::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Response::Swap(CBroadcast_RemoveUserChatText_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_RemoveUserChatText_Response::InternalSwap(CBroadcast_RemoveUserChatText_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_RemoveUserChatText_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatUserNames_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Request::kChatIdFieldNumber;
const int CBroadcast_GetBroadcastChatUserNames_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastChatUserNames_Request)
}
CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      user_steamid_(from.user_steamid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatUserNames_Request)
}

void CBroadcast_GetBroadcastChatUserNames_Request::SharedCtor() {
  chat_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatUserNames_Request::~CBroadcast_GetBroadcastChatUserNames_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatUserNames_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastChatUserNames_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatUserNames_Request::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatUserNames_Request& CBroadcast_GetBroadcastChatUserNames_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Request.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatUserNames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_steamid_.Clear();
  chat_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatUserNames_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastChatUserNames_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_user_steamid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_user_steamid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastChatUserNames_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastChatUserNames_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatUserNames_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // repeated fixed64 user_steamid = 2;
  for (int i = 0, n = this->user_steamid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->user_steamid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastChatUserNames_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // repeated fixed64 user_steamid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->user_steamid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatUserNames_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatUserNames_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed64 user_steamid = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->user_steamid_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_steamid_size());
    total_size += data_size;
  }

  // optional fixed64 chat_id = 1;
  if (has_chat_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatUserNames_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastChatUserNames_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastChatUserNames_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_steamid_.MergeFrom(from.user_steamid_);
  if (from.has_chat_id()) {
    set_chat_id(from.chat_id());
  }
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Request::Swap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Request::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  using std::swap;
  user_steamid_.InternalSwap(&other->user_steamid_);
  swap(chat_id_, other->chat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::kSteamIdFieldNumber;
const int CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::kPersonaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}
CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona()) {
    persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedCtor() {
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedDtor() {
  persona_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_.ClearNonDefaultToEmptyNoArena();
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona().data(), static_cast<int>(this->persona().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), static_cast<int>(this->persona().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), static_cast<int>(this->persona().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string persona = 2;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona();
      persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  using std::swap;
  persona_.Swap(&other->persona_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_GetBroadcastChatUserNames_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Response::kPersonaNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_GetBroadcastChatUserNames_Response)
}
CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      persona_names_(from.persona_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatUserNames_Response)
}

void CBroadcast_GetBroadcastChatUserNames_Response::SharedCtor() {
}

CBroadcast_GetBroadcastChatUserNames_Response::~CBroadcast_GetBroadcastChatUserNames_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatUserNames_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Response::SharedDtor() {
}

void CBroadcast_GetBroadcastChatUserNames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatUserNames_Response::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatUserNames_Response& CBroadcast_GetBroadcastChatUserNames_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_GetBroadcastChatUserNames_Response.base);
  return *internal_default_instance();
}


void CBroadcast_GetBroadcastChatUserNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persona_names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatUserNames_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_GetBroadcastChatUserNames_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_persona_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_GetBroadcastChatUserNames_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_GetBroadcastChatUserNames_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatUserNames_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persona_names_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->persona_names(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_GetBroadcastChatUserNames_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persona_names_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->persona_names(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatUserNames_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatUserNames_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->persona_names_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->persona_names(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatUserNames_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_GetBroadcastChatUserNames_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_GetBroadcastChatUserNames_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persona_names_.MergeFrom(from.persona_names_);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response::Swap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Response::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  using std::swap;
  CastToBase(&persona_names_)->InternalSwap(CastToBase(&other->persona_names_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_BroadcastViewerState_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BroadcastViewerState_Notification::kSteamidFieldNumber;
const int CBroadcast_BroadcastViewerState_Notification::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BroadcastViewerState_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_BroadcastViewerState_Notification)
}
CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BroadcastViewerState_Notification)
}

void CBroadcast_BroadcastViewerState_Notification::SharedCtor() {
  steamid_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
}

CBroadcast_BroadcastViewerState_Notification::~CBroadcast_BroadcastViewerState_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_BroadcastViewerState_Notification)
  SharedDtor();
}

void CBroadcast_BroadcastViewerState_Notification::SharedDtor() {
}

void CBroadcast_BroadcastViewerState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_BroadcastViewerState_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BroadcastViewerState_Notification& CBroadcast_BroadcastViewerState_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BroadcastViewerState_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_BroadcastViewerState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    steamid_ = GOOGLE_ULONGLONG(0);
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BroadcastViewerState_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_BroadcastViewerState_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value)) {
            set_state(static_cast< ::CBroadcast_BroadcastViewerState_Notification_EViewerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_BroadcastViewerState_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_BroadcastViewerState_Notification)
  return false;
#undef DO_
}

void CBroadcast_BroadcastViewerState_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_BroadcastViewerState_Notification)
}

::google::protobuf::uint8* CBroadcast_BroadcastViewerState_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BroadcastViewerState_Notification)
  return target;
}

size_t CBroadcast_BroadcastViewerState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BroadcastViewerState_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BroadcastViewerState_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BroadcastViewerState_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_BroadcastViewerState_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_BroadcastViewerState_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastViewerState_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastViewerState_Notification::Swap(CBroadcast_BroadcastViewerState_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BroadcastViewerState_Notification::InternalSwap(CBroadcast_BroadcastViewerState_Notification* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_BroadcastViewerState_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_WaitingBroadcastViewer_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WaitingBroadcastViewer_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_WaitingBroadcastViewer_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_WaitingBroadcastViewer_Notification)
}
CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WaitingBroadcastViewer_Notification)
}

void CBroadcast_WaitingBroadcastViewer_Notification::SharedCtor() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_WaitingBroadcastViewer_Notification::~CBroadcast_WaitingBroadcastViewer_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WaitingBroadcastViewer_Notification)
  SharedDtor();
}

void CBroadcast_WaitingBroadcastViewer_Notification::SharedDtor() {
}

void CBroadcast_WaitingBroadcastViewer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_WaitingBroadcastViewer_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_WaitingBroadcastViewer_Notification& CBroadcast_WaitingBroadcastViewer_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_WaitingBroadcastViewer_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_WaitingBroadcastViewer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_WaitingBroadcastViewer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_WaitingBroadcastViewer_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_WaitingBroadcastViewer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_WaitingBroadcastViewer_Notification)
  return false;
#undef DO_
}

void CBroadcast_WaitingBroadcastViewer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_WaitingBroadcastViewer_Notification)
}

::google::protobuf::uint8* CBroadcast_WaitingBroadcastViewer_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WaitingBroadcastViewer_Notification)
  return target;
}

size_t CBroadcast_WaitingBroadcastViewer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WaitingBroadcastViewer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WaitingBroadcastViewer_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_WaitingBroadcastViewer_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_WaitingBroadcastViewer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_WaitingBroadcastViewer_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WaitingBroadcastViewer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WaitingBroadcastViewer_Notification::Swap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WaitingBroadcastViewer_Notification::InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_WaitingBroadcastViewer_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_StopBroadcastUpload_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StopBroadcastUpload_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kBroadcastRelayIdFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kUploadResultFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kTooManyPoorUploadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StopBroadcastUpload_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_StopBroadcastUpload_Notification)
}
CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&too_many_poor_uploads_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StopBroadcastUpload_Notification)
}

void CBroadcast_StopBroadcastUpload_Notification::SharedCtor() {
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&too_many_poor_uploads_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
}

CBroadcast_StopBroadcastUpload_Notification::~CBroadcast_StopBroadcastUpload_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_StopBroadcastUpload_Notification)
  SharedDtor();
}

void CBroadcast_StopBroadcastUpload_Notification::SharedDtor() {
}

void CBroadcast_StopBroadcastUpload_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_StopBroadcastUpload_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StopBroadcastUpload_Notification& CBroadcast_StopBroadcastUpload_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_StopBroadcastUpload_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_StopBroadcastUpload_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&too_many_poor_uploads_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StopBroadcastUpload_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_StopBroadcastUpload_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_relay_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_broadcast_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_upload_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool too_many_poor_uploads = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_too_many_poor_uploads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &too_many_poor_uploads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_StopBroadcastUpload_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_StopBroadcastUpload_Notification)
  return false;
#undef DO_
}

void CBroadcast_StopBroadcastUpload_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_relay_id(), output);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload_result(), output);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->too_many_poor_uploads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_StopBroadcastUpload_Notification)
}

::google::protobuf::uint8* CBroadcast_StopBroadcastUpload_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_relay_id(), target);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload_result(), target);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->too_many_poor_uploads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StopBroadcastUpload_Notification)
  return target;
}

size_t CBroadcast_StopBroadcastUpload_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StopBroadcastUpload_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_relay_id = 2;
    if (has_broadcast_relay_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 3;
    if (has_upload_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_result());
    }

    // optional bool too_many_poor_uploads = 4;
    if (has_too_many_poor_uploads()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StopBroadcastUpload_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StopBroadcastUpload_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_StopBroadcastUpload_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_StopBroadcastUpload_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_relay_id_ = from.broadcast_relay_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      upload_result_ = from.upload_result_;
    }
    if (cached_has_bits & 0x00000008u) {
      too_many_poor_uploads_ = from.too_many_poor_uploads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopBroadcastUpload_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopBroadcastUpload_Notification::Swap(CBroadcast_StopBroadcastUpload_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StopBroadcastUpload_Notification::InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(broadcast_relay_id_, other->broadcast_relay_id_);
  swap(upload_result_, other->upload_result_);
  swap(too_many_poor_uploads_, other->too_many_poor_uploads_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_StopBroadcastUpload_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SessionClosed_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SessionClosed_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SessionClosed_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_SessionClosed_Notification)
}
CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SessionClosed_Notification)
}

void CBroadcast_SessionClosed_Notification::SharedCtor() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_SessionClosed_Notification::~CBroadcast_SessionClosed_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_SessionClosed_Notification)
  SharedDtor();
}

void CBroadcast_SessionClosed_Notification::SharedDtor() {
}

void CBroadcast_SessionClosed_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_SessionClosed_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SessionClosed_Notification& CBroadcast_SessionClosed_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SessionClosed_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_SessionClosed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SessionClosed_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_SessionClosed_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_SessionClosed_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_SessionClosed_Notification)
  return false;
#undef DO_
}

void CBroadcast_SessionClosed_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_SessionClosed_Notification)
}

::google::protobuf::uint8* CBroadcast_SessionClosed_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SessionClosed_Notification)
  return target;
}

size_t CBroadcast_SessionClosed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SessionClosed_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SessionClosed_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SessionClosed_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SessionClosed_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_SessionClosed_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_SessionClosed_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_SessionClosed_Notification::MergeFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SessionClosed_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SessionClosed_Notification::Swap(CBroadcast_SessionClosed_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SessionClosed_Notification::InternalSwap(CBroadcast_SessionClosed_Notification* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_SessionClosed_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_ViewerBroadcastInvite_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_ViewerBroadcastInvite_Notification::kBroadcasterSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_ViewerBroadcastInvite_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_ViewerBroadcastInvite_Notification)
}
CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcaster_steamid_ = from.broadcaster_steamid_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_ViewerBroadcastInvite_Notification)
}

void CBroadcast_ViewerBroadcastInvite_Notification::SharedCtor() {
  broadcaster_steamid_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_ViewerBroadcastInvite_Notification::~CBroadcast_ViewerBroadcastInvite_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_ViewerBroadcastInvite_Notification)
  SharedDtor();
}

void CBroadcast_ViewerBroadcastInvite_Notification::SharedDtor() {
}

void CBroadcast_ViewerBroadcastInvite_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_ViewerBroadcastInvite_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_ViewerBroadcastInvite_Notification& CBroadcast_ViewerBroadcastInvite_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_ViewerBroadcastInvite_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_ViewerBroadcastInvite_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcaster_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_ViewerBroadcastInvite_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_ViewerBroadcastInvite_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcaster_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcaster_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_ViewerBroadcastInvite_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_ViewerBroadcastInvite_Notification)
  return false;
#undef DO_
}

void CBroadcast_ViewerBroadcastInvite_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcaster_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_ViewerBroadcastInvite_Notification)
}

::google::protobuf::uint8* CBroadcast_ViewerBroadcastInvite_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcaster_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_ViewerBroadcastInvite_Notification)
  return target;
}

size_t CBroadcast_ViewerBroadcastInvite_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_ViewerBroadcastInvite_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 broadcaster_steamid = 1;
  if (has_broadcaster_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_ViewerBroadcastInvite_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_ViewerBroadcastInvite_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_ViewerBroadcastInvite_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_ViewerBroadcastInvite_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcaster_steamid()) {
    set_broadcaster_steamid(from.broadcaster_steamid());
  }
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_ViewerBroadcastInvite_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_ViewerBroadcastInvite_Notification::Swap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_ViewerBroadcastInvite_Notification::InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  using std::swap;
  swap(broadcaster_steamid_, other->broadcaster_steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_ViewerBroadcastInvite_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_BroadcastStatus_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BroadcastStatus_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_BroadcastStatus_Notification::kNumViewersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BroadcastStatus_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_BroadcastStatus_Notification)
}
CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BroadcastStatus_Notification)
}

void CBroadcast_BroadcastStatus_Notification::SharedCtor() {
  ::memset(&broadcast_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_viewers_) -
      reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
}

CBroadcast_BroadcastStatus_Notification::~CBroadcast_BroadcastStatus_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_BroadcastStatus_Notification)
  SharedDtor();
}

void CBroadcast_BroadcastStatus_Notification::SharedDtor() {
}

void CBroadcast_BroadcastStatus_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_BroadcastStatus_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BroadcastStatus_Notification& CBroadcast_BroadcastStatus_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_BroadcastStatus_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_BroadcastStatus_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_viewers_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BroadcastStatus_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_BroadcastStatus_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_viewers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_BroadcastStatus_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_BroadcastStatus_Notification)
  return false;
#undef DO_
}

void CBroadcast_BroadcastStatus_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_viewers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_BroadcastStatus_Notification)
}

::google::protobuf::uint8* CBroadcast_BroadcastStatus_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_viewers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BroadcastStatus_Notification)
  return target;
}

size_t CBroadcast_BroadcastStatus_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BroadcastStatus_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional int32 num_viewers = 2;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_viewers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_BroadcastStatus_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BroadcastStatus_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BroadcastStatus_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_BroadcastStatus_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_BroadcastStatus_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_BroadcastStatus_Notification::MergeFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastStatus_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastStatus_Notification::Swap(CBroadcast_BroadcastStatus_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BroadcastStatus_Notification::InternalSwap(CBroadcast_BroadcastStatus_Notification* other) {
  using std::swap;
  swap(broadcast_id_, other->broadcast_id_);
  swap(num_viewers_, other->num_viewers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_BroadcastStatus_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_SendThumbnailToRelay_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailUploadTokenFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailBroadcastSessionIdFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailDataFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailWidthFieldNumber;
const int CBroadcast_SendThumbnailToRelay_Notification::kThumbnailHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SendThumbnailToRelay_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_SendThumbnailToRelay_Notification)
}
CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification(const CBroadcast_SendThumbnailToRelay_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_upload_token()) {
    thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
  }
  thumbnail_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail_data()) {
    thumbnail_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_data_);
  }
  ::memcpy(&thumbnail_broadcast_session_id_, &from.thumbnail_broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SendThumbnailToRelay_Notification)
}

void CBroadcast_SendThumbnailToRelay_Notification::SharedCtor() {
  thumbnail_upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thumbnail_broadcast_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_height_) -
      reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
}

CBroadcast_SendThumbnailToRelay_Notification::~CBroadcast_SendThumbnailToRelay_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_SendThumbnailToRelay_Notification)
  SharedDtor();
}

void CBroadcast_SendThumbnailToRelay_Notification::SharedDtor() {
  thumbnail_upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendThumbnailToRelay_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CBroadcast_SendThumbnailToRelay_Notification::descriptor() {
  ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SendThumbnailToRelay_Notification& CBroadcast_SendThumbnailToRelay_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::scc_info_CBroadcast_SendThumbnailToRelay_Notification.base);
  return *internal_default_instance();
}


void CBroadcast_SendThumbnailToRelay_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SendThumbnailToRelay_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_upload_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&thumbnail_broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_height_) -
        reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SendThumbnailToRelay_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_SendThumbnailToRelay_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string thumbnail_upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 thumbnail_broadcast_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_thumbnail_broadcast_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &thumbnail_broadcast_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes thumbnail_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_thumbnail_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thumbnail_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_thumbnail_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_SendThumbnailToRelay_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_SendThumbnailToRelay_Notification)
  return false;
#undef DO_
}

void CBroadcast_SendThumbnailToRelay_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_SendThumbnailToRelay_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thumbnail_upload_token(), output);
  }

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->thumbnail_broadcast_session_id(), output);
  }

  // optional bytes thumbnail_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->thumbnail_data(), output);
  }

  // optional uint32 thumbnail_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbnail_width(), output);
  }

  // optional uint32 thumbnail_height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thumbnail_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_SendThumbnailToRelay_Notification)
}

::google::protobuf::uint8* CBroadcast_SendThumbnailToRelay_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SendThumbnailToRelay_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbnail_upload_token().data(), static_cast<int>(this->thumbnail_upload_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thumbnail_upload_token(), target);
  }

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->thumbnail_broadcast_session_id(), target);
  }

  // optional bytes thumbnail_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->thumbnail_data(), target);
  }

  // optional uint32 thumbnail_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbnail_width(), target);
  }

  // optional uint32 thumbnail_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thumbnail_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SendThumbnailToRelay_Notification)
  return target;
}

size_t CBroadcast_SendThumbnailToRelay_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SendThumbnailToRelay_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string thumbnail_upload_token = 1;
    if (has_thumbnail_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_upload_token());
    }

    // optional bytes thumbnail_data = 3;
    if (has_thumbnail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thumbnail_data());
    }

    // optional fixed64 thumbnail_broadcast_session_id = 2;
    if (has_thumbnail_broadcast_session_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_width = 4;
    if (has_thumbnail_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_width());
    }

    // optional uint32 thumbnail_height = 5;
    if (has_thumbnail_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_SendThumbnailToRelay_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_SendThumbnailToRelay_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendThumbnailToRelay_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SendThumbnailToRelay_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_SendThumbnailToRelay_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_SendThumbnailToRelay_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_SendThumbnailToRelay_Notification::MergeFrom(const CBroadcast_SendThumbnailToRelay_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SendThumbnailToRelay_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_thumbnail_upload_token();
      thumbnail_upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_upload_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_thumbnail_data();
      thumbnail_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnail_broadcast_session_id_ = from.thumbnail_broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_width_ = from.thumbnail_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_height_ = from.thumbnail_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_SendThumbnailToRelay_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_SendThumbnailToRelay_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendThumbnailToRelay_Notification::CopyFrom(const CBroadcast_SendThumbnailToRelay_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SendThumbnailToRelay_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendThumbnailToRelay_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SendThumbnailToRelay_Notification::Swap(CBroadcast_SendThumbnailToRelay_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendThumbnailToRelay_Notification::InternalSwap(CBroadcast_SendThumbnailToRelay_Notification* other) {
  using std::swap;
  thumbnail_upload_token_.Swap(&other->thumbnail_upload_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_data_.Swap(&other->thumbnail_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thumbnail_broadcast_session_id_, other->thumbnail_broadcast_session_id_);
  swap(thumbnail_width_, other->thumbnail_width_);
  swap(thumbnail_height_, other->thumbnail_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CBroadcast_SendThumbnailToRelay_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Broadcast::~Broadcast() {}

const ::google::protobuf::ServiceDescriptor* Broadcast::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Broadcast::GetDescriptor() {
  return descriptor();
}

void Broadcast::BeginBroadcastSession(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_BeginBroadcastSession_Request*,
                         ::CBroadcast_BeginBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::EndBroadcastSession(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_EndBroadcastSession_Request*,
                         ::CBroadcast_EndBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::StartBroadcastUpload(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_StartBroadcastUpload_Request*,
                         ::CBroadcast_StartBroadcastUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartBroadcastUpload() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_NotifyBroadcastUploadStop_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastUploadStop() not implemented.");
  done->Run();
}

void Broadcast::WatchBroadcast(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_WatchBroadcast_Request*,
                         ::CBroadcast_WatchBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WatchBroadcast() not implemented.");
  done->Run();
}

void Broadcast::HeartbeatBroadcast(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_HeartbeatBroadcast_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartbeatBroadcast() not implemented.");
  done->Run();
}

void Broadcast::StopWatchingBroadcast(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_StopWatchingBroadcast_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopWatchingBroadcast() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastStatus(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_GetBroadcastStatus_Request*,
                         ::CBroadcast_GetBroadcastStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastStatus() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastThumbnail(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_GetBroadcastThumbnail_Request*,
                         ::CBroadcast_GetBroadcastThumbnail_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastThumbnail() not implemented.");
  done->Run();
}

void Broadcast::InviteToBroadcast(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_InviteToBroadcast_Request*,
                         ::CBroadcast_InviteToBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InviteToBroadcast() not implemented.");
  done->Run();
}

void Broadcast::SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_SendBroadcastStateToServer_Request*,
                         ::CBroadcast_SendBroadcastStateToServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendBroadcastStateToServer() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastSessionHeartbeat() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_GetBroadcastChatInfo_Request*,
                         ::CBroadcast_GetBroadcastChatInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatInfo() not implemented.");
  done->Run();
}

void Broadcast::PostChatMessage(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_PostChatMessage_Request*,
                         ::CBroadcast_PostChatMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostChatMessage() not implemented.");
  done->Run();
}

void Broadcast::MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_MuteBroadcastChatUser_Request*,
                         ::CBroadcast_MuteBroadcastChatUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MuteBroadcastChatUser() not implemented.");
  done->Run();
}

void Broadcast::RemoveUserChatText(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_RemoveUserChatText_Request*,
                         ::CBroadcast_RemoveUserChatText_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveUserChatText() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_GetBroadcastChatUserNames_Request*,
                         ::CBroadcast_GetBroadcastChatUserNames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatUserNames() not implemented.");
  done->Run();
}

void Broadcast::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      BeginBroadcastSession(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_BeginBroadcastSession_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_BeginBroadcastSession_Response*>(response),
             done);
      break;
    case 1:
      EndBroadcastSession(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_EndBroadcastSession_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_EndBroadcastSession_Response*>(response),
             done);
      break;
    case 2:
      StartBroadcastUpload(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_StartBroadcastUpload_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_StartBroadcastUpload_Response*>(response),
             done);
      break;
    case 3:
      NotifyBroadcastUploadStop(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_NotifyBroadcastUploadStop_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 4:
      WatchBroadcast(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_WatchBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_WatchBroadcast_Response*>(response),
             done);
      break;
    case 5:
      HeartbeatBroadcast(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_HeartbeatBroadcast_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 6:
      StopWatchingBroadcast(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_StopWatchingBroadcast_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 7:
      GetBroadcastStatus(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_GetBroadcastStatus_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_GetBroadcastStatus_Response*>(response),
             done);
      break;
    case 8:
      GetBroadcastThumbnail(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_GetBroadcastThumbnail_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_GetBroadcastThumbnail_Response*>(response),
             done);
      break;
    case 9:
      InviteToBroadcast(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_InviteToBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_InviteToBroadcast_Response*>(response),
             done);
      break;
    case 10:
      SendBroadcastStateToServer(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_SendBroadcastStateToServer_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_SendBroadcastStateToServer_Response*>(response),
             done);
      break;
    case 11:
      NotifyBroadcastSessionHeartbeat(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 12:
      GetBroadcastChatInfo(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_GetBroadcastChatInfo_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_GetBroadcastChatInfo_Response*>(response),
             done);
      break;
    case 13:
      PostChatMessage(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_PostChatMessage_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_PostChatMessage_Response*>(response),
             done);
      break;
    case 14:
      MuteBroadcastChatUser(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_MuteBroadcastChatUser_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_MuteBroadcastChatUser_Response*>(response),
             done);
      break;
    case 15:
      RemoveUserChatText(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_RemoveUserChatText_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_RemoveUserChatText_Response*>(response),
             done);
      break;
    case 16:
      GetBroadcastChatUserNames(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_GetBroadcastChatUserNames_Request*>(request),
             ::google::protobuf::down_cast< ::CBroadcast_GetBroadcastChatUserNames_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Broadcast::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBroadcast_BeginBroadcastSession_Request::default_instance();
    case 1:
      return ::CBroadcast_EndBroadcastSession_Request::default_instance();
    case 2:
      return ::CBroadcast_StartBroadcastUpload_Request::default_instance();
    case 3:
      return ::CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance();
    case 4:
      return ::CBroadcast_WatchBroadcast_Request::default_instance();
    case 5:
      return ::CBroadcast_HeartbeatBroadcast_Notification::default_instance();
    case 6:
      return ::CBroadcast_StopWatchingBroadcast_Notification::default_instance();
    case 7:
      return ::CBroadcast_GetBroadcastStatus_Request::default_instance();
    case 8:
      return ::CBroadcast_GetBroadcastThumbnail_Request::default_instance();
    case 9:
      return ::CBroadcast_InviteToBroadcast_Request::default_instance();
    case 10:
      return ::CBroadcast_SendBroadcastStateToServer_Request::default_instance();
    case 11:
      return ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance();
    case 12:
      return ::CBroadcast_GetBroadcastChatInfo_Request::default_instance();
    case 13:
      return ::CBroadcast_PostChatMessage_Request::default_instance();
    case 14:
      return ::CBroadcast_MuteBroadcastChatUser_Request::default_instance();
    case 15:
      return ::CBroadcast_RemoveUserChatText_Request::default_instance();
    case 16:
      return ::CBroadcast_GetBroadcastChatUserNames_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Broadcast::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBroadcast_BeginBroadcastSession_Response::default_instance();
    case 1:
      return ::CBroadcast_EndBroadcastSession_Response::default_instance();
    case 2:
      return ::CBroadcast_StartBroadcastUpload_Response::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::CBroadcast_WatchBroadcast_Response::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::CBroadcast_GetBroadcastStatus_Response::default_instance();
    case 8:
      return ::CBroadcast_GetBroadcastThumbnail_Response::default_instance();
    case 9:
      return ::CBroadcast_InviteToBroadcast_Response::default_instance();
    case 10:
      return ::CBroadcast_SendBroadcastStateToServer_Response::default_instance();
    case 11:
      return ::NoResponse::default_instance();
    case 12:
      return ::CBroadcast_GetBroadcastChatInfo_Response::default_instance();
    case 13:
      return ::CBroadcast_PostChatMessage_Response::default_instance();
    case 14:
      return ::CBroadcast_MuteBroadcastChatUser_Response::default_instance();
    case 15:
      return ::CBroadcast_RemoveUserChatText_Response::default_instance();
    case 16:
      return ::CBroadcast_GetBroadcastChatUserNames_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Broadcast_Stub::Broadcast_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Broadcast_Stub::Broadcast_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Broadcast_Stub::~Broadcast_Stub() {
  if (owns_channel_) delete channel_;
}

void Broadcast_Stub::BeginBroadcastSession(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_BeginBroadcastSession_Request* request,
                              ::CBroadcast_BeginBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Broadcast_Stub::EndBroadcastSession(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_EndBroadcastSession_Request* request,
                              ::CBroadcast_EndBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Broadcast_Stub::StartBroadcastUpload(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_StartBroadcastUpload_Request* request,
                              ::CBroadcast_StartBroadcastUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Broadcast_Stub::WatchBroadcast(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_WatchBroadcast_Request* request,
                              ::CBroadcast_WatchBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Broadcast_Stub::HeartbeatBroadcast(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_HeartbeatBroadcast_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Broadcast_Stub::StopWatchingBroadcast(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_StopWatchingBroadcast_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastStatus(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_GetBroadcastStatus_Request* request,
                              ::CBroadcast_GetBroadcastStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastThumbnail(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_GetBroadcastThumbnail_Request* request,
                              ::CBroadcast_GetBroadcastThumbnail_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Broadcast_Stub::InviteToBroadcast(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_InviteToBroadcast_Request* request,
                              ::CBroadcast_InviteToBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Broadcast_Stub::SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_SendBroadcastStateToServer_Request* request,
                              ::CBroadcast_SendBroadcastStateToServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_GetBroadcastChatInfo_Request* request,
                              ::CBroadcast_GetBroadcastChatInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Broadcast_Stub::PostChatMessage(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_PostChatMessage_Request* request,
                              ::CBroadcast_PostChatMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Broadcast_Stub::MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_MuteBroadcastChatUser_Request* request,
                              ::CBroadcast_MuteBroadcastChatUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Broadcast_Stub::RemoveUserChatText(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_RemoveUserChatText_Request* request,
                              ::CBroadcast_RemoveUserChatText_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_GetBroadcastChatUserNames_Request* request,
                              ::CBroadcast_GetBroadcastChatUserNames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
// ===================================================================

BroadcastClient::~BroadcastClient() {}

const ::google::protobuf::ServiceDescriptor* BroadcastClient::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* BroadcastClient::GetDescriptor() {
  return descriptor();
}

void BroadcastClient::NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_BroadcastViewerState_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastViewerState() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_WaitingBroadcastViewer_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWaitingBroadcastViewer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_StopBroadcastUpload_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStopBroadcastUpload() not implemented.");
  done->Run();
}

void BroadcastClient::NotifySessionClosed(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_SessionClosed_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySessionClosed() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_ViewerBroadcastInvite_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyViewerBroadcastInvite() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_BroadcastStatus_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastStatus() not implemented.");
  done->Run();
}

void BroadcastClient::SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                         const ::CBroadcast_SendThumbnailToRelay_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendThumbnailToRelay() not implemented.");
  done->Run();
}

void BroadcastClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      NotifyBroadcastViewerState(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_BroadcastViewerState_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 1:
      NotifyWaitingBroadcastViewer(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_WaitingBroadcastViewer_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 2:
      NotifyStopBroadcastUpload(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_StopBroadcastUpload_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 3:
      NotifySessionClosed(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_SessionClosed_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 4:
      NotifyViewerBroadcastInvite(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_ViewerBroadcastInvite_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 5:
      NotifyBroadcastStatus(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_BroadcastStatus_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 6:
      SendThumbnailToRelay(controller,
             ::google::protobuf::down_cast<const ::CBroadcast_SendThumbnailToRelay_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BroadcastClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBroadcast_BroadcastViewerState_Notification::default_instance();
    case 1:
      return ::CBroadcast_WaitingBroadcastViewer_Notification::default_instance();
    case 2:
      return ::CBroadcast_StopBroadcastUpload_Notification::default_instance();
    case 3:
      return ::CBroadcast_SessionClosed_Notification::default_instance();
    case 4:
      return ::CBroadcast_ViewerBroadcastInvite_Notification::default_instance();
    case 5:
      return ::CBroadcast_BroadcastStatus_Notification::default_instance();
    case 6:
      return ::CBroadcast_SendThumbnailToRelay_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& BroadcastClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::NoResponse::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

BroadcastClient_Stub::BroadcastClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BroadcastClient_Stub::BroadcastClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BroadcastClient_Stub::~BroadcastClient_Stub() {
  if (owns_channel_) delete channel_;
}

void BroadcastClient_Stub::NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_BroadcastViewerState_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_WaitingBroadcastViewer_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_StopBroadcastUpload_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifySessionClosed(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_SessionClosed_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_ViewerBroadcastInvite_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_BroadcastStatus_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void BroadcastClient_Stub::SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                              const ::CBroadcast_SendThumbnailToRelay_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_BeginBroadcastSession_Request* Arena::CreateMaybeMessage< ::CBroadcast_BeginBroadcastSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_BeginBroadcastSession_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_BeginBroadcastSession_Response* Arena::CreateMaybeMessage< ::CBroadcast_BeginBroadcastSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_BeginBroadcastSession_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_EndBroadcastSession_Request* Arena::CreateMaybeMessage< ::CBroadcast_EndBroadcastSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_EndBroadcastSession_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_EndBroadcastSession_Response* Arena::CreateMaybeMessage< ::CBroadcast_EndBroadcastSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_EndBroadcastSession_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_StartBroadcastUpload_Request* Arena::CreateMaybeMessage< ::CBroadcast_StartBroadcastUpload_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_StartBroadcastUpload_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_StartBroadcastUpload_Response* Arena::CreateMaybeMessage< ::CBroadcast_StartBroadcastUpload_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_StartBroadcastUpload_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_NotifyBroadcastUploadStop_Notification* Arena::CreateMaybeMessage< ::CBroadcast_NotifyBroadcastUploadStop_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_NotifyBroadcastUploadStop_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_WatchBroadcast_Request* Arena::CreateMaybeMessage< ::CBroadcast_WatchBroadcast_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_WatchBroadcast_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_WatchBroadcast_Response* Arena::CreateMaybeMessage< ::CBroadcast_WatchBroadcast_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_WatchBroadcast_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_HeartbeatBroadcast_Notification* Arena::CreateMaybeMessage< ::CBroadcast_HeartbeatBroadcast_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_HeartbeatBroadcast_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_StopWatchingBroadcast_Notification* Arena::CreateMaybeMessage< ::CBroadcast_StopWatchingBroadcast_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_StopWatchingBroadcast_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastStatus_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastStatus_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastStatus_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastStatus_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastStatus_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastThumbnail_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastThumbnail_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastThumbnail_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastThumbnail_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastThumbnail_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastThumbnail_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_InviteToBroadcast_Request* Arena::CreateMaybeMessage< ::CBroadcast_InviteToBroadcast_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_InviteToBroadcast_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_InviteToBroadcast_Response* Arena::CreateMaybeMessage< ::CBroadcast_InviteToBroadcast_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_InviteToBroadcast_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_SendBroadcastStateToServer_Request* Arena::CreateMaybeMessage< ::CBroadcast_SendBroadcastStateToServer_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_SendBroadcastStateToServer_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_SendBroadcastStateToServer_Response* Arena::CreateMaybeMessage< ::CBroadcast_SendBroadcastStateToServer_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_SendBroadcastStateToServer_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* Arena::CreateMaybeMessage< ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastChatInfo_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastChatInfo_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastChatInfo_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastChatInfo_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_PostChatMessage_Request* Arena::CreateMaybeMessage< ::CBroadcast_PostChatMessage_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_PostChatMessage_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_PostChatMessage_Response* Arena::CreateMaybeMessage< ::CBroadcast_PostChatMessage_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_PostChatMessage_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_MuteBroadcastChatUser_Request* Arena::CreateMaybeMessage< ::CBroadcast_MuteBroadcastChatUser_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_MuteBroadcastChatUser_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_MuteBroadcastChatUser_Response* Arena::CreateMaybeMessage< ::CBroadcast_MuteBroadcastChatUser_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_MuteBroadcastChatUser_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_RemoveUserChatText_Request* Arena::CreateMaybeMessage< ::CBroadcast_RemoveUserChatText_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_RemoveUserChatText_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_RemoveUserChatText_Response* Arena::CreateMaybeMessage< ::CBroadcast_RemoveUserChatText_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_RemoveUserChatText_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastChatUserNames_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatUserNames_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastChatUserNames_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_GetBroadcastChatUserNames_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatUserNames_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_GetBroadcastChatUserNames_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_BroadcastViewerState_Notification* Arena::CreateMaybeMessage< ::CBroadcast_BroadcastViewerState_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_BroadcastViewerState_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_WaitingBroadcastViewer_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WaitingBroadcastViewer_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_WaitingBroadcastViewer_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_StopBroadcastUpload_Notification* Arena::CreateMaybeMessage< ::CBroadcast_StopBroadcastUpload_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_StopBroadcastUpload_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_SessionClosed_Notification* Arena::CreateMaybeMessage< ::CBroadcast_SessionClosed_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_SessionClosed_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_ViewerBroadcastInvite_Notification* Arena::CreateMaybeMessage< ::CBroadcast_ViewerBroadcastInvite_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_ViewerBroadcastInvite_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_BroadcastStatus_Notification* Arena::CreateMaybeMessage< ::CBroadcast_BroadcastStatus_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_BroadcastStatus_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CBroadcast_SendThumbnailToRelay_Notification* Arena::CreateMaybeMessage< ::CBroadcast_SendThumbnailToRelay_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CBroadcast_SendThumbnailToRelay_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
