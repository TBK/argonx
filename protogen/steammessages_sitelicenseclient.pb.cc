// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_sitelicenseclient.proto

#include "steammessages_sitelicenseclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CMsgClientSiteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteInfo>
      _instance;
} _CMsgClientSiteInfo_default_instance_;
class CMsgClientSiteLicenseCheckoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseCheckout>
      _instance;
} _CMsgClientSiteLicenseCheckout_default_instance_;
class CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseCheckoutResponse>
      _instance;
} _CMsgClientSiteLicenseCheckoutResponse_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetAvailableSeats>
      _instance;
} _CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetAvailableSeatsResponse>
      _instance;
} _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetContentCacheInfo>
      _instance;
} _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetContentCacheInfoResponse>
      _instance;
} _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
namespace protobuf_steammessages_5fsitelicenseclient_2eproto {
static void InitDefaultsCMsgClientSiteInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteInfo_default_instance_;
    new (ptr) ::CMsgClientSiteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteInfo}, {}};

static void InitDefaultsCMsgClientSiteLicenseCheckout() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteLicenseCheckout_default_instance_;
    new (ptr) ::CMsgClientSiteLicenseCheckout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteLicenseCheckout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseCheckout =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseCheckout}, {}};

static void InitDefaultsCMsgClientSiteLicenseCheckoutResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteLicenseCheckoutResponse_default_instance_;
    new (ptr) ::CMsgClientSiteLicenseCheckoutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteLicenseCheckoutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseCheckoutResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseCheckoutResponse}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetAvailableSeats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
    new (ptr) ::CMsgClientSiteLicenseGetAvailableSeats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteLicenseGetAvailableSeats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetAvailableSeats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetAvailableSeats}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetAvailableSeatsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
    new (ptr) ::CMsgClientSiteLicenseGetAvailableSeatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteLicenseGetAvailableSeatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetAvailableSeatsResponse}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetContentCacheInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
    new (ptr) ::CMsgClientSiteLicenseGetContentCacheInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteLicenseGetContentCacheInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetContentCacheInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetContentCacheInfo}, {}};

static void InitDefaultsCMsgClientSiteLicenseGetContentCacheInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
    new (ptr) ::CMsgClientSiteLicenseGetContentCacheInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgClientSiteLicenseGetContentCacheInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSiteLicenseGetContentCacheInfoResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseCheckout.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseCheckoutResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetAvailableSeats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetContentCacheInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteInfo, site_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteInfo, site_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseCheckout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseCheckout, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseCheckoutResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseCheckoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseCheckoutResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeats, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, seats_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, use_cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, ipv4_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, p2p_group_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgClientSiteInfo)},
  { 9, 15, sizeof(::CMsgClientSiteLicenseCheckout)},
  { 16, 22, sizeof(::CMsgClientSiteLicenseCheckoutResponse)},
  { 23, 29, sizeof(::CMsgClientSiteLicenseGetAvailableSeats)},
  { 30, 37, sizeof(::CMsgClientSiteLicenseGetAvailableSeatsResponse)},
  { 39, 44, sizeof(::CMsgClientSiteLicenseGetContentCacheInfo)},
  { 44, 53, sizeof(::CMsgClientSiteLicenseGetContentCacheInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteLicenseCheckout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteLicenseCheckoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteLicenseGetAvailableSeats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_sitelicenseclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%steammessages_sitelicenseclient.proto\032"
      "\030steammessages_base.proto\"8\n\022CMsgClientS"
      "iteInfo\022\017\n\007site_id\030\001 \001(\004\022\021\n\tsite_name\030\002 "
      "\001(\t\".\n\035CMsgClientSiteLicenseCheckout\022\r\n\005"
      "appid\030\001 \001(\r\";\n%CMsgClientSiteLicenseChec"
      "koutResponse\022\022\n\007eresult\030\001 \001(\005:\0012\"7\n&CMsg"
      "ClientSiteLicenseGetAvailableSeats\022\r\n\005ap"
      "pid\030\001 \001(\r\"S\n.CMsgClientSiteLicenseGetAva"
      "ilableSeatsResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022"
      "\r\n\005seats\030\002 \001(\r\"*\n(CMsgClientSiteLicenseG"
      "etContentCacheInfo\"\203\001\n0CMsgClientSiteLic"
      "enseGetContentCacheInfoResponse\022\021\n\tuse_c"
      "ache\030\001 \001(\010\022\024\n\014ipv4_address\030\002 \001(\r\022\023\n\013port"
      "_number\030\003 \001(\r\022\021\n\tp2p_group\030\004 \001(\rB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_sitelicenseclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fsitelicenseclient_2eproto

// ===================================================================

void CMsgClientSiteInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteInfo::kSiteIdFieldNumber;
const int CMsgClientSiteInfo::kSiteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteInfo::CMsgClientSiteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteInfo)
}
CMsgClientSiteInfo::CMsgClientSiteInfo(const CMsgClientSiteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  site_id_ = from.site_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteInfo)
}

void CMsgClientSiteInfo::SharedCtor() {
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_id_ = GOOGLE_ULONGLONG(0);
}

CMsgClientSiteInfo::~CMsgClientSiteInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteInfo)
  SharedDtor();
}

void CMsgClientSiteInfo::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteInfo::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteInfo& CMsgClientSiteInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteInfo.base);
  return *internal_default_instance();
}


void CMsgClientSiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    site_name_.ClearNonDefaultToEmptyNoArena();
  }
  site_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_site_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), static_cast<int>(this->site_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgClientSiteInfo.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteInfo)
  return false;
#undef DO_
}

void CMsgClientSiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->site_id(), output);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), static_cast<int>(this->site_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientSiteInfo.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteInfo)
}

::google::protobuf::uint8* CMsgClientSiteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), static_cast<int>(this->site_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientSiteInfo.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteInfo)
  return target;
}

size_t CMsgClientSiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string site_name = 2;
    if (has_site_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_name());
    }

    // optional uint64 site_id = 1;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->site_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteInfo)
    MergeFrom(*source);
  }
}

void CMsgClientSiteInfo::MergeFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_site_name();
      site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteInfo::CopyFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteInfo::Swap(CMsgClientSiteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteInfo::InternalSwap(CMsgClientSiteInfo* other) {
  using std::swap;
  site_name_.Swap(&other->site_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(site_id_, other->site_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteInfo::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseCheckout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseCheckout::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseCheckout.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteLicenseCheckout)
}
CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout(const CMsgClientSiteLicenseCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseCheckout)
}

void CMsgClientSiteLicenseCheckout::SharedCtor() {
  appid_ = 0u;
}

CMsgClientSiteLicenseCheckout::~CMsgClientSiteLicenseCheckout() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseCheckout)
  SharedDtor();
}

void CMsgClientSiteLicenseCheckout::SharedDtor() {
}

void CMsgClientSiteLicenseCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseCheckout::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseCheckout& CMsgClientSiteLicenseCheckout::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseCheckout.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteLicenseCheckout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteLicenseCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteLicenseCheckout)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteLicenseCheckout)
}

::google::protobuf::uint8* CMsgClientSiteLicenseCheckout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseCheckout)
  return target;
}

size_t CMsgClientSiteLicenseCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseCheckout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseCheckout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteLicenseCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteLicenseCheckout)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseCheckout::MergeFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckout::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckout::Swap(CMsgClientSiteLicenseCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseCheckout::InternalSwap(CMsgClientSiteLicenseCheckout* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseCheckout::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseCheckoutResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseCheckoutResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseCheckoutResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteLicenseCheckoutResponse)
}
CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse(const CMsgClientSiteLicenseCheckoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseCheckoutResponse)
}

void CMsgClientSiteLicenseCheckoutResponse::SharedCtor() {
  eresult_ = 2;
}

CMsgClientSiteLicenseCheckoutResponse::~CMsgClientSiteLicenseCheckoutResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseCheckoutResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseCheckoutResponse::SharedDtor() {
}

void CMsgClientSiteLicenseCheckoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseCheckoutResponse::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseCheckoutResponse& CMsgClientSiteLicenseCheckoutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseCheckoutResponse.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseCheckoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseCheckoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteLicenseCheckoutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteLicenseCheckoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteLicenseCheckoutResponse)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseCheckoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteLicenseCheckoutResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseCheckoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseCheckoutResponse)
  return target;
}

size_t CMsgClientSiteLicenseCheckoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseCheckoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseCheckoutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseCheckoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteLicenseCheckoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteLicenseCheckoutResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckoutResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckoutResponse::Swap(CMsgClientSiteLicenseCheckoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseCheckoutResponse::InternalSwap(CMsgClientSiteLicenseCheckoutResponse* other) {
  using std::swap;
  swap(eresult_, other->eresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseCheckoutResponse::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetAvailableSeats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetAvailableSeats::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetAvailableSeats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteLicenseGetAvailableSeats)
}
CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats(const CMsgClientSiteLicenseGetAvailableSeats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetAvailableSeats)
}

void CMsgClientSiteLicenseGetAvailableSeats::SharedCtor() {
  appid_ = 0u;
}

CMsgClientSiteLicenseGetAvailableSeats::~CMsgClientSiteLicenseGetAvailableSeats() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetAvailableSeats)
  SharedDtor();
}

void CMsgClientSiteLicenseGetAvailableSeats::SharedDtor() {
}

void CMsgClientSiteLicenseGetAvailableSeats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetAvailableSeats::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetAvailableSeats& CMsgClientSiteLicenseGetAvailableSeats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetAvailableSeats.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetAvailableSeats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetAvailableSeats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteLicenseGetAvailableSeats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteLicenseGetAvailableSeats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteLicenseGetAvailableSeats)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetAvailableSeats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteLicenseGetAvailableSeats)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetAvailableSeats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetAvailableSeats)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetAvailableSeats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetAvailableSeats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetAvailableSeats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteLicenseGetAvailableSeats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteLicenseGetAvailableSeats)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeats::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeats::Swap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetAvailableSeats::InternalSwap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetAvailableSeats::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetAvailableSeatsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetAvailableSeatsResponse::kEresultFieldNumber;
const int CMsgClientSiteLicenseGetAvailableSeatsResponse::kSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteLicenseGetAvailableSeatsResponse)
}
CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seats_, &from.seats_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&seats_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedCtor() {
  seats_ = 0u;
  eresult_ = 2;
}

CMsgClientSiteLicenseGetAvailableSeatsResponse::~CMsgClientSiteLicenseGetAvailableSeatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedDtor() {
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetAvailableSeatsResponse::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetAvailableSeatsResponse& CMsgClientSiteLicenseGetAvailableSeatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetAvailableSeatsResponse.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetAvailableSeatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    seats_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetAvailableSeatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 seats = 2;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetAvailableSeatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetAvailableSeatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteLicenseGetAvailableSeatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteLicenseGetAvailableSeatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      seats_ = from.seats_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::Swap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  using std::swap;
  swap(seats_, other->seats_);
  swap(eresult_, other->eresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetAvailableSeatsResponse::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetContentCacheInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetContentCacheInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteLicenseGetContentCacheInfo)
}
CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo(const CMsgClientSiteLicenseGetContentCacheInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetContentCacheInfo)
}

void CMsgClientSiteLicenseGetContentCacheInfo::SharedCtor() {
}

CMsgClientSiteLicenseGetContentCacheInfo::~CMsgClientSiteLicenseGetContentCacheInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetContentCacheInfo)
  SharedDtor();
}

void CMsgClientSiteLicenseGetContentCacheInfo::SharedDtor() {
}

void CMsgClientSiteLicenseGetContentCacheInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetContentCacheInfo::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetContentCacheInfo& CMsgClientSiteLicenseGetContentCacheInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetContentCacheInfo.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetContentCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetContentCacheInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteLicenseGetContentCacheInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteLicenseGetContentCacheInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteLicenseGetContentCacheInfo)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetContentCacheInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteLicenseGetContentCacheInfo)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetContentCacheInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetContentCacheInfo)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetContentCacheInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetContentCacheInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteLicenseGetContentCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetContentCacheInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetContentCacheInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteLicenseGetContentCacheInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteLicenseGetContentCacheInfo)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetContentCacheInfo::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetContentCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientSiteLicenseGetContentCacheInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteLicenseGetContentCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetContentCacheInfo::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetContentCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfo::Swap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetContentCacheInfo::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetContentCacheInfo::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSiteLicenseGetContentCacheInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kUseCacheFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kIpv4AddressFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kPortNumberFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kP2PGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientSiteLicenseGetContentCacheInfoResponse)
}
CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_cache_, &from.use_cache_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2p_group_) -
    reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedCtor() {
  ::memset(&use_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2p_group_) -
      reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
}

CMsgClientSiteLicenseGetContentCacheInfoResponse::~CMsgClientSiteLicenseGetContentCacheInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedDtor() {
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetContentCacheInfoResponse::descriptor() {
  ::protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetContentCacheInfoResponse& CMsgClientSiteLicenseGetContentCacheInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fsitelicenseclient_2eproto::scc_info_CMsgClientSiteLicenseGetContentCacheInfoResponse.base);
  return *internal_default_instance();
}


void CMsgClientSiteLicenseGetContentCacheInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&use_cache_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p2p_group_) -
        reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetContentCacheInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_cache = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_cache();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ipv4_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ipv4_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 p2p_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_p2p_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p2p_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_cache(), output);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipv4_address(), output);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port_number(), output);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->p2p_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_cache(), target);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipv4_address(), target);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port_number(), target);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->p2p_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool use_cache = 1;
    if (has_use_cache()) {
      total_size += 1 + 1;
    }

    // optional uint32 ipv4_address = 2;
    if (has_ipv4_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv4_address());
    }

    // optional uint32 port_number = 3;
    if (has_port_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_number());
    }

    // optional uint32 p2p_group = 4;
    if (has_p2p_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p2p_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetContentCacheInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetContentCacheInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSiteLicenseGetContentCacheInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSiteLicenseGetContentCacheInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      use_cache_ = from.use_cache_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipv4_address_ = from.ipv4_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_number_ = from.port_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      p2p_group_ = from.p2p_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::Swap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  using std::swap;
  swap(use_cache_, other->use_cache_);
  swap(ipv4_address_, other->ipv4_address_);
  swap(port_number_, other->port_number_);
  swap(p2p_group_, other->p2p_group_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetContentCacheInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteInfo* Arena::CreateMaybeMessage< ::CMsgClientSiteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteLicenseCheckout* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseCheckout >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteLicenseCheckout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteLicenseCheckoutResponse* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseCheckoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteLicenseCheckoutResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteLicenseGetAvailableSeats* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetAvailableSeats >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteLicenseGetAvailableSeats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteLicenseGetAvailableSeatsResponse* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetAvailableSeatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteLicenseGetAvailableSeatsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteLicenseGetContentCacheInfo* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetContentCacheInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteLicenseGetContentCacheInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgClientSiteLicenseGetContentCacheInfoResponse* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetContentCacheInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgClientSiteLicenseGetContentCacheInfoResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
