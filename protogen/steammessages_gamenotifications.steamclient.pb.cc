// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenotifications.steamclient.proto

#include "steammessages_gamenotifications.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_GetSessionDetails_Request_RequestedSession;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_Variable;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameNotificationSettings;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_LocalizedText;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_UserStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CGameNotifications_Session;
}  // namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto
class CGameNotifications_VariableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_Variable>
      _instance;
} _CGameNotifications_Variable_default_instance_;
class CGameNotifications_LocalizedTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_LocalizedText>
      _instance;
} _CGameNotifications_LocalizedText_default_instance_;
class CGameNotifications_UserStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UserStatus>
      _instance;
} _CGameNotifications_UserStatus_default_instance_;
class CGameNotifications_CreateSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_CreateSession_Request>
      _instance;
} _CGameNotifications_CreateSession_Request_default_instance_;
class CGameNotifications_CreateSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_CreateSession_Response>
      _instance;
} _CGameNotifications_CreateSession_Response_default_instance_;
class CGameNotifications_DeleteSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_DeleteSession_Request>
      _instance;
} _CGameNotifications_DeleteSession_Request_default_instance_;
class CGameNotifications_DeleteSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_DeleteSession_Response>
      _instance;
} _CGameNotifications_DeleteSession_Response_default_instance_;
class CGameNotifications_UpdateSession_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateSession_Request>
      _instance;
} _CGameNotifications_UpdateSession_Request_default_instance_;
class CGameNotifications_UpdateSession_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateSession_Response>
      _instance;
} _CGameNotifications_UpdateSession_Response_default_instance_;
class CGameNotifications_EnumerateSessions_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_EnumerateSessions_Request>
      _instance;
} _CGameNotifications_EnumerateSessions_Request_default_instance_;
class CGameNotifications_SessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_Session>
      _instance;
} _CGameNotifications_Session_default_instance_;
class CGameNotifications_EnumerateSessions_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_EnumerateSessions_Response>
      _instance;
} _CGameNotifications_EnumerateSessions_Response_default_instance_;
class CGameNotifications_GetSessionDetails_Request_RequestedSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_GetSessionDetails_Request_RequestedSession>
      _instance;
} _CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_;
class CGameNotifications_GetSessionDetails_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_GetSessionDetails_Request>
      _instance;
} _CGameNotifications_GetSessionDetails_Request_default_instance_;
class CGameNotifications_GetSessionDetails_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_GetSessionDetails_Response>
      _instance;
} _CGameNotifications_GetSessionDetails_Response_default_instance_;
class GameNotificationSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotificationSettings>
      _instance;
} _GameNotificationSettings_default_instance_;
class CGameNotifications_UpdateNotificationSettings_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateNotificationSettings_Request>
      _instance;
} _CGameNotifications_UpdateNotificationSettings_Request_default_instance_;
class CGameNotifications_UpdateNotificationSettings_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateNotificationSettings_Response>
      _instance;
} _CGameNotifications_UpdateNotificationSettings_Response_default_instance_;
class CGameNotifications_OnNotificationsRequested_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_OnNotificationsRequested_Notification>
      _instance;
} _CGameNotifications_OnNotificationsRequested_Notification_default_instance_;
class CGameNotifications_OnUserStatusChanged_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_OnUserStatusChanged_Notification>
      _instance;
} _CGameNotifications_OnUserStatusChanged_Notification_default_instance_;
namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto {
static void InitDefaultsCGameNotifications_Variable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_Variable_default_instance_;
    new (ptr) ::CGameNotifications_Variable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_Variable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_Variable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_Variable}, {}};

static void InitDefaultsCGameNotifications_LocalizedText() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_LocalizedText_default_instance_;
    new (ptr) ::CGameNotifications_LocalizedText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_LocalizedText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_LocalizedText =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_LocalizedText}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Variable.base,}};

static void InitDefaultsCGameNotifications_UserStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_UserStatus_default_instance_;
    new (ptr) ::CGameNotifications_UserStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_UserStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_UserStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_UserStatus}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_LocalizedText.base,}};

static void InitDefaultsCGameNotifications_CreateSession_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_CreateSession_Request_default_instance_;
    new (ptr) ::CGameNotifications_CreateSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_CreateSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CGameNotifications_CreateSession_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCGameNotifications_CreateSession_Request}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_LocalizedText.base,
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UserStatus.base,}};

static void InitDefaultsCGameNotifications_CreateSession_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_CreateSession_Response_default_instance_;
    new (ptr) ::CGameNotifications_CreateSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_CreateSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_CreateSession_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_CreateSession_Response}, {}};

static void InitDefaultsCGameNotifications_DeleteSession_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_DeleteSession_Request_default_instance_;
    new (ptr) ::CGameNotifications_DeleteSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_DeleteSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_DeleteSession_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_DeleteSession_Request}, {}};

static void InitDefaultsCGameNotifications_DeleteSession_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_DeleteSession_Response_default_instance_;
    new (ptr) ::CGameNotifications_DeleteSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_DeleteSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_DeleteSession_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_DeleteSession_Response}, {}};

static void InitDefaultsCGameNotifications_UpdateSession_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_UpdateSession_Request_default_instance_;
    new (ptr) ::CGameNotifications_UpdateSession_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_UpdateSession_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CGameNotifications_UpdateSession_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCGameNotifications_UpdateSession_Request}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_LocalizedText.base,
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UserStatus.base,}};

static void InitDefaultsCGameNotifications_UpdateSession_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_UpdateSession_Response_default_instance_;
    new (ptr) ::CGameNotifications_UpdateSession_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_UpdateSession_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_UpdateSession_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_UpdateSession_Response}, {}};

static void InitDefaultsCGameNotifications_EnumerateSessions_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_EnumerateSessions_Request_default_instance_;
    new (ptr) ::CGameNotifications_EnumerateSessions_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_EnumerateSessions_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_EnumerateSessions_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_EnumerateSessions_Request}, {}};

static void InitDefaultsCGameNotifications_Session() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_Session_default_instance_;
    new (ptr) ::CGameNotifications_Session();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_Session::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CGameNotifications_Session =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCGameNotifications_Session}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_LocalizedText.base,
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UserStatus.base,}};

static void InitDefaultsCGameNotifications_EnumerateSessions_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_EnumerateSessions_Response_default_instance_;
    new (ptr) ::CGameNotifications_EnumerateSessions_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_EnumerateSessions_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_EnumerateSessions_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_EnumerateSessions_Response}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Session.base,}};

static void InitDefaultsCGameNotifications_GetSessionDetails_Request_RequestedSession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_;
    new (ptr) ::CGameNotifications_GetSessionDetails_Request_RequestedSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_GetSessionDetails_Request_RequestedSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_GetSessionDetails_Request_RequestedSession =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_GetSessionDetails_Request_RequestedSession}, {}};

static void InitDefaultsCGameNotifications_GetSessionDetails_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_GetSessionDetails_Request_default_instance_;
    new (ptr) ::CGameNotifications_GetSessionDetails_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_GetSessionDetails_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_GetSessionDetails_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_GetSessionDetails_Request}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Request_RequestedSession.base,}};

static void InitDefaultsCGameNotifications_GetSessionDetails_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_GetSessionDetails_Response_default_instance_;
    new (ptr) ::CGameNotifications_GetSessionDetails_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_GetSessionDetails_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_GetSessionDetails_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_GetSessionDetails_Response}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Session.base,}};

static void InitDefaultsGameNotificationSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameNotificationSettings_default_instance_;
    new (ptr) ::GameNotificationSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameNotificationSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameNotificationSettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameNotificationSettings}, {}};

static void InitDefaultsCGameNotifications_UpdateNotificationSettings_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_UpdateNotificationSettings_Request_default_instance_;
    new (ptr) ::CGameNotifications_UpdateNotificationSettings_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_UpdateNotificationSettings_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_UpdateNotificationSettings_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_UpdateNotificationSettings_Request}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_GameNotificationSettings.base,}};

static void InitDefaultsCGameNotifications_UpdateNotificationSettings_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_UpdateNotificationSettings_Response_default_instance_;
    new (ptr) ::CGameNotifications_UpdateNotificationSettings_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_UpdateNotificationSettings_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_UpdateNotificationSettings_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_UpdateNotificationSettings_Response}, {}};

static void InitDefaultsCGameNotifications_OnNotificationsRequested_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_OnNotificationsRequested_Notification_default_instance_;
    new (ptr) ::CGameNotifications_OnNotificationsRequested_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_OnNotificationsRequested_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameNotifications_OnNotificationsRequested_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameNotifications_OnNotificationsRequested_Notification}, {}};

static void InitDefaultsCGameNotifications_OnUserStatusChanged_Notification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CGameNotifications_OnUserStatusChanged_Notification_default_instance_;
    new (ptr) ::CGameNotifications_OnUserStatusChanged_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGameNotifications_OnUserStatusChanged_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameNotifications_OnUserStatusChanged_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameNotifications_OnUserStatusChanged_Notification}, {
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UserStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_Variable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_LocalizedText.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_UserStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_CreateSession_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_CreateSession_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_DeleteSession_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_DeleteSession_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_UpdateSession_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_UpdateSession_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_EnumerateSessions_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_Session.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_EnumerateSessions_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_GetSessionDetails_Request_RequestedSession.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_GetSessionDetails_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_GetSessionDetails_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameNotificationSettings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_UpdateNotificationSettings_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_UpdateNotificationSettings_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_OnNotificationsRequested_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameNotifications_OnUserStatusChanged_Notification.base);
}

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Variable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Variable, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Variable, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_LocalizedText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_LocalizedText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_LocalizedText, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_LocalizedText, variables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_LocalizedText, rendered_text_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UserStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UserStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UserStatus, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UserStatus, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UserStatus, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UserStatus, message_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Request, steamid_),
  3,
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_CreateSession_Response, sessionid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Request, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Request, steamid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_DeleteSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Request, steamid_),
  1,
  3,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Request, include_all_user_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Request, include_auth_user_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Request, language_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, time_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_Session, user_status_),
  1,
  2,
  3,
  0,
  4,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_EnumerateSessions_Response, sessions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request_RequestedSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request_RequestedSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request_RequestedSession, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request_RequestedSession, include_auth_user_message_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Request, language_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_GetSessionDetails_Response, sessions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameNotificationSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameNotificationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameNotificationSettings, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameNotificationSettings, allow_notifications_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateNotificationSettings_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateNotificationSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateNotificationSettings_Request, game_notification_settings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateNotificationSettings_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_UpdateNotificationSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnNotificationsRequested_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnNotificationsRequested_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnNotificationsRequested_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnNotificationsRequested_Notification, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGameNotifications_OnUserStatusChanged_Notification, removed_),
  1,
  2,
  3,
  0,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CGameNotifications_Variable)},
  { 9, 17, sizeof(::CGameNotifications_LocalizedText)},
  { 20, 29, sizeof(::CGameNotifications_UserStatus)},
  { 33, 43, sizeof(::CGameNotifications_CreateSession_Request)},
  { 48, 54, sizeof(::CGameNotifications_CreateSession_Response)},
  { 55, 63, sizeof(::CGameNotifications_DeleteSession_Request)},
  { 66, 71, sizeof(::CGameNotifications_DeleteSession_Response)},
  { 71, 81, sizeof(::CGameNotifications_UpdateSession_Request)},
  { 86, 91, sizeof(::CGameNotifications_UpdateSession_Response)},
  { 91, 100, sizeof(::CGameNotifications_EnumerateSessions_Request)},
  { 104, 116, sizeof(::CGameNotifications_Session)},
  { 123, 129, sizeof(::CGameNotifications_EnumerateSessions_Response)},
  { 130, 137, sizeof(::CGameNotifications_GetSessionDetails_Request_RequestedSession)},
  { 139, 147, sizeof(::CGameNotifications_GetSessionDetails_Request)},
  { 150, 156, sizeof(::CGameNotifications_GetSessionDetails_Response)},
  { 157, 164, sizeof(::GameNotificationSettings)},
  { 166, 172, sizeof(::CGameNotifications_UpdateNotificationSettings_Request)},
  { 173, 178, sizeof(::CGameNotifications_UpdateNotificationSettings_Response)},
  { 178, 185, sizeof(::CGameNotifications_OnNotificationsRequested_Notification)},
  { 187, 197, sizeof(::CGameNotifications_OnUserStatusChanged_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_Variable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_LocalizedText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_UserStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_CreateSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_CreateSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_DeleteSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_DeleteSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_UpdateSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_UpdateSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_EnumerateSessions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_EnumerateSessions_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_GetSessionDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_GetSessionDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameNotificationSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_UpdateNotificationSettings_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_UpdateNotificationSettings_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_OnNotificationsRequested_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGameNotifications_OnUserStatusChanged_Notification_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_gamenotifications.steamclient.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n1steammessages_gamenotifications.steamc"
      "lient.proto\032,steammessages_unified_base."
      "steamclient.proto\"\340\002\n\033CGameNotifications"
      "_Variable\022\246\001\n\003key\030\001 \001(\tB\230\001\202\265\030\223\001The name "
      "of the variable in the localized text --"
      " anywhere that %variablename% is found w"
      "ithin the text it will be substituded wi"
      "th the given value\022\227\001\n\005value\030\002 \001(\tB\207\001\202\265\030"
      "\202\001The value of the variable to substitut"
      "e in the localized text in place of the "
      "given variable.  Can itself be a localiz"
      "ation token.\"\205\003\n CGameNotifications_Loca"
      "lizedText\022H\n\005token\030\001 \001(\tB9\202\265\0305A localiza"
      "tion token that maps to the desired stri"
      "ng.\022\215\001\n\tvariables\030\002 \003(\0132\034.CGameNotificat"
      "ions_VariableB\\\202\265\030XA list of variables v"
      "alues to substitute in any variables fou"
      "nd in the localized string.\022\206\001\n\rrendered"
      "_text\030\003 \001(\tBo\202\265\030kText rendered in the re"
      "quested language, complete with variable"
      " substitutions, if a language was specif"
      "ied.\"\225\004\n\035CGameNotifications_UserStatus\0221"
      "\n\007steamid\030\001 \001(\006B \202\265\030\034The specific user\'s"
      " steamid.\022\244\001\n\005state\030\002 \001(\tB\224\001\202\265\030\217\001The use"
      "r\'s state.  ready -- the user is ready t"
      "o play.  waiting -- The game is waiting "
      "on an action from the user. completed, t"
      "he game is over.\022\204\001\n\005title\030\003 \001(\0132!.CGame"
      "Notifications_LocalizedTextBR\202\265\030NTitle o"
      "f the session to display to this user in"
      " their list of active sessions.\022\222\001\n\007mess"
      "age\030\004 \001(\0132!.CGameNotifications_Localized"
      "TextB^\202\265\030ZSubtitle of the session to dis"
      "play to this user user within their list"
      " of active sessions.\"\223\005\n(CGameNotificati"
      "ons_CreateSession_Request\0227\n\005appid\030\001 \001(\r"
      "B(\202\265\030$The appid to create the session fo"
      "r.\022\177\n\007context\030\002 \001(\004Bn\202\265\030jGame-specified "
      "context value the game can used to assoc"
      "iate the session with some object on the"
      "ir backend.\022\203\001\n\005title\030\003 \001(\0132!.CGameNotif"
      "ications_LocalizedTextBQ\202\265\030MThe title of"
      " the session to be displayed within each"
      " user\'s list of sessions.\022a\n\005users\030\004 \003(\013"
      "2\036.CGameNotifications_UserStatusB2\202\265\030.Th"
      "e initial state of all users in the sess"
      "ion.\022\303\001\n\007steamid\030\005 \001(\006B\261\001\202\265\030\254\001(Optional)"
      " steamid to make the request on behalf o"
      "f -- if specified, the user must be in t"
      "he session and all users being added to "
      "the session must be friends with the use"
      "r.\"i\n)CGameNotifications_CreateSession_R"
      "esponse\022<\n\tsessionid\030\001 \001(\004B)\202\265\030%The sess"
      "ionid of the created session.\"\217\002\n(CGameN"
      "otifications_DeleteSession_Request\022/\n\tse"
      "ssionid\030\001 \001(\004B\034\202\265\030\030The sessionid to dele"
      "te.\0226\n\005appid\030\002 \001(\rB\'\202\265\030#The appid of the"
      " session to delete.\022z\n\007steamid\030\003 \001(\006Bi\202\265"
      "\030e(Optional) steamid to make the request"
      " on behalf of -- if specified, the user "
      "must be in the session.\"+\n)CGameNotifica"
      "tions_DeleteSession_Response\"\275\005\n(CGameNo"
      "tifications_UpdateSession_Request\022/\n\tses"
      "sionid\030\001 \001(\004B\034\202\265\030\030The sessionid to updat"
      "e.\0226\n\005appid\030\002 \001(\rB\'\202\265\030#The appid of the "
      "session to update.\022\220\001\n\005title\030\003 \001(\0132!.CGa"
      "meNotifications_LocalizedTextB^\202\265\030Z(Opti"
      "onal) The new title of the session.  If "
      "not specified, the title will not be cha"
      "nged.\022\316\001\n\005users\030\004 \003(\0132\036.CGameNotificatio"
      "ns_UserStatusB\236\001\202\265\030\231\001(Optional) A list o"
      "f users whose state will be updated to r"
      "eflect the given state. If the users are"
      " not already in the session, they will b"
      "e added to it.\022\303\001\n\007steamid\030\006 \001(\006B\261\001\202\265\030\254\001"
      "(Optional) steamid to make the request o"
      "n behalf of -- if specified, the user mu"
      "st be in the session and all users being"
      " added to the session must be friends wi"
      "th the user.\"+\n)CGameNotifications_Updat"
      "eSession_Response\"\241\004\n,CGameNotifications"
      "_EnumerateSessions_Request\022~\n\005appid\030\001 \001("
      "\rBo\202\265\030kThe sessionid to request details "
      "for. Optional. If not specified, all the"
      " user\'s sessions will be returned.\022\216\001\n\031i"
      "nclude_all_user_messages\030\003 \001(\010Bk\202\265\030g(Opt"
      "ional) Boolean determining whether the m"
      "essage for all users should be included."
      " Defaults to false.\022\233\001\n\031include_auth_use"
      "r_message\030\004 \001(\010Bx\202\265\030t(Optional) Boolean "
      "determining whether the message for the "
      "authenticated user should be included. D"
      "efaults to false.\022B\n\010language\030\005 \001(\tB0\202\265\030"
      ",(Optional) Language to localize the tex"
      "t in.\"\303\004\n\032CGameNotifications_Session\0226\n\t"
      "sessionid\030\001 \001(\004B#\202\265\030\037The sessionid for t"
      "his session.\022-\n\005appid\030\002 \001(\004B\036\202\265\030\032The app"
      "id for the session.\022\177\n\007context\030\003 \001(\004Bn\202\265"
      "\030jGame-specified context value the game "
      "can used to associate the session with s"
      "ome object on their backend.\022X\n\005title\030\004 "
      "\001(\0132!.CGameNotifications_LocalizedTextB&"
      "\202\265\030\"The current title for the session.\022;"
      "\n\014time_created\030\005 \001(\rB%\202\265\030!The time the s"
      "ession was created.\022@\n\014time_updated\030\006 \001("
      "\rB*\202\265\030&The last time the session was upd"
      "ated.\022d\n\013user_status\030\007 \003(\0132\036.CGameNotifi"
      "cations_UserStatusB/\202\265\030+The status of al"
      "l the users in the session.\"\202\001\n-CGameNot"
      "ifications_EnumerateSessions_Response\022Q\n"
      "\010sessions\030\001 \003(\0132\033.CGameNotifications_Ses"
      "sionB\"\202\265\030\036A list of the user\'s sessions."
      "\"\326\003\n,CGameNotifications_GetSessionDetail"
      "s_Request\022P\n\010sessions\030\001 \003(\0132>.CGameNotif"
      "ications_GetSessionDetails_Request.Reque"
      "stedSession\022.\n\005appid\030\002 \001(\rB\037\202\265\030\033The appi"
      "d for the sessions.\0227\n\010language\030\003 \001(\tB%\202"
      "\265\030!Language to localize the text in.\032\352\001\n"
      "\020RequestedSession\0228\n\tsessionid\030\001 \001(\004B%\202\265"
      "\030!The sessionid to get details for.\022\233\001\n\031"
      "include_auth_user_message\030\003 \001(\010Bx\202\265\030t(Op"
      "tional) Boolean determining whether the "
      "message for the authenticated user shoul"
      "d be included. Defaults to false.\"\177\n-CGa"
      "meNotifications_GetSessionDetails_Respon"
      "se\022N\n\010sessions\030\001 \003(\0132\033.CGameNotification"
      "s_SessionB\037\202\265\030\033The details of the sessio"
      "n.\"\250\001\n\030GameNotificationSettings\0227\n\005appid"
      "\030\001 \001(\rB(\202\265\030$The appid to create the sess"
      "ion for.\022S\n\023allow_notifications\030\002 \001(\010B6\202"
      "\265\0302Whether the user allows notification "
      "for this app.\"v\n5CGameNotifications_Upda"
      "teNotificationSettings_Request\022=\n\032game_n"
      "otification_settings\030\001 \003(\0132\031.GameNotific"
      "ationSettings\"8\n6CGameNotifications_Upda"
      "teNotificationSettings_Response\"\306\001\n8CGam"
      "eNotifications_OnNotificationsRequested_"
      "Notification\022N\n\007steamid\030\001 \001(\006B=\202\265\0309steam"
      "id of the user who notifications were re"
      "quested for.\022:\n\005appid\030\002 \001(\rB+\202\265\030\'The app"
      "id that requested notifications.\"\276\003\n3CGa"
      "meNotifications_OnUserStatusChanged_Noti"
      "fication\022>\n\007steamid\030\001 \001(\006B-\202\265\030)steamid o"
      "f the user whose status changed.\022X\n\tsess"
      "ionid\030\002 \001(\004BE\202\265\030AThe sessionid of the se"
      "ssion where the user\'s status was change"
      "d.\022L\n\005appid\030\003 \001(\rB=\202\265\0309The appid of the "
      "session where the user\'s status changed."
      "\022V\n\006status\030\004 \001(\0132\036.CGameNotifications_Us"
      "erStatusB&\202\265\030\"(Optional) New status of t"
      "he user.\022G\n\007removed\030\005 \001(\010B6\202\265\0302(Optional"
      ") User has been removed from the session"
      ".2\246\010\n\021GameNotifications\022\215\001\n\021UserCreateSe"
      "ssion\022).CGameNotifications_CreateSession"
      "_Request\032*.CGameNotifications_CreateSess"
      "ion_Response\"!\202\265\030\035Creates an async game "
      "session\022\215\001\n\021UserDeleteSession\022).CGameNot"
      "ifications_DeleteSession_Request\032*.CGame"
      "Notifications_DeleteSession_Response\"!\202\265"
      "\030\035Deletes an async game session\022\215\001\n\021User"
      "UpdateSession\022).CGameNotifications_Updat"
      "eSession_Request\032*.CGameNotifications_Up"
      "dateSession_Response\"!\202\265\030\035Updates an asy"
      "nc game session\022\224\001\n\021EnumerateSessions\022-."
      "CGameNotifications_EnumerateSessions_Req"
      "uest\032..CGameNotifications_EnumerateSessi"
      "ons_Response\" \202\265\030\034Enumerates a user\'s se"
      "ssions\022\236\001\n\021GetSessionDetails\022-.CGameNoti"
      "fications_GetSessionDetails_Request\032..CG"
      "ameNotifications_GetSessionDetails_Respo"
      "nse\"*\202\265\030&Get the details for a specific "
      "session\022\326\001\n\032UpdateNotificationSettings\0226"
      ".CGameNotifications_UpdateNotificationSe"
      "ttings_Request\0327.CGameNotifications_Upda"
      "teNotificationSettings_Response\"G\202\265\030CUpd"
      "ates whether a user allows game notifica"
      "tions for a specific app\032P\202\265\030LA service "
      "for functions related to the asyncronous"
      " game notification server.2\337\002\n\027GameNotif"
      "icationsClient\022\225\001\n\030OnNotificationsReques"
      "ted\0229.CGameNotifications_OnNotifications"
      "Requested_Notification\032\013.NoResponse\"1\202\265\030"
      "-Requests that the user opt into notific"
      "ations\022\215\001\n\023OnUserStatusChanged\0224.CGameNo"
      "tifications_OnUserStatusChanged_Notifica"
      "tion\032\013.NoResponse\"3\202\265\030/Notification that"
      " the user\'s status has changed\032\034\202\265\030\024Clie"
      "nt notifications\300\265\030\002B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_gamenotifications.steamclient.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto

// ===================================================================

void CGameNotifications_Variable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_Variable::kKeyFieldNumber;
const int CGameNotifications_Variable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_Variable::CGameNotifications_Variable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Variable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_Variable)
}
CGameNotifications_Variable::CGameNotifications_Variable(const CGameNotifications_Variable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_Variable)
}

void CGameNotifications_Variable::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CGameNotifications_Variable::~CGameNotifications_Variable() {
  // @@protoc_insertion_point(destructor:CGameNotifications_Variable)
  SharedDtor();
}

void CGameNotifications_Variable::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_Variable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_Variable::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_Variable& CGameNotifications_Variable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Variable.base);
  return *internal_default_instance();
}


void CGameNotifications_Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_Variable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [(.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_Variable.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2 [(.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_Variable.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_Variable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_Variable)
  return false;
#undef DO_
}

void CGameNotifications_Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [(.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_Variable.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2 [(.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_Variable.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_Variable)
}

::google::protobuf::uint8* CGameNotifications_Variable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [(.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_Variable.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2 [(.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_Variable.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_Variable)
  return target;
}

size_t CGameNotifications_Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_Variable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1 [(.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2 [(.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_Variable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_Variable)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_Variable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_Variable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_Variable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_Variable)
    MergeFrom(*source);
  }
}

void CGameNotifications_Variable::MergeFrom(const CGameNotifications_Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_Variable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CGameNotifications_Variable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_Variable::CopyFrom(const CGameNotifications_Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_Variable::IsInitialized() const {
  return true;
}

void CGameNotifications_Variable::Swap(CGameNotifications_Variable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_Variable::InternalSwap(CGameNotifications_Variable* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_Variable::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_LocalizedText::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_LocalizedText::kTokenFieldNumber;
const int CGameNotifications_LocalizedText::kVariablesFieldNumber;
const int CGameNotifications_LocalizedText::kRenderedTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_LocalizedText::CGameNotifications_LocalizedText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_LocalizedText.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_LocalizedText)
}
CGameNotifications_LocalizedText::CGameNotifications_LocalizedText(const CGameNotifications_LocalizedText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  rendered_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rendered_text()) {
    rendered_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendered_text_);
  }
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_LocalizedText)
}

void CGameNotifications_LocalizedText::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendered_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CGameNotifications_LocalizedText::~CGameNotifications_LocalizedText() {
  // @@protoc_insertion_point(destructor:CGameNotifications_LocalizedText)
  SharedDtor();
}

void CGameNotifications_LocalizedText::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendered_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_LocalizedText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_LocalizedText::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_LocalizedText& CGameNotifications_LocalizedText::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_LocalizedText.base);
  return *internal_default_instance();
}


void CGameNotifications_LocalizedText::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_LocalizedText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rendered_text_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_LocalizedText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_LocalizedText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1 [(.description) = "A localization token that maps to the desired string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_LocalizedText.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CGameNotifications_Variable variables = 2 [(.description) = "A list of variables values to substitute in any variables found in the localized string."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rendered_text = 3 [(.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rendered_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rendered_text().data(), static_cast<int>(this->rendered_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_LocalizedText.rendered_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_LocalizedText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_LocalizedText)
  return false;
#undef DO_
}

void CGameNotifications_LocalizedText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_LocalizedText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1 [(.description) = "A localization token that maps to the desired string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_LocalizedText.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // repeated .CGameNotifications_Variable variables = 2 [(.description) = "A list of variables values to substitute in any variables found in the localized string."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->variables(static_cast<int>(i)),
      output);
  }

  // optional string rendered_text = 3 [(.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rendered_text().data(), static_cast<int>(this->rendered_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_LocalizedText.rendered_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rendered_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_LocalizedText)
}

::google::protobuf::uint8* CGameNotifications_LocalizedText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_LocalizedText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1 [(.description) = "A localization token that maps to the desired string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_LocalizedText.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // repeated .CGameNotifications_Variable variables = 2 [(.description) = "A list of variables values to substitute in any variables found in the localized string."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->variables(static_cast<int>(i)), deterministic, target);
  }

  // optional string rendered_text = 3 [(.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rendered_text().data(), static_cast<int>(this->rendered_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_LocalizedText.rendered_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rendered_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_LocalizedText)
  return target;
}

size_t CGameNotifications_LocalizedText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_LocalizedText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_Variable variables = 2 [(.description) = "A list of variables values to substitute in any variables found in the localized string."];
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string token = 1 [(.description) = "A localization token that maps to the desired string."];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string rendered_text = 3 [(.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
    if (has_rendered_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rendered_text());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_LocalizedText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_LocalizedText)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_LocalizedText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_LocalizedText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_LocalizedText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_LocalizedText)
    MergeFrom(*source);
  }
}

void CGameNotifications_LocalizedText::MergeFrom(const CGameNotifications_LocalizedText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_LocalizedText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rendered_text();
      rendered_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendered_text_);
    }
  }
}

void CGameNotifications_LocalizedText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_LocalizedText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_LocalizedText::CopyFrom(const CGameNotifications_LocalizedText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_LocalizedText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_LocalizedText::IsInitialized() const {
  return true;
}

void CGameNotifications_LocalizedText::Swap(CGameNotifications_LocalizedText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_LocalizedText::InternalSwap(CGameNotifications_LocalizedText* other) {
  using std::swap;
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rendered_text_.Swap(&other->rendered_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_LocalizedText::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_UserStatus::InitAsDefaultInstance() {
  ::_CGameNotifications_UserStatus_default_instance_._instance.get_mutable()->title_ = const_cast< ::CGameNotifications_LocalizedText*>(
      ::CGameNotifications_LocalizedText::internal_default_instance());
  ::_CGameNotifications_UserStatus_default_instance_._instance.get_mutable()->message_ = const_cast< ::CGameNotifications_LocalizedText*>(
      ::CGameNotifications_LocalizedText::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_UserStatus::kSteamidFieldNumber;
const int CGameNotifications_UserStatus::kStateFieldNumber;
const int CGameNotifications_UserStatus::kTitleFieldNumber;
const int CGameNotifications_UserStatus::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UserStatus::CGameNotifications_UserStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UserStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_UserStatus)
}
CGameNotifications_UserStatus::CGameNotifications_UserStatus(const CGameNotifications_UserStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state()) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_title()) {
    title_ = new ::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::CGameNotifications_LocalizedText(*from.message_);
  } else {
    message_ = NULL;
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_UserStatus)
}

void CGameNotifications_UserStatus::SharedCtor() {
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_) -
      reinterpret_cast<char*>(&title_)) + sizeof(steamid_));
}

CGameNotifications_UserStatus::~CGameNotifications_UserStatus() {
  // @@protoc_insertion_point(destructor:CGameNotifications_UserStatus)
  SharedDtor();
}

void CGameNotifications_UserStatus::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete title_;
  if (this != internal_default_instance()) delete message_;
}

void CGameNotifications_UserStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_UserStatus::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UserStatus& CGameNotifications_UserStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UserStatus.base);
  return *internal_default_instance();
}


void CGameNotifications_UserStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_UserStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      state_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(title_ != NULL);
      title_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(message_ != NULL);
      message_->Clear();
    }
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_UserStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "The specific user\'s steamid."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state = 2 [(.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_UserStatus.state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "Title of the session to display to this user in their list of active sessions."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CGameNotifications_LocalizedText message = 4 [(.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_UserStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_UserStatus)
  return false;
#undef DO_
}

void CGameNotifications_UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_UserStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The specific user\'s steamid."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string state = 2 [(.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_UserStatus.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state(), output);
  }

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "Title of the session to display to this user in their list of active sessions."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_title(), output);
  }

  // optional .CGameNotifications_LocalizedText message = 4 [(.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_UserStatus)
}

::google::protobuf::uint8* CGameNotifications_UserStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_UserStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The specific user\'s steamid."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string state = 2 [(.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_UserStatus.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "Title of the session to display to this user in their list of active sessions."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_title(), deterministic, target);
  }

  // optional .CGameNotifications_LocalizedText message = 4 [(.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_message(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_UserStatus)
  return target;
}

size_t CGameNotifications_UserStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_UserStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string state = 2 [(.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "Title of the session to display to this user in their list of active sessions."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional .CGameNotifications_LocalizedText message = 4 [(.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional fixed64 steamid = 1 [(.description) = "The specific user\'s steamid."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_UserStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UserStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UserStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_UserStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_UserStatus)
    MergeFrom(*source);
  }
}

void CGameNotifications_UserStatus::MergeFrom(const CGameNotifications_UserStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_UserStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_title()->::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_message()->::CGameNotifications_LocalizedText::MergeFrom(from.message());
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_UserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UserStatus::CopyFrom(const CGameNotifications_UserStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_UserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UserStatus::IsInitialized() const {
  return true;
}

void CGameNotifications_UserStatus::Swap(CGameNotifications_UserStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UserStatus::InternalSwap(CGameNotifications_UserStatus* other) {
  using std::swap;
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(title_, other->title_);
  swap(message_, other->message_);
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_UserStatus::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_CreateSession_Request::InitAsDefaultInstance() {
  ::_CGameNotifications_CreateSession_Request_default_instance_._instance.get_mutable()->title_ = const_cast< ::CGameNotifications_LocalizedText*>(
      ::CGameNotifications_LocalizedText::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_CreateSession_Request::kAppidFieldNumber;
const int CGameNotifications_CreateSession_Request::kContextFieldNumber;
const int CGameNotifications_CreateSession_Request::kTitleFieldNumber;
const int CGameNotifications_CreateSession_Request::kUsersFieldNumber;
const int CGameNotifications_CreateSession_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_CreateSession_Request::CGameNotifications_CreateSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_CreateSession_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_CreateSession_Request)
}
CGameNotifications_CreateSession_Request::CGameNotifications_CreateSession_Request(const CGameNotifications_CreateSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_title()) {
    title_ = new ::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  ::memcpy(&context_, &from.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&context_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_CreateSession_Request)
}

void CGameNotifications_CreateSession_Request::SharedCtor() {
  ::memset(&title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&title_)) + sizeof(appid_));
}

CGameNotifications_CreateSession_Request::~CGameNotifications_CreateSession_Request() {
  // @@protoc_insertion_point(destructor:CGameNotifications_CreateSession_Request)
  SharedDtor();
}

void CGameNotifications_CreateSession_Request::SharedDtor() {
  if (this != internal_default_instance()) delete title_;
}

void CGameNotifications_CreateSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_CreateSession_Request::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_CreateSession_Request& CGameNotifications_CreateSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_CreateSession_Request.base);
  return *internal_default_instance();
}


void CGameNotifications_CreateSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_CreateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(title_ != NULL);
    title_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&context_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&context_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_CreateSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_CreateSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 context = 2 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_context();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "The title of the session to be displayed within each user\'s list of sessions."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "The initial state of all users in the session."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 5 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_CreateSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_CreateSession_Request)
  return false;
#undef DO_
}

void CGameNotifications_CreateSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_CreateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 context = 2 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->context(), output);
  }

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "The title of the session to be displayed within each user\'s list of sessions."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_title(), output);
  }

  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "The initial state of all users in the session."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->users(static_cast<int>(i)),
      output);
  }

  // optional fixed64 steamid = 5 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_CreateSession_Request)
}

::google::protobuf::uint8* CGameNotifications_CreateSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_CreateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 context = 2 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->context(), target);
  }

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "The title of the session to be displayed within each user\'s list of sessions."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_title(), deterministic, target);
  }

  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "The initial state of all users in the session."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->users(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed64 steamid = 5 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_CreateSession_Request)
  return target;
}

size_t CGameNotifications_CreateSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_CreateSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "The initial state of all users in the session."];
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "The title of the session to be displayed within each user\'s list of sessions."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional uint64 context = 2 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context());
    }

    // optional fixed64 steamid = 5 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_CreateSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_CreateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_CreateSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_CreateSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_CreateSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_CreateSession_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_CreateSession_Request::MergeFrom(const CGameNotifications_CreateSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_CreateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_title()->::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000002u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_CreateSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_CreateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_CreateSession_Request::CopyFrom(const CGameNotifications_CreateSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_CreateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_CreateSession_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_CreateSession_Request::Swap(CGameNotifications_CreateSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_CreateSession_Request::InternalSwap(CGameNotifications_CreateSession_Request* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(title_, other->title_);
  swap(context_, other->context_);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_CreateSession_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_CreateSession_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_CreateSession_Response::kSessionidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_CreateSession_Response::CGameNotifications_CreateSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_CreateSession_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_CreateSession_Response)
}
CGameNotifications_CreateSession_Response::CGameNotifications_CreateSession_Response(const CGameNotifications_CreateSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_CreateSession_Response)
}

void CGameNotifications_CreateSession_Response::SharedCtor() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}

CGameNotifications_CreateSession_Response::~CGameNotifications_CreateSession_Response() {
  // @@protoc_insertion_point(destructor:CGameNotifications_CreateSession_Response)
  SharedDtor();
}

void CGameNotifications_CreateSession_Response::SharedDtor() {
}

void CGameNotifications_CreateSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_CreateSession_Response::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_CreateSession_Response& CGameNotifications_CreateSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_CreateSession_Response.base);
  return *internal_default_instance();
}


void CGameNotifications_CreateSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_CreateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_CreateSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_CreateSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.description) = "The sessionid of the created session."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_CreateSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_CreateSession_Response)
  return false;
#undef DO_
}

void CGameNotifications_CreateSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_CreateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid of the created session."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_CreateSession_Response)
}

::google::protobuf::uint8* CGameNotifications_CreateSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_CreateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid of the created session."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_CreateSession_Response)
  return target;
}

size_t CGameNotifications_CreateSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_CreateSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 sessionid = 1 [(.description) = "The sessionid of the created session."];
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_CreateSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_CreateSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_CreateSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_CreateSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_CreateSession_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_CreateSession_Response::MergeFrom(const CGameNotifications_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessionid()) {
    set_sessionid(from.sessionid());
  }
}

void CGameNotifications_CreateSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_CreateSession_Response::CopyFrom(const CGameNotifications_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_CreateSession_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_CreateSession_Response::Swap(CGameNotifications_CreateSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_CreateSession_Response::InternalSwap(CGameNotifications_CreateSession_Response* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_CreateSession_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_DeleteSession_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_DeleteSession_Request::kSessionidFieldNumber;
const int CGameNotifications_DeleteSession_Request::kAppidFieldNumber;
const int CGameNotifications_DeleteSession_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_DeleteSession_Request::CGameNotifications_DeleteSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_DeleteSession_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_DeleteSession_Request)
}
CGameNotifications_DeleteSession_Request::CGameNotifications_DeleteSession_Request(const CGameNotifications_DeleteSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_DeleteSession_Request)
}

void CGameNotifications_DeleteSession_Request::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(appid_));
}

CGameNotifications_DeleteSession_Request::~CGameNotifications_DeleteSession_Request() {
  // @@protoc_insertion_point(destructor:CGameNotifications_DeleteSession_Request)
  SharedDtor();
}

void CGameNotifications_DeleteSession_Request::SharedDtor() {
}

void CGameNotifications_DeleteSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_DeleteSession_Request::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_DeleteSession_Request& CGameNotifications_DeleteSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_DeleteSession_Request.base);
  return *internal_default_instance();
}


void CGameNotifications_DeleteSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_DeleteSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_DeleteSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_DeleteSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.description) = "The sessionid to delete."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.description) = "The appid of the session to delete."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 3 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_DeleteSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_DeleteSession_Request)
  return false;
#undef DO_
}

void CGameNotifications_DeleteSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_DeleteSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid to delete."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional uint32 appid = 2 [(.description) = "The appid of the session to delete."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional fixed64 steamid = 3 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_DeleteSession_Request)
}

::google::protobuf::uint8* CGameNotifications_DeleteSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_DeleteSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid to delete."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional uint32 appid = 2 [(.description) = "The appid of the session to delete."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional fixed64 steamid = 3 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_DeleteSession_Request)
  return target;
}

size_t CGameNotifications_DeleteSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_DeleteSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 sessionid = 1 [(.description) = "The sessionid to delete."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional fixed64 steamid = 3 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.description) = "The appid of the session to delete."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_DeleteSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_DeleteSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_DeleteSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_DeleteSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_DeleteSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_DeleteSession_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_DeleteSession_Request::MergeFrom(const CGameNotifications_DeleteSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_DeleteSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_DeleteSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_DeleteSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_DeleteSession_Request::CopyFrom(const CGameNotifications_DeleteSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_DeleteSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_DeleteSession_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_DeleteSession_Request::Swap(CGameNotifications_DeleteSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_DeleteSession_Request::InternalSwap(CGameNotifications_DeleteSession_Request* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_DeleteSession_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_DeleteSession_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_DeleteSession_Response::CGameNotifications_DeleteSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_DeleteSession_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_DeleteSession_Response)
}
CGameNotifications_DeleteSession_Response::CGameNotifications_DeleteSession_Response(const CGameNotifications_DeleteSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_DeleteSession_Response)
}

void CGameNotifications_DeleteSession_Response::SharedCtor() {
}

CGameNotifications_DeleteSession_Response::~CGameNotifications_DeleteSession_Response() {
  // @@protoc_insertion_point(destructor:CGameNotifications_DeleteSession_Response)
  SharedDtor();
}

void CGameNotifications_DeleteSession_Response::SharedDtor() {
}

void CGameNotifications_DeleteSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_DeleteSession_Response::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_DeleteSession_Response& CGameNotifications_DeleteSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_DeleteSession_Response.base);
  return *internal_default_instance();
}


void CGameNotifications_DeleteSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_DeleteSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_DeleteSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_DeleteSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_DeleteSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_DeleteSession_Response)
  return false;
#undef DO_
}

void CGameNotifications_DeleteSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_DeleteSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_DeleteSession_Response)
}

::google::protobuf::uint8* CGameNotifications_DeleteSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_DeleteSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_DeleteSession_Response)
  return target;
}

size_t CGameNotifications_DeleteSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_DeleteSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_DeleteSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_DeleteSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_DeleteSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_DeleteSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_DeleteSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_DeleteSession_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_DeleteSession_Response::MergeFrom(const CGameNotifications_DeleteSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_DeleteSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNotifications_DeleteSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_DeleteSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_DeleteSession_Response::CopyFrom(const CGameNotifications_DeleteSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_DeleteSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_DeleteSession_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_DeleteSession_Response::Swap(CGameNotifications_DeleteSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_DeleteSession_Response::InternalSwap(CGameNotifications_DeleteSession_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_DeleteSession_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_UpdateSession_Request::InitAsDefaultInstance() {
  ::_CGameNotifications_UpdateSession_Request_default_instance_._instance.get_mutable()->title_ = const_cast< ::CGameNotifications_LocalizedText*>(
      ::CGameNotifications_LocalizedText::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_UpdateSession_Request::kSessionidFieldNumber;
const int CGameNotifications_UpdateSession_Request::kAppidFieldNumber;
const int CGameNotifications_UpdateSession_Request::kTitleFieldNumber;
const int CGameNotifications_UpdateSession_Request::kUsersFieldNumber;
const int CGameNotifications_UpdateSession_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateSession_Request::CGameNotifications_UpdateSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateSession_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_UpdateSession_Request)
}
CGameNotifications_UpdateSession_Request::CGameNotifications_UpdateSession_Request(const CGameNotifications_UpdateSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_title()) {
    title_ = new ::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_UpdateSession_Request)
}

void CGameNotifications_UpdateSession_Request::SharedCtor() {
  ::memset(&title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&title_)) + sizeof(appid_));
}

CGameNotifications_UpdateSession_Request::~CGameNotifications_UpdateSession_Request() {
  // @@protoc_insertion_point(destructor:CGameNotifications_UpdateSession_Request)
  SharedDtor();
}

void CGameNotifications_UpdateSession_Request::SharedDtor() {
  if (this != internal_default_instance()) delete title_;
}

void CGameNotifications_UpdateSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateSession_Request::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateSession_Request& CGameNotifications_UpdateSession_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateSession_Request.base);
  return *internal_default_instance();
}


void CGameNotifications_UpdateSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_UpdateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(title_ != NULL);
    title_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_UpdateSession_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.description) = "The sessionid to update."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.description) = "The appid of the session to update."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 6 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_UpdateSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_UpdateSession_Request)
  return false;
#undef DO_
}

void CGameNotifications_UpdateSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_UpdateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid to update."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional uint32 appid = 2 [(.description) = "The appid of the session to update."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_title(), output);
  }

  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->users(static_cast<int>(i)),
      output);
  }

  // optional fixed64 steamid = 6 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_UpdateSession_Request)
}

::google::protobuf::uint8* CGameNotifications_UpdateSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_UpdateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid to update."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional uint32 appid = 2 [(.description) = "The appid of the session to update."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_title(), deterministic, target);
  }

  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->users(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed64 steamid = 6 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_UpdateSession_Request)
  return target;
}

size_t CGameNotifications_UpdateSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_UpdateSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_UserStatus users = 4 [(.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CGameNotifications_LocalizedText title = 3 [(.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional uint64 sessionid = 1 [(.description) = "The sessionid to update."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional fixed64 steamid = 6 [(.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.description) = "The appid of the session to update."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_UpdateSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_UpdateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_UpdateSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_UpdateSession_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateSession_Request::MergeFrom(const CGameNotifications_UpdateSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_UpdateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_title()->::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_UpdateSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_UpdateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateSession_Request::CopyFrom(const CGameNotifications_UpdateSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_UpdateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateSession_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateSession_Request::Swap(CGameNotifications_UpdateSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateSession_Request::InternalSwap(CGameNotifications_UpdateSession_Request* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(title_, other->title_);
  swap(sessionid_, other->sessionid_);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_UpdateSession_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_UpdateSession_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateSession_Response::CGameNotifications_UpdateSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateSession_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_UpdateSession_Response)
}
CGameNotifications_UpdateSession_Response::CGameNotifications_UpdateSession_Response(const CGameNotifications_UpdateSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_UpdateSession_Response)
}

void CGameNotifications_UpdateSession_Response::SharedCtor() {
}

CGameNotifications_UpdateSession_Response::~CGameNotifications_UpdateSession_Response() {
  // @@protoc_insertion_point(destructor:CGameNotifications_UpdateSession_Response)
  SharedDtor();
}

void CGameNotifications_UpdateSession_Response::SharedDtor() {
}

void CGameNotifications_UpdateSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateSession_Response::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateSession_Response& CGameNotifications_UpdateSession_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateSession_Response.base);
  return *internal_default_instance();
}


void CGameNotifications_UpdateSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_UpdateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_UpdateSession_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_UpdateSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_UpdateSession_Response)
  return false;
#undef DO_
}

void CGameNotifications_UpdateSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_UpdateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_UpdateSession_Response)
}

::google::protobuf::uint8* CGameNotifications_UpdateSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_UpdateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_UpdateSession_Response)
  return target;
}

size_t CGameNotifications_UpdateSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_UpdateSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_UpdateSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_UpdateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_UpdateSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_UpdateSession_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateSession_Response::MergeFrom(const CGameNotifications_UpdateSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_UpdateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNotifications_UpdateSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_UpdateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateSession_Response::CopyFrom(const CGameNotifications_UpdateSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_UpdateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateSession_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateSession_Response::Swap(CGameNotifications_UpdateSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateSession_Response::InternalSwap(CGameNotifications_UpdateSession_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_UpdateSession_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_EnumerateSessions_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_EnumerateSessions_Request::kAppidFieldNumber;
const int CGameNotifications_EnumerateSessions_Request::kIncludeAllUserMessagesFieldNumber;
const int CGameNotifications_EnumerateSessions_Request::kIncludeAuthUserMessageFieldNumber;
const int CGameNotifications_EnumerateSessions_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_EnumerateSessions_Request::CGameNotifications_EnumerateSessions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_EnumerateSessions_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_EnumerateSessions_Request)
}
CGameNotifications_EnumerateSessions_Request::CGameNotifications_EnumerateSessions_Request(const CGameNotifications_EnumerateSessions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_auth_user_message_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(include_auth_user_message_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_EnumerateSessions_Request)
}

void CGameNotifications_EnumerateSessions_Request::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_auth_user_message_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(include_auth_user_message_));
}

CGameNotifications_EnumerateSessions_Request::~CGameNotifications_EnumerateSessions_Request() {
  // @@protoc_insertion_point(destructor:CGameNotifications_EnumerateSessions_Request)
  SharedDtor();
}

void CGameNotifications_EnumerateSessions_Request::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_EnumerateSessions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_EnumerateSessions_Request::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_EnumerateSessions_Request& CGameNotifications_EnumerateSessions_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_EnumerateSessions_Request.base);
  return *internal_default_instance();
}


void CGameNotifications_EnumerateSessions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_EnumerateSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_auth_user_message_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(include_auth_user_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_EnumerateSessions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_EnumerateSessions_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_all_user_messages = 3 [(.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_include_all_user_messages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_all_user_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_auth_user_message = 4 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_include_auth_user_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_auth_user_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 5 [(.description) = "(Optional) Language to localize the text in."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_EnumerateSessions_Request.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_EnumerateSessions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_EnumerateSessions_Request)
  return false;
#undef DO_
}

void CGameNotifications_EnumerateSessions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_EnumerateSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool include_all_user_messages = 3 [(.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_all_user_messages(), output);
  }

  // optional bool include_auth_user_message = 4 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_auth_user_message(), output);
  }

  // optional string language = 5 [(.description) = "(Optional) Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_EnumerateSessions_Request.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_EnumerateSessions_Request)
}

::google::protobuf::uint8* CGameNotifications_EnumerateSessions_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_EnumerateSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool include_all_user_messages = 3 [(.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_all_user_messages(), target);
  }

  // optional bool include_auth_user_message = 4 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_auth_user_message(), target);
  }

  // optional string language = 5 [(.description) = "(Optional) Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_EnumerateSessions_Request.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_EnumerateSessions_Request)
  return target;
}

size_t CGameNotifications_EnumerateSessions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_EnumerateSessions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string language = 5 [(.description) = "(Optional) Language to localize the text in."];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional uint32 appid = 1 [(.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool include_all_user_messages = 3 [(.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
    if (has_include_all_user_messages()) {
      total_size += 1 + 1;
    }

    // optional bool include_auth_user_message = 4 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
    if (has_include_auth_user_message()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_EnumerateSessions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_EnumerateSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_EnumerateSessions_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_EnumerateSessions_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_EnumerateSessions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_EnumerateSessions_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_EnumerateSessions_Request::MergeFrom(const CGameNotifications_EnumerateSessions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_EnumerateSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_all_user_messages_ = from.include_all_user_messages_;
    }
    if (cached_has_bits & 0x00000008u) {
      include_auth_user_message_ = from.include_auth_user_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_EnumerateSessions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_EnumerateSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_EnumerateSessions_Request::CopyFrom(const CGameNotifications_EnumerateSessions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_EnumerateSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_EnumerateSessions_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_EnumerateSessions_Request::Swap(CGameNotifications_EnumerateSessions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_EnumerateSessions_Request::InternalSwap(CGameNotifications_EnumerateSessions_Request* other) {
  using std::swap;
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(include_all_user_messages_, other->include_all_user_messages_);
  swap(include_auth_user_message_, other->include_auth_user_message_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_EnumerateSessions_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_Session::InitAsDefaultInstance() {
  ::_CGameNotifications_Session_default_instance_._instance.get_mutable()->title_ = const_cast< ::CGameNotifications_LocalizedText*>(
      ::CGameNotifications_LocalizedText::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_Session::kSessionidFieldNumber;
const int CGameNotifications_Session::kAppidFieldNumber;
const int CGameNotifications_Session::kContextFieldNumber;
const int CGameNotifications_Session::kTitleFieldNumber;
const int CGameNotifications_Session::kTimeCreatedFieldNumber;
const int CGameNotifications_Session::kTimeUpdatedFieldNumber;
const int CGameNotifications_Session::kUserStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_Session::CGameNotifications_Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Session.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_Session)
}
CGameNotifications_Session::CGameNotifications_Session(const CGameNotifications_Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      user_status_(from.user_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_title()) {
    title_ = new ::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(time_updated_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_Session)
}

void CGameNotifications_Session::SharedCtor() {
  ::memset(&title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_updated_) -
      reinterpret_cast<char*>(&title_)) + sizeof(time_updated_));
}

CGameNotifications_Session::~CGameNotifications_Session() {
  // @@protoc_insertion_point(destructor:CGameNotifications_Session)
  SharedDtor();
}

void CGameNotifications_Session::SharedDtor() {
  if (this != internal_default_instance()) delete title_;
}

void CGameNotifications_Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_Session::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_Session& CGameNotifications_Session::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_Session.base);
  return *internal_default_instance();
}


void CGameNotifications_Session::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(title_ != NULL);
    title_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_updated_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(time_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_Session)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.description) = "The sessionid for this session."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 appid = 2 [(.description) = "The appid for the session."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 context = 3 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_context();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CGameNotifications_LocalizedText title = 4 [(.description) = "The current title for the session."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 5 [(.description) = "The time the session was created."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_updated = 6 [(.description) = "The last time the session was updated."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_time_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CGameNotifications_UserStatus user_status = 7 [(.description) = "The status of all the users in the session."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_Session)
  return false;
#undef DO_
}

void CGameNotifications_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid for this session."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional uint64 appid = 2 [(.description) = "The appid for the session."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->appid(), output);
  }

  // optional uint64 context = 3 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->context(), output);
  }

  // optional .CGameNotifications_LocalizedText title = 4 [(.description) = "The current title for the session."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_title(), output);
  }

  // optional uint32 time_created = 5 [(.description) = "The time the session was created."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_created(), output);
  }

  // optional uint32 time_updated = 6 [(.description) = "The last time the session was updated."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_updated(), output);
  }

  // repeated .CGameNotifications_UserStatus user_status = 7 [(.description) = "The status of all the users in the session."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->user_status(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_Session)
}

::google::protobuf::uint8* CGameNotifications_Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid for this session."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional uint64 appid = 2 [(.description) = "The appid for the session."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->appid(), target);
  }

  // optional uint64 context = 3 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->context(), target);
  }

  // optional .CGameNotifications_LocalizedText title = 4 [(.description) = "The current title for the session."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_title(), deterministic, target);
  }

  // optional uint32 time_created = 5 [(.description) = "The time the session was created."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_created(), target);
  }

  // optional uint32 time_updated = 6 [(.description) = "The last time the session was updated."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_updated(), target);
  }

  // repeated .CGameNotifications_UserStatus user_status = 7 [(.description) = "The status of all the users in the session."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->user_status(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_Session)
  return target;
}

size_t CGameNotifications_Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_Session)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_UserStatus user_status = 7 [(.description) = "The status of all the users in the session."];
  {
    unsigned int count = static_cast<unsigned int>(this->user_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_status(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .CGameNotifications_LocalizedText title = 4 [(.description) = "The current title for the session."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional uint64 sessionid = 1 [(.description) = "The sessionid for this session."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional uint64 appid = 2 [(.description) = "The appid for the session."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->appid());
    }

    // optional uint64 context = 3 [(.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context());
    }

    // optional uint32 time_created = 5 [(.description) = "The time the session was created."];
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 time_updated = 6 [(.description) = "The last time the session was updated."];
    if (has_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_Session)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_Session)
    MergeFrom(*source);
  }
}

void CGameNotifications_Session::MergeFrom(const CGameNotifications_Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_status_.MergeFrom(from.user_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_title()->::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_updated_ = from.time_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_Session::CopyFrom(const CGameNotifications_Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_Session::IsInitialized() const {
  return true;
}

void CGameNotifications_Session::Swap(CGameNotifications_Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_Session::InternalSwap(CGameNotifications_Session* other) {
  using std::swap;
  CastToBase(&user_status_)->InternalSwap(CastToBase(&other->user_status_));
  swap(title_, other->title_);
  swap(sessionid_, other->sessionid_);
  swap(appid_, other->appid_);
  swap(context_, other->context_);
  swap(time_created_, other->time_created_);
  swap(time_updated_, other->time_updated_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_Session::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_EnumerateSessions_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_EnumerateSessions_Response::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_EnumerateSessions_Response::CGameNotifications_EnumerateSessions_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_EnumerateSessions_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_EnumerateSessions_Response)
}
CGameNotifications_EnumerateSessions_Response::CGameNotifications_EnumerateSessions_Response(const CGameNotifications_EnumerateSessions_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_EnumerateSessions_Response)
}

void CGameNotifications_EnumerateSessions_Response::SharedCtor() {
}

CGameNotifications_EnumerateSessions_Response::~CGameNotifications_EnumerateSessions_Response() {
  // @@protoc_insertion_point(destructor:CGameNotifications_EnumerateSessions_Response)
  SharedDtor();
}

void CGameNotifications_EnumerateSessions_Response::SharedDtor() {
}

void CGameNotifications_EnumerateSessions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_EnumerateSessions_Response::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_EnumerateSessions_Response& CGameNotifications_EnumerateSessions_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_EnumerateSessions_Response.base);
  return *internal_default_instance();
}


void CGameNotifications_EnumerateSessions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_EnumerateSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_EnumerateSessions_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_EnumerateSessions_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGameNotifications_Session sessions = 1 [(.description) = "A list of the user\'s sessions."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_EnumerateSessions_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_EnumerateSessions_Response)
  return false;
#undef DO_
}

void CGameNotifications_EnumerateSessions_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_EnumerateSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "A list of the user\'s sessions."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sessions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_EnumerateSessions_Response)
}

::google::protobuf::uint8* CGameNotifications_EnumerateSessions_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_EnumerateSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "A list of the user\'s sessions."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_EnumerateSessions_Response)
  return target;
}

size_t CGameNotifications_EnumerateSessions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_EnumerateSessions_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "A list of the user\'s sessions."];
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_EnumerateSessions_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_EnumerateSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_EnumerateSessions_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_EnumerateSessions_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_EnumerateSessions_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_EnumerateSessions_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_EnumerateSessions_Response::MergeFrom(const CGameNotifications_EnumerateSessions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_EnumerateSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void CGameNotifications_EnumerateSessions_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_EnumerateSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_EnumerateSessions_Response::CopyFrom(const CGameNotifications_EnumerateSessions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_EnumerateSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_EnumerateSessions_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_EnumerateSessions_Response::Swap(CGameNotifications_EnumerateSessions_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_EnumerateSessions_Response::InternalSwap(CGameNotifications_EnumerateSessions_Response* other) {
  using std::swap;
  CastToBase(&sessions_)->InternalSwap(CastToBase(&other->sessions_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_EnumerateSessions_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_GetSessionDetails_Request_RequestedSession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_GetSessionDetails_Request_RequestedSession::kSessionidFieldNumber;
const int CGameNotifications_GetSessionDetails_Request_RequestedSession::kIncludeAuthUserMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_GetSessionDetails_Request_RequestedSession::CGameNotifications_GetSessionDetails_Request_RequestedSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Request_RequestedSession.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_GetSessionDetails_Request.RequestedSession)
}
CGameNotifications_GetSessionDetails_Request_RequestedSession::CGameNotifications_GetSessionDetails_Request_RequestedSession(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_auth_user_message_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(include_auth_user_message_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_GetSessionDetails_Request.RequestedSession)
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_auth_user_message_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(include_auth_user_message_));
}

CGameNotifications_GetSessionDetails_Request_RequestedSession::~CGameNotifications_GetSessionDetails_Request_RequestedSession() {
  // @@protoc_insertion_point(destructor:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  SharedDtor();
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SharedDtor() {
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_GetSessionDetails_Request_RequestedSession::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_GetSessionDetails_Request_RequestedSession& CGameNotifications_GetSessionDetails_Request_RequestedSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Request_RequestedSession.base);
  return *internal_default_instance();
}


void CGameNotifications_GetSessionDetails_Request_RequestedSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_auth_user_message_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(include_auth_user_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_GetSessionDetails_Request_RequestedSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.description) = "The sessionid to get details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_auth_user_message = 3 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_include_auth_user_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_auth_user_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  return false;
#undef DO_
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid to get details for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional bool include_auth_user_message = 3 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_auth_user_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_GetSessionDetails_Request.RequestedSession)
}

::google::protobuf::uint8* CGameNotifications_GetSessionDetails_Request_RequestedSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.description) = "The sessionid to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional bool include_auth_user_message = 3 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_auth_user_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  return target;
}

size_t CGameNotifications_GetSessionDetails_Request_RequestedSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 sessionid = 1 [(.description) = "The sessionid to get details for."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional bool include_auth_user_message = 3 [(.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
    if (has_include_auth_user_message()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_GetSessionDetails_Request_RequestedSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_GetSessionDetails_Request_RequestedSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_GetSessionDetails_Request.RequestedSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_GetSessionDetails_Request.RequestedSession)
    MergeFrom(*source);
  }
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::MergeFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_auth_user_message_ = from.include_auth_user_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::CopyFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_GetSessionDetails_Request.RequestedSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_GetSessionDetails_Request_RequestedSession::IsInitialized() const {
  return true;
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::Swap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::InternalSwap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  swap(include_auth_user_message_, other->include_auth_user_message_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_GetSessionDetails_Request_RequestedSession::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_GetSessionDetails_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_GetSessionDetails_Request::kSessionsFieldNumber;
const int CGameNotifications_GetSessionDetails_Request::kAppidFieldNumber;
const int CGameNotifications_GetSessionDetails_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_GetSessionDetails_Request::CGameNotifications_GetSessionDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_GetSessionDetails_Request)
}
CGameNotifications_GetSessionDetails_Request::CGameNotifications_GetSessionDetails_Request(const CGameNotifications_GetSessionDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_GetSessionDetails_Request)
}

void CGameNotifications_GetSessionDetails_Request::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CGameNotifications_GetSessionDetails_Request::~CGameNotifications_GetSessionDetails_Request() {
  // @@protoc_insertion_point(destructor:CGameNotifications_GetSessionDetails_Request)
  SharedDtor();
}

void CGameNotifications_GetSessionDetails_Request::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_GetSessionDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_GetSessionDetails_Request::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_GetSessionDetails_Request& CGameNotifications_GetSessionDetails_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Request.base);
  return *internal_default_instance();
}


void CGameNotifications_GetSessionDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_GetSessionDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmptyNoArena();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_GetSessionDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_GetSessionDetails_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.description) = "The appid for the sessions."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 3 [(.description) = "Language to localize the text in."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameNotifications_GetSessionDetails_Request.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_GetSessionDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_GetSessionDetails_Request)
  return false;
#undef DO_
}

void CGameNotifications_GetSessionDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_GetSessionDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sessions(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 2 [(.description) = "The appid for the sessions."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional string language = 3 [(.description) = "Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_GetSessionDetails_Request.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_GetSessionDetails_Request)
}

::google::protobuf::uint8* CGameNotifications_GetSessionDetails_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_GetSessionDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 2 [(.description) = "The appid for the sessions."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional string language = 3 [(.description) = "Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameNotifications_GetSessionDetails_Request.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_GetSessionDetails_Request)
  return target;
}

size_t CGameNotifications_GetSessionDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_GetSessionDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sessions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string language = 3 [(.description) = "Language to localize the text in."];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional uint32 appid = 2 [(.description) = "The appid for the sessions."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_GetSessionDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_GetSessionDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_GetSessionDetails_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_GetSessionDetails_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_GetSessionDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_GetSessionDetails_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_GetSessionDetails_Request::MergeFrom(const CGameNotifications_GetSessionDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_GetSessionDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_GetSessionDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_GetSessionDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_GetSessionDetails_Request::CopyFrom(const CGameNotifications_GetSessionDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_GetSessionDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_GetSessionDetails_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_GetSessionDetails_Request::Swap(CGameNotifications_GetSessionDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_GetSessionDetails_Request::InternalSwap(CGameNotifications_GetSessionDetails_Request* other) {
  using std::swap;
  CastToBase(&sessions_)->InternalSwap(CastToBase(&other->sessions_));
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_GetSessionDetails_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_GetSessionDetails_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_GetSessionDetails_Response::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_GetSessionDetails_Response::CGameNotifications_GetSessionDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_GetSessionDetails_Response)
}
CGameNotifications_GetSessionDetails_Response::CGameNotifications_GetSessionDetails_Response(const CGameNotifications_GetSessionDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_GetSessionDetails_Response)
}

void CGameNotifications_GetSessionDetails_Response::SharedCtor() {
}

CGameNotifications_GetSessionDetails_Response::~CGameNotifications_GetSessionDetails_Response() {
  // @@protoc_insertion_point(destructor:CGameNotifications_GetSessionDetails_Response)
  SharedDtor();
}

void CGameNotifications_GetSessionDetails_Response::SharedDtor() {
}

void CGameNotifications_GetSessionDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_GetSessionDetails_Response::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_GetSessionDetails_Response& CGameNotifications_GetSessionDetails_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_GetSessionDetails_Response.base);
  return *internal_default_instance();
}


void CGameNotifications_GetSessionDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_GetSessionDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_GetSessionDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_GetSessionDetails_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGameNotifications_Session sessions = 1 [(.description) = "The details of the session."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_GetSessionDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_GetSessionDetails_Response)
  return false;
#undef DO_
}

void CGameNotifications_GetSessionDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_GetSessionDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "The details of the session."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sessions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_GetSessionDetails_Response)
}

::google::protobuf::uint8* CGameNotifications_GetSessionDetails_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_GetSessionDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "The details of the session."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_GetSessionDetails_Response)
  return target;
}

size_t CGameNotifications_GetSessionDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_GetSessionDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGameNotifications_Session sessions = 1 [(.description) = "The details of the session."];
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_GetSessionDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_GetSessionDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_GetSessionDetails_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_GetSessionDetails_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_GetSessionDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_GetSessionDetails_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_GetSessionDetails_Response::MergeFrom(const CGameNotifications_GetSessionDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_GetSessionDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void CGameNotifications_GetSessionDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_GetSessionDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_GetSessionDetails_Response::CopyFrom(const CGameNotifications_GetSessionDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_GetSessionDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_GetSessionDetails_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_GetSessionDetails_Response::Swap(CGameNotifications_GetSessionDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_GetSessionDetails_Response::InternalSwap(CGameNotifications_GetSessionDetails_Response* other) {
  using std::swap;
  CastToBase(&sessions_)->InternalSwap(CastToBase(&other->sessions_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_GetSessionDetails_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotificationSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotificationSettings::kAppidFieldNumber;
const int GameNotificationSettings::kAllowNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotificationSettings::GameNotificationSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_GameNotificationSettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameNotificationSettings)
}
GameNotificationSettings::GameNotificationSettings(const GameNotificationSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_notifications_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(allow_notifications_));
  // @@protoc_insertion_point(copy_constructor:GameNotificationSettings)
}

void GameNotificationSettings::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_notifications_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(allow_notifications_));
}

GameNotificationSettings::~GameNotificationSettings() {
  // @@protoc_insertion_point(destructor:GameNotificationSettings)
  SharedDtor();
}

void GameNotificationSettings::SharedDtor() {
}

void GameNotificationSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameNotificationSettings::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotificationSettings& GameNotificationSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_GameNotificationSettings.base);
  return *internal_default_instance();
}


void GameNotificationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:GameNotificationSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_notifications_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(allow_notifications_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameNotificationSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameNotificationSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_notifications = 2 [(.description) = "Whether the user allows notification for this app."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_allow_notifications();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_notifications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameNotificationSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameNotificationSettings)
  return false;
#undef DO_
}

void GameNotificationSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameNotificationSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool allow_notifications = 2 [(.description) = "Whether the user allows notification for this app."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_notifications(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameNotificationSettings)
}

::google::protobuf::uint8* GameNotificationSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameNotificationSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool allow_notifications = 2 [(.description) = "Whether the user allows notification for this app."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_notifications(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameNotificationSettings)
  return target;
}

size_t GameNotificationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameNotificationSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1 [(.description) = "The appid to create the session for."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool allow_notifications = 2 [(.description) = "Whether the user allows notification for this app."];
    if (has_allow_notifications()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameNotificationSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameNotificationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotificationSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotificationSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameNotificationSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameNotificationSettings)
    MergeFrom(*source);
  }
}

void GameNotificationSettings::MergeFrom(const GameNotificationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameNotificationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_notifications_ = from.allow_notifications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameNotificationSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameNotificationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotificationSettings::CopyFrom(const GameNotificationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameNotificationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotificationSettings::IsInitialized() const {
  return true;
}

void GameNotificationSettings::Swap(GameNotificationSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotificationSettings::InternalSwap(GameNotificationSettings* other) {
  using std::swap;
  swap(appid_, other->appid_);
  swap(allow_notifications_, other->allow_notifications_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameNotificationSettings::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_UpdateNotificationSettings_Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_UpdateNotificationSettings_Request::kGameNotificationSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateNotificationSettings_Request::CGameNotifications_UpdateNotificationSettings_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateNotificationSettings_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_UpdateNotificationSettings_Request)
}
CGameNotifications_UpdateNotificationSettings_Request::CGameNotifications_UpdateNotificationSettings_Request(const CGameNotifications_UpdateNotificationSettings_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      game_notification_settings_(from.game_notification_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_UpdateNotificationSettings_Request)
}

void CGameNotifications_UpdateNotificationSettings_Request::SharedCtor() {
}

CGameNotifications_UpdateNotificationSettings_Request::~CGameNotifications_UpdateNotificationSettings_Request() {
  // @@protoc_insertion_point(destructor:CGameNotifications_UpdateNotificationSettings_Request)
  SharedDtor();
}

void CGameNotifications_UpdateNotificationSettings_Request::SharedDtor() {
}

void CGameNotifications_UpdateNotificationSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateNotificationSettings_Request::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateNotificationSettings_Request& CGameNotifications_UpdateNotificationSettings_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateNotificationSettings_Request.base);
  return *internal_default_instance();
}


void CGameNotifications_UpdateNotificationSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_UpdateNotificationSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_notification_settings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateNotificationSettings_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_UpdateNotificationSettings_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameNotificationSettings game_notification_settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_notification_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_UpdateNotificationSettings_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_UpdateNotificationSettings_Request)
  return false;
#undef DO_
}

void CGameNotifications_UpdateNotificationSettings_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_UpdateNotificationSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameNotificationSettings game_notification_settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_notification_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->game_notification_settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_UpdateNotificationSettings_Request)
}

::google::protobuf::uint8* CGameNotifications_UpdateNotificationSettings_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_UpdateNotificationSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameNotificationSettings game_notification_settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_notification_settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->game_notification_settings(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_UpdateNotificationSettings_Request)
  return target;
}

size_t CGameNotifications_UpdateNotificationSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_UpdateNotificationSettings_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .GameNotificationSettings game_notification_settings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->game_notification_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_notification_settings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_UpdateNotificationSettings_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_UpdateNotificationSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateNotificationSettings_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateNotificationSettings_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_UpdateNotificationSettings_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_UpdateNotificationSettings_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateNotificationSettings_Request::MergeFrom(const CGameNotifications_UpdateNotificationSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_UpdateNotificationSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_notification_settings_.MergeFrom(from.game_notification_settings_);
}

void CGameNotifications_UpdateNotificationSettings_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_UpdateNotificationSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateNotificationSettings_Request::CopyFrom(const CGameNotifications_UpdateNotificationSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_UpdateNotificationSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateNotificationSettings_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateNotificationSettings_Request::Swap(CGameNotifications_UpdateNotificationSettings_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateNotificationSettings_Request::InternalSwap(CGameNotifications_UpdateNotificationSettings_Request* other) {
  using std::swap;
  CastToBase(&game_notification_settings_)->InternalSwap(CastToBase(&other->game_notification_settings_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_UpdateNotificationSettings_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_UpdateNotificationSettings_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateNotificationSettings_Response::CGameNotifications_UpdateNotificationSettings_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateNotificationSettings_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_UpdateNotificationSettings_Response)
}
CGameNotifications_UpdateNotificationSettings_Response::CGameNotifications_UpdateNotificationSettings_Response(const CGameNotifications_UpdateNotificationSettings_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_UpdateNotificationSettings_Response)
}

void CGameNotifications_UpdateNotificationSettings_Response::SharedCtor() {
}

CGameNotifications_UpdateNotificationSettings_Response::~CGameNotifications_UpdateNotificationSettings_Response() {
  // @@protoc_insertion_point(destructor:CGameNotifications_UpdateNotificationSettings_Response)
  SharedDtor();
}

void CGameNotifications_UpdateNotificationSettings_Response::SharedDtor() {
}

void CGameNotifications_UpdateNotificationSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateNotificationSettings_Response::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateNotificationSettings_Response& CGameNotifications_UpdateNotificationSettings_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_UpdateNotificationSettings_Response.base);
  return *internal_default_instance();
}


void CGameNotifications_UpdateNotificationSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_UpdateNotificationSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateNotificationSettings_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_UpdateNotificationSettings_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_UpdateNotificationSettings_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_UpdateNotificationSettings_Response)
  return false;
#undef DO_
}

void CGameNotifications_UpdateNotificationSettings_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_UpdateNotificationSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_UpdateNotificationSettings_Response)
}

::google::protobuf::uint8* CGameNotifications_UpdateNotificationSettings_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_UpdateNotificationSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_UpdateNotificationSettings_Response)
  return target;
}

size_t CGameNotifications_UpdateNotificationSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_UpdateNotificationSettings_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_UpdateNotificationSettings_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_UpdateNotificationSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateNotificationSettings_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateNotificationSettings_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_UpdateNotificationSettings_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_UpdateNotificationSettings_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateNotificationSettings_Response::MergeFrom(const CGameNotifications_UpdateNotificationSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_UpdateNotificationSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNotifications_UpdateNotificationSettings_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_UpdateNotificationSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateNotificationSettings_Response::CopyFrom(const CGameNotifications_UpdateNotificationSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_UpdateNotificationSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateNotificationSettings_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateNotificationSettings_Response::Swap(CGameNotifications_UpdateNotificationSettings_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateNotificationSettings_Response::InternalSwap(CGameNotifications_UpdateNotificationSettings_Response* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_UpdateNotificationSettings_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_OnNotificationsRequested_Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_OnNotificationsRequested_Notification::kSteamidFieldNumber;
const int CGameNotifications_OnNotificationsRequested_Notification::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_OnNotificationsRequested_Notification::CGameNotifications_OnNotificationsRequested_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_OnNotificationsRequested_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_OnNotificationsRequested_Notification)
}
CGameNotifications_OnNotificationsRequested_Notification::CGameNotifications_OnNotificationsRequested_Notification(const CGameNotifications_OnNotificationsRequested_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_OnNotificationsRequested_Notification)
}

void CGameNotifications_OnNotificationsRequested_Notification::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CGameNotifications_OnNotificationsRequested_Notification::~CGameNotifications_OnNotificationsRequested_Notification() {
  // @@protoc_insertion_point(destructor:CGameNotifications_OnNotificationsRequested_Notification)
  SharedDtor();
}

void CGameNotifications_OnNotificationsRequested_Notification::SharedDtor() {
}

void CGameNotifications_OnNotificationsRequested_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_OnNotificationsRequested_Notification::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_OnNotificationsRequested_Notification& CGameNotifications_OnNotificationsRequested_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_OnNotificationsRequested_Notification.base);
  return *internal_default_instance();
}


void CGameNotifications_OnNotificationsRequested_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_OnNotificationsRequested_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_OnNotificationsRequested_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_OnNotificationsRequested_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "steamid of the user who notifications were requested for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.description) = "The appid that requested notifications."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_OnNotificationsRequested_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_OnNotificationsRequested_Notification)
  return false;
#undef DO_
}

void CGameNotifications_OnNotificationsRequested_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_OnNotificationsRequested_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid of the user who notifications were requested for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2 [(.description) = "The appid that requested notifications."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_OnNotificationsRequested_Notification)
}

::google::protobuf::uint8* CGameNotifications_OnNotificationsRequested_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_OnNotificationsRequested_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid of the user who notifications were requested for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2 [(.description) = "The appid that requested notifications."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_OnNotificationsRequested_Notification)
  return target;
}

size_t CGameNotifications_OnNotificationsRequested_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_OnNotificationsRequested_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1 [(.description) = "steamid of the user who notifications were requested for."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.description) = "The appid that requested notifications."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_OnNotificationsRequested_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_OnNotificationsRequested_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_OnNotificationsRequested_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_OnNotificationsRequested_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_OnNotificationsRequested_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_OnNotificationsRequested_Notification)
    MergeFrom(*source);
  }
}

void CGameNotifications_OnNotificationsRequested_Notification::MergeFrom(const CGameNotifications_OnNotificationsRequested_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_OnNotificationsRequested_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_OnNotificationsRequested_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_OnNotificationsRequested_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_OnNotificationsRequested_Notification::CopyFrom(const CGameNotifications_OnNotificationsRequested_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_OnNotificationsRequested_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_OnNotificationsRequested_Notification::IsInitialized() const {
  return true;
}

void CGameNotifications_OnNotificationsRequested_Notification::Swap(CGameNotifications_OnNotificationsRequested_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_OnNotificationsRequested_Notification::InternalSwap(CGameNotifications_OnNotificationsRequested_Notification* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_OnNotificationsRequested_Notification::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGameNotifications_OnUserStatusChanged_Notification::InitAsDefaultInstance() {
  ::_CGameNotifications_OnUserStatusChanged_Notification_default_instance_._instance.get_mutable()->status_ = const_cast< ::CGameNotifications_UserStatus*>(
      ::CGameNotifications_UserStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_OnUserStatusChanged_Notification::kSteamidFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kSessionidFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kAppidFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kStatusFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kRemovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_OnUserStatusChanged_Notification::CGameNotifications_OnUserStatusChanged_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_OnUserStatusChanged_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameNotifications_OnUserStatusChanged_Notification)
}
CGameNotifications_OnUserStatusChanged_Notification::CGameNotifications_OnUserStatusChanged_Notification(const CGameNotifications_OnUserStatusChanged_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::CGameNotifications_UserStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&removed_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(removed_));
  // @@protoc_insertion_point(copy_constructor:CGameNotifications_OnUserStatusChanged_Notification)
}

void CGameNotifications_OnUserStatusChanged_Notification::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&removed_) -
      reinterpret_cast<char*>(&status_)) + sizeof(removed_));
}

CGameNotifications_OnUserStatusChanged_Notification::~CGameNotifications_OnUserStatusChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameNotifications_OnUserStatusChanged_Notification)
  SharedDtor();
}

void CGameNotifications_OnUserStatusChanged_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void CGameNotifications_OnUserStatusChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CGameNotifications_OnUserStatusChanged_Notification::descriptor() {
  ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_OnUserStatusChanged_Notification& CGameNotifications_OnUserStatusChanged_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::scc_info_CGameNotifications_OnUserStatusChanged_Notification.base);
  return *internal_default_instance();
}


void CGameNotifications_OnUserStatusChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotifications_OnUserStatusChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&removed_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(removed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_OnUserStatusChanged_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameNotifications_OnUserStatusChanged_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.description) = "steamid of the user whose status changed."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sessionid = 2 [(.description) = "The sessionid of the session where the user\'s status was changed."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 3 [(.description) = "The appid of the session where the user\'s status changed."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CGameNotifications_UserStatus status = 4 [(.description) = "(Optional) New status of the user."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool removed = 5 [(.description) = "(Optional) User has been removed from the session."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameNotifications_OnUserStatusChanged_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameNotifications_OnUserStatusChanged_Notification)
  return false;
#undef DO_
}

void CGameNotifications_OnUserStatusChanged_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameNotifications_OnUserStatusChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid of the user whose status changed."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint64 sessionid = 2 [(.description) = "The sessionid of the session where the user\'s status was changed."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // optional uint32 appid = 3 [(.description) = "The appid of the session where the user\'s status changed."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // optional .CGameNotifications_UserStatus status = 4 [(.description) = "(Optional) New status of the user."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_status(), output);
  }

  // optional bool removed = 5 [(.description) = "(Optional) User has been removed from the session."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->removed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameNotifications_OnUserStatusChanged_Notification)
}

::google::protobuf::uint8* CGameNotifications_OnUserStatusChanged_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotifications_OnUserStatusChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid of the user whose status changed."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint64 sessionid = 2 [(.description) = "The sessionid of the session where the user\'s status was changed."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sessionid(), target);
  }

  // optional uint32 appid = 3 [(.description) = "The appid of the session where the user\'s status changed."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // optional .CGameNotifications_UserStatus status = 4 [(.description) = "(Optional) New status of the user."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_status(), deterministic, target);
  }

  // optional bool removed = 5 [(.description) = "(Optional) User has been removed from the session."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->removed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotifications_OnUserStatusChanged_Notification)
  return target;
}

size_t CGameNotifications_OnUserStatusChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotifications_OnUserStatusChanged_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CGameNotifications_UserStatus status = 4 [(.description) = "(Optional) New status of the user."];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional fixed64 steamid = 1 [(.description) = "steamid of the user whose status changed."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 sessionid = 2 [(.description) = "The sessionid of the session where the user\'s status was changed."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional uint32 appid = 3 [(.description) = "The appid of the session where the user\'s status changed."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool removed = 5 [(.description) = "(Optional) User has been removed from the session."];
    if (has_removed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotifications_OnUserStatusChanged_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotifications_OnUserStatusChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_OnUserStatusChanged_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_OnUserStatusChanged_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotifications_OnUserStatusChanged_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotifications_OnUserStatusChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameNotifications_OnUserStatusChanged_Notification::MergeFrom(const CGameNotifications_OnUserStatusChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotifications_OnUserStatusChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::CGameNotifications_UserStatus::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      removed_ = from.removed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_OnUserStatusChanged_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotifications_OnUserStatusChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_OnUserStatusChanged_Notification::CopyFrom(const CGameNotifications_OnUserStatusChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotifications_OnUserStatusChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_OnUserStatusChanged_Notification::IsInitialized() const {
  return true;
}

void CGameNotifications_OnUserStatusChanged_Notification::Swap(CGameNotifications_OnUserStatusChanged_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_OnUserStatusChanged_Notification::InternalSwap(CGameNotifications_OnUserStatusChanged_Notification* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(steamid_, other->steamid_);
  swap(sessionid_, other->sessionid_);
  swap(appid_, other->appid_);
  swap(removed_, other->removed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CGameNotifications_OnUserStatusChanged_Notification::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

GameNotifications::~GameNotifications() {}

const ::google::protobuf::ServiceDescriptor* GameNotifications::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* GameNotifications::GetDescriptor() {
  return descriptor();
}

void GameNotifications::UserCreateSession(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_CreateSession_Request*,
                         ::CGameNotifications_CreateSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserCreateSession() not implemented.");
  done->Run();
}

void GameNotifications::UserDeleteSession(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_DeleteSession_Request*,
                         ::CGameNotifications_DeleteSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserDeleteSession() not implemented.");
  done->Run();
}

void GameNotifications::UserUpdateSession(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_UpdateSession_Request*,
                         ::CGameNotifications_UpdateSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserUpdateSession() not implemented.");
  done->Run();
}

void GameNotifications::EnumerateSessions(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_EnumerateSessions_Request*,
                         ::CGameNotifications_EnumerateSessions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateSessions() not implemented.");
  done->Run();
}

void GameNotifications::GetSessionDetails(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_GetSessionDetails_Request*,
                         ::CGameNotifications_GetSessionDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSessionDetails() not implemented.");
  done->Run();
}

void GameNotifications::UpdateNotificationSettings(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_UpdateNotificationSettings_Request*,
                         ::CGameNotifications_UpdateNotificationSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateNotificationSettings() not implemented.");
  done->Run();
}

void GameNotifications::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      UserCreateSession(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_CreateSession_Request*>(request),
             ::google::protobuf::down_cast< ::CGameNotifications_CreateSession_Response*>(response),
             done);
      break;
    case 1:
      UserDeleteSession(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_DeleteSession_Request*>(request),
             ::google::protobuf::down_cast< ::CGameNotifications_DeleteSession_Response*>(response),
             done);
      break;
    case 2:
      UserUpdateSession(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_UpdateSession_Request*>(request),
             ::google::protobuf::down_cast< ::CGameNotifications_UpdateSession_Response*>(response),
             done);
      break;
    case 3:
      EnumerateSessions(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_EnumerateSessions_Request*>(request),
             ::google::protobuf::down_cast< ::CGameNotifications_EnumerateSessions_Response*>(response),
             done);
      break;
    case 4:
      GetSessionDetails(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_GetSessionDetails_Request*>(request),
             ::google::protobuf::down_cast< ::CGameNotifications_GetSessionDetails_Response*>(response),
             done);
      break;
    case 5:
      UpdateNotificationSettings(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_UpdateNotificationSettings_Request*>(request),
             ::google::protobuf::down_cast< ::CGameNotifications_UpdateNotificationSettings_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GameNotifications::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNotifications_CreateSession_Request::default_instance();
    case 1:
      return ::CGameNotifications_DeleteSession_Request::default_instance();
    case 2:
      return ::CGameNotifications_UpdateSession_Request::default_instance();
    case 3:
      return ::CGameNotifications_EnumerateSessions_Request::default_instance();
    case 4:
      return ::CGameNotifications_GetSessionDetails_Request::default_instance();
    case 5:
      return ::CGameNotifications_UpdateNotificationSettings_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GameNotifications::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNotifications_CreateSession_Response::default_instance();
    case 1:
      return ::CGameNotifications_DeleteSession_Response::default_instance();
    case 2:
      return ::CGameNotifications_UpdateSession_Response::default_instance();
    case 3:
      return ::CGameNotifications_EnumerateSessions_Response::default_instance();
    case 4:
      return ::CGameNotifications_GetSessionDetails_Response::default_instance();
    case 5:
      return ::CGameNotifications_UpdateNotificationSettings_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameNotifications_Stub::GameNotifications_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameNotifications_Stub::GameNotifications_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GameNotifications_Stub::~GameNotifications_Stub() {
  if (owns_channel_) delete channel_;
}

void GameNotifications_Stub::UserCreateSession(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_CreateSession_Request* request,
                              ::CGameNotifications_CreateSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameNotifications_Stub::UserDeleteSession(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_DeleteSession_Request* request,
                              ::CGameNotifications_DeleteSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameNotifications_Stub::UserUpdateSession(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_UpdateSession_Request* request,
                              ::CGameNotifications_UpdateSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameNotifications_Stub::EnumerateSessions(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_EnumerateSessions_Request* request,
                              ::CGameNotifications_EnumerateSessions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GameNotifications_Stub::GetSessionDetails(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_GetSessionDetails_Request* request,
                              ::CGameNotifications_GetSessionDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GameNotifications_Stub::UpdateNotificationSettings(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_UpdateNotificationSettings_Request* request,
                              ::CGameNotifications_UpdateNotificationSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
// ===================================================================

GameNotificationsClient::~GameNotificationsClient() {}

const ::google::protobuf::ServiceDescriptor* GameNotificationsClient::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* GameNotificationsClient::GetDescriptor() {
  return descriptor();
}

void GameNotificationsClient::OnNotificationsRequested(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_OnNotificationsRequested_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnNotificationsRequested() not implemented.");
  done->Run();
}

void GameNotificationsClient::OnUserStatusChanged(::google::protobuf::RpcController* controller,
                         const ::CGameNotifications_OnUserStatusChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnUserStatusChanged() not implemented.");
  done->Run();
}

void GameNotificationsClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      OnNotificationsRequested(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_OnNotificationsRequested_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    case 1:
      OnUserStatusChanged(controller,
             ::google::protobuf::down_cast<const ::CGameNotifications_OnUserStatusChanged_Notification*>(request),
             ::google::protobuf::down_cast< ::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GameNotificationsClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNotifications_OnNotificationsRequested_Notification::default_instance();
    case 1:
      return ::CGameNotifications_OnUserStatusChanged_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GameNotificationsClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameNotificationsClient_Stub::GameNotificationsClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameNotificationsClient_Stub::GameNotificationsClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GameNotificationsClient_Stub::~GameNotificationsClient_Stub() {
  if (owns_channel_) delete channel_;
}

void GameNotificationsClient_Stub::OnNotificationsRequested(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_OnNotificationsRequested_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameNotificationsClient_Stub::OnUserStatusChanged(::google::protobuf::RpcController* controller,
                              const ::CGameNotifications_OnUserStatusChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_Variable* Arena::CreateMaybeMessage< ::CGameNotifications_Variable >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_Variable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_LocalizedText* Arena::CreateMaybeMessage< ::CGameNotifications_LocalizedText >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_LocalizedText >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_UserStatus* Arena::CreateMaybeMessage< ::CGameNotifications_UserStatus >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_UserStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_CreateSession_Request* Arena::CreateMaybeMessage< ::CGameNotifications_CreateSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_CreateSession_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_CreateSession_Response* Arena::CreateMaybeMessage< ::CGameNotifications_CreateSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_CreateSession_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_DeleteSession_Request* Arena::CreateMaybeMessage< ::CGameNotifications_DeleteSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_DeleteSession_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_DeleteSession_Response* Arena::CreateMaybeMessage< ::CGameNotifications_DeleteSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_DeleteSession_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_UpdateSession_Request* Arena::CreateMaybeMessage< ::CGameNotifications_UpdateSession_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_UpdateSession_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_UpdateSession_Response* Arena::CreateMaybeMessage< ::CGameNotifications_UpdateSession_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_UpdateSession_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_EnumerateSessions_Request* Arena::CreateMaybeMessage< ::CGameNotifications_EnumerateSessions_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_EnumerateSessions_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_Session* Arena::CreateMaybeMessage< ::CGameNotifications_Session >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_Session >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_EnumerateSessions_Response* Arena::CreateMaybeMessage< ::CGameNotifications_EnumerateSessions_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_EnumerateSessions_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_GetSessionDetails_Request_RequestedSession* Arena::CreateMaybeMessage< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_GetSessionDetails_Request* Arena::CreateMaybeMessage< ::CGameNotifications_GetSessionDetails_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_GetSessionDetails_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_GetSessionDetails_Response* Arena::CreateMaybeMessage< ::CGameNotifications_GetSessionDetails_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_GetSessionDetails_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameNotificationSettings* Arena::CreateMaybeMessage< ::GameNotificationSettings >(Arena* arena) {
  return Arena::CreateInternal< ::GameNotificationSettings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_UpdateNotificationSettings_Request* Arena::CreateMaybeMessage< ::CGameNotifications_UpdateNotificationSettings_Request >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_UpdateNotificationSettings_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_UpdateNotificationSettings_Response* Arena::CreateMaybeMessage< ::CGameNotifications_UpdateNotificationSettings_Response >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_UpdateNotificationSettings_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_OnNotificationsRequested_Notification* Arena::CreateMaybeMessage< ::CGameNotifications_OnNotificationsRequested_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_OnNotificationsRequested_Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CGameNotifications_OnUserStatusChanged_Notification* Arena::CreateMaybeMessage< ::CGameNotifications_OnUserStatusChanged_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::CGameNotifications_OnUserStatusChanged_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
