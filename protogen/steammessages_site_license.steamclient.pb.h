// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_site_license.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fsite_5flicense_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fsite_5flicense_2esteamclient_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto 

namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto
class CSiteLicense_ClientGetAvailableSeats_Request;
class CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal;
extern CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_;
class CSiteLicense_ClientGetAvailableSeats_Response;
class CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal;
extern CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_;
class CSiteLicense_ClientSeatCheckout_Notification;
class CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal;
extern CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Notification_default_instance_;
class CSiteLicense_ClientSeatCheckout_Request;
class CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal;
extern CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Request_default_instance_;
class CSiteLicense_ClientSeatCheckout_Response;
class CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal;
extern CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Response_default_instance_;
class CSiteLicense_InitiateAssociation_Request;
class CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal;
extern CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal _CSiteLicense_InitiateAssociation_Request_default_instance_;
class CSiteLicense_InitiateAssociation_Response;
class CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal;
extern CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal _CSiteLicense_InitiateAssociation_Response_default_instance_;
class CSiteLicense_LCSAssociateUser_Request;
class CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal;
extern CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal _CSiteLicense_LCSAssociateUser_Request_default_instance_;
class CSiteLicense_LCSAssociateUser_Response;
class CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal;
extern CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal _CSiteLicense_LCSAssociateUser_Response_default_instance_;
class CSiteLicense_LCSAuthenticate_Request;
class CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal;
extern CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal _CSiteLicense_LCSAuthenticate_Request_default_instance_;
class CSiteLicense_LCSAuthenticate_Response;
class CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal;
extern CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal _CSiteLicense_LCSAuthenticate_Response_default_instance_;
class CSiteManagerClient_IncomingClient_Request;
class CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal;
extern CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal _CSiteManagerClient_IncomingClient_Request_default_instance_;
class CSiteManagerClient_IncomingClient_Response;
class CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal;
extern CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal _CSiteManagerClient_IncomingClient_Response_default_instance_;
namespace google {
namespace protobuf {
template<> ::CSiteLicense_ClientGetAvailableSeats_Request* Arena::CreateMaybeMessage<::CSiteLicense_ClientGetAvailableSeats_Request>(Arena*);
template<> ::CSiteLicense_ClientGetAvailableSeats_Response* Arena::CreateMaybeMessage<::CSiteLicense_ClientGetAvailableSeats_Response>(Arena*);
template<> ::CSiteLicense_ClientSeatCheckout_Notification* Arena::CreateMaybeMessage<::CSiteLicense_ClientSeatCheckout_Notification>(Arena*);
template<> ::CSiteLicense_ClientSeatCheckout_Request* Arena::CreateMaybeMessage<::CSiteLicense_ClientSeatCheckout_Request>(Arena*);
template<> ::CSiteLicense_ClientSeatCheckout_Response* Arena::CreateMaybeMessage<::CSiteLicense_ClientSeatCheckout_Response>(Arena*);
template<> ::CSiteLicense_InitiateAssociation_Request* Arena::CreateMaybeMessage<::CSiteLicense_InitiateAssociation_Request>(Arena*);
template<> ::CSiteLicense_InitiateAssociation_Response* Arena::CreateMaybeMessage<::CSiteLicense_InitiateAssociation_Response>(Arena*);
template<> ::CSiteLicense_LCSAssociateUser_Request* Arena::CreateMaybeMessage<::CSiteLicense_LCSAssociateUser_Request>(Arena*);
template<> ::CSiteLicense_LCSAssociateUser_Response* Arena::CreateMaybeMessage<::CSiteLicense_LCSAssociateUser_Response>(Arena*);
template<> ::CSiteLicense_LCSAuthenticate_Request* Arena::CreateMaybeMessage<::CSiteLicense_LCSAuthenticate_Request>(Arena*);
template<> ::CSiteLicense_LCSAuthenticate_Response* Arena::CreateMaybeMessage<::CSiteLicense_LCSAuthenticate_Response>(Arena*);
template<> ::CSiteManagerClient_IncomingClient_Request* Arena::CreateMaybeMessage<::CSiteManagerClient_IncomingClient_Request>(Arena*);
template<> ::CSiteManagerClient_IncomingClient_Response* Arena::CreateMaybeMessage<::CSiteManagerClient_IncomingClient_Response>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CSiteManagerClient_IncomingClient_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteManagerClient_IncomingClient_Request) */ {
 public:
  CSiteManagerClient_IncomingClient_Request();
  virtual ~CSiteManagerClient_IncomingClient_Request();

  CSiteManagerClient_IncomingClient_Request(const CSiteManagerClient_IncomingClient_Request& from);

  inline CSiteManagerClient_IncomingClient_Request& operator=(const CSiteManagerClient_IncomingClient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteManagerClient_IncomingClient_Request(CSiteManagerClient_IncomingClient_Request&& from) noexcept
    : CSiteManagerClient_IncomingClient_Request() {
    *this = ::std::move(from);
  }

  inline CSiteManagerClient_IncomingClient_Request& operator=(CSiteManagerClient_IncomingClient_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteManagerClient_IncomingClient_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteManagerClient_IncomingClient_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteManagerClient_IncomingClient_Request*>(
               &_CSiteManagerClient_IncomingClient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSiteManagerClient_IncomingClient_Request* other);
  friend void swap(CSiteManagerClient_IncomingClient_Request& a, CSiteManagerClient_IncomingClient_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteManagerClient_IncomingClient_Request* New() const final {
    return CreateMaybeMessage<CSiteManagerClient_IncomingClient_Request>(NULL);
  }

  CSiteManagerClient_IncomingClient_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteManagerClient_IncomingClient_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteManagerClient_IncomingClient_Request& from);
  void MergeFrom(const CSiteManagerClient_IncomingClient_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteManagerClient_IncomingClient_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes connection_key = 4;
  bool has_connection_key() const;
  void clear_connection_key();
  static const int kConnectionKeyFieldNumber = 4;
  const ::std::string& connection_key() const;
  void set_connection_key(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_key(::std::string&& value);
  #endif
  void set_connection_key(const char* value);
  void set_connection_key(const void* value, size_t size);
  ::std::string* mutable_connection_key();
  ::std::string* release_connection_key();
  void set_allocated_connection_key(::std::string* connection_key);

  // optional fixed64 site_instanceid = 1;
  bool has_site_instanceid() const;
  void clear_site_instanceid();
  static const int kSiteInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 site_instanceid() const;
  void set_site_instanceid(::google::protobuf::uint64 value);

  // optional fixed64 client_steamid = 2;
  bool has_client_steamid() const;
  void clear_client_steamid();
  static const int kClientSteamidFieldNumber = 2;
  ::google::protobuf::uint64 client_steamid() const;
  void set_client_steamid(::google::protobuf::uint64 value);

  // optional fixed32 client_local_ip = 3;
  bool has_client_local_ip() const;
  void clear_client_local_ip();
  static const int kClientLocalIpFieldNumber = 3;
  ::google::protobuf::uint32 client_local_ip() const;
  void set_client_local_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteManagerClient_IncomingClient_Request)
 private:
  void set_has_site_instanceid();
  void clear_has_site_instanceid();
  void set_has_client_steamid();
  void clear_has_client_steamid();
  void set_has_client_local_ip();
  void clear_has_client_local_ip();
  void set_has_connection_key();
  void clear_has_connection_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr connection_key_;
  ::google::protobuf::uint64 site_instanceid_;
  ::google::protobuf::uint64 client_steamid_;
  ::google::protobuf::uint32 client_local_ip_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteManagerClient_IncomingClient_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteManagerClient_IncomingClient_Response) */ {
 public:
  CSiteManagerClient_IncomingClient_Response();
  virtual ~CSiteManagerClient_IncomingClient_Response();

  CSiteManagerClient_IncomingClient_Response(const CSiteManagerClient_IncomingClient_Response& from);

  inline CSiteManagerClient_IncomingClient_Response& operator=(const CSiteManagerClient_IncomingClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteManagerClient_IncomingClient_Response(CSiteManagerClient_IncomingClient_Response&& from) noexcept
    : CSiteManagerClient_IncomingClient_Response() {
    *this = ::std::move(from);
  }

  inline CSiteManagerClient_IncomingClient_Response& operator=(CSiteManagerClient_IncomingClient_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteManagerClient_IncomingClient_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteManagerClient_IncomingClient_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteManagerClient_IncomingClient_Response*>(
               &_CSiteManagerClient_IncomingClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CSiteManagerClient_IncomingClient_Response* other);
  friend void swap(CSiteManagerClient_IncomingClient_Response& a, CSiteManagerClient_IncomingClient_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteManagerClient_IncomingClient_Response* New() const final {
    return CreateMaybeMessage<CSiteManagerClient_IncomingClient_Response>(NULL);
  }

  CSiteManagerClient_IncomingClient_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteManagerClient_IncomingClient_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteManagerClient_IncomingClient_Response& from);
  void MergeFrom(const CSiteManagerClient_IncomingClient_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteManagerClient_IncomingClient_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSiteManagerClient_IncomingClient_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientSeatCheckout_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientSeatCheckout_Notification) */ {
 public:
  CSiteLicense_ClientSeatCheckout_Notification();
  virtual ~CSiteLicense_ClientSeatCheckout_Notification();

  CSiteLicense_ClientSeatCheckout_Notification(const CSiteLicense_ClientSeatCheckout_Notification& from);

  inline CSiteLicense_ClientSeatCheckout_Notification& operator=(const CSiteLicense_ClientSeatCheckout_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_ClientSeatCheckout_Notification(CSiteLicense_ClientSeatCheckout_Notification&& from) noexcept
    : CSiteLicense_ClientSeatCheckout_Notification() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientSeatCheckout_Notification& operator=(CSiteLicense_ClientSeatCheckout_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_ClientSeatCheckout_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_ClientSeatCheckout_Notification* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientSeatCheckout_Notification*>(
               &_CSiteLicense_ClientSeatCheckout_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CSiteLicense_ClientSeatCheckout_Notification* other);
  friend void swap(CSiteLicense_ClientSeatCheckout_Notification& a, CSiteLicense_ClientSeatCheckout_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_ClientSeatCheckout_Notification* New() const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Notification>(NULL);
  }

  CSiteLicense_ClientSeatCheckout_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_ClientSeatCheckout_Notification& from);
  void MergeFrom(const CSiteLicense_ClientSeatCheckout_Notification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientSeatCheckout_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 eresult = 2;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientSeatCheckout_Notification)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_InitiateAssociation_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_InitiateAssociation_Request) */ {
 public:
  CSiteLicense_InitiateAssociation_Request();
  virtual ~CSiteLicense_InitiateAssociation_Request();

  CSiteLicense_InitiateAssociation_Request(const CSiteLicense_InitiateAssociation_Request& from);

  inline CSiteLicense_InitiateAssociation_Request& operator=(const CSiteLicense_InitiateAssociation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_InitiateAssociation_Request(CSiteLicense_InitiateAssociation_Request&& from) noexcept
    : CSiteLicense_InitiateAssociation_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_InitiateAssociation_Request& operator=(CSiteLicense_InitiateAssociation_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_InitiateAssociation_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_InitiateAssociation_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_InitiateAssociation_Request*>(
               &_CSiteLicense_InitiateAssociation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CSiteLicense_InitiateAssociation_Request* other);
  friend void swap(CSiteLicense_InitiateAssociation_Request& a, CSiteLicense_InitiateAssociation_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_InitiateAssociation_Request* New() const final {
    return CreateMaybeMessage<CSiteLicense_InitiateAssociation_Request>(NULL);
  }

  CSiteLicense_InitiateAssociation_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_InitiateAssociation_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_InitiateAssociation_Request& from);
  void MergeFrom(const CSiteLicense_InitiateAssociation_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_InitiateAssociation_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 site_steamid = 1;
  bool has_site_steamid() const;
  void clear_site_steamid();
  static const int kSiteSteamidFieldNumber = 1;
  ::google::protobuf::uint64 site_steamid() const;
  void set_site_steamid(::google::protobuf::uint64 value);

  // optional fixed64 site_instanceid = 2;
  bool has_site_instanceid() const;
  void clear_site_instanceid();
  static const int kSiteInstanceidFieldNumber = 2;
  ::google::protobuf::uint64 site_instanceid() const;
  void set_site_instanceid(::google::protobuf::uint64 value);

  // optional fixed32 client_local_ip = 3;
  bool has_client_local_ip() const;
  void clear_client_local_ip();
  static const int kClientLocalIpFieldNumber = 3;
  ::google::protobuf::uint32 client_local_ip() const;
  void set_client_local_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_InitiateAssociation_Request)
 private:
  void set_has_site_steamid();
  void clear_has_site_steamid();
  void set_has_site_instanceid();
  void clear_has_site_instanceid();
  void set_has_client_local_ip();
  void clear_has_client_local_ip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 site_steamid_;
  ::google::protobuf::uint64 site_instanceid_;
  ::google::protobuf::uint32 client_local_ip_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_InitiateAssociation_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_InitiateAssociation_Response) */ {
 public:
  CSiteLicense_InitiateAssociation_Response();
  virtual ~CSiteLicense_InitiateAssociation_Response();

  CSiteLicense_InitiateAssociation_Response(const CSiteLicense_InitiateAssociation_Response& from);

  inline CSiteLicense_InitiateAssociation_Response& operator=(const CSiteLicense_InitiateAssociation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_InitiateAssociation_Response(CSiteLicense_InitiateAssociation_Response&& from) noexcept
    : CSiteLicense_InitiateAssociation_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_InitiateAssociation_Response& operator=(CSiteLicense_InitiateAssociation_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_InitiateAssociation_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_InitiateAssociation_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_InitiateAssociation_Response*>(
               &_CSiteLicense_InitiateAssociation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CSiteLicense_InitiateAssociation_Response* other);
  friend void swap(CSiteLicense_InitiateAssociation_Response& a, CSiteLicense_InitiateAssociation_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_InitiateAssociation_Response* New() const final {
    return CreateMaybeMessage<CSiteLicense_InitiateAssociation_Response>(NULL);
  }

  CSiteLicense_InitiateAssociation_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_InitiateAssociation_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_InitiateAssociation_Response& from);
  void MergeFrom(const CSiteLicense_InitiateAssociation_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_InitiateAssociation_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes connection_key = 1;
  bool has_connection_key() const;
  void clear_connection_key();
  static const int kConnectionKeyFieldNumber = 1;
  const ::std::string& connection_key() const;
  void set_connection_key(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_key(::std::string&& value);
  #endif
  void set_connection_key(const char* value);
  void set_connection_key(const void* value, size_t size);
  ::std::string* mutable_connection_key();
  ::std::string* release_connection_key();
  void set_allocated_connection_key(::std::string* connection_key);

  // @@protoc_insertion_point(class_scope:CSiteLicense_InitiateAssociation_Response)
 private:
  void set_has_connection_key();
  void clear_has_connection_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr connection_key_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAuthenticate_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAuthenticate_Request) */ {
 public:
  CSiteLicense_LCSAuthenticate_Request();
  virtual ~CSiteLicense_LCSAuthenticate_Request();

  CSiteLicense_LCSAuthenticate_Request(const CSiteLicense_LCSAuthenticate_Request& from);

  inline CSiteLicense_LCSAuthenticate_Request& operator=(const CSiteLicense_LCSAuthenticate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_LCSAuthenticate_Request(CSiteLicense_LCSAuthenticate_Request&& from) noexcept
    : CSiteLicense_LCSAuthenticate_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAuthenticate_Request& operator=(CSiteLicense_LCSAuthenticate_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_LCSAuthenticate_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_LCSAuthenticate_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAuthenticate_Request*>(
               &_CSiteLicense_LCSAuthenticate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CSiteLicense_LCSAuthenticate_Request* other);
  friend void swap(CSiteLicense_LCSAuthenticate_Request& a, CSiteLicense_LCSAuthenticate_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_LCSAuthenticate_Request* New() const final {
    return CreateMaybeMessage<CSiteLicense_LCSAuthenticate_Request>(NULL);
  }

  CSiteLicense_LCSAuthenticate_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAuthenticate_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_LCSAuthenticate_Request& from);
  void MergeFrom(const CSiteLicense_LCSAuthenticate_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAuthenticate_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 instanceid = 1;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAuthenticate_Request)
 private:
  void set_has_instanceid();
  void clear_has_instanceid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 instanceid_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAuthenticate_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAuthenticate_Response) */ {
 public:
  CSiteLicense_LCSAuthenticate_Response();
  virtual ~CSiteLicense_LCSAuthenticate_Response();

  CSiteLicense_LCSAuthenticate_Response(const CSiteLicense_LCSAuthenticate_Response& from);

  inline CSiteLicense_LCSAuthenticate_Response& operator=(const CSiteLicense_LCSAuthenticate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_LCSAuthenticate_Response(CSiteLicense_LCSAuthenticate_Response&& from) noexcept
    : CSiteLicense_LCSAuthenticate_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAuthenticate_Response& operator=(CSiteLicense_LCSAuthenticate_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_LCSAuthenticate_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_LCSAuthenticate_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAuthenticate_Response*>(
               &_CSiteLicense_LCSAuthenticate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CSiteLicense_LCSAuthenticate_Response* other);
  friend void swap(CSiteLicense_LCSAuthenticate_Response& a, CSiteLicense_LCSAuthenticate_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_LCSAuthenticate_Response* New() const final {
    return CreateMaybeMessage<CSiteLicense_LCSAuthenticate_Response>(NULL);
  }

  CSiteLicense_LCSAuthenticate_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAuthenticate_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_LCSAuthenticate_Response& from);
  void MergeFrom(const CSiteLicense_LCSAuthenticate_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAuthenticate_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string site_name = 2;
  bool has_site_name() const;
  void clear_site_name();
  static const int kSiteNameFieldNumber = 2;
  const ::std::string& site_name() const;
  void set_site_name(const ::std::string& value);
  #if LANG_CXX11
  void set_site_name(::std::string&& value);
  #endif
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  ::std::string* mutable_site_name();
  ::std::string* release_site_name();
  void set_allocated_site_name(::std::string* site_name);

  // optional uint64 site_id = 1;
  bool has_site_id() const;
  void clear_site_id();
  static const int kSiteIdFieldNumber = 1;
  ::google::protobuf::uint64 site_id() const;
  void set_site_id(::google::protobuf::uint64 value);

  // optional bool new_session = 3;
  bool has_new_session() const;
  void clear_new_session();
  static const int kNewSessionFieldNumber = 3;
  bool new_session() const;
  void set_new_session(bool value);

  // optional bool no_site_licenses = 4;
  bool has_no_site_licenses() const;
  void clear_no_site_licenses();
  static const int kNoSiteLicensesFieldNumber = 4;
  bool no_site_licenses() const;
  void set_no_site_licenses(bool value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAuthenticate_Response)
 private:
  void set_has_site_id();
  void clear_has_site_id();
  void set_has_site_name();
  void clear_has_site_name();
  void set_has_new_session();
  void clear_has_new_session();
  void set_has_no_site_licenses();
  void clear_has_no_site_licenses();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr site_name_;
  ::google::protobuf::uint64 site_id_;
  bool new_session_;
  bool no_site_licenses_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAssociateUser_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAssociateUser_Request) */ {
 public:
  CSiteLicense_LCSAssociateUser_Request();
  virtual ~CSiteLicense_LCSAssociateUser_Request();

  CSiteLicense_LCSAssociateUser_Request(const CSiteLicense_LCSAssociateUser_Request& from);

  inline CSiteLicense_LCSAssociateUser_Request& operator=(const CSiteLicense_LCSAssociateUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_LCSAssociateUser_Request(CSiteLicense_LCSAssociateUser_Request&& from) noexcept
    : CSiteLicense_LCSAssociateUser_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAssociateUser_Request& operator=(CSiteLicense_LCSAssociateUser_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_LCSAssociateUser_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_LCSAssociateUser_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAssociateUser_Request*>(
               &_CSiteLicense_LCSAssociateUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CSiteLicense_LCSAssociateUser_Request* other);
  friend void swap(CSiteLicense_LCSAssociateUser_Request& a, CSiteLicense_LCSAssociateUser_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_LCSAssociateUser_Request* New() const final {
    return CreateMaybeMessage<CSiteLicense_LCSAssociateUser_Request>(NULL);
  }

  CSiteLicense_LCSAssociateUser_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAssociateUser_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_LCSAssociateUser_Request& from);
  void MergeFrom(const CSiteLicense_LCSAssociateUser_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAssociateUser_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string machine_name = 4;
  bool has_machine_name() const;
  void clear_machine_name();
  static const int kMachineNameFieldNumber = 4;
  const ::std::string& machine_name() const;
  void set_machine_name(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_name(::std::string&& value);
  #endif
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  ::std::string* mutable_machine_name();
  ::std::string* release_machine_name();
  void set_allocated_machine_name(::std::string* machine_name);

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 instanceid = 3;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 3;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional fixed32 local_ip = 2;
  bool has_local_ip() const;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 2;
  ::google::protobuf::uint32 local_ip() const;
  void set_local_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAssociateUser_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_local_ip();
  void clear_has_local_ip();
  void set_has_instanceid();
  void clear_has_instanceid();
  void set_has_machine_name();
  void clear_has_machine_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 local_ip_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAssociateUser_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAssociateUser_Response) */ {
 public:
  CSiteLicense_LCSAssociateUser_Response();
  virtual ~CSiteLicense_LCSAssociateUser_Response();

  CSiteLicense_LCSAssociateUser_Response(const CSiteLicense_LCSAssociateUser_Response& from);

  inline CSiteLicense_LCSAssociateUser_Response& operator=(const CSiteLicense_LCSAssociateUser_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_LCSAssociateUser_Response(CSiteLicense_LCSAssociateUser_Response&& from) noexcept
    : CSiteLicense_LCSAssociateUser_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAssociateUser_Response& operator=(CSiteLicense_LCSAssociateUser_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_LCSAssociateUser_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_LCSAssociateUser_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAssociateUser_Response*>(
               &_CSiteLicense_LCSAssociateUser_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CSiteLicense_LCSAssociateUser_Response* other);
  friend void swap(CSiteLicense_LCSAssociateUser_Response& a, CSiteLicense_LCSAssociateUser_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_LCSAssociateUser_Response* New() const final {
    return CreateMaybeMessage<CSiteLicense_LCSAssociateUser_Response>(NULL);
  }

  CSiteLicense_LCSAssociateUser_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAssociateUser_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_LCSAssociateUser_Response& from);
  void MergeFrom(const CSiteLicense_LCSAssociateUser_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAssociateUser_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAssociateUser_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientSeatCheckout_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientSeatCheckout_Request) */ {
 public:
  CSiteLicense_ClientSeatCheckout_Request();
  virtual ~CSiteLicense_ClientSeatCheckout_Request();

  CSiteLicense_ClientSeatCheckout_Request(const CSiteLicense_ClientSeatCheckout_Request& from);

  inline CSiteLicense_ClientSeatCheckout_Request& operator=(const CSiteLicense_ClientSeatCheckout_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_ClientSeatCheckout_Request(CSiteLicense_ClientSeatCheckout_Request&& from) noexcept
    : CSiteLicense_ClientSeatCheckout_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientSeatCheckout_Request& operator=(CSiteLicense_ClientSeatCheckout_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_ClientSeatCheckout_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_ClientSeatCheckout_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientSeatCheckout_Request*>(
               &_CSiteLicense_ClientSeatCheckout_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CSiteLicense_ClientSeatCheckout_Request* other);
  friend void swap(CSiteLicense_ClientSeatCheckout_Request& a, CSiteLicense_ClientSeatCheckout_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_ClientSeatCheckout_Request* New() const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Request>(NULL);
  }

  CSiteLicense_ClientSeatCheckout_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_ClientSeatCheckout_Request& from);
  void MergeFrom(const CSiteLicense_ClientSeatCheckout_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientSeatCheckout_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 instanceid = 2;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 2;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 appid = 3;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientSeatCheckout_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_instanceid();
  void clear_has_instanceid();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientSeatCheckout_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientSeatCheckout_Response) */ {
 public:
  CSiteLicense_ClientSeatCheckout_Response();
  virtual ~CSiteLicense_ClientSeatCheckout_Response();

  CSiteLicense_ClientSeatCheckout_Response(const CSiteLicense_ClientSeatCheckout_Response& from);

  inline CSiteLicense_ClientSeatCheckout_Response& operator=(const CSiteLicense_ClientSeatCheckout_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_ClientSeatCheckout_Response(CSiteLicense_ClientSeatCheckout_Response&& from) noexcept
    : CSiteLicense_ClientSeatCheckout_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientSeatCheckout_Response& operator=(CSiteLicense_ClientSeatCheckout_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_ClientSeatCheckout_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_ClientSeatCheckout_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientSeatCheckout_Response*>(
               &_CSiteLicense_ClientSeatCheckout_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CSiteLicense_ClientSeatCheckout_Response* other);
  friend void swap(CSiteLicense_ClientSeatCheckout_Response& a, CSiteLicense_ClientSeatCheckout_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_ClientSeatCheckout_Response* New() const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Response>(NULL);
  }

  CSiteLicense_ClientSeatCheckout_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_ClientSeatCheckout_Response& from);
  void MergeFrom(const CSiteLicense_ClientSeatCheckout_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientSeatCheckout_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientSeatCheckout_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientGetAvailableSeats_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientGetAvailableSeats_Request) */ {
 public:
  CSiteLicense_ClientGetAvailableSeats_Request();
  virtual ~CSiteLicense_ClientGetAvailableSeats_Request();

  CSiteLicense_ClientGetAvailableSeats_Request(const CSiteLicense_ClientGetAvailableSeats_Request& from);

  inline CSiteLicense_ClientGetAvailableSeats_Request& operator=(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_ClientGetAvailableSeats_Request(CSiteLicense_ClientGetAvailableSeats_Request&& from) noexcept
    : CSiteLicense_ClientGetAvailableSeats_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientGetAvailableSeats_Request& operator=(CSiteLicense_ClientGetAvailableSeats_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_ClientGetAvailableSeats_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_ClientGetAvailableSeats_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientGetAvailableSeats_Request*>(
               &_CSiteLicense_ClientGetAvailableSeats_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CSiteLicense_ClientGetAvailableSeats_Request* other);
  friend void swap(CSiteLicense_ClientGetAvailableSeats_Request& a, CSiteLicense_ClientGetAvailableSeats_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_ClientGetAvailableSeats_Request* New() const final {
    return CreateMaybeMessage<CSiteLicense_ClientGetAvailableSeats_Request>(NULL);
  }

  CSiteLicense_ClientGetAvailableSeats_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_ClientGetAvailableSeats_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from);
  void MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientGetAvailableSeats_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 instanceid = 2;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceidFieldNumber = 2;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 appid = 3;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientGetAvailableSeats_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_instanceid();
  void clear_has_instanceid();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 appid_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientGetAvailableSeats_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientGetAvailableSeats_Response) */ {
 public:
  CSiteLicense_ClientGetAvailableSeats_Response();
  virtual ~CSiteLicense_ClientGetAvailableSeats_Response();

  CSiteLicense_ClientGetAvailableSeats_Response(const CSiteLicense_ClientGetAvailableSeats_Response& from);

  inline CSiteLicense_ClientGetAvailableSeats_Response& operator=(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSiteLicense_ClientGetAvailableSeats_Response(CSiteLicense_ClientGetAvailableSeats_Response&& from) noexcept
    : CSiteLicense_ClientGetAvailableSeats_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientGetAvailableSeats_Response& operator=(CSiteLicense_ClientGetAvailableSeats_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSiteLicense_ClientGetAvailableSeats_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSiteLicense_ClientGetAvailableSeats_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientGetAvailableSeats_Response*>(
               &_CSiteLicense_ClientGetAvailableSeats_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CSiteLicense_ClientGetAvailableSeats_Response* other);
  friend void swap(CSiteLicense_ClientGetAvailableSeats_Response& a, CSiteLicense_ClientGetAvailableSeats_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSiteLicense_ClientGetAvailableSeats_Response* New() const final {
    return CreateMaybeMessage<CSiteLicense_ClientGetAvailableSeats_Response>(NULL);
  }

  CSiteLicense_ClientGetAvailableSeats_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSiteLicense_ClientGetAvailableSeats_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from);
  void MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientGetAvailableSeats_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 available_seats = 1;
  bool has_available_seats() const;
  void clear_available_seats();
  static const int kAvailableSeatsFieldNumber = 1;
  ::google::protobuf::uint32 available_seats() const;
  void set_available_seats(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientGetAvailableSeats_Response)
 private:
  void set_has_available_seats();
  void clear_has_available_seats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 available_seats_;
  friend struct ::protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class SiteManagerClient_Stub;

class SiteManagerClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SiteManagerClient() {};
 public:
  virtual ~SiteManagerClient();

  typedef SiteManagerClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void IncomingClient(::google::protobuf::RpcController* controller,
                       const ::CSiteManagerClient_IncomingClient_Request* request,
                       ::CSiteManagerClient_IncomingClient_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientSeatCheckoutNotification(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteManagerClient);
};

class SiteManagerClient_Stub : public SiteManagerClient {
 public:
  SiteManagerClient_Stub(::google::protobuf::RpcChannel* channel);
  SiteManagerClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SiteManagerClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SiteManagerClient ------------------------------------------

  void IncomingClient(::google::protobuf::RpcController* controller,
                       const ::CSiteManagerClient_IncomingClient_Request* request,
                       ::CSiteManagerClient_IncomingClient_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientSeatCheckoutNotification(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteManagerClient_Stub);
};


// -------------------------------------------------------------------

class SiteLicense_Stub;

class SiteLicense : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SiteLicense() {};
 public:
  virtual ~SiteLicense();

  typedef SiteLicense_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void InitiateAssociation(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_InitiateAssociation_Request* request,
                       ::CSiteLicense_InitiateAssociation_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void LCSAuthenticate(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_LCSAuthenticate_Request* request,
                       ::CSiteLicense_LCSAuthenticate_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void LCSAssociateUser(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_LCSAssociateUser_Request* request,
                       ::CSiteLicense_LCSAssociateUser_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientSeatCheckout(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Request* request,
                       ::CSiteLicense_ClientSeatCheckout_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetAvailableSeats(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_ClientGetAvailableSeats_Request* request,
                       ::CSiteLicense_ClientGetAvailableSeats_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteLicense);
};

class SiteLicense_Stub : public SiteLicense {
 public:
  SiteLicense_Stub(::google::protobuf::RpcChannel* channel);
  SiteLicense_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SiteLicense_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SiteLicense ------------------------------------------

  void InitiateAssociation(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_InitiateAssociation_Request* request,
                       ::CSiteLicense_InitiateAssociation_Response* response,
                       ::google::protobuf::Closure* done);
  void LCSAuthenticate(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_LCSAuthenticate_Request* request,
                       ::CSiteLicense_LCSAuthenticate_Response* response,
                       ::google::protobuf::Closure* done);
  void LCSAssociateUser(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_LCSAssociateUser_Request* request,
                       ::CSiteLicense_LCSAssociateUser_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientSeatCheckout(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Request* request,
                       ::CSiteLicense_ClientSeatCheckout_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetAvailableSeats(::google::protobuf::RpcController* controller,
                       const ::CSiteLicense_ClientGetAvailableSeats_Request* request,
                       ::CSiteLicense_ClientGetAvailableSeats_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteLicense_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSiteManagerClient_IncomingClient_Request

// optional fixed64 site_instanceid = 1;
inline bool CSiteManagerClient_IncomingClient_Request::has_site_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteManagerClient_IncomingClient_Request::set_has_site_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_has_site_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_site_instanceid() {
  site_instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_instanceid();
}
inline ::google::protobuf::uint64 CSiteManagerClient_IncomingClient_Request::site_instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.site_instanceid)
  return site_instanceid_;
}
inline void CSiteManagerClient_IncomingClient_Request::set_site_instanceid(::google::protobuf::uint64 value) {
  set_has_site_instanceid();
  site_instanceid_ = value;
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.site_instanceid)
}

// optional fixed64 client_steamid = 2;
inline bool CSiteManagerClient_IncomingClient_Request::has_client_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSiteManagerClient_IncomingClient_Request::set_has_client_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_has_client_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_client_steamid() {
  client_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steamid();
}
inline ::google::protobuf::uint64 CSiteManagerClient_IncomingClient_Request::client_steamid() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.client_steamid)
  return client_steamid_;
}
inline void CSiteManagerClient_IncomingClient_Request::set_client_steamid(::google::protobuf::uint64 value) {
  set_has_client_steamid();
  client_steamid_ = value;
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.client_steamid)
}

// optional fixed32 client_local_ip = 3;
inline bool CSiteManagerClient_IncomingClient_Request::has_client_local_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSiteManagerClient_IncomingClient_Request::set_has_client_local_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_has_client_local_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  clear_has_client_local_ip();
}
inline ::google::protobuf::uint32 CSiteManagerClient_IncomingClient_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.client_local_ip)
  return client_local_ip_;
}
inline void CSiteManagerClient_IncomingClient_Request::set_client_local_ip(::google::protobuf::uint32 value) {
  set_has_client_local_ip();
  client_local_ip_ = value;
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.client_local_ip)
}

// optional bytes connection_key = 4;
inline bool CSiteManagerClient_IncomingClient_Request::has_connection_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteManagerClient_IncomingClient_Request::set_has_connection_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_has_connection_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteManagerClient_IncomingClient_Request::clear_connection_key() {
  connection_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_key();
}
inline const ::std::string& CSiteManagerClient_IncomingClient_Request::connection_key() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.connection_key)
  return connection_key_.GetNoArena();
}
inline void CSiteManagerClient_IncomingClient_Request::set_connection_key(const ::std::string& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.connection_key)
}
#if LANG_CXX11
inline void CSiteManagerClient_IncomingClient_Request::set_connection_key(::std::string&& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSiteManagerClient_IncomingClient_Request.connection_key)
}
#endif
inline void CSiteManagerClient_IncomingClient_Request::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSiteManagerClient_IncomingClient_Request.connection_key)
}
inline void CSiteManagerClient_IncomingClient_Request::set_connection_key(const void* value, size_t size) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSiteManagerClient_IncomingClient_Request.connection_key)
}
inline ::std::string* CSiteManagerClient_IncomingClient_Request::mutable_connection_key() {
  set_has_connection_key();
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_IncomingClient_Request.connection_key)
  return connection_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSiteManagerClient_IncomingClient_Request::release_connection_key() {
  // @@protoc_insertion_point(field_release:CSiteManagerClient_IncomingClient_Request.connection_key)
  if (!has_connection_key()) {
    return NULL;
  }
  clear_has_connection_key();
  return connection_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSiteManagerClient_IncomingClient_Request::set_allocated_connection_key(::std::string* connection_key) {
  if (connection_key != NULL) {
    set_has_connection_key();
  } else {
    clear_has_connection_key();
  }
  connection_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_key);
  // @@protoc_insertion_point(field_set_allocated:CSiteManagerClient_IncomingClient_Request.connection_key)
}

// -------------------------------------------------------------------

// CSiteManagerClient_IncomingClient_Response

// -------------------------------------------------------------------

// CSiteLicense_ClientSeatCheckout_Notification

// optional uint32 appid = 1;
inline bool CSiteLicense_ClientSeatCheckout_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CSiteLicense_ClientSeatCheckout_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Notification.appid)
  return appid_;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Notification.appid)
}

// optional uint32 eresult = 2;
inline bool CSiteLicense_ClientSeatCheckout_Notification::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CSiteLicense_ClientSeatCheckout_Notification::eresult() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Notification.eresult)
  return eresult_;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Notification.eresult)
}

// -------------------------------------------------------------------

// CSiteLicense_InitiateAssociation_Request

// optional fixed64 site_steamid = 1;
inline bool CSiteLicense_InitiateAssociation_Request::has_site_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_InitiateAssociation_Request::set_has_site_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_InitiateAssociation_Request::clear_has_site_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_InitiateAssociation_Request::clear_site_steamid() {
  site_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_steamid();
}
inline ::google::protobuf::uint64 CSiteLicense_InitiateAssociation_Request::site_steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Request.site_steamid)
  return site_steamid_;
}
inline void CSiteLicense_InitiateAssociation_Request::set_site_steamid(::google::protobuf::uint64 value) {
  set_has_site_steamid();
  site_steamid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Request.site_steamid)
}

// optional fixed64 site_instanceid = 2;
inline bool CSiteLicense_InitiateAssociation_Request::has_site_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteLicense_InitiateAssociation_Request::set_has_site_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteLicense_InitiateAssociation_Request::clear_has_site_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteLicense_InitiateAssociation_Request::clear_site_instanceid() {
  site_instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_instanceid();
}
inline ::google::protobuf::uint64 CSiteLicense_InitiateAssociation_Request::site_instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Request.site_instanceid)
  return site_instanceid_;
}
inline void CSiteLicense_InitiateAssociation_Request::set_site_instanceid(::google::protobuf::uint64 value) {
  set_has_site_instanceid();
  site_instanceid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Request.site_instanceid)
}

// optional fixed32 client_local_ip = 3;
inline bool CSiteLicense_InitiateAssociation_Request::has_client_local_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSiteLicense_InitiateAssociation_Request::set_has_client_local_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSiteLicense_InitiateAssociation_Request::clear_has_client_local_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSiteLicense_InitiateAssociation_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  clear_has_client_local_ip();
}
inline ::google::protobuf::uint32 CSiteLicense_InitiateAssociation_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Request.client_local_ip)
  return client_local_ip_;
}
inline void CSiteLicense_InitiateAssociation_Request::set_client_local_ip(::google::protobuf::uint32 value) {
  set_has_client_local_ip();
  client_local_ip_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Request.client_local_ip)
}

// -------------------------------------------------------------------

// CSiteLicense_InitiateAssociation_Response

// optional bytes connection_key = 1;
inline bool CSiteLicense_InitiateAssociation_Response::has_connection_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_InitiateAssociation_Response::set_has_connection_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_InitiateAssociation_Response::clear_has_connection_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_InitiateAssociation_Response::clear_connection_key() {
  connection_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_key();
}
inline const ::std::string& CSiteLicense_InitiateAssociation_Response::connection_key() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Response.connection_key)
  return connection_key_.GetNoArena();
}
inline void CSiteLicense_InitiateAssociation_Response::set_connection_key(const ::std::string& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Response.connection_key)
}
#if LANG_CXX11
inline void CSiteLicense_InitiateAssociation_Response::set_connection_key(::std::string&& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSiteLicense_InitiateAssociation_Response.connection_key)
}
#endif
inline void CSiteLicense_InitiateAssociation_Response::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSiteLicense_InitiateAssociation_Response.connection_key)
}
inline void CSiteLicense_InitiateAssociation_Response::set_connection_key(const void* value, size_t size) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSiteLicense_InitiateAssociation_Response.connection_key)
}
inline ::std::string* CSiteLicense_InitiateAssociation_Response::mutable_connection_key() {
  set_has_connection_key();
  // @@protoc_insertion_point(field_mutable:CSiteLicense_InitiateAssociation_Response.connection_key)
  return connection_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSiteLicense_InitiateAssociation_Response::release_connection_key() {
  // @@protoc_insertion_point(field_release:CSiteLicense_InitiateAssociation_Response.connection_key)
  if (!has_connection_key()) {
    return NULL;
  }
  clear_has_connection_key();
  return connection_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSiteLicense_InitiateAssociation_Response::set_allocated_connection_key(::std::string* connection_key) {
  if (connection_key != NULL) {
    set_has_connection_key();
  } else {
    clear_has_connection_key();
  }
  connection_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_key);
  // @@protoc_insertion_point(field_set_allocated:CSiteLicense_InitiateAssociation_Response.connection_key)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAuthenticate_Request

// optional fixed64 instanceid = 1;
inline bool CSiteLicense_LCSAuthenticate_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_LCSAuthenticate_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_LCSAuthenticate_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_LCSAuthenticate_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 CSiteLicense_LCSAuthenticate_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Request.instanceid)
  return instanceid_;
}
inline void CSiteLicense_LCSAuthenticate_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Request.instanceid)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAuthenticate_Response

// optional uint64 site_id = 1;
inline bool CSiteLicense_LCSAuthenticate_Response::has_site_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_has_site_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_site_id() {
  site_id_ = GOOGLE_ULONGLONG(0);
  clear_has_site_id();
}
inline ::google::protobuf::uint64 CSiteLicense_LCSAuthenticate_Response::site_id() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.site_id)
  return site_id_;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_site_id(::google::protobuf::uint64 value) {
  set_has_site_id();
  site_id_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.site_id)
}

// optional string site_name = 2;
inline bool CSiteLicense_LCSAuthenticate_Response::has_site_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_has_site_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
inline const ::std::string& CSiteLicense_LCSAuthenticate_Response::site_name() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.site_name)
  return site_name_.GetNoArena();
}
inline void CSiteLicense_LCSAuthenticate_Response::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.site_name)
}
#if LANG_CXX11
inline void CSiteLicense_LCSAuthenticate_Response::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSiteLicense_LCSAuthenticate_Response.site_name)
}
#endif
inline void CSiteLicense_LCSAuthenticate_Response::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSiteLicense_LCSAuthenticate_Response.site_name)
}
inline void CSiteLicense_LCSAuthenticate_Response::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSiteLicense_LCSAuthenticate_Response.site_name)
}
inline ::std::string* CSiteLicense_LCSAuthenticate_Response::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:CSiteLicense_LCSAuthenticate_Response.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSiteLicense_LCSAuthenticate_Response::release_site_name() {
  // @@protoc_insertion_point(field_release:CSiteLicense_LCSAuthenticate_Response.site_name)
  if (!has_site_name()) {
    return NULL;
  }
  clear_has_site_name();
  return site_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSiteLicense_LCSAuthenticate_Response::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:CSiteLicense_LCSAuthenticate_Response.site_name)
}

// optional bool new_session = 3;
inline bool CSiteLicense_LCSAuthenticate_Response::has_new_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_has_new_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_has_new_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_new_session() {
  new_session_ = false;
  clear_has_new_session();
}
inline bool CSiteLicense_LCSAuthenticate_Response::new_session() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.new_session)
  return new_session_;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_new_session(bool value) {
  set_has_new_session();
  new_session_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.new_session)
}

// optional bool no_site_licenses = 4;
inline bool CSiteLicense_LCSAuthenticate_Response::has_no_site_licenses() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_has_no_site_licenses() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_has_no_site_licenses() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_no_site_licenses() {
  no_site_licenses_ = false;
  clear_has_no_site_licenses();
}
inline bool CSiteLicense_LCSAuthenticate_Response::no_site_licenses() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.no_site_licenses)
  return no_site_licenses_;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_no_site_licenses(bool value) {
  set_has_no_site_licenses();
  no_site_licenses_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.no_site_licenses)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAssociateUser_Request

// optional fixed64 steamid = 1;
inline bool CSiteLicense_LCSAssociateUser_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CSiteLicense_LCSAssociateUser_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.steamid)
  return steamid_;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.steamid)
}

// optional fixed32 local_ip = 2;
inline bool CSiteLicense_LCSAssociateUser_Request::has_local_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_has_local_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_local_ip() {
  local_ip_ = 0u;
  clear_has_local_ip();
}
inline ::google::protobuf::uint32 CSiteLicense_LCSAssociateUser_Request::local_ip() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.local_ip)
  return local_ip_;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_local_ip(::google::protobuf::uint32 value) {
  set_has_local_ip();
  local_ip_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.local_ip)
}

// optional fixed64 instanceid = 3;
inline bool CSiteLicense_LCSAssociateUser_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 CSiteLicense_LCSAssociateUser_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.instanceid)
  return instanceid_;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.instanceid)
}

// optional string machine_name = 4;
inline bool CSiteLicense_LCSAssociateUser_Request::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
inline const ::std::string& CSiteLicense_LCSAssociateUser_Request::machine_name() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.machine_name)
  return machine_name_.GetNoArena();
}
inline void CSiteLicense_LCSAssociateUser_Request::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.machine_name)
}
#if LANG_CXX11
inline void CSiteLicense_LCSAssociateUser_Request::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSiteLicense_LCSAssociateUser_Request.machine_name)
}
#endif
inline void CSiteLicense_LCSAssociateUser_Request::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSiteLicense_LCSAssociateUser_Request.machine_name)
}
inline void CSiteLicense_LCSAssociateUser_Request::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSiteLicense_LCSAssociateUser_Request.machine_name)
}
inline ::std::string* CSiteLicense_LCSAssociateUser_Request::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:CSiteLicense_LCSAssociateUser_Request.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSiteLicense_LCSAssociateUser_Request::release_machine_name() {
  // @@protoc_insertion_point(field_release:CSiteLicense_LCSAssociateUser_Request.machine_name)
  if (!has_machine_name()) {
    return NULL;
  }
  clear_has_machine_name();
  return machine_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSiteLicense_LCSAssociateUser_Request::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:CSiteLicense_LCSAssociateUser_Request.machine_name)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAssociateUser_Response

// -------------------------------------------------------------------

// CSiteLicense_ClientSeatCheckout_Request

// optional fixed64 steamid = 1;
inline bool CSiteLicense_ClientSeatCheckout_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CSiteLicense_ClientSeatCheckout_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Request.steamid)
  return steamid_;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Request.steamid)
}

// optional fixed64 instanceid = 2;
inline bool CSiteLicense_ClientSeatCheckout_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 CSiteLicense_ClientSeatCheckout_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Request.instanceid)
  return instanceid_;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Request.instanceid)
}

// optional uint32 appid = 3;
inline bool CSiteLicense_ClientSeatCheckout_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CSiteLicense_ClientSeatCheckout_Request::appid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Request.appid)
  return appid_;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Request.appid)
}

// -------------------------------------------------------------------

// CSiteLicense_ClientSeatCheckout_Response

// -------------------------------------------------------------------

// CSiteLicense_ClientGetAvailableSeats_Request

// optional fixed64 steamid = 1;
inline bool CSiteLicense_ClientGetAvailableSeats_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CSiteLicense_ClientGetAvailableSeats_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Request.steamid)
  return steamid_;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Request.steamid)
}

// optional fixed64 instanceid = 2;
inline bool CSiteLicense_ClientGetAvailableSeats_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 CSiteLicense_ClientGetAvailableSeats_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
  return instanceid_;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
}

// optional uint32 appid = 3;
inline bool CSiteLicense_ClientGetAvailableSeats_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CSiteLicense_ClientGetAvailableSeats_Request::appid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Request.appid)
  return appid_;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Request.appid)
}

// -------------------------------------------------------------------

// CSiteLicense_ClientGetAvailableSeats_Response

// optional uint32 available_seats = 1;
inline bool CSiteLicense_ClientGetAvailableSeats_Response::has_available_seats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::set_has_available_seats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::clear_has_available_seats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::clear_available_seats() {
  available_seats_ = 0u;
  clear_has_available_seats();
}
inline ::google::protobuf::uint32 CSiteLicense_ClientGetAvailableSeats_Response::available_seats() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
  return available_seats_;
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::set_available_seats(::google::protobuf::uint32 value) {
  set_has_available_seats();
  available_seats_ = value;
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steammessages_5fsite_5flicense_2esteamclient_2eproto
