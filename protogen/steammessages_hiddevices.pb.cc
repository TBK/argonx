// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_hiddevices.proto

#include "steammessages_hiddevices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steammessages_5fhiddevices_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDDeviceInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDDeviceInputReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageFromRemote_CloseAllDevices;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageFromRemote_CloseDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageFromRemote_RequestResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceClose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceDisconnect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetFeatureReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetProductString;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetSerialNumberString;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetVendorString;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceRead;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceRequestFullReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceSendFeatureReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceStartInputReports;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceWrite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageFromRemote_DeviceInputReports;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageFromRemote_UpdateDeviceList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steammessages_5fhiddevices_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageToRemote_DeviceOpen;
}  // namespace protobuf_steammessages_5fhiddevices_2eproto
class CHIDDeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDDeviceInfo>
      _instance;
} _CHIDDeviceInfo_default_instance_;
class CHIDDeviceInputReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDDeviceInputReport>
      _instance;
} _CHIDDeviceInputReport_default_instance_;
class CHIDMessageToRemote_DeviceOpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceOpen>
      _instance;
} _CHIDMessageToRemote_DeviceOpen_default_instance_;
class CHIDMessageToRemote_DeviceCloseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceClose>
      _instance;
} _CHIDMessageToRemote_DeviceClose_default_instance_;
class CHIDMessageToRemote_DeviceWriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceWrite>
      _instance;
} _CHIDMessageToRemote_DeviceWrite_default_instance_;
class CHIDMessageToRemote_DeviceReadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceRead>
      _instance;
} _CHIDMessageToRemote_DeviceRead_default_instance_;
class CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceSendFeatureReport>
      _instance;
} _CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_;
class CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetFeatureReport>
      _instance;
} _CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_;
class CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetVendorString>
      _instance;
} _CHIDMessageToRemote_DeviceGetVendorString_default_instance_;
class CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetProductString>
      _instance;
} _CHIDMessageToRemote_DeviceGetProductString_default_instance_;
class CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetSerialNumberString>
      _instance;
} _CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_;
class CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceStartInputReports>
      _instance;
} _CHIDMessageToRemote_DeviceStartInputReports_default_instance_;
class CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceRequestFullReport>
      _instance;
} _CHIDMessageToRemote_DeviceRequestFullReport_default_instance_;
class CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceDisconnect>
      _instance;
} _CHIDMessageToRemote_DeviceDisconnect_default_instance_;
class CHIDMessageToRemoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote>
      _instance;
  const ::CHIDMessageToRemote_DeviceOpen* device_open_;
  const ::CHIDMessageToRemote_DeviceClose* device_close_;
  const ::CHIDMessageToRemote_DeviceWrite* device_write_;
  const ::CHIDMessageToRemote_DeviceRead* device_read_;
  const ::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report_;
  const ::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report_;
  const ::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string_;
  const ::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string_;
  const ::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string_;
  const ::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports_;
  const ::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report_;
  const ::CHIDMessageToRemote_DeviceDisconnect* device_disconnect_;
} _CHIDMessageToRemote_default_instance_;
class CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_UpdateDeviceList>
      _instance;
} _CHIDMessageFromRemote_UpdateDeviceList_default_instance_;
class CHIDMessageFromRemote_RequestResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_RequestResponse>
      _instance;
} _CHIDMessageFromRemote_RequestResponse_default_instance_;
class CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport>
      _instance;
} _CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_;
class CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_DeviceInputReports>
      _instance;
} _CHIDMessageFromRemote_DeviceInputReports_default_instance_;
class CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_CloseDevice>
      _instance;
} _CHIDMessageFromRemote_CloseDevice_default_instance_;
class CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_CloseAllDevices>
      _instance;
} _CHIDMessageFromRemote_CloseAllDevices_default_instance_;
class CHIDMessageFromRemoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote>
      _instance;
  const ::CHIDMessageFromRemote_UpdateDeviceList* update_device_list_;
  const ::CHIDMessageFromRemote_RequestResponse* response_;
  const ::CHIDMessageFromRemote_DeviceInputReports* reports_;
  const ::CHIDMessageFromRemote_CloseDevice* close_device_;
  const ::CHIDMessageFromRemote_CloseAllDevices* close_all_devices_;
} _CHIDMessageFromRemote_default_instance_;
namespace protobuf_steammessages_5fhiddevices_2eproto {
static void InitDefaultsCHIDDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDDeviceInfo_default_instance_;
    new (ptr) ::CHIDDeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDDeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDDeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDDeviceInfo}, {}};

static void InitDefaultsCHIDDeviceInputReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDDeviceInputReport_default_instance_;
    new (ptr) ::CHIDDeviceInputReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDDeviceInputReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDDeviceInputReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDDeviceInputReport}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceOpen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceOpen_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceOpen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceOpen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageToRemote_DeviceOpen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCHIDMessageToRemote_DeviceOpen}, {
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInfo.base,}};

static void InitDefaultsCHIDMessageToRemote_DeviceClose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceClose_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceClose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceClose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceClose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceClose}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceWrite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceWrite_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceWrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceWrite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceWrite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceWrite}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceRead() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceRead_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceRead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceRead::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceRead =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceRead}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceSendFeatureReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceSendFeatureReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceSendFeatureReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceSendFeatureReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceSendFeatureReport}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceGetFeatureReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceGetFeatureReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceGetFeatureReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetFeatureReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceGetFeatureReport}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceGetVendorString() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceGetVendorString_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceGetVendorString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceGetVendorString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetVendorString =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceGetVendorString}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceGetProductString() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceGetProductString_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceGetProductString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceGetProductString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetProductString =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceGetProductString}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceGetSerialNumberString() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceGetSerialNumberString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceGetSerialNumberString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceGetSerialNumberString =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceGetSerialNumberString}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceStartInputReports() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceStartInputReports_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceStartInputReports();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceStartInputReports::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceStartInputReports =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceStartInputReports}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceRequestFullReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceRequestFullReport_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceRequestFullReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceRequestFullReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceRequestFullReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceRequestFullReport}, {}};

static void InitDefaultsCHIDMessageToRemote_DeviceDisconnect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_DeviceDisconnect_default_instance_;
    new (ptr) ::CHIDMessageToRemote_DeviceDisconnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote_DeviceDisconnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageToRemote_DeviceDisconnect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageToRemote_DeviceDisconnect}, {}};

static void InitDefaultsCHIDMessageToRemote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageToRemote_default_instance_;
    new (ptr) ::CHIDMessageToRemote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageToRemote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_CHIDMessageToRemote =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsCHIDMessageToRemote}, {
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceOpen.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceClose.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceWrite.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceRead.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceSendFeatureReport.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetFeatureReport.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetVendorString.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetProductString.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetSerialNumberString.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceStartInputReports.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceRequestFullReport.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceDisconnect.base,}};

static void InitDefaultsCHIDMessageFromRemote_UpdateDeviceList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_UpdateDeviceList_default_instance_;
    new (ptr) ::CHIDMessageFromRemote_UpdateDeviceList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote_UpdateDeviceList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageFromRemote_UpdateDeviceList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCHIDMessageFromRemote_UpdateDeviceList}, {
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInfo.base,}};

static void InitDefaultsCHIDMessageFromRemote_RequestResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_RequestResponse_default_instance_;
    new (ptr) ::CHIDMessageFromRemote_RequestResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote_RequestResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageFromRemote_RequestResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageFromRemote_RequestResponse}, {}};

static void InitDefaultsCHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_;
    new (ptr) ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCHIDMessageFromRemote_DeviceInputReports_DeviceInputReport}, {
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInputReport.base,}};

static void InitDefaultsCHIDMessageFromRemote_DeviceInputReports() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_DeviceInputReports_default_instance_;
    new (ptr) ::CHIDMessageFromRemote_DeviceInputReports();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote_DeviceInputReports::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CHIDMessageFromRemote_DeviceInputReports =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCHIDMessageFromRemote_DeviceInputReports}, {
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport.base,}};

static void InitDefaultsCHIDMessageFromRemote_CloseDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_CloseDevice_default_instance_;
    new (ptr) ::CHIDMessageFromRemote_CloseDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote_CloseDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageFromRemote_CloseDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageFromRemote_CloseDevice}, {}};

static void InitDefaultsCHIDMessageFromRemote_CloseAllDevices() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_CloseAllDevices_default_instance_;
    new (ptr) ::CHIDMessageFromRemote_CloseAllDevices();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote_CloseAllDevices::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHIDMessageFromRemote_CloseAllDevices =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHIDMessageFromRemote_CloseAllDevices}, {}};

static void InitDefaultsCHIDMessageFromRemote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHIDMessageFromRemote_default_instance_;
    new (ptr) ::CHIDMessageFromRemote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHIDMessageFromRemote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_CHIDMessageFromRemote =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsCHIDMessageFromRemote}, {
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_UpdateDeviceList.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_RequestResponse.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_DeviceInputReports.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_CloseDevice.base,
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_CloseAllDevices.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDDeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDDeviceInputReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceOpen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceClose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceWrite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceRead.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceSendFeatureReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceGetFeatureReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceGetVendorString.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceGetProductString.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceGetSerialNumberString.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceStartInputReports.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceRequestFullReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote_DeviceDisconnect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageToRemote.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote_UpdateDeviceList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote_RequestResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote_DeviceInputReports.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote_CloseDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote_CloseAllDevices.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHIDMessageFromRemote.base);
}

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, vendor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, release_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, manufacturer_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, product_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, usage_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, interface_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, ostype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, is_generic_gamepad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, is_generic_joystick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, caps_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInfo, econtrollertype_),
  4,
  0,
  5,
  6,
  1,
  7,
  2,
  3,
  8,
  9,
  15,
  16,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInputReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInputReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInputReport, full_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInputReport, delta_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInputReport, delta_report_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDDeviceInputReport, delta_report_crc_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceOpen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceOpen, info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceClose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceClose, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, timeout_ms_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, report_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, length_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetVendorString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetVendorString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetVendorString, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetProductString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetProductString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetProductString, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetSerialNumberString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetSerialNumberString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetSerialNumberString, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, length_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRequestFullReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRequestFullReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRequestFullReport, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, disconnectmethod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote, request_id_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_open_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_close_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_write_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_read_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_send_feature_report_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_get_feature_report_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_get_vendor_string_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_get_product_string_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_get_serial_number_string_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_start_input_reports_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_request_full_report_),
  offsetof(::CHIDMessageToRemoteDefaultTypeInternal, device_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageToRemote, command_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_UpdateDeviceList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_UpdateDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_UpdateDeviceList, devices_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, reports_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports, device_reports_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_CloseDevice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_CloseDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_CloseDevice, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_CloseAllDevices, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote_CloseAllDevices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::CHIDMessageFromRemoteDefaultTypeInternal, update_device_list_),
  offsetof(::CHIDMessageFromRemoteDefaultTypeInternal, response_),
  offsetof(::CHIDMessageFromRemoteDefaultTypeInternal, reports_),
  offsetof(::CHIDMessageFromRemoteDefaultTypeInternal, close_device_),
  offsetof(::CHIDMessageFromRemoteDefaultTypeInternal, close_all_devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CHIDMessageFromRemote, command_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::CHIDDeviceInfo)},
  { 39, 48, sizeof(::CHIDDeviceInputReport)},
  { 52, 58, sizeof(::CHIDMessageToRemote_DeviceOpen)},
  { 59, 65, sizeof(::CHIDMessageToRemote_DeviceClose)},
  { 66, 73, sizeof(::CHIDMessageToRemote_DeviceWrite)},
  { 75, 83, sizeof(::CHIDMessageToRemote_DeviceRead)},
  { 86, 93, sizeof(::CHIDMessageToRemote_DeviceSendFeatureReport)},
  { 95, 103, sizeof(::CHIDMessageToRemote_DeviceGetFeatureReport)},
  { 106, 112, sizeof(::CHIDMessageToRemote_DeviceGetVendorString)},
  { 113, 119, sizeof(::CHIDMessageToRemote_DeviceGetProductString)},
  { 120, 126, sizeof(::CHIDMessageToRemote_DeviceGetSerialNumberString)},
  { 127, 134, sizeof(::CHIDMessageToRemote_DeviceStartInputReports)},
  { 136, 142, sizeof(::CHIDMessageToRemote_DeviceRequestFullReport)},
  { 143, 151, sizeof(::CHIDMessageToRemote_DeviceDisconnect)},
  { 154, 173, sizeof(::CHIDMessageToRemote)},
  { 186, 192, sizeof(::CHIDMessageFromRemote_UpdateDeviceList)},
  { 193, 201, sizeof(::CHIDMessageFromRemote_RequestResponse)},
  { 204, 211, sizeof(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport)},
  { 213, 219, sizeof(::CHIDMessageFromRemote_DeviceInputReports)},
  { 220, 226, sizeof(::CHIDMessageFromRemote_CloseDevice)},
  { 227, 232, sizeof(::CHIDMessageFromRemote_CloseAllDevices)},
  { 232, 243, sizeof(::CHIDMessageFromRemote)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDDeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDDeviceInputReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceClose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceWrite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceRead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceGetVendorString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceGetProductString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceStartInputReports_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceRequestFullReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_DeviceDisconnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageToRemote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_UpdateDeviceList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_RequestResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_DeviceInputReports_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_CloseDevice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_CloseAllDevices_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CHIDMessageFromRemote_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steammessages_hiddevices.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036steammessages_hiddevices.proto\"\271\003\n\016CHI"
      "DDeviceInfo\022=\n\010location\030\001 \001(\0162\023.EHIDDevi"
      "ceLocation:\026k_EDeviceLocationLocal\022\014\n\004pa"
      "th\030\002 \001(\t\022\021\n\tvendor_id\030\003 \001(\r\022\022\n\nproduct_i"
      "d\030\004 \001(\r\022\025\n\rserial_number\030\005 \001(\t\022\026\n\016releas"
      "e_number\030\006 \001(\r\022\033\n\023manufacturer_string\030\007 "
      "\001(\t\022\026\n\016product_string\030\010 \001(\t\022\022\n\nusage_pag"
      "e\030\t \001(\r\022\r\n\005usage\030\n \001(\r\022\034\n\020interface_numb"
      "er\030\013 \001(\005:\002-1\022\022\n\006ostype\030\014 \001(\005:\002-1\022\032\n\022is_g"
      "eneric_gamepad\030\r \001(\010\022\033\n\023is_generic_joyst"
      "ick\030\016 \001(\010\022\021\n\tcaps_bits\030\017 \001(\r\022\022\n\nsession_"
      "id\030\020 \001(\r\022\032\n\017eControllerType\030\021 \001(\r:\0010\"w\n\025"
      "CHIDDeviceInputReport\022\023\n\013full_report\030\001 \001"
      "(\014\022\024\n\014delta_report\030\002 \001(\014\022\031\n\021delta_report"
      "_size\030\003 \001(\r\022\030\n\020delta_report_crc\030\004 \001(\r\"\342\014"
      "\n\023CHIDMessageToRemote\022\022\n\nrequest_id\030\001 \001("
      "\r\0226\n\013device_open\030\002 \001(\0132\037.CHIDMessageToRe"
      "mote.DeviceOpenH\000\0228\n\014device_close\030\003 \001(\0132"
      " .CHIDMessageToRemote.DeviceCloseH\000\0228\n\014d"
      "evice_write\030\004 \001(\0132 .CHIDMessageToRemote."
      "DeviceWriteH\000\0226\n\013device_read\030\005 \001(\0132\037.CHI"
      "DMessageToRemote.DeviceReadH\000\022R\n\032device_"
      "send_feature_report\030\006 \001(\0132,.CHIDMessageT"
      "oRemote.DeviceSendFeatureReportH\000\022P\n\031dev"
      "ice_get_feature_report\030\007 \001(\0132+.CHIDMessa"
      "geToRemote.DeviceGetFeatureReportH\000\022N\n\030d"
      "evice_get_vendor_string\030\010 \001(\0132*.CHIDMess"
      "ageToRemote.DeviceGetVendorStringH\000\022P\n\031d"
      "evice_get_product_string\030\t \001(\0132+.CHIDMes"
      "sageToRemote.DeviceGetProductStringH\000\022[\n"
      "\037device_get_serial_number_string\030\n \001(\01320"
      ".CHIDMessageToRemote.DeviceGetSerialNumb"
      "erStringH\000\022R\n\032device_start_input_reports"
      "\030\013 \001(\0132,.CHIDMessageToRemote.DeviceStart"
      "InputReportsH\000\022R\n\032device_request_full_re"
      "port\030\014 \001(\0132,.CHIDMessageToRemote.DeviceR"
      "equestFullReportH\000\022B\n\021device_disconnect\030"
      "\r \001(\0132%.CHIDMessageToRemote.DeviceDiscon"
      "nectH\000\032+\n\nDeviceOpen\022\035\n\004info\030\001 \001(\0132\017.CHI"
      "DDeviceInfo\032\035\n\013DeviceClose\022\016\n\006device\030\001 \001"
      "(\r\032+\n\013DeviceWrite\022\016\n\006device\030\001 \001(\r\022\014\n\004dat"
      "a\030\002 \001(\014\032@\n\nDeviceRead\022\016\n\006device\030\001 \001(\r\022\016\n"
      "\006length\030\002 \001(\r\022\022\n\ntimeout_ms\030\003 \001(\005\0327\n\027Dev"
      "iceSendFeatureReport\022\016\n\006device\030\001 \001(\r\022\014\n\004"
      "data\030\002 \001(\014\032O\n\026DeviceGetFeatureReport\022\016\n\006"
      "device\030\001 \001(\r\022\025\n\rreport_number\030\002 \001(\014\022\016\n\006l"
      "ength\030\003 \001(\r\032\'\n\025DeviceGetVendorString\022\016\n\006"
      "device\030\001 \001(\r\032(\n\026DeviceGetProductString\022\016"
      "\n\006device\030\001 \001(\r\032-\n\033DeviceGetSerialNumberS"
      "tring\022\016\n\006device\030\001 \001(\r\0329\n\027DeviceStartInpu"
      "tReports\022\016\n\006device\030\001 \001(\r\022\016\n\006length\030\002 \001(\r"
      "\032)\n\027DeviceRequestFullReport\022\016\n\006device\030\001 "
      "\001(\r\032\211\001\n\020DeviceDisconnect\022\016\n\006device\030\001 \001(\r"
      "\022W\n\020disconnectMethod\030\002 \001(\0162\033.EHIDDeviceD"
      "isconnectMethod: k_EDeviceDisconnectMeth"
      "odUnknown\022\014\n\004data\030\003 \001(\014B\t\n\007command\"\313\005\n\025C"
      "HIDMessageFromRemote\022E\n\022update_device_li"
      "st\030\001 \001(\0132\'.CHIDMessageFromRemote.UpdateD"
      "eviceListH\000\022:\n\010response\030\002 \001(\0132&.CHIDMess"
      "ageFromRemote.RequestResponseH\000\022<\n\007repor"
      "ts\030\003 \001(\0132).CHIDMessageFromRemote.DeviceI"
      "nputReportsH\000\022:\n\014close_device\030\004 \001(\0132\".CH"
      "IDMessageFromRemote.CloseDeviceH\000\022C\n\021clo"
      "se_all_devices\030\005 \001(\0132&.CHIDMessageFromRe"
      "mote.CloseAllDevicesH\000\0324\n\020UpdateDeviceLi"
      "st\022 \n\007devices\030\001 \003(\0132\017.CHIDDeviceInfo\032C\n\017"
      "RequestResponse\022\022\n\nrequest_id\030\001 \001(\r\022\016\n\006r"
      "esult\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\032\267\001\n\022DeviceInpu"
      "tReports\022S\n\016device_reports\030\001 \003(\0132;.CHIDM"
      "essageFromRemote.DeviceInputReports.Devi"
      "ceInputReport\032L\n\021DeviceInputReport\022\016\n\006de"
      "vice\030\001 \001(\r\022\'\n\007reports\030\002 \003(\0132\026.CHIDDevice"
      "InputReport\032\035\n\013CloseDevice\022\016\n\006device\030\001 \001"
      "(\r\032\021\n\017CloseAllDevicesB\t\n\007command*g\n\022EHID"
      "DeviceLocation\022\032\n\026k_EDeviceLocationLocal"
      "\020\000\022\033\n\027k_EDeviceLocationRemote\020\002\022\030\n\024k_EDe"
      "viceLocationAny\020\003*\301\001\n\032EHIDDeviceDisconne"
      "ctMethod\022$\n k_EDeviceDisconnectMethodUnk"
      "nown\020\000\022&\n\"k_EDeviceDisconnectMethodBluet"
      "ooth\020\001\022*\n&k_EDeviceDisconnectMethodFeatu"
      "reReport\020\002\022)\n%k_EDeviceDisconnectMethodO"
      "utputReport\020\003B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_hiddevices.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steammessages_5fhiddevices_2eproto
const ::google::protobuf::EnumDescriptor* EHIDDeviceLocation_descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_enum_descriptors[0];
}
bool EHIDDeviceLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHIDDeviceDisconnectMethod_descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_enum_descriptors[1];
}
bool EHIDDeviceDisconnectMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CHIDDeviceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDDeviceInfo::kLocationFieldNumber;
const int CHIDDeviceInfo::kPathFieldNumber;
const int CHIDDeviceInfo::kVendorIdFieldNumber;
const int CHIDDeviceInfo::kProductIdFieldNumber;
const int CHIDDeviceInfo::kSerialNumberFieldNumber;
const int CHIDDeviceInfo::kReleaseNumberFieldNumber;
const int CHIDDeviceInfo::kManufacturerStringFieldNumber;
const int CHIDDeviceInfo::kProductStringFieldNumber;
const int CHIDDeviceInfo::kUsagePageFieldNumber;
const int CHIDDeviceInfo::kUsageFieldNumber;
const int CHIDDeviceInfo::kInterfaceNumberFieldNumber;
const int CHIDDeviceInfo::kOstypeFieldNumber;
const int CHIDDeviceInfo::kIsGenericGamepadFieldNumber;
const int CHIDDeviceInfo::kIsGenericJoystickFieldNumber;
const int CHIDDeviceInfo::kCapsBitsFieldNumber;
const int CHIDDeviceInfo::kSessionIdFieldNumber;
const int CHIDDeviceInfo::kEControllerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDDeviceInfo::CHIDDeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDDeviceInfo)
}
CHIDDeviceInfo::CHIDDeviceInfo(const CHIDDeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  manufacturer_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer_string()) {
    manufacturer_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_string_);
  }
  product_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_string()) {
    product_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_string_);
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&ostype_) -
    reinterpret_cast<char*>(&location_)) + sizeof(ostype_));
  // @@protoc_insertion_point(copy_constructor:CHIDDeviceInfo)
}

void CHIDDeviceInfo::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&econtrollertype_) -
      reinterpret_cast<char*>(&location_)) + sizeof(econtrollertype_));
  interface_number_ = -1;
  ostype_ = -1;
}

CHIDDeviceInfo::~CHIDDeviceInfo() {
  // @@protoc_insertion_point(destructor:CHIDDeviceInfo)
  SharedDtor();
}

void CHIDDeviceInfo::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDDeviceInfo::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDDeviceInfo& CHIDDeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInfo.base);
  return *internal_default_instance();
}


void CHIDDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      manufacturer_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      product_string_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&release_number_) -
        reinterpret_cast<char*>(&location_)) + sizeof(release_number_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&usage_page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&econtrollertype_) -
        reinterpret_cast<char*>(&usage_page_)) + sizeof(econtrollertype_));
    interface_number_ = -1;
  }
  ostype_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDDeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EHIDDeviceLocation_IsValid(value)) {
            set_location(static_cast< ::EHIDDeviceLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CHIDDeviceInfo.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vendor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 product_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CHIDDeviceInfo.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 release_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_release_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &release_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer_string = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturer_string().data(), static_cast<int>(this->manufacturer_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CHIDDeviceInfo.manufacturer_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_string = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_string().data(), static_cast<int>(this->product_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CHIDDeviceInfo.product_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usage_page = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_usage_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interface_number = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_interface_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ostype = 12 [default = -1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_ostype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ostype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_generic_gamepad = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_generic_gamepad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_generic_gamepad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_generic_joystick = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_is_generic_joystick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_generic_joystick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 caps_bits = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_caps_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caps_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 session_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eControllerType = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_econtrollertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &econtrollertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDDeviceInfo)
  return false;
#undef DO_
}

void CHIDDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->location(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional uint32 vendor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vendor_id(), output);
  }

  // optional uint32 product_id = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->product_id(), output);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // optional uint32 release_number = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->release_number(), output);
  }

  // optional string manufacturer_string = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer_string().data(), static_cast<int>(this->manufacturer_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.manufacturer_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->manufacturer_string(), output);
  }

  // optional string product_string = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_string().data(), static_cast<int>(this->product_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.product_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->product_string(), output);
  }

  // optional uint32 usage_page = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usage_page(), output);
  }

  // optional uint32 usage = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->usage(), output);
  }

  // optional int32 interface_number = 11 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->interface_number(), output);
  }

  // optional int32 ostype = 12 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ostype(), output);
  }

  // optional bool is_generic_gamepad = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_generic_gamepad(), output);
  }

  // optional bool is_generic_joystick = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_generic_joystick(), output);
  }

  // optional uint32 caps_bits = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->caps_bits(), output);
  }

  // optional uint32 session_id = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->session_id(), output);
  }

  // optional uint32 eControllerType = 17 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->econtrollertype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDDeviceInfo)
}

::google::protobuf::uint8* CHIDDeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->location(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional uint32 vendor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vendor_id(), target);
  }

  // optional uint32 product_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->product_id(), target);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serial_number(), target);
  }

  // optional uint32 release_number = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->release_number(), target);
  }

  // optional string manufacturer_string = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer_string().data(), static_cast<int>(this->manufacturer_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.manufacturer_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->manufacturer_string(), target);
  }

  // optional string product_string = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_string().data(), static_cast<int>(this->product_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.product_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->product_string(), target);
  }

  // optional uint32 usage_page = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usage_page(), target);
  }

  // optional uint32 usage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->usage(), target);
  }

  // optional int32 interface_number = 11 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->interface_number(), target);
  }

  // optional int32 ostype = 12 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ostype(), target);
  }

  // optional bool is_generic_gamepad = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_generic_gamepad(), target);
  }

  // optional bool is_generic_joystick = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_generic_joystick(), target);
  }

  // optional uint32 caps_bits = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->caps_bits(), target);
  }

  // optional uint32 session_id = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->session_id(), target);
  }

  // optional uint32 eControllerType = 17 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->econtrollertype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDDeviceInfo)
  return target;
}

size_t CHIDDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDDeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string serial_number = 5;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string manufacturer_string = 7;
    if (has_manufacturer_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer_string());
    }

    // optional string product_string = 8;
    if (has_product_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_string());
    }

    // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
    }

    // optional uint32 vendor_id = 3;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 product_id = 4;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_id());
    }

    // optional uint32 release_number = 6;
    if (has_release_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->release_number());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 usage_page = 9;
    if (has_usage_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage_page());
    }

    // optional uint32 usage = 10;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage());
    }

    // optional bool is_generic_gamepad = 13;
    if (has_is_generic_gamepad()) {
      total_size += 1 + 1;
    }

    // optional bool is_generic_joystick = 14;
    if (has_is_generic_joystick()) {
      total_size += 1 + 1;
    }

    // optional uint32 caps_bits = 15;
    if (has_caps_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caps_bits());
    }

    // optional uint32 session_id = 16;
    if (has_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional uint32 eControllerType = 17 [default = 0];
    if (has_econtrollertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->econtrollertype());
    }

    // optional int32 interface_number = 11 [default = -1];
    if (has_interface_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_number());
    }

  }
  // optional int32 ostype = 12 [default = -1];
  if (has_ostype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ostype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDDeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDDeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDDeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDDeviceInfo)
    MergeFrom(*source);
  }
}

void CHIDDeviceInfo::MergeFrom(const CHIDDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_manufacturer_string();
      manufacturer_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_string_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_product_string();
      product_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_string_);
    }
    if (cached_has_bits & 0x00000010u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000020u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      product_id_ = from.product_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      release_number_ = from.release_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      usage_page_ = from.usage_page_;
    }
    if (cached_has_bits & 0x00000200u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_generic_gamepad_ = from.is_generic_gamepad_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_generic_joystick_ = from.is_generic_joystick_;
    }
    if (cached_has_bits & 0x00001000u) {
      caps_bits_ = from.caps_bits_;
    }
    if (cached_has_bits & 0x00002000u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      econtrollertype_ = from.econtrollertype_;
    }
    if (cached_has_bits & 0x00008000u) {
      interface_number_ = from.interface_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_ostype(from.ostype());
  }
}

void CHIDDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDDeviceInfo::CopyFrom(const CHIDDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDDeviceInfo::IsInitialized() const {
  return true;
}

void CHIDDeviceInfo::Swap(CHIDDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDDeviceInfo::InternalSwap(CHIDDeviceInfo* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturer_string_.Swap(&other->manufacturer_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_string_.Swap(&other->product_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(vendor_id_, other->vendor_id_);
  swap(product_id_, other->product_id_);
  swap(release_number_, other->release_number_);
  swap(usage_page_, other->usage_page_);
  swap(usage_, other->usage_);
  swap(is_generic_gamepad_, other->is_generic_gamepad_);
  swap(is_generic_joystick_, other->is_generic_joystick_);
  swap(caps_bits_, other->caps_bits_);
  swap(session_id_, other->session_id_);
  swap(econtrollertype_, other->econtrollertype_);
  swap(interface_number_, other->interface_number_);
  swap(ostype_, other->ostype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDDeviceInfo::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDDeviceInputReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDDeviceInputReport::kFullReportFieldNumber;
const int CHIDDeviceInputReport::kDeltaReportFieldNumber;
const int CHIDDeviceInputReport::kDeltaReportSizeFieldNumber;
const int CHIDDeviceInputReport::kDeltaReportCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDDeviceInputReport::CHIDDeviceInputReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInputReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDDeviceInputReport)
}
CHIDDeviceInputReport::CHIDDeviceInputReport(const CHIDDeviceInputReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_report()) {
    full_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_report_);
  }
  delta_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_delta_report()) {
    delta_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_report_);
  }
  ::memcpy(&delta_report_size_, &from.delta_report_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_report_crc_) -
    reinterpret_cast<char*>(&delta_report_size_)) + sizeof(delta_report_crc_));
  // @@protoc_insertion_point(copy_constructor:CHIDDeviceInputReport)
}

void CHIDDeviceInputReport::SharedCtor() {
  full_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delta_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delta_report_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_report_crc_) -
      reinterpret_cast<char*>(&delta_report_size_)) + sizeof(delta_report_crc_));
}

CHIDDeviceInputReport::~CHIDDeviceInputReport() {
  // @@protoc_insertion_point(destructor:CHIDDeviceInputReport)
  SharedDtor();
}

void CHIDDeviceInputReport::SharedDtor() {
  full_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delta_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDDeviceInputReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDDeviceInputReport::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDDeviceInputReport& CHIDDeviceInputReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDDeviceInputReport.base);
  return *internal_default_instance();
}


void CHIDDeviceInputReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDDeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      full_report_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      delta_report_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&delta_report_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_report_crc_) -
        reinterpret_cast<char*>(&delta_report_size_)) + sizeof(delta_report_crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDDeviceInputReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDDeviceInputReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes full_report = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes delta_report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delta_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delta_report_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_delta_report_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delta_report_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delta_report_crc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_delta_report_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delta_report_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDDeviceInputReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDDeviceInputReport)
  return false;
#undef DO_
}

void CHIDDeviceInputReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDDeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes full_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->full_report(), output);
  }

  // optional bytes delta_report = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->delta_report(), output);
  }

  // optional uint32 delta_report_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->delta_report_size(), output);
  }

  // optional uint32 delta_report_crc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delta_report_crc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDDeviceInputReport)
}

::google::protobuf::uint8* CHIDDeviceInputReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDDeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes full_report = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->full_report(), target);
  }

  // optional bytes delta_report = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->delta_report(), target);
  }

  // optional uint32 delta_report_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->delta_report_size(), target);
  }

  // optional uint32 delta_report_crc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delta_report_crc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDDeviceInputReport)
  return target;
}

size_t CHIDDeviceInputReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDDeviceInputReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes full_report = 1;
    if (has_full_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->full_report());
    }

    // optional bytes delta_report = 2;
    if (has_delta_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->delta_report());
    }

    // optional uint32 delta_report_size = 3;
    if (has_delta_report_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delta_report_size());
    }

    // optional uint32 delta_report_crc = 4;
    if (has_delta_report_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delta_report_crc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDDeviceInputReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDDeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDDeviceInputReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDDeviceInputReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDDeviceInputReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDDeviceInputReport)
    MergeFrom(*source);
  }
}

void CHIDDeviceInputReport::MergeFrom(const CHIDDeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDDeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_report();
      full_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_report_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_delta_report();
      delta_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_report_);
    }
    if (cached_has_bits & 0x00000004u) {
      delta_report_size_ = from.delta_report_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_report_crc_ = from.delta_report_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDDeviceInputReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDDeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDDeviceInputReport::CopyFrom(const CHIDDeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDDeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDDeviceInputReport::IsInitialized() const {
  return true;
}

void CHIDDeviceInputReport::Swap(CHIDDeviceInputReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDDeviceInputReport::InternalSwap(CHIDDeviceInputReport* other) {
  using std::swap;
  full_report_.Swap(&other->full_report_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  delta_report_.Swap(&other->delta_report_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delta_report_size_, other->delta_report_size_);
  swap(delta_report_crc_, other->delta_report_crc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDDeviceInputReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceOpen::InitAsDefaultInstance() {
  ::_CHIDMessageToRemote_DeviceOpen_default_instance_._instance.get_mutable()->info_ = const_cast< ::CHIDDeviceInfo*>(
      ::CHIDDeviceInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceOpen::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceOpen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceOpen)
}
CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen(const CHIDMessageToRemote_DeviceOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::CHIDDeviceInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceOpen)
}

void CHIDMessageToRemote_DeviceOpen::SharedCtor() {
  info_ = NULL;
}

CHIDMessageToRemote_DeviceOpen::~CHIDMessageToRemote_DeviceOpen() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceOpen)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceOpen::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void CHIDMessageToRemote_DeviceOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceOpen::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceOpen& CHIDMessageToRemote_DeviceOpen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceOpen.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceOpen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CHIDDeviceInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceOpen)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CHIDDeviceInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceOpen)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CHIDDeviceInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceOpen)
  return target;
}

size_t CHIDMessageToRemote_DeviceOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CHIDDeviceInfo info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceOpen)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceOpen::MergeFrom(const CHIDMessageToRemote_DeviceOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::CHIDDeviceInfo::MergeFrom(from.info());
  }
}

void CHIDMessageToRemote_DeviceOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceOpen::CopyFrom(const CHIDMessageToRemote_DeviceOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceOpen::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceOpen::Swap(CHIDMessageToRemote_DeviceOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceOpen::InternalSwap(CHIDMessageToRemote_DeviceOpen* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceOpen::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceClose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceClose::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceClose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceClose)
}
CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose(const CHIDMessageToRemote_DeviceClose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceClose)
}

void CHIDMessageToRemote_DeviceClose::SharedCtor() {
  device_ = 0u;
}

CHIDMessageToRemote_DeviceClose::~CHIDMessageToRemote_DeviceClose() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceClose)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceClose::SharedDtor() {
}

void CHIDMessageToRemote_DeviceClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceClose::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceClose& CHIDMessageToRemote_DeviceClose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceClose.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceClose::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceClose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceClose)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceClose)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceClose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceClose)
  return target;
}

size_t CHIDMessageToRemote_DeviceClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceClose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceClose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceClose)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceClose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceClose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceClose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceClose)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceClose::MergeFrom(const CHIDMessageToRemote_DeviceClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceClose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceClose::CopyFrom(const CHIDMessageToRemote_DeviceClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceClose::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceClose::Swap(CHIDMessageToRemote_DeviceClose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceClose::InternalSwap(CHIDMessageToRemote_DeviceClose* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceClose::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceWrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceWrite::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceWrite::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceWrite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceWrite)
}
CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite(const CHIDMessageToRemote_DeviceWrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceWrite)
}

void CHIDMessageToRemote_DeviceWrite::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = 0u;
}

CHIDMessageToRemote_DeviceWrite::~CHIDMessageToRemote_DeviceWrite() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceWrite)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceWrite::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceWrite::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceWrite& CHIDMessageToRemote_DeviceWrite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceWrite.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceWrite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceWrite)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceWrite)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceWrite)
  return target;
}

size_t CHIDMessageToRemote_DeviceWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceWrite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceWrite)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceWrite::MergeFrom(const CHIDMessageToRemote_DeviceWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceWrite::CopyFrom(const CHIDMessageToRemote_DeviceWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceWrite::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceWrite::Swap(CHIDMessageToRemote_DeviceWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceWrite::InternalSwap(CHIDMessageToRemote_DeviceWrite* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceWrite::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceRead::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceRead::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceRead::kLengthFieldNumber;
const int CHIDMessageToRemote_DeviceRead::kTimeoutMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceRead.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceRead)
}
CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead(const CHIDMessageToRemote_DeviceRead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&device_)) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceRead)
}

void CHIDMessageToRemote_DeviceRead::SharedCtor() {
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&device_)) + sizeof(timeout_ms_));
}

CHIDMessageToRemote_DeviceRead::~CHIDMessageToRemote_DeviceRead() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceRead)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceRead::SharedDtor() {
}

void CHIDMessageToRemote_DeviceRead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceRead::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceRead& CHIDMessageToRemote_DeviceRead::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceRead.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceRead::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_ms_) -
        reinterpret_cast<char*>(&device_)) + sizeof(timeout_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceRead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceRead)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeout_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timeout_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceRead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceRead)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceRead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // optional int32 timeout_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceRead)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceRead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // optional int32 timeout_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceRead)
  return target;
}

size_t CHIDMessageToRemote_DeviceRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceRead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional int32 timeout_ms = 3;
    if (has_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceRead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceRead)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceRead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceRead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceRead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceRead)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceRead::MergeFrom(const CHIDMessageToRemote_DeviceRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ms_ = from.timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceRead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceRead::CopyFrom(const CHIDMessageToRemote_DeviceRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceRead::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceRead::Swap(CHIDMessageToRemote_DeviceRead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceRead::InternalSwap(CHIDMessageToRemote_DeviceRead* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(length_, other->length_);
  swap(timeout_ms_, other->timeout_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceRead::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceSendFeatureReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceSendFeatureReport::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceSendFeatureReport::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceSendFeatureReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceSendFeatureReport)
}
CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport(const CHIDMessageToRemote_DeviceSendFeatureReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceSendFeatureReport)
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = 0u;
}

CHIDMessageToRemote_DeviceSendFeatureReport::~CHIDMessageToRemote_DeviceSendFeatureReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceSendFeatureReport)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceSendFeatureReport::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceSendFeatureReport& CHIDMessageToRemote_DeviceSendFeatureReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceSendFeatureReport.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceSendFeatureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceSendFeatureReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceSendFeatureReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceSendFeatureReport)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceSendFeatureReport)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceSendFeatureReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceSendFeatureReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceSendFeatureReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceSendFeatureReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceSendFeatureReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceSendFeatureReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceSendFeatureReport)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceSendFeatureReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceSendFeatureReport::CopyFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceSendFeatureReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceSendFeatureReport::Swap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceSendFeatureReport::InternalSwap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceSendFeatureReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceGetFeatureReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetFeatureReport::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceGetFeatureReport::kReportNumberFieldNumber;
const int CHIDMessageToRemote_DeviceGetFeatureReport::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetFeatureReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceGetFeatureReport)
}
CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport(const CHIDMessageToRemote_DeviceGetFeatureReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  report_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_report_number()) {
    report_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_number_);
  }
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetFeatureReport)
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SharedCtor() {
  report_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&device_)) + sizeof(length_));
}

CHIDMessageToRemote_DeviceGetFeatureReport::~CHIDMessageToRemote_DeviceGetFeatureReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetFeatureReport)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SharedDtor() {
  report_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetFeatureReport::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetFeatureReport& CHIDMessageToRemote_DeviceGetFeatureReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetFeatureReport.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceGetFeatureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    report_number_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&device_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetFeatureReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes report_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceGetFeatureReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceGetFeatureReport)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional bytes report_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->report_number(), output);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceGetFeatureReport)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetFeatureReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional bytes report_number = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->report_number(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetFeatureReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetFeatureReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes report_number = 2;
    if (has_report_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->report_number());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetFeatureReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetFeatureReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceGetFeatureReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceGetFeatureReport)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_report_number();
      report_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceGetFeatureReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetFeatureReport::CopyFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetFeatureReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetFeatureReport::Swap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetFeatureReport::InternalSwap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
  using std::swap;
  report_number_.Swap(&other->report_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_, other->device_);
  swap(length_, other->length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetFeatureReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceGetVendorString::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetVendorString::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetVendorString.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceGetVendorString)
}
CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString(const CHIDMessageToRemote_DeviceGetVendorString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetVendorString)
}

void CHIDMessageToRemote_DeviceGetVendorString::SharedCtor() {
  device_ = 0u;
}

CHIDMessageToRemote_DeviceGetVendorString::~CHIDMessageToRemote_DeviceGetVendorString() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetVendorString)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetVendorString::SharedDtor() {
}

void CHIDMessageToRemote_DeviceGetVendorString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetVendorString::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetVendorString& CHIDMessageToRemote_DeviceGetVendorString::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetVendorString.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceGetVendorString::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetVendorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetVendorString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceGetVendorString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceGetVendorString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceGetVendorString)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetVendorString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceGetVendorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceGetVendorString)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetVendorString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetVendorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetVendorString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetVendorString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetVendorString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceGetVendorString)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetVendorString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetVendorString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceGetVendorString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceGetVendorString)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(const CHIDMessageToRemote_DeviceGetVendorString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetVendorString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceGetVendorString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceGetVendorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetVendorString::CopyFrom(const CHIDMessageToRemote_DeviceGetVendorString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetVendorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetVendorString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetVendorString::Swap(CHIDMessageToRemote_DeviceGetVendorString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetVendorString::InternalSwap(CHIDMessageToRemote_DeviceGetVendorString* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetVendorString::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceGetProductString::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetProductString::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetProductString.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceGetProductString)
}
CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString(const CHIDMessageToRemote_DeviceGetProductString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetProductString)
}

void CHIDMessageToRemote_DeviceGetProductString::SharedCtor() {
  device_ = 0u;
}

CHIDMessageToRemote_DeviceGetProductString::~CHIDMessageToRemote_DeviceGetProductString() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetProductString)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetProductString::SharedDtor() {
}

void CHIDMessageToRemote_DeviceGetProductString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetProductString::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetProductString& CHIDMessageToRemote_DeviceGetProductString::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetProductString.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceGetProductString::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetProductString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetProductString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceGetProductString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceGetProductString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceGetProductString)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetProductString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceGetProductString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceGetProductString)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetProductString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetProductString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetProductString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetProductString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetProductString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceGetProductString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceGetProductString)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetProductString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetProductString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceGetProductString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceGetProductString)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetProductString::MergeFrom(const CHIDMessageToRemote_DeviceGetProductString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetProductString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceGetProductString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceGetProductString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetProductString::CopyFrom(const CHIDMessageToRemote_DeviceGetProductString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetProductString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetProductString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetProductString::Swap(CHIDMessageToRemote_DeviceGetProductString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetProductString::InternalSwap(CHIDMessageToRemote_DeviceGetProductString* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetProductString::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceGetSerialNumberString::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetSerialNumberString::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetSerialNumberString.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceGetSerialNumberString)
}
CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString(const CHIDMessageToRemote_DeviceGetSerialNumberString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetSerialNumberString)
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SharedCtor() {
  device_ = 0u;
}

CHIDMessageToRemote_DeviceGetSerialNumberString::~CHIDMessageToRemote_DeviceGetSerialNumberString() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetSerialNumberString)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SharedDtor() {
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetSerialNumberString::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetSerialNumberString& CHIDMessageToRemote_DeviceGetSerialNumberString::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceGetSerialNumberString.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceGetSerialNumberString::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetSerialNumberString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceGetSerialNumberString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceGetSerialNumberString)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceGetSerialNumberString)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetSerialNumberString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetSerialNumberString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetSerialNumberString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetSerialNumberString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetSerialNumberString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceGetSerialNumberString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceGetSerialNumberString)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::CopyFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetSerialNumberString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::Swap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::InternalSwap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetSerialNumberString::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceStartInputReports::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceStartInputReports::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceStartInputReports::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceStartInputReports.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceStartInputReports)
}
CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports(const CHIDMessageToRemote_DeviceStartInputReports& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceStartInputReports)
}

void CHIDMessageToRemote_DeviceStartInputReports::SharedCtor() {
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&device_)) + sizeof(length_));
}

CHIDMessageToRemote_DeviceStartInputReports::~CHIDMessageToRemote_DeviceStartInputReports() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceStartInputReports)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceStartInputReports::SharedDtor() {
}

void CHIDMessageToRemote_DeviceStartInputReports::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceStartInputReports::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceStartInputReports& CHIDMessageToRemote_DeviceStartInputReports::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceStartInputReports.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceStartInputReports::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceStartInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&device_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceStartInputReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceStartInputReports)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceStartInputReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceStartInputReports)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceStartInputReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceStartInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceStartInputReports)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceStartInputReports::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceStartInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceStartInputReports)
  return target;
}

size_t CHIDMessageToRemote_DeviceStartInputReports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceStartInputReports)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceStartInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceStartInputReports* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceStartInputReports>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceStartInputReports)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceStartInputReports)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(const CHIDMessageToRemote_DeviceStartInputReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceStartInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceStartInputReports::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceStartInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceStartInputReports::CopyFrom(const CHIDMessageToRemote_DeviceStartInputReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceStartInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceStartInputReports::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceStartInputReports::Swap(CHIDMessageToRemote_DeviceStartInputReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceStartInputReports::InternalSwap(CHIDMessageToRemote_DeviceStartInputReports* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(length_, other->length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceStartInputReports::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceRequestFullReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceRequestFullReport::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceRequestFullReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceRequestFullReport)
}
CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport(const CHIDMessageToRemote_DeviceRequestFullReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceRequestFullReport)
}

void CHIDMessageToRemote_DeviceRequestFullReport::SharedCtor() {
  device_ = 0u;
}

CHIDMessageToRemote_DeviceRequestFullReport::~CHIDMessageToRemote_DeviceRequestFullReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceRequestFullReport)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceRequestFullReport::SharedDtor() {
}

void CHIDMessageToRemote_DeviceRequestFullReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceRequestFullReport::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceRequestFullReport& CHIDMessageToRemote_DeviceRequestFullReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceRequestFullReport.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceRequestFullReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceRequestFullReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceRequestFullReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceRequestFullReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceRequestFullReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceRequestFullReport)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceRequestFullReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceRequestFullReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceRequestFullReport)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceRequestFullReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceRequestFullReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceRequestFullReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceRequestFullReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceRequestFullReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceRequestFullReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceRequestFullReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceRequestFullReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceRequestFullReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceRequestFullReport)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceRequestFullReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceRequestFullReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceRequestFullReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceRequestFullReport::CopyFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceRequestFullReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceRequestFullReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceRequestFullReport::Swap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceRequestFullReport::InternalSwap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceRequestFullReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote_DeviceDisconnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceDisconnect::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceDisconnect::kDisconnectMethodFieldNumber;
const int CHIDMessageToRemote_DeviceDisconnect::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceDisconnect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote.DeviceDisconnect)
}
CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect(const CHIDMessageToRemote_DeviceDisconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnectmethod_) -
    reinterpret_cast<char*>(&device_)) + sizeof(disconnectmethod_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceDisconnect)
}

void CHIDMessageToRemote_DeviceDisconnect::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnectmethod_) -
      reinterpret_cast<char*>(&device_)) + sizeof(disconnectmethod_));
}

CHIDMessageToRemote_DeviceDisconnect::~CHIDMessageToRemote_DeviceDisconnect() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceDisconnect)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceDisconnect::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceDisconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceDisconnect::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceDisconnect& CHIDMessageToRemote_DeviceDisconnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote_DeviceDisconnect.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote_DeviceDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnectmethod_) -
        reinterpret_cast<char*>(&device_)) + sizeof(disconnectmethod_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote.DeviceDisconnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EHIDDeviceDisconnectMethod_IsValid(value)) {
            set_disconnectmethod(static_cast< ::EHIDDeviceDisconnectMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote.DeviceDisconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote.DeviceDisconnect)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote.DeviceDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->disconnectmethod(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote.DeviceDisconnect)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceDisconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->disconnectmethod(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceDisconnect)
  return target;
}

size_t CHIDMessageToRemote_DeviceDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceDisconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
    if (has_disconnectmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnectmethod());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote_DeviceDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote.DeviceDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceDisconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceDisconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote.DeviceDisconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote.DeviceDisconnect)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceDisconnect::MergeFrom(const CHIDMessageToRemote_DeviceDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000004u) {
      disconnectmethod_ = from.disconnectmethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote.DeviceDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceDisconnect::CopyFrom(const CHIDMessageToRemote_DeviceDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceDisconnect::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceDisconnect::Swap(CHIDMessageToRemote_DeviceDisconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceDisconnect::InternalSwap(CHIDMessageToRemote_DeviceDisconnect* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_, other->device_);
  swap(disconnectmethod_, other->disconnectmethod_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceDisconnect::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageToRemote::InitAsDefaultInstance() {
  ::_CHIDMessageToRemote_default_instance_.device_open_ = const_cast< ::CHIDMessageToRemote_DeviceOpen*>(
      ::CHIDMessageToRemote_DeviceOpen::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_close_ = const_cast< ::CHIDMessageToRemote_DeviceClose*>(
      ::CHIDMessageToRemote_DeviceClose::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_write_ = const_cast< ::CHIDMessageToRemote_DeviceWrite*>(
      ::CHIDMessageToRemote_DeviceWrite::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_read_ = const_cast< ::CHIDMessageToRemote_DeviceRead*>(
      ::CHIDMessageToRemote_DeviceRead::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_send_feature_report_ = const_cast< ::CHIDMessageToRemote_DeviceSendFeatureReport*>(
      ::CHIDMessageToRemote_DeviceSendFeatureReport::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_get_feature_report_ = const_cast< ::CHIDMessageToRemote_DeviceGetFeatureReport*>(
      ::CHIDMessageToRemote_DeviceGetFeatureReport::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_get_vendor_string_ = const_cast< ::CHIDMessageToRemote_DeviceGetVendorString*>(
      ::CHIDMessageToRemote_DeviceGetVendorString::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_get_product_string_ = const_cast< ::CHIDMessageToRemote_DeviceGetProductString*>(
      ::CHIDMessageToRemote_DeviceGetProductString::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_get_serial_number_string_ = const_cast< ::CHIDMessageToRemote_DeviceGetSerialNumberString*>(
      ::CHIDMessageToRemote_DeviceGetSerialNumberString::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_start_input_reports_ = const_cast< ::CHIDMessageToRemote_DeviceStartInputReports*>(
      ::CHIDMessageToRemote_DeviceStartInputReports::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_request_full_report_ = const_cast< ::CHIDMessageToRemote_DeviceRequestFullReport*>(
      ::CHIDMessageToRemote_DeviceRequestFullReport::internal_default_instance());
  ::_CHIDMessageToRemote_default_instance_.device_disconnect_ = const_cast< ::CHIDMessageToRemote_DeviceDisconnect*>(
      ::CHIDMessageToRemote_DeviceDisconnect::internal_default_instance());
}
void CHIDMessageToRemote::set_allocated_device_open(::CHIDMessageToRemote_DeviceOpen* device_open) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_open) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_open = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_open, submessage_arena);
    }
    set_has_device_open();
    command_.device_open_ = device_open;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_open)
}
void CHIDMessageToRemote::set_allocated_device_close(::CHIDMessageToRemote_DeviceClose* device_close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_close) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_close, submessage_arena);
    }
    set_has_device_close();
    command_.device_close_ = device_close;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_close)
}
void CHIDMessageToRemote::set_allocated_device_write(::CHIDMessageToRemote_DeviceWrite* device_write) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_write) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_write = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_write, submessage_arena);
    }
    set_has_device_write();
    command_.device_write_ = device_write;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_write)
}
void CHIDMessageToRemote::set_allocated_device_read(::CHIDMessageToRemote_DeviceRead* device_read) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_read) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_read = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_read, submessage_arena);
    }
    set_has_device_read();
    command_.device_read_ = device_read;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_read)
}
void CHIDMessageToRemote::set_allocated_device_send_feature_report(::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_send_feature_report) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_send_feature_report = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_send_feature_report, submessage_arena);
    }
    set_has_device_send_feature_report();
    command_.device_send_feature_report_ = device_send_feature_report;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_send_feature_report)
}
void CHIDMessageToRemote::set_allocated_device_get_feature_report(::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_get_feature_report) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_get_feature_report = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_get_feature_report, submessage_arena);
    }
    set_has_device_get_feature_report();
    command_.device_get_feature_report_ = device_get_feature_report;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_feature_report)
}
void CHIDMessageToRemote::set_allocated_device_get_vendor_string(::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_get_vendor_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_get_vendor_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_get_vendor_string, submessage_arena);
    }
    set_has_device_get_vendor_string();
    command_.device_get_vendor_string_ = device_get_vendor_string;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_vendor_string)
}
void CHIDMessageToRemote::set_allocated_device_get_product_string(::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_get_product_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_get_product_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_get_product_string, submessage_arena);
    }
    set_has_device_get_product_string();
    command_.device_get_product_string_ = device_get_product_string;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_product_string)
}
void CHIDMessageToRemote::set_allocated_device_get_serial_number_string(::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_get_serial_number_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_get_serial_number_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_get_serial_number_string, submessage_arena);
    }
    set_has_device_get_serial_number_string();
    command_.device_get_serial_number_string_ = device_get_serial_number_string;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_serial_number_string)
}
void CHIDMessageToRemote::set_allocated_device_start_input_reports(::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_start_input_reports) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_start_input_reports = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_start_input_reports, submessage_arena);
    }
    set_has_device_start_input_reports();
    command_.device_start_input_reports_ = device_start_input_reports;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_start_input_reports)
}
void CHIDMessageToRemote::set_allocated_device_request_full_report(::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_request_full_report) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_request_full_report = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_request_full_report, submessage_arena);
    }
    set_has_device_request_full_report();
    command_.device_request_full_report_ = device_request_full_report;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_request_full_report)
}
void CHIDMessageToRemote::set_allocated_device_disconnect(::CHIDMessageToRemote_DeviceDisconnect* device_disconnect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (device_disconnect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_disconnect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_disconnect, submessage_arena);
    }
    set_has_device_disconnect();
    command_.device_disconnect_ = device_disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_disconnect)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote::kRequestIdFieldNumber;
const int CHIDMessageToRemote::kDeviceOpenFieldNumber;
const int CHIDMessageToRemote::kDeviceCloseFieldNumber;
const int CHIDMessageToRemote::kDeviceWriteFieldNumber;
const int CHIDMessageToRemote::kDeviceReadFieldNumber;
const int CHIDMessageToRemote::kDeviceSendFeatureReportFieldNumber;
const int CHIDMessageToRemote::kDeviceGetFeatureReportFieldNumber;
const int CHIDMessageToRemote::kDeviceGetVendorStringFieldNumber;
const int CHIDMessageToRemote::kDeviceGetProductStringFieldNumber;
const int CHIDMessageToRemote::kDeviceGetSerialNumberStringFieldNumber;
const int CHIDMessageToRemote::kDeviceStartInputReportsFieldNumber;
const int CHIDMessageToRemote::kDeviceRequestFullReportFieldNumber;
const int CHIDMessageToRemote::kDeviceDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote::CHIDMessageToRemote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageToRemote)
}
CHIDMessageToRemote::CHIDMessageToRemote(const CHIDMessageToRemote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  clear_has_command();
  switch (from.command_case()) {
    case kDeviceOpen: {
      mutable_device_open()->::CHIDMessageToRemote_DeviceOpen::MergeFrom(from.device_open());
      break;
    }
    case kDeviceClose: {
      mutable_device_close()->::CHIDMessageToRemote_DeviceClose::MergeFrom(from.device_close());
      break;
    }
    case kDeviceWrite: {
      mutable_device_write()->::CHIDMessageToRemote_DeviceWrite::MergeFrom(from.device_write());
      break;
    }
    case kDeviceRead: {
      mutable_device_read()->::CHIDMessageToRemote_DeviceRead::MergeFrom(from.device_read());
      break;
    }
    case kDeviceSendFeatureReport: {
      mutable_device_send_feature_report()->::CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(from.device_send_feature_report());
      break;
    }
    case kDeviceGetFeatureReport: {
      mutable_device_get_feature_report()->::CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(from.device_get_feature_report());
      break;
    }
    case kDeviceGetVendorString: {
      mutable_device_get_vendor_string()->::CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(from.device_get_vendor_string());
      break;
    }
    case kDeviceGetProductString: {
      mutable_device_get_product_string()->::CHIDMessageToRemote_DeviceGetProductString::MergeFrom(from.device_get_product_string());
      break;
    }
    case kDeviceGetSerialNumberString: {
      mutable_device_get_serial_number_string()->::CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(from.device_get_serial_number_string());
      break;
    }
    case kDeviceStartInputReports: {
      mutable_device_start_input_reports()->::CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(from.device_start_input_reports());
      break;
    }
    case kDeviceRequestFullReport: {
      mutable_device_request_full_report()->::CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(from.device_request_full_report());
      break;
    }
    case kDeviceDisconnect: {
      mutable_device_disconnect()->::CHIDMessageToRemote_DeviceDisconnect::MergeFrom(from.device_disconnect());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote)
}

void CHIDMessageToRemote::SharedCtor() {
  request_id_ = 0u;
  clear_has_command();
}

CHIDMessageToRemote::~CHIDMessageToRemote() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote)
  SharedDtor();
}

void CHIDMessageToRemote::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void CHIDMessageToRemote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote& CHIDMessageToRemote::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageToRemote.base);
  return *internal_default_instance();
}


void CHIDMessageToRemote::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:CHIDMessageToRemote)
  switch (command_case()) {
    case kDeviceOpen: {
      delete command_.device_open_;
      break;
    }
    case kDeviceClose: {
      delete command_.device_close_;
      break;
    }
    case kDeviceWrite: {
      delete command_.device_write_;
      break;
    }
    case kDeviceRead: {
      delete command_.device_read_;
      break;
    }
    case kDeviceSendFeatureReport: {
      delete command_.device_send_feature_report_;
      break;
    }
    case kDeviceGetFeatureReport: {
      delete command_.device_get_feature_report_;
      break;
    }
    case kDeviceGetVendorString: {
      delete command_.device_get_vendor_string_;
      break;
    }
    case kDeviceGetProductString: {
      delete command_.device_get_product_string_;
      break;
    }
    case kDeviceGetSerialNumberString: {
      delete command_.device_get_serial_number_string_;
      break;
    }
    case kDeviceStartInputReports: {
      delete command_.device_start_input_reports_;
      break;
    }
    case kDeviceRequestFullReport: {
      delete command_.device_request_full_report_;
      break;
    }
    case kDeviceDisconnect: {
      delete command_.device_disconnect_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void CHIDMessageToRemote::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_ = 0u;
  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageToRemote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceOpen device_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_open()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceClose device_close = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceWrite device_write = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceRead device_read = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_send_feature_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_get_feature_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_get_vendor_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_get_product_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_get_serial_number_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_start_input_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_request_full_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_disconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageToRemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageToRemote)
  return false;
#undef DO_
}

void CHIDMessageToRemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageToRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  switch (command_case()) {
    case kDeviceOpen:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_device_open(), output);
      break;
    case kDeviceClose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_device_close(), output);
      break;
    case kDeviceWrite:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_device_write(), output);
      break;
    case kDeviceRead:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_device_read(), output);
      break;
    case kDeviceSendFeatureReport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_device_send_feature_report(), output);
      break;
    case kDeviceGetFeatureReport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_device_get_feature_report(), output);
      break;
    case kDeviceGetVendorString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_device_get_vendor_string(), output);
      break;
    case kDeviceGetProductString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_device_get_product_string(), output);
      break;
    case kDeviceGetSerialNumberString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_device_get_serial_number_string(), output);
      break;
    case kDeviceStartInputReports:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_device_start_input_reports(), output);
      break;
    case kDeviceRequestFullReport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_device_request_full_report(), output);
      break;
    case kDeviceDisconnect:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_device_disconnect(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageToRemote)
}

::google::protobuf::uint8* CHIDMessageToRemote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  switch (command_case()) {
    case kDeviceOpen:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_device_open(), deterministic, target);
      break;
    case kDeviceClose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_device_close(), deterministic, target);
      break;
    case kDeviceWrite:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_device_write(), deterministic, target);
      break;
    case kDeviceRead:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_device_read(), deterministic, target);
      break;
    case kDeviceSendFeatureReport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_device_send_feature_report(), deterministic, target);
      break;
    case kDeviceGetFeatureReport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_device_get_feature_report(), deterministic, target);
      break;
    case kDeviceGetVendorString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_device_get_vendor_string(), deterministic, target);
      break;
    case kDeviceGetProductString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_device_get_product_string(), deterministic, target);
      break;
    case kDeviceGetSerialNumberString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_device_get_serial_number_string(), deterministic, target);
      break;
    case kDeviceStartInputReports:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_device_start_input_reports(), deterministic, target);
      break;
    case kDeviceRequestFullReport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_device_request_full_report(), deterministic, target);
      break;
    case kDeviceDisconnect:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_device_disconnect(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote)
  return target;
}

size_t CHIDMessageToRemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  switch (command_case()) {
    // optional .CHIDMessageToRemote.DeviceOpen device_open = 2;
    case kDeviceOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_open_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceClose device_close = 3;
    case kDeviceClose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_close_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceWrite device_write = 4;
    case kDeviceWrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_write_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceRead device_read = 5;
    case kDeviceRead: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_read_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
    case kDeviceSendFeatureReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_send_feature_report_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
    case kDeviceGetFeatureReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_get_feature_report_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
    case kDeviceGetVendorString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_get_vendor_string_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
    case kDeviceGetProductString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_get_product_string_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
    case kDeviceGetSerialNumberString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_get_serial_number_string_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
    case kDeviceStartInputReports: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_start_input_reports_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
    case kDeviceRequestFullReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_request_full_report_);
      break;
    }
    // optional .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
    case kDeviceDisconnect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.device_disconnect_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageToRemote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageToRemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageToRemote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageToRemote)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote::MergeFrom(const CHIDMessageToRemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
  switch (from.command_case()) {
    case kDeviceOpen: {
      mutable_device_open()->::CHIDMessageToRemote_DeviceOpen::MergeFrom(from.device_open());
      break;
    }
    case kDeviceClose: {
      mutable_device_close()->::CHIDMessageToRemote_DeviceClose::MergeFrom(from.device_close());
      break;
    }
    case kDeviceWrite: {
      mutable_device_write()->::CHIDMessageToRemote_DeviceWrite::MergeFrom(from.device_write());
      break;
    }
    case kDeviceRead: {
      mutable_device_read()->::CHIDMessageToRemote_DeviceRead::MergeFrom(from.device_read());
      break;
    }
    case kDeviceSendFeatureReport: {
      mutable_device_send_feature_report()->::CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(from.device_send_feature_report());
      break;
    }
    case kDeviceGetFeatureReport: {
      mutable_device_get_feature_report()->::CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(from.device_get_feature_report());
      break;
    }
    case kDeviceGetVendorString: {
      mutable_device_get_vendor_string()->::CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(from.device_get_vendor_string());
      break;
    }
    case kDeviceGetProductString: {
      mutable_device_get_product_string()->::CHIDMessageToRemote_DeviceGetProductString::MergeFrom(from.device_get_product_string());
      break;
    }
    case kDeviceGetSerialNumberString: {
      mutable_device_get_serial_number_string()->::CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(from.device_get_serial_number_string());
      break;
    }
    case kDeviceStartInputReports: {
      mutable_device_start_input_reports()->::CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(from.device_start_input_reports());
      break;
    }
    case kDeviceRequestFullReport: {
      mutable_device_request_full_report()->::CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(from.device_request_full_report());
      break;
    }
    case kDeviceDisconnect: {
      mutable_device_disconnect()->::CHIDMessageToRemote_DeviceDisconnect::MergeFrom(from.device_disconnect());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void CHIDMessageToRemote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageToRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote::CopyFrom(const CHIDMessageToRemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote::Swap(CHIDMessageToRemote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote::InternalSwap(CHIDMessageToRemote* other) {
  using std::swap;
  swap(request_id_, other->request_id_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageToRemote::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote_UpdateDeviceList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_UpdateDeviceList::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_UpdateDeviceList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote.UpdateDeviceList)
}
CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList(const CHIDMessageFromRemote_UpdateDeviceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.UpdateDeviceList)
}

void CHIDMessageFromRemote_UpdateDeviceList::SharedCtor() {
}

CHIDMessageFromRemote_UpdateDeviceList::~CHIDMessageFromRemote_UpdateDeviceList() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.UpdateDeviceList)
  SharedDtor();
}

void CHIDMessageFromRemote_UpdateDeviceList::SharedDtor() {
}

void CHIDMessageFromRemote_UpdateDeviceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_UpdateDeviceList::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_UpdateDeviceList& CHIDMessageFromRemote_UpdateDeviceList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_UpdateDeviceList.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote_UpdateDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.UpdateDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_UpdateDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote.UpdateDeviceList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CHIDDeviceInfo devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote.UpdateDeviceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote.UpdateDeviceList)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_UpdateDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote.UpdateDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHIDDeviceInfo devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->devices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote.UpdateDeviceList)
}

::google::protobuf::uint8* CHIDMessageFromRemote_UpdateDeviceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.UpdateDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHIDDeviceInfo devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->devices(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.UpdateDeviceList)
  return target;
}

size_t CHIDMessageFromRemote_UpdateDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.UpdateDeviceList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CHIDDeviceInfo devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote.UpdateDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_UpdateDeviceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_UpdateDeviceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote.UpdateDeviceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote.UpdateDeviceList)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(const CHIDMessageFromRemote_UpdateDeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.UpdateDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CHIDMessageFromRemote_UpdateDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote.UpdateDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_UpdateDeviceList::CopyFrom(const CHIDMessageFromRemote_UpdateDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.UpdateDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_UpdateDeviceList::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_UpdateDeviceList::Swap(CHIDMessageFromRemote_UpdateDeviceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_UpdateDeviceList::InternalSwap(CHIDMessageFromRemote_UpdateDeviceList* other) {
  using std::swap;
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_UpdateDeviceList::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote_RequestResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_RequestResponse::kRequestIdFieldNumber;
const int CHIDMessageFromRemote_RequestResponse::kResultFieldNumber;
const int CHIDMessageFromRemote_RequestResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_RequestResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote.RequestResponse)
}
CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse(const CHIDMessageFromRemote_RequestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.RequestResponse)
}

void CHIDMessageFromRemote_RequestResponse::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(result_));
}

CHIDMessageFromRemote_RequestResponse::~CHIDMessageFromRemote_RequestResponse() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.RequestResponse)
  SharedDtor();
}

void CHIDMessageFromRemote_RequestResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageFromRemote_RequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_RequestResponse::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_RequestResponse& CHIDMessageFromRemote_RequestResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_RequestResponse.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote_RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.RequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_RequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote.RequestResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote.RequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote.RequestResponse)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_RequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote.RequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional int32 result = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote.RequestResponse)
}

::google::protobuf::uint8* CHIDMessageFromRemote_RequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.RequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional int32 result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.RequestResponse)
  return target;
}

size_t CHIDMessageFromRemote_RequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.RequestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote_RequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_RequestResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_RequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote.RequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote.RequestResponse)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_RequestResponse::MergeFrom(const CHIDMessageFromRemote_RequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageFromRemote_RequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_RequestResponse::CopyFrom(const CHIDMessageFromRemote_RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_RequestResponse::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_RequestResponse::Swap(CHIDMessageFromRemote_RequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_RequestResponse::InternalSwap(CHIDMessageFromRemote_RequestResponse* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_id_, other->request_id_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_RequestResponse::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::kDeviceFieldNumber;
const int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::kReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SharedCtor() {
  device_ = 0u;
}

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::~CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  SharedDtor();
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SharedDtor() {
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CHIDDeviceInputReport reports = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // repeated .CHIDDeviceInputReport reports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->reports(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}

::google::protobuf::uint8* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // repeated .CHIDDeviceInputReport reports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->reports(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return target;
}

size_t CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CHIDDeviceInputReport reports = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reports(static_cast<int>(i)));
    }
  }

  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CopyFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::Swap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InternalSwap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
  using std::swap;
  CastToBase(&reports_)->InternalSwap(CastToBase(&other->reports_));
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote_DeviceInputReports::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_DeviceInputReports::kDeviceReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_DeviceInputReports.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote.DeviceInputReports)
}
CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports(const CHIDMessageFromRemote_DeviceInputReports& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      device_reports_(from.device_reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.DeviceInputReports)
}

void CHIDMessageFromRemote_DeviceInputReports::SharedCtor() {
}

CHIDMessageFromRemote_DeviceInputReports::~CHIDMessageFromRemote_DeviceInputReports() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.DeviceInputReports)
  SharedDtor();
}

void CHIDMessageFromRemote_DeviceInputReports::SharedDtor() {
}

void CHIDMessageFromRemote_DeviceInputReports::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_DeviceInputReports::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_DeviceInputReports& CHIDMessageFromRemote_DeviceInputReports::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_DeviceInputReports.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote_DeviceInputReports::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.DeviceInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_reports_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_DeviceInputReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote.DeviceInputReports)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote.DeviceInputReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote.DeviceInputReports)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_DeviceInputReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote.DeviceInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_reports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_reports(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote.DeviceInputReports)
}

::google::protobuf::uint8* CHIDMessageFromRemote_DeviceInputReports::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.DeviceInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_reports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_reports(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.DeviceInputReports)
  return target;
}

size_t CHIDMessageFromRemote_DeviceInputReports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.DeviceInputReports)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_reports(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote_DeviceInputReports::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote.DeviceInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_DeviceInputReports* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_DeviceInputReports>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote.DeviceInputReports)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote.DeviceInputReports)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_DeviceInputReports::MergeFrom(const CHIDMessageFromRemote_DeviceInputReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.DeviceInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_reports_.MergeFrom(from.device_reports_);
}

void CHIDMessageFromRemote_DeviceInputReports::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote.DeviceInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_DeviceInputReports::CopyFrom(const CHIDMessageFromRemote_DeviceInputReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.DeviceInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_DeviceInputReports::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_DeviceInputReports::Swap(CHIDMessageFromRemote_DeviceInputReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_DeviceInputReports::InternalSwap(CHIDMessageFromRemote_DeviceInputReports* other) {
  using std::swap;
  CastToBase(&device_reports_)->InternalSwap(CastToBase(&other->device_reports_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_DeviceInputReports::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote_CloseDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_CloseDevice::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_CloseDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote.CloseDevice)
}
CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice(const CHIDMessageFromRemote_CloseDevice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.CloseDevice)
}

void CHIDMessageFromRemote_CloseDevice::SharedCtor() {
  device_ = 0u;
}

CHIDMessageFromRemote_CloseDevice::~CHIDMessageFromRemote_CloseDevice() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.CloseDevice)
  SharedDtor();
}

void CHIDMessageFromRemote_CloseDevice::SharedDtor() {
}

void CHIDMessageFromRemote_CloseDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_CloseDevice::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_CloseDevice& CHIDMessageFromRemote_CloseDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_CloseDevice.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote_CloseDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.CloseDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_CloseDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote.CloseDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote.CloseDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote.CloseDevice)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_CloseDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote.CloseDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote.CloseDevice)
}

::google::protobuf::uint8* CHIDMessageFromRemote_CloseDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.CloseDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.CloseDevice)
  return target;
}

size_t CHIDMessageFromRemote_CloseDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.CloseDevice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote_CloseDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote.CloseDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_CloseDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_CloseDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote.CloseDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote.CloseDevice)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_CloseDevice::MergeFrom(const CHIDMessageFromRemote_CloseDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.CloseDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageFromRemote_CloseDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote.CloseDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_CloseDevice::CopyFrom(const CHIDMessageFromRemote_CloseDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.CloseDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_CloseDevice::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_CloseDevice::Swap(CHIDMessageFromRemote_CloseDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_CloseDevice::InternalSwap(CHIDMessageFromRemote_CloseDevice* other) {
  using std::swap;
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_CloseDevice::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote_CloseAllDevices::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_CloseAllDevices.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote.CloseAllDevices)
}
CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices(const CHIDMessageFromRemote_CloseAllDevices& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.CloseAllDevices)
}

void CHIDMessageFromRemote_CloseAllDevices::SharedCtor() {
}

CHIDMessageFromRemote_CloseAllDevices::~CHIDMessageFromRemote_CloseAllDevices() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.CloseAllDevices)
  SharedDtor();
}

void CHIDMessageFromRemote_CloseAllDevices::SharedDtor() {
}

void CHIDMessageFromRemote_CloseAllDevices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_CloseAllDevices::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_CloseAllDevices& CHIDMessageFromRemote_CloseAllDevices::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote_CloseAllDevices.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote_CloseAllDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.CloseAllDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_CloseAllDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote.CloseAllDevices)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote.CloseAllDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote.CloseAllDevices)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_CloseAllDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote.CloseAllDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote.CloseAllDevices)
}

::google::protobuf::uint8* CHIDMessageFromRemote_CloseAllDevices::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.CloseAllDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.CloseAllDevices)
  return target;
}

size_t CHIDMessageFromRemote_CloseAllDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.CloseAllDevices)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote_CloseAllDevices::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote.CloseAllDevices)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_CloseAllDevices* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_CloseAllDevices>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote.CloseAllDevices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote.CloseAllDevices)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_CloseAllDevices::MergeFrom(const CHIDMessageFromRemote_CloseAllDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.CloseAllDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHIDMessageFromRemote_CloseAllDevices::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote.CloseAllDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_CloseAllDevices::CopyFrom(const CHIDMessageFromRemote_CloseAllDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.CloseAllDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_CloseAllDevices::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_CloseAllDevices::Swap(CHIDMessageFromRemote_CloseAllDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_CloseAllDevices::InternalSwap(CHIDMessageFromRemote_CloseAllDevices* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_CloseAllDevices::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHIDMessageFromRemote::InitAsDefaultInstance() {
  ::_CHIDMessageFromRemote_default_instance_.update_device_list_ = const_cast< ::CHIDMessageFromRemote_UpdateDeviceList*>(
      ::CHIDMessageFromRemote_UpdateDeviceList::internal_default_instance());
  ::_CHIDMessageFromRemote_default_instance_.response_ = const_cast< ::CHIDMessageFromRemote_RequestResponse*>(
      ::CHIDMessageFromRemote_RequestResponse::internal_default_instance());
  ::_CHIDMessageFromRemote_default_instance_.reports_ = const_cast< ::CHIDMessageFromRemote_DeviceInputReports*>(
      ::CHIDMessageFromRemote_DeviceInputReports::internal_default_instance());
  ::_CHIDMessageFromRemote_default_instance_.close_device_ = const_cast< ::CHIDMessageFromRemote_CloseDevice*>(
      ::CHIDMessageFromRemote_CloseDevice::internal_default_instance());
  ::_CHIDMessageFromRemote_default_instance_.close_all_devices_ = const_cast< ::CHIDMessageFromRemote_CloseAllDevices*>(
      ::CHIDMessageFromRemote_CloseAllDevices::internal_default_instance());
}
void CHIDMessageFromRemote::set_allocated_update_device_list(::CHIDMessageFromRemote_UpdateDeviceList* update_device_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (update_device_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_device_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_device_list, submessage_arena);
    }
    set_has_update_device_list();
    command_.update_device_list_ = update_device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.update_device_list)
}
void CHIDMessageFromRemote::set_allocated_response(::CHIDMessageFromRemote_RequestResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    command_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.response)
}
void CHIDMessageFromRemote::set_allocated_reports(::CHIDMessageFromRemote_DeviceInputReports* reports) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (reports) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reports = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reports, submessage_arena);
    }
    set_has_reports();
    command_.reports_ = reports;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.reports)
}
void CHIDMessageFromRemote::set_allocated_close_device(::CHIDMessageFromRemote_CloseDevice* close_device) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (close_device) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      close_device = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, close_device, submessage_arena);
    }
    set_has_close_device();
    command_.close_device_ = close_device;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.close_device)
}
void CHIDMessageFromRemote::set_allocated_close_all_devices(::CHIDMessageFromRemote_CloseAllDevices* close_all_devices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (close_all_devices) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      close_all_devices = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, close_all_devices, submessage_arena);
    }
    set_has_close_all_devices();
    command_.close_all_devices_ = close_all_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.close_all_devices)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote::kUpdateDeviceListFieldNumber;
const int CHIDMessageFromRemote::kResponseFieldNumber;
const int CHIDMessageFromRemote::kReportsFieldNumber;
const int CHIDMessageFromRemote::kCloseDeviceFieldNumber;
const int CHIDMessageFromRemote::kCloseAllDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote::CHIDMessageFromRemote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHIDMessageFromRemote)
}
CHIDMessageFromRemote::CHIDMessageFromRemote(const CHIDMessageFromRemote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kUpdateDeviceList: {
      mutable_update_device_list()->::CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(from.update_device_list());
      break;
    }
    case kResponse: {
      mutable_response()->::CHIDMessageFromRemote_RequestResponse::MergeFrom(from.response());
      break;
    }
    case kReports: {
      mutable_reports()->::CHIDMessageFromRemote_DeviceInputReports::MergeFrom(from.reports());
      break;
    }
    case kCloseDevice: {
      mutable_close_device()->::CHIDMessageFromRemote_CloseDevice::MergeFrom(from.close_device());
      break;
    }
    case kCloseAllDevices: {
      mutable_close_all_devices()->::CHIDMessageFromRemote_CloseAllDevices::MergeFrom(from.close_all_devices());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote)
}

void CHIDMessageFromRemote::SharedCtor() {
  clear_has_command();
}

CHIDMessageFromRemote::~CHIDMessageFromRemote() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote)
  SharedDtor();
}

void CHIDMessageFromRemote::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void CHIDMessageFromRemote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote::descriptor() {
  ::protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote& CHIDMessageFromRemote::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steammessages_5fhiddevices_2eproto::scc_info_CHIDMessageFromRemote.base);
  return *internal_default_instance();
}


void CHIDMessageFromRemote::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:CHIDMessageFromRemote)
  switch (command_case()) {
    case kUpdateDeviceList: {
      delete command_.update_device_list_;
      break;
    }
    case kResponse: {
      delete command_.response_;
      break;
    }
    case kReports: {
      delete command_.reports_;
      break;
    }
    case kCloseDevice: {
      delete command_.close_device_;
      break;
    }
    case kCloseAllDevices: {
      delete command_.close_all_devices_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void CHIDMessageFromRemote::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CHIDMessageFromRemote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_device_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageFromRemote.RequestResponse response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageFromRemote.DeviceInputReports reports = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageFromRemote.CloseDevice close_device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close_all_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CHIDMessageFromRemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CHIDMessageFromRemote)
  return false;
#undef DO_
}

void CHIDMessageFromRemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CHIDMessageFromRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kUpdateDeviceList:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_update_device_list(), output);
      break;
    case kResponse:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_response(), output);
      break;
    case kReports:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_reports(), output);
      break;
    case kCloseDevice:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_close_device(), output);
      break;
    case kCloseAllDevices:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_close_all_devices(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CHIDMessageFromRemote)
}

::google::protobuf::uint8* CHIDMessageFromRemote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kUpdateDeviceList:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_update_device_list(), deterministic, target);
      break;
    case kResponse:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_response(), deterministic, target);
      break;
    case kReports:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_reports(), deterministic, target);
      break;
    case kCloseDevice:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_close_device(), deterministic, target);
      break;
    case kCloseAllDevices:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_close_all_devices(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote)
  return target;
}

size_t CHIDMessageFromRemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (command_case()) {
    // optional .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
    case kUpdateDeviceList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.update_device_list_);
      break;
    }
    // optional .CHIDMessageFromRemote.RequestResponse response = 2;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.response_);
      break;
    }
    // optional .CHIDMessageFromRemote.DeviceInputReports reports = 3;
    case kReports: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.reports_);
      break;
    }
    // optional .CHIDMessageFromRemote.CloseDevice close_device = 4;
    case kCloseDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.close_device_);
      break;
    }
    // optional .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
    case kCloseAllDevices: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.close_all_devices_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHIDMessageFromRemote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHIDMessageFromRemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHIDMessageFromRemote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHIDMessageFromRemote)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote::MergeFrom(const CHIDMessageFromRemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kUpdateDeviceList: {
      mutable_update_device_list()->::CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(from.update_device_list());
      break;
    }
    case kResponse: {
      mutable_response()->::CHIDMessageFromRemote_RequestResponse::MergeFrom(from.response());
      break;
    }
    case kReports: {
      mutable_reports()->::CHIDMessageFromRemote_DeviceInputReports::MergeFrom(from.reports());
      break;
    }
    case kCloseDevice: {
      mutable_close_device()->::CHIDMessageFromRemote_CloseDevice::MergeFrom(from.close_device());
      break;
    }
    case kCloseAllDevices: {
      mutable_close_all_devices()->::CHIDMessageFromRemote_CloseAllDevices::MergeFrom(from.close_all_devices());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void CHIDMessageFromRemote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHIDMessageFromRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote::CopyFrom(const CHIDMessageFromRemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote::Swap(CHIDMessageFromRemote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote::InternalSwap(CHIDMessageFromRemote* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHIDMessageFromRemote::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDDeviceInfo* Arena::CreateMaybeMessage< ::CHIDDeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDDeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDDeviceInputReport* Arena::CreateMaybeMessage< ::CHIDDeviceInputReport >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDDeviceInputReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceOpen* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceOpen >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceOpen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceClose* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceClose >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceClose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceWrite* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceWrite >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceWrite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceRead* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceRead >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceRead >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceSendFeatureReport* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceSendFeatureReport >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceSendFeatureReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceGetFeatureReport* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetFeatureReport >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceGetFeatureReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceGetVendorString* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetVendorString >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceGetVendorString >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceGetProductString* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetProductString >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceGetProductString >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceGetSerialNumberString* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetSerialNumberString >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceGetSerialNumberString >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceStartInputReports* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceStartInputReports >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceStartInputReports >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceRequestFullReport* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceRequestFullReport >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceRequestFullReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote_DeviceDisconnect* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceDisconnect >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote_DeviceDisconnect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageToRemote* Arena::CreateMaybeMessage< ::CHIDMessageToRemote >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageToRemote >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote_UpdateDeviceList* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_UpdateDeviceList >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote_UpdateDeviceList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote_RequestResponse* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_RequestResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote_RequestResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote_DeviceInputReports* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_DeviceInputReports >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote_DeviceInputReports >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote_CloseDevice* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_CloseDevice >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote_CloseDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote_CloseAllDevices* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_CloseAllDevices >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote_CloseAllDevices >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CHIDMessageFromRemote* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote >(Arena* arena) {
  return Arena::CreateInternal< ::CHIDMessageFromRemote >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
